00000                 | 
00000                 | #line 1 "/home/pik33/P2-Retromachine/Propeller/Tracker player/player2.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 18 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0B F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5E 62 FD | 	cogid	arg01
00614 084 03 5E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 19 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 61 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 63 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 65 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 18 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 62 56 F0 |         shr	arg03, #1 wc
00688 0a1 2F 61 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 60 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 62 56 F0 |         shr	arg03, #1 wc
00698 0a5 2F 61 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 30 61 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2F 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 62 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 31 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 60 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 6D 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 6D 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 4D 99 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 9A 62 FD |        getqx   muldivb_
00718 0c5 19 98 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 F8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 F8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 F8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 F8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | __pc long 0
00744 0d0 00 00 00 00 
00748 0d1             | __setjmp
00748 0d1 2B A0 61 FD |     pop __pc
0074c 0d2 00 18 06 F6 |     mov result1, #0
00750 0d3 00 1A 06 F6 |     mov result2, #0
00754 0d4 2F F3 01 F6 |     mov abortchain, arg01
00758 0d5 2F 5F 61 FC |     wrlong fp, arg01
0075c 0d6 04 5E 06 F1 |     add arg01, #4
00760 0d7 2F F1 63 FC |     wrlong ptra, arg01
00764 0d8 04 5E 06 F1 |     add arg01, #4
00768 0d9 2F FB 61 FC |     wrlong objptr, arg01
0076c 0da 04 5E 06 F1 |     add arg01, #4
00770 0db 2F A1 61 FC |     wrlong __pc, arg01
00774 0dc 2C A0 61 FD |     jmp __pc
00778 0dd             | __unwind_pc long 0
00778 0dd 00 00 00 00 
0077c 0de             | __unwind_stack
0077c 0de 2B BA 61 FD |    pop  __unwind_pc
00780 0df             | __unwind_loop
00780 0df 30 5F 0A F2 |    cmp  arg01, arg02 wz
00784 0e0 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00788 0e1 2F F1 03 F6 |    mov   ptra, arg01
0078c 0e2 5C FF BF FD |    call  #popregs_
00790 0e3 AF 5E 02 F6 |    mov   arg01, fp
00794 0e4 E8 FF 9F FD |    jmp   #__unwind_loop
00798 0e5             | __unwind_stack_ret
00798 0e5 2C BA 61 FD |    jmp  __unwind_pc
0079c 0e6             | __longjmp
0079c 0e6 2B A0 61 FD |     pop __pc
007a0 0e7 00 5E 0E F2 |     cmp    arg01, #0 wz
007a4 0e8 30 00 90 AD |  if_z jmp #nocatch
007a8 0e9 30 19 02 F6 |     mov result1, arg02
007ac 0ea 01 1A 06 F6 |     mov result2, #1
007b0 0eb 2F 61 02 FB |     rdlong arg02, arg01
007b4 0ec 04 5E 06 F1 |     add arg01, #4
007b8 0ed 2F F1 03 FB |     rdlong ptra, arg01
007bc 0ee 04 5E 06 F1 |     add arg01, #4
007c0 0ef 2F FB 01 FB |     rdlong objptr, arg01
007c4 0f0 04 5E 06 F1 |     add arg01, #4
007c8 0f1 2F A1 01 FB |     rdlong __pc, arg01
007cc 0f2 AF 5E 02 F6 |     mov arg01, fp
007d0 0f3 A8 FF BF FD |     call #__unwind_stack
007d4 0f4             | __longjmp_ret
007d4 0f4 2C A0 61 FD |     jmp  __pc
007d8 0f5             | nocatch
007d8 0f5 00 62 0E F2 |     cmp arg03, #0 wz
007dc 0f6 28 FE 9F AD |  if_z jmp #cogexit
007e0 0f7 F0 FF 9F FD |     jmp #__longjmp_ret
007e4 0f8             | 
007e4 0f8             | __heap_ptr
007e4 0f8 E8 C1 01 00 | 	long	@__heap_base
007e8 0f9             | abortchain
007e8 0f9 00 00 00 00 | 	long	0
007ec 0fa             | entryptr__
007ec 0fa 04 04 00 00 | 	long	@entry
007f0 0fb             | itmp1_
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | itmp2_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | objptr
007f8 0fd F0 D1 01 00 | 	long	@objmem
007fc 0fe             | ptr___struct___bas_wrap_sender_tx_
007fc 0fe 6C 85 00 00 | 	long	@__struct___bas_wrap_sender_tx
00800 0ff             | ptr___struct__s_vfs_file_t_putchar_
00800 0ff B4 84 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00804 100             | ptr___system__dat__
00804 100 84 BF 01 00 | 	long	@__system__dat_
00808 101             | ptr__audio019_spin2_dat__
00808 101 74 B4 01 00 | 	long	@_audio019_spin2_dat_
0080c 102             | ptr__dat__
0080c 102 B0 86 00 00 | 	long	@_dat_
00810 103             | ptr__hng030rm_spin2_dat__
00810 103 EC 7E 01 00 | 	long	@_hng030rm_spin2_dat_
00814 104             | ptr__hng030rm_spin2_putchar_
00814 104 64 24 00 00 | 	long	@_hng030rm_spin2_putchar
00818 105             | ptr__hng030rm_spin2_putpixel1_
00818 105 70 1E 00 00 | 	long	@_hng030rm_spin2_putpixel1
0081c 106             | ptr__hng030rm_spin2_putpixel2_
0081c 106 5C 1F 00 00 | 	long	@_hng030rm_spin2_putpixel2
00820 107             | ptr__hng030rm_spin2_putpixel4_
00820 107 48 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
00824 108             | ptr__hng030rm_spin2_putpixel8_
00824 108 34 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00828 109             | ptr__retrocog_spin2_serialcog_
00828 109 10 36 00 00 | 	long	@_retrocog_spin2_serialcog
0082c 10a             | ptr__trackerplayer_spin2_dat__
0082c 10a 50 A3 01 00 | 	long	@_trackerplayer_spin2_dat_
00830 10b             | ptr_stackspace_
00830 10b 98 E3 01 00 | 	long	@stackspace
00834 10c             | result1
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result2
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | result3
0083c 10e 00 00 00 00 | 	long	0
00840 10f             | COG_BSS_START
00840 10f             | 	fit	480
00840                 | 	orgh
00840                 | hubentry
00840                 | 
00840                 | ' 
00840                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00840                 | _startvideo
00840     D4 2B B0 FD | 	call	#_hng030rm_spin2_start
00844     00 5E 06 F6 | 	mov	arg01, #0
00848     00 60 06 F6 | 	mov	arg02, #0
0084c     00 62 06 F6 | 	mov	arg03, #0
00850     D8 19 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00854                 | ' v030.start(mode,pin)
00854                 | ' v030.setbordercolor(0,0,0)
00854                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00854     FD 5E 02 F6 | 	mov	arg01, objptr
00858     04 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
0085c     80 5A B0 FD | 	call	#__system___make_methodptr
00860     00 1C 06 F6 | 	mov	result3, #0
00864     00 1A 06 F6 | 	mov	result2, #0
00868     0C 61 02 F6 | 	mov	arg02, result1
0086c     00 62 06 F6 | 	mov	arg03, #0
00870     00 64 06 F6 | 	mov	arg04, #0
00874     00 5E 06 F6 | 	mov	arg01, #0
00878     40 5D B0 FD | 	call	#__system___basic_open
0087c     00 18 06 F6 | 	mov	result1, #0
00880                 | _startvideo_ret
00880     2D 00 64 FD | 	ret
00884                 | 
00884                 | ' 
00884                 | ' function addr(byref v as any)
00884                 | _addr
00884     00 5A 05 F6 | 	mov	COUNT_, #0
00888     B0 00 A0 FD | 	call	#pushregs_
0088c     08 F0 07 F1 | 	add	ptra, #8
00890     04 5E 05 F1 | 	add	fp, #4
00894     AF 5E 62 FC | 	wrlong	arg01, fp
00898                 | ' 
00898                 | ' return(cast(ulong,@v))
00898     2F 19 02 F6 | 	mov	result1, arg01
0089c     04 5E 85 F1 | 	sub	fp, #4
008a0     AF F0 03 F6 | 	mov	ptra, fp
008a4     BA 00 A0 FD | 	call	#popregs_
008a8                 | _addr_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' '0 - samplestart   - a pointer to the sample start
008ac                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008ac                 | ' '2 - loopstart     - loop start
008ac                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008ac                 | ' '4 - volume        - sample volume, 16384=1
008ac                 | ' '5 - pan           - 0..16384
008ac                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008ac                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008ac                 | ' '8 - cmd 
008ac                 | ' 
008ac                 | ' 
008ac                 | ' sub test 
008ac                 | _test
008ac     01 5A 05 F6 | 	mov	COUNT_, #1
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     1D 60 06 F6 | 	mov	arg02, #29
008b8                 | ' 
008b8                 | ' ''---------- Set the (x,y) position of cursor
008b8                 | ' 
008b8                 | ' cursor_x:=x
008b8     34 FA 05 F1 | 	add	objptr, #52
008bc     FD 0A 48 FC | 	wrbyte	#5, objptr
008c0                 | ' cursor_y:=y
008c0     01 FA 05 F1 | 	add	objptr, #1
008c4     FD 3A 48 FC | 	wrbyte	#29, objptr
008c8     02 00 00 FF 
008cc     CA FB 05 F1 | 	add	objptr, ##1482
008d0     FD 6C C2 FA | 	rdbyte	local01, objptr
008d4     02 6C 66 F0 | 	shl	local01, #2
008d8     01 00 00 FF 
008dc     65 FA 05 F1 | 	add	objptr, ##613
008e0     FD 6C 02 F1 | 	add	local01, objptr
008e4     36 5F 02 FB | 	rdlong	arg01, local01
008e8     04 00 00 FF 
008ec     64 FA 85 F1 | 	sub	objptr, ##2148
008f0     FC 1C B0 FD | 	call	#_hng030rm_spin2_write
008f4     04 00 00 FF 
008f8     F0 FA 05 F1 | 	add	objptr, ##2288
008fc     FD 5E 02 FB | 	rdlong	arg01, objptr
00900     04 00 00 FF 
00904     F0 FA 85 F1 | 	sub	objptr, ##2288
00908     E4 1C B0 FD | 	call	#_hng030rm_spin2_write
0090c                 | ' 
0090c                 | ' ''---------- Set the (x,y) position of cursor
0090c                 | ' 
0090c                 | ' cursor_x:=x
0090c     34 FA 05 F1 | 	add	objptr, #52
00910     FD 02 48 FC | 	wrbyte	#1, objptr
00914                 | ' cursor_y:=y
00914     01 FA 05 F1 | 	add	objptr, #1
00918     FD 3A 48 FC | 	wrbyte	#29, objptr
0091c     02 00 00 FF 
00920     F2 FB 05 F1 | 	add	objptr, ##1522
00924     FD 5E 02 FB | 	rdlong	arg01, objptr
00928     10 FA 05 F1 | 	add	objptr, #16
0092c     FD 6C 02 FB | 	rdlong	local01, objptr
00930     03 00 00 FF 
00934     37 FA 85 F1 | 	sub	objptr, ##1591
00938     36 5F 02 F1 | 	add	arg01, local01
0093c     03 60 06 F6 | 	mov	arg02, #3
00940     40 20 B0 FD | 	call	#_hng030rm_spin2_inttostr2
00944     0C 5F 02 F6 | 	mov	arg01, result1
00948     A4 1C B0 FD | 	call	#_hng030rm_spin2_write
0094c     1D 60 06 F6 | 	mov	arg02, #29
00950                 | ' 
00950                 | ' ''---------- Set the (x,y) position of cursor
00950                 | ' 
00950                 | ' cursor_x:=x
00950     34 FA 05 F1 | 	add	objptr, #52
00954     FD 40 48 FC | 	wrbyte	#32, objptr
00958                 | ' cursor_y:=y
00958     01 FA 05 F1 | 	add	objptr, #1
0095c     FD 3A 48 FC | 	wrbyte	#29, objptr
00960     02 00 00 FF 
00964     CB FB 05 F1 | 	add	objptr, ##1483
00968     FD 6C C2 FA | 	rdbyte	local01, objptr
0096c     02 6C 66 F0 | 	shl	local01, #2
00970     01 00 00 FF 
00974     64 FA 05 F1 | 	add	objptr, ##612
00978     FD 6C 02 F1 | 	add	local01, objptr
0097c     36 5F 02 FB | 	rdlong	arg01, local01
00980     04 00 00 FF 
00984     64 FA 85 F1 | 	sub	objptr, ##2148
00988     64 1C B0 FD | 	call	#_hng030rm_spin2_write
0098c     04 00 00 FF 
00990     F0 FA 05 F1 | 	add	objptr, ##2288
00994     FD 5E 02 FB | 	rdlong	arg01, objptr
00998     04 00 00 FF 
0099c     F0 FA 85 F1 | 	sub	objptr, ##2288
009a0     4C 1C B0 FD | 	call	#_hng030rm_spin2_write
009a4                 | ' 
009a4                 | ' ''---------- Set the (x,y) position of cursor
009a4                 | ' 
009a4                 | ' cursor_x:=x
009a4     34 FA 05 F1 | 	add	objptr, #52
009a8     FD 38 48 FC | 	wrbyte	#28, objptr
009ac                 | ' cursor_y:=y
009ac     01 FA 05 F1 | 	add	objptr, #1
009b0     FD 3A 48 FC | 	wrbyte	#29, objptr
009b4     02 00 00 FF 
009b8     F6 FB 05 F1 | 	add	objptr, ##1526
009bc     FD 5E 02 FB | 	rdlong	arg01, objptr
009c0     10 FA 05 F1 | 	add	objptr, #16
009c4     FD 6C 02 FB | 	rdlong	local01, objptr
009c8     03 00 00 FF 
009cc     3B FA 85 F1 | 	sub	objptr, ##1595
009d0     36 5F 02 F1 | 	add	arg01, local01
009d4     03 60 06 F6 | 	mov	arg02, #3
009d8     A8 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
009dc     0C 5F 02 F6 | 	mov	arg01, result1
009e0     0C 1C B0 FD | 	call	#_hng030rm_spin2_write
009e4     1D 60 06 F6 | 	mov	arg02, #29
009e8                 | ' 
009e8                 | ' ''---------- Set the (x,y) position of cursor
009e8                 | ' 
009e8                 | ' cursor_x:=x
009e8     34 FA 05 F1 | 	add	objptr, #52
009ec     FD 78 48 FC | 	wrbyte	#60, objptr
009f0                 | ' cursor_y:=y
009f0     01 FA 05 F1 | 	add	objptr, #1
009f4     FD 3A 48 FC | 	wrbyte	#29, objptr
009f8     02 00 00 FF 
009fc     CC FB 05 F1 | 	add	objptr, ##1484
00a00     FD 6C C2 FA | 	rdbyte	local01, objptr
00a04     02 6C 66 F0 | 	shl	local01, #2
00a08     01 00 00 FF 
00a0c     63 FA 05 F1 | 	add	objptr, ##611
00a10     FD 6C 02 F1 | 	add	local01, objptr
00a14     36 5F 02 FB | 	rdlong	arg01, local01
00a18     04 00 00 FF 
00a1c     64 FA 85 F1 | 	sub	objptr, ##2148
00a20     CC 1B B0 FD | 	call	#_hng030rm_spin2_write
00a24     04 00 00 FF 
00a28     F0 FA 05 F1 | 	add	objptr, ##2288
00a2c     FD 5E 02 FB | 	rdlong	arg01, objptr
00a30     04 00 00 FF 
00a34     F0 FA 85 F1 | 	sub	objptr, ##2288
00a38     B4 1B B0 FD | 	call	#_hng030rm_spin2_write
00a3c                 | ' 
00a3c                 | ' ''---------- Set the (x,y) position of cursor
00a3c                 | ' 
00a3c                 | ' cursor_x:=x
00a3c     34 FA 05 F1 | 	add	objptr, #52
00a40     FD 70 48 FC | 	wrbyte	#56, objptr
00a44                 | ' cursor_y:=y
00a44     01 FA 05 F1 | 	add	objptr, #1
00a48     FD 3A 48 FC | 	wrbyte	#29, objptr
00a4c     02 00 00 FF 
00a50     FA FB 05 F1 | 	add	objptr, ##1530
00a54     FD 5E 02 FB | 	rdlong	arg01, objptr
00a58     10 FA 05 F1 | 	add	objptr, #16
00a5c     FD 6C 02 FB | 	rdlong	local01, objptr
00a60     03 00 00 FF 
00a64     3F FA 85 F1 | 	sub	objptr, ##1599
00a68     36 5F 02 F1 | 	add	arg01, local01
00a6c     03 60 06 F6 | 	mov	arg02, #3
00a70     10 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a74     0C 5F 02 F6 | 	mov	arg01, result1
00a78     74 1B B0 FD | 	call	#_hng030rm_spin2_write
00a7c                 | ' 
00a7c                 | ' ''---------- Set the (x,y) position of cursor
00a7c                 | ' 
00a7c                 | ' cursor_x:=x
00a7c     34 FA 05 F1 | 	add	objptr, #52
00a80     FD A8 48 FC | 	wrbyte	#84, objptr
00a84                 | ' cursor_y:=y
00a84     01 FA 05 F1 | 	add	objptr, #1
00a88     FD 3A 48 FC | 	wrbyte	#29, objptr
00a8c     02 00 00 FF 
00a90     FE FB 05 F1 | 	add	objptr, ##1534
00a94     FD 5E 02 FB | 	rdlong	arg01, objptr
00a98     10 FA 05 F1 | 	add	objptr, #16
00a9c     FD 6C 02 FB | 	rdlong	local01, objptr
00aa0     03 00 00 FF 
00aa4     43 FA 85 F1 | 	sub	objptr, ##1603
00aa8     36 5F 02 F1 | 	add	arg01, local01
00aac     03 60 06 F6 | 	mov	arg02, #3
00ab0     D0 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
00ab4     0C 5F 02 F6 | 	mov	arg01, result1
00ab8     34 1B B0 FD | 	call	#_hng030rm_spin2_write
00abc     1D 60 06 F6 | 	mov	arg02, #29
00ac0                 | ' 
00ac0                 | ' ''---------- Set the (x,y) position of cursor
00ac0                 | ' 
00ac0                 | ' cursor_x:=x
00ac0     34 FA 05 F1 | 	add	objptr, #52
00ac4     FD B0 48 FC | 	wrbyte	#88, objptr
00ac8                 | ' cursor_y:=y
00ac8     01 FA 05 F1 | 	add	objptr, #1
00acc     FD 3A 48 FC | 	wrbyte	#29, objptr
00ad0     02 00 00 FF 
00ad4     CD FB 05 F1 | 	add	objptr, ##1485
00ad8     FD 6C C2 FA | 	rdbyte	local01, objptr
00adc     02 6C 66 F0 | 	shl	local01, #2
00ae0     01 00 00 FF 
00ae4     62 FA 05 F1 | 	add	objptr, ##610
00ae8     FD 6C 02 F1 | 	add	local01, objptr
00aec     36 5F 02 FB | 	rdlong	arg01, local01
00af0     04 00 00 FF 
00af4     64 FA 85 F1 | 	sub	objptr, ##2148
00af8     F4 1A B0 FD | 	call	#_hng030rm_spin2_write
00afc     04 00 00 FF 
00b00     F0 FA 05 F1 | 	add	objptr, ##2288
00b04     FD 5E 02 FB | 	rdlong	arg01, objptr
00b08     04 00 00 FF 
00b0c     F0 FA 85 F1 | 	sub	objptr, ##2288
00b10     DC 1A B0 FD | 	call	#_hng030rm_spin2_write
00b14     AF F0 03 F6 | 	mov	ptra, fp
00b18     BA 00 A0 FD | 	call	#popregs_
00b1c                 | _test_ret
00b1c     2D 00 64 FD | 	ret
00b20                 | 
00b20                 | ' 
00b20                 | ' 
00b20                 | ' sub getinfo(ma,num)
00b20                 | _getinfo
00b20     0B 5A 05 F6 | 	mov	COUNT_, #11
00b24     B0 00 A0 FD | 	call	#pushregs_
00b28     2F 6D 02 F6 | 	mov	local01, arg01
00b2c     30 6F 02 F6 | 	mov	local02, arg02
00b30     04 60 06 F6 | 	mov	arg02, #4
00b34                 | ' 
00b34                 | ' ''---------- Set the (x,y) position of cursor
00b34                 | ' 
00b34                 | ' cursor_x:=x
00b34     34 FA 05 F1 | 	add	objptr, #52
00b38     FD 02 48 FC | 	wrbyte	#1, objptr
00b3c                 | ' cursor_y:=y
00b3c     01 FA 05 F1 | 	add	objptr, #1
00b40     FD 08 48 FC | 	wrbyte	#4, objptr
00b44     35 FA 85 F1 | 	sub	objptr, #53
00b48                 | ' 'v030. setwritecolors(170,147):
00b48                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b48     00 5E 06 F6 | 	mov	arg01, #0
00b4c     30 6F B0 FD | 	call	#__system___getiolock_0150
00b50     0C 5F 02 F6 | 	mov	arg01, result1
00b54     C8 57 B0 FD | 	call	#__system___lockmem
00b58     00 18 06 F6 | 	mov	result1, #0
00b5c     42 00 00 FF 
00b60     FA 61 06 F6 | 	mov	arg02, ##@LR__0459
00b64     00 5E 06 F6 | 	mov	arg01, #0
00b68     00 62 06 F6 | 	mov	arg03, #0
00b6c     6C 5B B0 FD | 	call	#__system___basic_print_string
00b70     00 5E 06 F6 | 	mov	arg01, #0
00b74     0A 60 06 F6 | 	mov	arg02, #10
00b78     00 62 06 F6 | 	mov	arg03, #0
00b7c     10 5B B0 FD | 	call	#__system___basic_print_char
00b80     01 18 06 F6 | 	mov	result1, #1
00b84     00 5E 06 F6 | 	mov	arg01, #0
00b88     F4 6E B0 FD | 	call	#__system___getiolock_0150
00b8c     0C 01 68 FC | 	wrlong	#0, result1
00b90     00 18 06 F6 | 	mov	result1, #0
00b94                 | ' ': v030. setwritecolors(154,147)
00b94                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00b94     00 70 06 F6 | 	mov	local03, #0
00b98                 | LR__0001
00b98     38 73 02 F6 | 	mov	local04, local03
00b9c     02 72 66 F0 | 	shl	local04, #2
00ba0     04 00 00 FF 
00ba4     64 FA 05 F1 | 	add	objptr, ##2148
00ba8     FD 72 02 F1 | 	add	local04, objptr
00bac     43 00 00 FF 
00bb0     63 74 06 F6 | 	mov	local05, ##@LR__0460
00bb4     38 5F 02 F6 | 	mov	arg01, local03
00bb8     02 60 06 F6 | 	mov	arg02, #2
00bbc     04 00 00 FF 
00bc0     64 FA 85 F1 | 	sub	objptr, ##2148
00bc4     0A 62 06 F6 | 	mov	arg03, #10
00bc8     5C 60 B0 FD | 	call	#__system__Number_S
00bcc     0C 61 02 F6 | 	mov	arg02, result1
00bd0     3A 5F 02 F6 | 	mov	arg01, local05
00bd4     84 57 B0 FD | 	call	#__system___string_concat
00bd8     0C 75 02 F6 | 	mov	local05, result1
00bdc     13 5E 06 F6 | 	mov	arg01, #19
00be0     42 00 00 FF 
00be4     A4 61 06 F6 | 	mov	arg02, ##@LR__0453
00be8     08 61 B0 FD | 	call	#__system__String_S
00bec     0C 61 02 F6 | 	mov	arg02, result1
00bf0     3A 5F 02 F6 | 	mov	arg01, local05
00bf4     64 57 B0 FD | 	call	#__system___string_concat
00bf8     39 19 62 FC | 	wrlong	result1, local04
00bfc     01 70 06 F1 | 	add	local03, #1
00c00     20 70 5E F2 | 	cmps	local03, #32 wcz
00c04     90 FF 9F CD |  if_b	jmp	#LR__0001
00c08                 | ' for i=1 to num
00c08     01 70 06 F6 | 	mov	local03, #1
00c0c     01 6E 06 F1 | 	add	local02, #1
00c10                 | LR__0002
00c10     37 71 5A F2 | 	cmps	local03, local02 wcz
00c14     54 08 90 3D |  if_ae	jmp	#LR__0007
00c18                 | '   for j=0 to 21
00c18     00 76 06 F6 | 	mov	local06, #0
00c1c                 | LR__0003
00c1c     38 5F 02 F6 | 	mov	arg01, local03
00c20     02 5E 66 F0 | 	shl	arg01, #2
00c24     04 00 00 FF 
00c28     64 FA 05 F1 | 	add	objptr, ##2148
00c2c     FD 5E 02 F1 | 	add	arg01, objptr
00c30     04 00 00 FF 
00c34     64 FA 85 F1 | 	sub	objptr, ##2148
00c38     48 FC BF FD | 	call	#_addr
00c3c                 | ' asm
00c3c     0C 79 02 FB | 	rdlong	local07, result1
00c40                 | ' return r
00c40     08 00 00 FF 
00c44     8C FB 05 F1 | 	add	objptr, ##4492
00c48     FD 78 62 FC | 	wrlong	local07, objptr
00c4c     36 5F 02 F6 | 	mov	arg01, local01
00c50     14 5E 06 F1 | 	add	arg01, #20
00c54     38 75 02 F6 | 	mov	local05, local03
00c58     01 74 86 F1 | 	sub	local05, #1
00c5c     3A 7B 02 F6 | 	mov	local08, local05
00c60     04 7A 66 F0 | 	shl	local08, #4
00c64     3A 7B 82 F1 | 	sub	local08, local05
00c68     01 7A 66 F0 | 	shl	local08, #1
00c6c     3D 5F 02 F1 | 	add	arg01, local08
00c70     3B 5F 02 F1 | 	add	arg01, local06
00c74                 | ' asm
00c74     2F 19 C2 FA | 	rdbyte	result1, arg01
00c78                 | ' return r
00c78     0C 79 02 F6 | 	mov	local07, result1
00c7c     07 78 46 F7 | 	zerox	local07, #7
00c80     04 FA 05 F1 | 	add	objptr, #4
00c84     FD 78 62 FC | 	wrlong	local07, objptr
00c88                 | '     a=lpeek(addr(sn$(i)))
00c88                 | '     b=(peek(ma+20+30*(i-1)+j))
00c88                 | '     if b>=32 then poke a+j,b
00c88     08 00 00 FF 
00c8c     90 FB 85 F1 | 	sub	objptr, ##4496
00c90     20 78 5E F2 | 	cmps	local07, #32 wcz
00c94     24 00 90 CD |  if_b	jmp	#LR__0004
00c98     08 00 00 FF 
00c9c     8C FB 05 F1 | 	add	objptr, ##4492
00ca0     FD 5E 02 FB | 	rdlong	arg01, objptr
00ca4     3B 5F 02 F1 | 	add	arg01, local06
00ca8     04 FA 05 F1 | 	add	objptr, #4
00cac     FD 60 02 FB | 	rdlong	arg02, objptr
00cb0     08 00 00 FF 
00cb4     90 FB 85 F1 | 	sub	objptr, ##4496
00cb8                 | ' asm
00cb8     2F 61 42 FC | 	wrbyte	arg02, arg01
00cbc                 | LR__0004
00cbc     01 76 06 F1 | 	add	local06, #1
00cc0     16 76 5E F2 | 	cmps	local06, #22 wcz
00cc4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cc8     36 5F 02 F6 | 	mov	arg01, local01
00ccc     14 5E 06 F1 | 	add	arg01, #20
00cd0     38 7B 02 F6 | 	mov	local08, local03
00cd4     01 7A 86 F1 | 	sub	local08, #1
00cd8     3D 7D 02 F6 | 	mov	local09, local08
00cdc     04 7C 66 F0 | 	shl	local09, #4
00ce0     3D 7D 82 F1 | 	sub	local09, local08
00ce4     01 7C 66 F0 | 	shl	local09, #1
00ce8     3E 5F 02 F1 | 	add	arg01, local09
00cec     16 5E 06 F1 | 	add	arg01, #22
00cf0                 | ' asm
00cf0     2F 75 C2 FA | 	rdbyte	local05, arg01
00cf4                 | ' return r
00cf4     07 74 46 F7 | 	zerox	local05, #7
00cf8     08 74 66 F0 | 	shl	local05, #8
00cfc     36 5F 02 F6 | 	mov	arg01, local01
00d00     14 5E 06 F1 | 	add	arg01, #20
00d04     38 7F 02 F6 | 	mov	local10, local03
00d08     01 7E 86 F1 | 	sub	local10, #1
00d0c     3F 81 02 F6 | 	mov	local11, local10
00d10     04 80 66 F0 | 	shl	local11, #4
00d14     3F 81 82 F1 | 	sub	local11, local10
00d18     01 80 66 F0 | 	shl	local11, #1
00d1c     40 5F 02 F1 | 	add	arg01, local11
00d20     17 5E 06 F1 | 	add	arg01, #23
00d24                 | ' asm
00d24     2F 7B C2 FA | 	rdbyte	local08, arg01
00d28                 | ' return r
00d28     07 7A 46 F7 | 	zerox	local08, #7
00d2c     3D 75 02 F1 | 	add	local05, local08
00d30     01 74 66 F0 | 	shl	local05, #1
00d34     08 00 00 FF 
00d38     94 FB 05 F1 | 	add	objptr, ##4500
00d3c     FD 74 62 FC | 	wrlong	local05, objptr
00d40     36 5F 02 F6 | 	mov	arg01, local01
00d44     14 5E 06 F1 | 	add	arg01, #20
00d48     38 7B 02 F6 | 	mov	local08, local03
00d4c     01 7A 86 F1 | 	sub	local08, #1
00d50     3D 7D 02 F6 | 	mov	local09, local08
00d54     04 7C 66 F0 | 	shl	local09, #4
00d58     3D 7D 82 F1 | 	sub	local09, local08
00d5c     01 7C 66 F0 | 	shl	local09, #1
00d60     3E 5F 02 F1 | 	add	arg01, local09
00d64     1A 5E 06 F1 | 	add	arg01, #26
00d68                 | ' asm
00d68     2F 75 C2 FA | 	rdbyte	local05, arg01
00d6c                 | ' return r
00d6c     07 74 46 F7 | 	zerox	local05, #7
00d70     08 74 66 F0 | 	shl	local05, #8
00d74     36 5F 02 F6 | 	mov	arg01, local01
00d78     14 5E 06 F1 | 	add	arg01, #20
00d7c     38 7F 02 F6 | 	mov	local10, local03
00d80     01 7E 86 F1 | 	sub	local10, #1
00d84     3F 81 02 F6 | 	mov	local11, local10
00d88     04 80 66 F0 | 	shl	local11, #4
00d8c     3F 81 82 F1 | 	sub	local11, local10
00d90     01 80 66 F0 | 	shl	local11, #1
00d94     40 5F 02 F1 | 	add	arg01, local11
00d98     1B 5E 06 F1 | 	add	arg01, #27
00d9c                 | ' asm
00d9c     2F 7B C2 FA | 	rdbyte	local08, arg01
00da0                 | ' return r
00da0     07 7A 46 F7 | 	zerox	local08, #7
00da4     3D 75 02 F1 | 	add	local05, local08
00da8     01 74 66 F0 | 	shl	local05, #1
00dac     04 FA 05 F1 | 	add	objptr, #4
00db0     FD 74 62 FC | 	wrlong	local05, objptr
00db4     36 5F 02 F6 | 	mov	arg01, local01
00db8     14 5E 06 F1 | 	add	arg01, #20
00dbc     38 7B 02 F6 | 	mov	local08, local03
00dc0     01 7A 86 F1 | 	sub	local08, #1
00dc4     3D 7D 02 F6 | 	mov	local09, local08
00dc8     04 7C 66 F0 | 	shl	local09, #4
00dcc     3D 7D 82 F1 | 	sub	local09, local08
00dd0     01 7C 66 F0 | 	shl	local09, #1
00dd4     3E 5F 02 F1 | 	add	arg01, local09
00dd8     1C 5E 06 F1 | 	add	arg01, #28
00ddc                 | ' asm
00ddc     2F 75 C2 FA | 	rdbyte	local05, arg01
00de0                 | ' return r
00de0     07 74 46 F7 | 	zerox	local05, #7
00de4     08 74 66 F0 | 	shl	local05, #8
00de8     36 5F 02 F6 | 	mov	arg01, local01
00dec     14 5E 06 F1 | 	add	arg01, #20
00df0     38 7F 02 F6 | 	mov	local10, local03
00df4     01 7E 86 F1 | 	sub	local10, #1
00df8     3F 81 02 F6 | 	mov	local11, local10
00dfc     04 80 66 F0 | 	shl	local11, #4
00e00     3F 81 82 F1 | 	sub	local11, local10
00e04     01 80 66 F0 | 	shl	local11, #1
00e08     40 5F 02 F1 | 	add	arg01, local11
00e0c     1D 5E 06 F1 | 	add	arg01, #29
00e10                 | ' asm
00e10     2F 7B C2 FA | 	rdbyte	local08, arg01
00e14                 | ' return r
00e14     07 7A 46 F7 | 	zerox	local08, #7
00e18     3D 75 02 F1 | 	add	local05, local08
00e1c     01 74 66 F0 | 	shl	local05, #1
00e20     04 FA 05 F1 | 	add	objptr, #4
00e24     FD 74 62 FC | 	wrlong	local05, objptr
00e28     36 5F 02 F6 | 	mov	arg01, local01
00e2c     14 5E 06 F1 | 	add	arg01, #20
00e30     38 75 02 F6 | 	mov	local05, local03
00e34     01 74 86 F1 | 	sub	local05, #1
00e38     3A 7B 02 F6 | 	mov	local08, local05
00e3c     04 7A 66 F0 | 	shl	local08, #4
00e40     3A 7B 82 F1 | 	sub	local08, local05
00e44     01 7A 66 F0 | 	shl	local08, #1
00e48     3D 5F 02 F1 | 	add	arg01, local08
00e4c     18 5E 06 F1 | 	add	arg01, #24
00e50                 | ' asm
00e50     2F 79 C2 FA | 	rdbyte	local07, arg01
00e54                 | ' return r
00e54     07 78 46 F7 | 	zerox	local07, #7
00e58     04 FA 05 F1 | 	add	objptr, #4
00e5c     FD 78 62 FC | 	wrlong	local07, objptr
00e60     36 5F 02 F6 | 	mov	arg01, local01
00e64     14 5E 06 F1 | 	add	arg01, #20
00e68     38 75 02 F6 | 	mov	local05, local03
00e6c     01 74 86 F1 | 	sub	local05, #1
00e70     3A 7B 02 F6 | 	mov	local08, local05
00e74     04 7A 66 F0 | 	shl	local08, #4
00e78     3A 7B 82 F1 | 	sub	local08, local05
00e7c     01 7A 66 F0 | 	shl	local08, #1
00e80     3D 5F 02 F1 | 	add	arg01, local08
00e84     19 5E 06 F1 | 	add	arg01, #25
00e88                 | ' asm
00e88     2F 19 C2 FA | 	rdbyte	result1, arg01
00e8c                 | ' return r
00e8c     0C 79 02 F6 | 	mov	local07, result1
00e90     07 78 46 F7 | 	zerox	local07, #7
00e94     04 FA 05 F1 | 	add	objptr, #4
00e98     FD 78 62 FC | 	wrlong	local07, objptr
00e9c     08 00 00 FF 
00ea0     A4 FB 85 F1 | 	sub	objptr, ##4516
00ea4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ea4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ea4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ea4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ea4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ea4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ea4     10 70 5E F2 | 	cmps	local03, #16 wcz
00ea8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00eac     05 60 06 F6 | 	mov	arg02, #5
00eb0     38 61 02 F1 | 	add	arg02, local03
00eb4                 | ' 
00eb4                 | ' ''---------- Set the (x,y) position of cursor
00eb4                 | ' 
00eb4                 | ' cursor_x:=x
00eb4     34 FA 05 F1 | 	add	objptr, #52
00eb8     FD 02 48 FC | 	wrbyte	#1, objptr
00ebc                 | ' cursor_y:=y
00ebc     01 FA 05 F1 | 	add	objptr, #1
00ec0     FD 60 42 FC | 	wrbyte	arg02, objptr
00ec4     35 FA 85 F1 | 	sub	objptr, #53
00ec8     00 5E 06 F6 | 	mov	arg01, #0
00ecc     B0 6B B0 FD | 	call	#__system___getiolock_0150
00ed0     0C 5F 02 F6 | 	mov	arg01, result1
00ed4     48 54 B0 FD | 	call	#__system___lockmem
00ed8     00 18 06 F6 | 	mov	result1, #0
00edc     38 7D 02 F6 | 	mov	local09, local03
00ee0     02 7C 66 F0 | 	shl	local09, #2
00ee4     04 00 00 FF 
00ee8     64 FA 05 F1 | 	add	objptr, ##2148
00eec     FD 7C 02 F1 | 	add	local09, objptr
00ef0     3E 61 02 FB | 	rdlong	arg02, local09
00ef4     00 5E 06 F6 | 	mov	arg01, #0
00ef8     00 62 06 F6 | 	mov	arg03, #0
00efc     04 00 00 FF 
00f00     64 FA 85 F1 | 	sub	objptr, ##2148
00f04     D4 57 B0 FD | 	call	#__system___basic_print_string
00f08     00 5E 06 F6 | 	mov	arg01, #0
00f0c     0A 60 06 F6 | 	mov	arg02, #10
00f10     00 62 06 F6 | 	mov	arg03, #0
00f14     78 57 B0 FD | 	call	#__system___basic_print_char
00f18     01 18 06 F6 | 	mov	result1, #1
00f1c     00 5E 06 F6 | 	mov	arg01, #0
00f20     5C 6B B0 FD | 	call	#__system___getiolock_0150
00f24     0C 01 68 FC | 	wrlong	#0, result1
00f28     00 18 06 F6 | 	mov	result1, #0
00f2c     05 60 06 F6 | 	mov	arg02, #5
00f30     38 61 02 F1 | 	add	arg02, local03
00f34                 | ' 
00f34                 | ' ''---------- Set the (x,y) position of cursor
00f34                 | ' 
00f34                 | ' cursor_x:=x
00f34     34 FA 05 F1 | 	add	objptr, #52
00f38     FD 30 48 FC | 	wrbyte	#24, objptr
00f3c                 | ' cursor_y:=y
00f3c     01 FA 05 F1 | 	add	objptr, #1
00f40     FD 60 42 FC | 	wrbyte	arg02, objptr
00f44     35 FA 85 F1 | 	sub	objptr, #53
00f48     00 5E 06 F6 | 	mov	arg01, #0
00f4c     30 6B B0 FD | 	call	#__system___getiolock_0150
00f50     0C 5F 02 F6 | 	mov	arg01, result1
00f54     C8 53 B0 FD | 	call	#__system___lockmem
00f58     00 18 06 F6 | 	mov	result1, #0
00f5c     08 00 00 FF 
00f60     94 FB 05 F1 | 	add	objptr, ##4500
00f64     FD 60 02 FB | 	rdlong	arg02, objptr
00f68     08 00 00 FF 
00f6c     94 FB 85 F1 | 	sub	objptr, ##4500
00f70     00 5E 06 F6 | 	mov	arg01, #0
00f74     00 62 06 F6 | 	mov	arg03, #0
00f78     0A 64 06 F6 | 	mov	arg04, #10
00f7c     A4 57 B0 FD | 	call	#__system___basic_print_integer
00f80     00 5E 06 F6 | 	mov	arg01, #0
00f84     0A 60 06 F6 | 	mov	arg02, #10
00f88     00 62 06 F6 | 	mov	arg03, #0
00f8c     00 57 B0 FD | 	call	#__system___basic_print_char
00f90     01 18 06 F6 | 	mov	result1, #1
00f94     00 5E 06 F6 | 	mov	arg01, #0
00f98     E4 6A B0 FD | 	call	#__system___getiolock_0150
00f9c     0C 01 68 FC | 	wrlong	#0, result1
00fa0     00 18 06 F6 | 	mov	result1, #0
00fa4     05 60 06 F6 | 	mov	arg02, #5
00fa8     38 61 02 F1 | 	add	arg02, local03
00fac                 | ' 
00fac                 | ' ''---------- Set the (x,y) position of cursor
00fac                 | ' 
00fac                 | ' cursor_x:=x
00fac     34 FA 05 F1 | 	add	objptr, #52
00fb0     FD 3E 48 FC | 	wrbyte	#31, objptr
00fb4                 | ' cursor_y:=y
00fb4     01 FA 05 F1 | 	add	objptr, #1
00fb8     FD 60 42 FC | 	wrbyte	arg02, objptr
00fbc     35 FA 85 F1 | 	sub	objptr, #53
00fc0     00 5E 06 F6 | 	mov	arg01, #0
00fc4     B8 6A B0 FD | 	call	#__system___getiolock_0150
00fc8     0C 5F 02 F6 | 	mov	arg01, result1
00fcc     50 53 B0 FD | 	call	#__system___lockmem
00fd0     00 18 06 F6 | 	mov	result1, #0
00fd4     08 00 00 FF 
00fd8     A0 FB 05 F1 | 	add	objptr, ##4512
00fdc     FD 60 02 FB | 	rdlong	arg02, objptr
00fe0     08 00 00 FF 
00fe4     A0 FB 85 F1 | 	sub	objptr, ##4512
00fe8     00 5E 06 F6 | 	mov	arg01, #0
00fec     00 62 06 F6 | 	mov	arg03, #0
00ff0     0A 64 06 F6 | 	mov	arg04, #10
00ff4     2C 57 B0 FD | 	call	#__system___basic_print_integer
00ff8     00 5E 06 F6 | 	mov	arg01, #0
00ffc     0A 60 06 F6 | 	mov	arg02, #10
01000     00 62 06 F6 | 	mov	arg03, #0
01004     88 56 B0 FD | 	call	#__system___basic_print_char
01008     01 18 06 F6 | 	mov	result1, #1
0100c     00 5E 06 F6 | 	mov	arg01, #0
01010     6C 6A B0 FD | 	call	#__system___getiolock_0150
01014     0C 01 68 FC | 	wrlong	#0, result1
01018     00 18 06 F6 | 	mov	result1, #0
0101c     05 60 06 F6 | 	mov	arg02, #5
01020     38 61 02 F1 | 	add	arg02, local03
01024                 | ' 
01024                 | ' ''---------- Set the (x,y) position of cursor
01024                 | ' 
01024                 | ' cursor_x:=x
01024     34 FA 05 F1 | 	add	objptr, #52
01028     FD 44 48 FC | 	wrbyte	#34, objptr
0102c                 | ' cursor_y:=y
0102c     01 FA 05 F1 | 	add	objptr, #1
01030     FD 60 42 FC | 	wrbyte	arg02, objptr
01034     35 FA 85 F1 | 	sub	objptr, #53
01038     00 5E 06 F6 | 	mov	arg01, #0
0103c     40 6A B0 FD | 	call	#__system___getiolock_0150
01040     0C 5F 02 F6 | 	mov	arg01, result1
01044     D8 52 B0 FD | 	call	#__system___lockmem
01048     00 18 06 F6 | 	mov	result1, #0
0104c     08 00 00 FF 
01050     A4 FB 05 F1 | 	add	objptr, ##4516
01054     FD 60 02 FB | 	rdlong	arg02, objptr
01058     08 00 00 FF 
0105c     A4 FB 85 F1 | 	sub	objptr, ##4516
01060     00 5E 06 F6 | 	mov	arg01, #0
01064     00 62 06 F6 | 	mov	arg03, #0
01068     0A 64 06 F6 | 	mov	arg04, #10
0106c     B4 56 B0 FD | 	call	#__system___basic_print_integer
01070     00 5E 06 F6 | 	mov	arg01, #0
01074     0A 60 06 F6 | 	mov	arg02, #10
01078     00 62 06 F6 | 	mov	arg03, #0
0107c     10 56 B0 FD | 	call	#__system___basic_print_char
01080     01 18 06 F6 | 	mov	result1, #1
01084     00 5E 06 F6 | 	mov	arg01, #0
01088     F4 69 B0 FD | 	call	#__system___getiolock_0150
0108c     0C 01 68 FC | 	wrlong	#0, result1
01090     00 18 06 F6 | 	mov	result1, #0
01094     05 60 06 F6 | 	mov	arg02, #5
01098     38 61 02 F1 | 	add	arg02, local03
0109c                 | ' 
0109c                 | ' ''---------- Set the (x,y) position of cursor
0109c                 | ' 
0109c                 | ' cursor_x:=x
0109c     34 FA 05 F1 | 	add	objptr, #52
010a0     FD 4A 48 FC | 	wrbyte	#37, objptr
010a4                 | ' cursor_y:=y
010a4     01 FA 05 F1 | 	add	objptr, #1
010a8     FD 60 42 FC | 	wrbyte	arg02, objptr
010ac     35 FA 85 F1 | 	sub	objptr, #53
010b0     00 5E 06 F6 | 	mov	arg01, #0
010b4     C8 69 B0 FD | 	call	#__system___getiolock_0150
010b8     0C 5F 02 F6 | 	mov	arg01, result1
010bc     60 52 B0 FD | 	call	#__system___lockmem
010c0     00 18 06 F6 | 	mov	result1, #0
010c4     08 00 00 FF 
010c8     98 FB 05 F1 | 	add	objptr, ##4504
010cc     FD 60 02 FB | 	rdlong	arg02, objptr
010d0     08 00 00 FF 
010d4     98 FB 85 F1 | 	sub	objptr, ##4504
010d8     00 5E 06 F6 | 	mov	arg01, #0
010dc     00 62 06 F6 | 	mov	arg03, #0
010e0     0A 64 06 F6 | 	mov	arg04, #10
010e4     3C 56 B0 FD | 	call	#__system___basic_print_integer
010e8     00 5E 06 F6 | 	mov	arg01, #0
010ec     0A 60 06 F6 | 	mov	arg02, #10
010f0     00 62 06 F6 | 	mov	arg03, #0
010f4     98 55 B0 FD | 	call	#__system___basic_print_char
010f8     01 18 06 F6 | 	mov	result1, #1
010fc     00 5E 06 F6 | 	mov	arg01, #0
01100     7C 69 B0 FD | 	call	#__system___getiolock_0150
01104     0C 01 68 FC | 	wrlong	#0, result1
01108     00 18 06 F6 | 	mov	result1, #0
0110c     05 60 06 F6 | 	mov	arg02, #5
01110     38 61 02 F1 | 	add	arg02, local03
01114                 | ' 
01114                 | ' ''---------- Set the (x,y) position of cursor
01114                 | ' 
01114                 | ' cursor_x:=x
01114     34 FA 05 F1 | 	add	objptr, #52
01118     FD 56 48 FC | 	wrbyte	#43, objptr
0111c                 | ' cursor_y:=y
0111c     01 FA 05 F1 | 	add	objptr, #1
01120     FD 60 42 FC | 	wrbyte	arg02, objptr
01124     35 FA 85 F1 | 	sub	objptr, #53
01128     00 5E 06 F6 | 	mov	arg01, #0
0112c     50 69 B0 FD | 	call	#__system___getiolock_0150
01130     0C 5F 02 F6 | 	mov	arg01, result1
01134     E8 51 B0 FD | 	call	#__system___lockmem
01138     00 18 06 F6 | 	mov	result1, #0
0113c     08 00 00 FF 
01140     9C FB 05 F1 | 	add	objptr, ##4508
01144     FD 60 02 FB | 	rdlong	arg02, objptr
01148     08 00 00 FF 
0114c     9C FB 85 F1 | 	sub	objptr, ##4508
01150     00 5E 06 F6 | 	mov	arg01, #0
01154     00 62 06 F6 | 	mov	arg03, #0
01158     0A 64 06 F6 | 	mov	arg04, #10
0115c     C4 55 B0 FD | 	call	#__system___basic_print_integer
01160     00 5E 06 F6 | 	mov	arg01, #0
01164     0A 60 06 F6 | 	mov	arg02, #10
01168     00 62 06 F6 | 	mov	arg03, #0
0116c     20 55 B0 FD | 	call	#__system___basic_print_char
01170     01 18 06 F6 | 	mov	result1, #1
01174     00 5E 06 F6 | 	mov	arg01, #0
01178     04 69 B0 FD | 	call	#__system___getiolock_0150
0117c     0C 01 68 FC | 	wrlong	#0, result1
01180     00 18 06 F6 | 	mov	result1, #0
01184                 | LR__0005
01184                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01184     10 70 5E F2 | 	cmps	local03, #16 wcz
01188     D8 02 90 CD |  if_b	jmp	#LR__0006
0118c     38 61 02 F6 | 	mov	arg02, local03
01190     0B 60 86 F1 | 	sub	arg02, #11
01194                 | ' 
01194                 | ' ''---------- Set the (x,y) position of cursor
01194                 | ' 
01194                 | ' cursor_x:=x
01194     34 FA 05 F1 | 	add	objptr, #52
01198     FD 72 48 FC | 	wrbyte	#57, objptr
0119c                 | ' cursor_y:=y
0119c     01 FA 05 F1 | 	add	objptr, #1
011a0     FD 60 42 FC | 	wrbyte	arg02, objptr
011a4     35 FA 85 F1 | 	sub	objptr, #53
011a8     00 5E 06 F6 | 	mov	arg01, #0
011ac     D0 68 B0 FD | 	call	#__system___getiolock_0150
011b0     0C 5F 02 F6 | 	mov	arg01, result1
011b4     68 51 B0 FD | 	call	#__system___lockmem
011b8     00 18 06 F6 | 	mov	result1, #0
011bc     38 7D 02 F6 | 	mov	local09, local03
011c0     02 7C 66 F0 | 	shl	local09, #2
011c4     04 00 00 FF 
011c8     64 FA 05 F1 | 	add	objptr, ##2148
011cc     FD 7C 02 F1 | 	add	local09, objptr
011d0     3E 61 02 FB | 	rdlong	arg02, local09
011d4     00 5E 06 F6 | 	mov	arg01, #0
011d8     00 62 06 F6 | 	mov	arg03, #0
011dc     04 00 00 FF 
011e0     64 FA 85 F1 | 	sub	objptr, ##2148
011e4     F4 54 B0 FD | 	call	#__system___basic_print_string
011e8     00 5E 06 F6 | 	mov	arg01, #0
011ec     0A 60 06 F6 | 	mov	arg02, #10
011f0     00 62 06 F6 | 	mov	arg03, #0
011f4     98 54 B0 FD | 	call	#__system___basic_print_char
011f8     01 18 06 F6 | 	mov	result1, #1
011fc     00 5E 06 F6 | 	mov	arg01, #0
01200     7C 68 B0 FD | 	call	#__system___getiolock_0150
01204     0C 01 68 FC | 	wrlong	#0, result1
01208     00 18 06 F6 | 	mov	result1, #0
0120c     38 61 02 F6 | 	mov	arg02, local03
01210     0B 60 86 F1 | 	sub	arg02, #11
01214                 | ' 
01214                 | ' ''---------- Set the (x,y) position of cursor
01214                 | ' 
01214                 | ' cursor_x:=x
01214     34 FA 05 F1 | 	add	objptr, #52
01218     FD A0 48 FC | 	wrbyte	#80, objptr
0121c                 | ' cursor_y:=y
0121c     01 FA 05 F1 | 	add	objptr, #1
01220     FD 60 42 FC | 	wrbyte	arg02, objptr
01224     35 FA 85 F1 | 	sub	objptr, #53
01228     00 5E 06 F6 | 	mov	arg01, #0
0122c     50 68 B0 FD | 	call	#__system___getiolock_0150
01230     0C 5F 02 F6 | 	mov	arg01, result1
01234     E8 50 B0 FD | 	call	#__system___lockmem
01238     00 18 06 F6 | 	mov	result1, #0
0123c     08 00 00 FF 
01240     94 FB 05 F1 | 	add	objptr, ##4500
01244     FD 60 02 FB | 	rdlong	arg02, objptr
01248     08 00 00 FF 
0124c     94 FB 85 F1 | 	sub	objptr, ##4500
01250     00 5E 06 F6 | 	mov	arg01, #0
01254     00 62 06 F6 | 	mov	arg03, #0
01258     0A 64 06 F6 | 	mov	arg04, #10
0125c     C4 54 B0 FD | 	call	#__system___basic_print_integer
01260     00 5E 06 F6 | 	mov	arg01, #0
01264     0A 60 06 F6 | 	mov	arg02, #10
01268     00 62 06 F6 | 	mov	arg03, #0
0126c     20 54 B0 FD | 	call	#__system___basic_print_char
01270     01 18 06 F6 | 	mov	result1, #1
01274     00 5E 06 F6 | 	mov	arg01, #0
01278     04 68 B0 FD | 	call	#__system___getiolock_0150
0127c     0C 01 68 FC | 	wrlong	#0, result1
01280     00 18 06 F6 | 	mov	result1, #0
01284     38 61 02 F6 | 	mov	arg02, local03
01288     0B 60 86 F1 | 	sub	arg02, #11
0128c                 | ' 
0128c                 | ' ''---------- Set the (x,y) position of cursor
0128c                 | ' 
0128c                 | ' cursor_x:=x
0128c     34 FA 05 F1 | 	add	objptr, #52
01290     FD AE 48 FC | 	wrbyte	#87, objptr
01294                 | ' cursor_y:=y
01294     01 FA 05 F1 | 	add	objptr, #1
01298     FD 60 42 FC | 	wrbyte	arg02, objptr
0129c     35 FA 85 F1 | 	sub	objptr, #53
012a0     00 5E 06 F6 | 	mov	arg01, #0
012a4     D8 67 B0 FD | 	call	#__system___getiolock_0150
012a8     0C 5F 02 F6 | 	mov	arg01, result1
012ac     70 50 B0 FD | 	call	#__system___lockmem
012b0     00 18 06 F6 | 	mov	result1, #0
012b4     08 00 00 FF 
012b8     A0 FB 05 F1 | 	add	objptr, ##4512
012bc     FD 60 02 FB | 	rdlong	arg02, objptr
012c0     08 00 00 FF 
012c4     A0 FB 85 F1 | 	sub	objptr, ##4512
012c8     00 5E 06 F6 | 	mov	arg01, #0
012cc     00 62 06 F6 | 	mov	arg03, #0
012d0     0A 64 06 F6 | 	mov	arg04, #10
012d4     4C 54 B0 FD | 	call	#__system___basic_print_integer
012d8     00 5E 06 F6 | 	mov	arg01, #0
012dc     0A 60 06 F6 | 	mov	arg02, #10
012e0     00 62 06 F6 | 	mov	arg03, #0
012e4     A8 53 B0 FD | 	call	#__system___basic_print_char
012e8     01 18 06 F6 | 	mov	result1, #1
012ec     00 5E 06 F6 | 	mov	arg01, #0
012f0     8C 67 B0 FD | 	call	#__system___getiolock_0150
012f4     0C 01 68 FC | 	wrlong	#0, result1
012f8     00 18 06 F6 | 	mov	result1, #0
012fc     38 61 02 F6 | 	mov	arg02, local03
01300     0B 60 86 F1 | 	sub	arg02, #11
01304                 | ' 
01304                 | ' ''---------- Set the (x,y) position of cursor
01304                 | ' 
01304                 | ' cursor_x:=x
01304     34 FA 05 F1 | 	add	objptr, #52
01308     FD B4 48 FC | 	wrbyte	#90, objptr
0130c                 | ' cursor_y:=y
0130c     01 FA 05 F1 | 	add	objptr, #1
01310     FD 60 42 FC | 	wrbyte	arg02, objptr
01314     35 FA 85 F1 | 	sub	objptr, #53
01318     00 5E 06 F6 | 	mov	arg01, #0
0131c     60 67 B0 FD | 	call	#__system___getiolock_0150
01320     0C 5F 02 F6 | 	mov	arg01, result1
01324     F8 4F B0 FD | 	call	#__system___lockmem
01328     00 18 06 F6 | 	mov	result1, #0
0132c     08 00 00 FF 
01330     A4 FB 05 F1 | 	add	objptr, ##4516
01334     FD 60 02 FB | 	rdlong	arg02, objptr
01338     08 00 00 FF 
0133c     A4 FB 85 F1 | 	sub	objptr, ##4516
01340     00 5E 06 F6 | 	mov	arg01, #0
01344     00 62 06 F6 | 	mov	arg03, #0
01348     0A 64 06 F6 | 	mov	arg04, #10
0134c     D4 53 B0 FD | 	call	#__system___basic_print_integer
01350     00 5E 06 F6 | 	mov	arg01, #0
01354     0A 60 06 F6 | 	mov	arg02, #10
01358     00 62 06 F6 | 	mov	arg03, #0
0135c     30 53 B0 FD | 	call	#__system___basic_print_char
01360     01 18 06 F6 | 	mov	result1, #1
01364     00 5E 06 F6 | 	mov	arg01, #0
01368     14 67 B0 FD | 	call	#__system___getiolock_0150
0136c     0C 01 68 FC | 	wrlong	#0, result1
01370     00 18 06 F6 | 	mov	result1, #0
01374     38 61 02 F6 | 	mov	arg02, local03
01378     0B 60 86 F1 | 	sub	arg02, #11
0137c                 | ' 
0137c                 | ' ''---------- Set the (x,y) position of cursor
0137c                 | ' 
0137c                 | ' cursor_x:=x
0137c     34 FA 05 F1 | 	add	objptr, #52
01380     FD BA 48 FC | 	wrbyte	#93, objptr
01384                 | ' cursor_y:=y
01384     01 FA 05 F1 | 	add	objptr, #1
01388     FD 60 42 FC | 	wrbyte	arg02, objptr
0138c     35 FA 85 F1 | 	sub	objptr, #53
01390     00 5E 06 F6 | 	mov	arg01, #0
01394     E8 66 B0 FD | 	call	#__system___getiolock_0150
01398     0C 5F 02 F6 | 	mov	arg01, result1
0139c     80 4F B0 FD | 	call	#__system___lockmem
013a0     00 18 06 F6 | 	mov	result1, #0
013a4     08 00 00 FF 
013a8     98 FB 05 F1 | 	add	objptr, ##4504
013ac     FD 60 02 FB | 	rdlong	arg02, objptr
013b0     08 00 00 FF 
013b4     98 FB 85 F1 | 	sub	objptr, ##4504
013b8     00 5E 06 F6 | 	mov	arg01, #0
013bc     00 62 06 F6 | 	mov	arg03, #0
013c0     0A 64 06 F6 | 	mov	arg04, #10
013c4     5C 53 B0 FD | 	call	#__system___basic_print_integer
013c8     00 5E 06 F6 | 	mov	arg01, #0
013cc     0A 60 06 F6 | 	mov	arg02, #10
013d0     00 62 06 F6 | 	mov	arg03, #0
013d4     B8 52 B0 FD | 	call	#__system___basic_print_char
013d8     01 18 06 F6 | 	mov	result1, #1
013dc     00 5E 06 F6 | 	mov	arg01, #0
013e0     9C 66 B0 FD | 	call	#__system___getiolock_0150
013e4     0C 01 68 FC | 	wrlong	#0, result1
013e8     00 18 06 F6 | 	mov	result1, #0
013ec     38 61 02 F6 | 	mov	arg02, local03
013f0     0B 60 86 F1 | 	sub	arg02, #11
013f4                 | ' 
013f4                 | ' ''---------- Set the (x,y) position of cursor
013f4                 | ' 
013f4                 | ' cursor_x:=x
013f4     34 FA 05 F1 | 	add	objptr, #52
013f8     FD C6 48 FC | 	wrbyte	#99, objptr
013fc                 | ' cursor_y:=y
013fc     01 FA 05 F1 | 	add	objptr, #1
01400     FD 60 42 FC | 	wrbyte	arg02, objptr
01404     35 FA 85 F1 | 	sub	objptr, #53
01408     00 5E 06 F6 | 	mov	arg01, #0
0140c     70 66 B0 FD | 	call	#__system___getiolock_0150
01410     0C 5F 02 F6 | 	mov	arg01, result1
01414     08 4F B0 FD | 	call	#__system___lockmem
01418     00 18 06 F6 | 	mov	result1, #0
0141c     08 00 00 FF 
01420     9C FB 05 F1 | 	add	objptr, ##4508
01424     FD 60 02 FB | 	rdlong	arg02, objptr
01428     08 00 00 FF 
0142c     9C FB 85 F1 | 	sub	objptr, ##4508
01430     00 5E 06 F6 | 	mov	arg01, #0
01434     00 62 06 F6 | 	mov	arg03, #0
01438     0A 64 06 F6 | 	mov	arg04, #10
0143c     E4 52 B0 FD | 	call	#__system___basic_print_integer
01440     00 5E 06 F6 | 	mov	arg01, #0
01444     0A 60 06 F6 | 	mov	arg02, #10
01448     00 62 06 F6 | 	mov	arg03, #0
0144c     40 52 B0 FD | 	call	#__system___basic_print_char
01450     01 18 06 F6 | 	mov	result1, #1
01454     00 5E 06 F6 | 	mov	arg01, #0
01458     24 66 B0 FD | 	call	#__system___getiolock_0150
0145c     0C 01 68 FC | 	wrlong	#0, result1
01460     00 18 06 F6 | 	mov	result1, #0
01464                 | LR__0006
01464     01 70 06 F1 | 	add	local03, #1
01468     A4 F7 9F FD | 	jmp	#LR__0002
0146c                 | LR__0007
0146c                 | ' print
0146c     00 5E 06 F6 | 	mov	arg01, #0
01470     0C 66 B0 FD | 	call	#__system___getiolock_0150
01474     0C 5F 02 F6 | 	mov	arg01, result1
01478     A4 4E B0 FD | 	call	#__system___lockmem
0147c     00 18 06 F6 | 	mov	result1, #0
01480     00 5E 06 F6 | 	mov	arg01, #0
01484     0A 60 06 F6 | 	mov	arg02, #10
01488     00 62 06 F6 | 	mov	arg03, #0
0148c     00 52 B0 FD | 	call	#__system___basic_print_char
01490     01 18 06 F6 | 	mov	result1, #1
01494     00 5E 06 F6 | 	mov	arg01, #0
01498     E4 65 B0 FD | 	call	#__system___getiolock_0150
0149c     0C 01 68 FC | 	wrlong	#0, result1
014a0     00 18 06 F6 | 	mov	result1, #0
014a4     AF F0 03 F6 | 	mov	ptra, fp
014a8     BA 00 A0 FD | 	call	#popregs_
014ac                 | _getinfo_ret
014ac     2D 00 64 FD | 	ret
014b0                 | 
014b0                 | _program
014b0     09 5A 05 F6 | 	mov	COUNT_, #9
014b4     B0 00 A0 FD | 	call	#pushregs_
014b8     EC FA 05 F1 | 	add	objptr, #236
014bc     00 21 B0 FD | 	call	#_retrocog_spin2_start
014c0     02 00 00 FF 
014c4     40 FA 05 F1 | 	add	objptr, ##1088
014c8     FD 18 62 FC | 	wrlong	result1, objptr
014cc                 | ' c=rm.start()
014cc                 | ' return c
014cc     02 00 00 FF 
014d0     2C FB 85 F1 | 	sub	objptr, ##1324
014d4     40 5E 06 F6 | 	mov	arg01, #64
014d8     00 60 06 F6 | 	mov	arg02, #0
014dc     60 F3 BF FD | 	call	#_startvideo
014e0     9A 5E 06 F6 | 	mov	arg01, #154
014e4     93 60 06 F6 | 	mov	arg02, #147
014e8     64 0D B0 FD | 	call	#_hng030rm_spin2_cls
014ec     02 00 00 FF 
014f0     30 FB 05 F1 | 	add	objptr, ##1328
014f4     FD 00 69 FC | 	wrlong	#128, objptr
014f8     04 FA 05 F1 | 	add	objptr, #4
014fc     FD 7A 68 FC | 	wrlong	#61, objptr
01500     04 FA 05 F1 | 	add	objptr, #4
01504     FD 78 68 FC | 	wrlong	#60, objptr
01508     04 FA 05 F1 | 	add	objptr, #4
0150c     FD 76 68 FC | 	wrlong	#59, objptr
01510     04 FA 05 F1 | 	add	objptr, #4
01514     FD 74 68 FC | 	wrlong	#58, objptr
01518     04 FA 05 F1 | 	add	objptr, #4
0151c     FD 06 68 FC | 	wrlong	#3, objptr
01520     43 00 00 FF 
01524     65 6C 06 F6 | 	mov	local01, ##@LR__0461
01528     01 00 00 FF 
0152c     AC FB 05 F1 | 	add	objptr, ##940
01530     FD 6C 62 FC | 	wrlong	local01, objptr
01534     43 00 00 FF 
01538     7C 6C 06 F6 | 	mov	local01, ##@LR__0462
0153c     04 FA 05 F1 | 	add	objptr, #4
01540     FD 6C 62 FC | 	wrlong	local01, objptr
01544     04 00 00 FF 
01548     F4 FA 85 F1 | 	sub	objptr, ##2292
0154c                 | ' 
0154c                 | ' emptystr$="                      "
0154c                 | ' ss$=""
0154c                 | ' for i=1 to 31 : ss$=ss$+chr$(i) :next i
0154c     01 6E 06 F6 | 	mov	local02, #1
01550                 | LR__0008
01550     04 00 00 FF 
01554     F4 FA 05 F1 | 	add	objptr, ##2292
01558     FD 6C 02 FB | 	rdlong	local01, objptr
0155c     04 00 00 FF 
01560     F4 FA 85 F1 | 	sub	objptr, ##2292
01564     37 5F 02 F6 | 	mov	arg01, local02
01568     80 56 B0 FD | 	call	#__system__Chr_S
0156c     0C 61 02 F6 | 	mov	arg02, result1
01570     36 5F 02 F6 | 	mov	arg01, local01
01574     E4 4D B0 FD | 	call	#__system___string_concat
01578     0C 6D 02 F6 | 	mov	local01, result1
0157c     04 00 00 FF 
01580     F4 FA 05 F1 | 	add	objptr, ##2292
01584     FD 6C 62 FC | 	wrlong	local01, objptr
01588     04 00 00 FF 
0158c     F4 FA 85 F1 | 	sub	objptr, ##2292
01590     01 6E 06 F1 | 	add	local02, #1
01594     20 6E 1E F2 | 	cmp	local02, #32 wcz
01598     B4 FF 9F CD |  if_b	jmp	#LR__0008
0159c     02 5F 02 F6 | 	mov	arg01, ptr__dat__
015a0     E0 F2 BF FD | 	call	#_addr
015a4     04 00 00 FF 
015a8     F8 FA 05 F1 | 	add	objptr, ##2296
015ac     FD 18 62 FC | 	wrlong	result1, objptr
015b0     0C 5F 02 F6 | 	mov	arg01, result1
015b4     00 60 06 F6 | 	mov	arg02, #0
015b8     01 00 00 FF 
015bc     B0 FB 85 F1 | 	sub	objptr, ##944
015c0     DC 26 B0 FD | 	call	#_trackerplayer_spin2_initModule
015c4     01 60 06 F6 | 	mov	arg02, #1
015c8                 | ' 
015c8                 | ' ''---------- Set the (x,y) position of cursor
015c8                 | ' 
015c8                 | ' cursor_x:=x
015c8     02 00 00 FF 
015cc     14 FB 85 F1 | 	sub	objptr, ##1300
015d0     FD 02 48 FC | 	wrbyte	#1, objptr
015d4                 | ' cursor_y:=y
015d4     01 FA 05 F1 | 	add	objptr, #1
015d8     FD 02 48 FC | 	wrbyte	#1, objptr
015dc                 | ' 
015dc                 | ' 
015dc                 | ' ma=addr(module)
015dc                 | ' tracker.initmodule(ma,0)
015dc                 | ' 
015dc                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
015dc     04 00 00 FF 
015e0     C3 FA 05 F1 | 	add	objptr, ##2243
015e4     FD 6E 02 FB | 	rdlong	local02, objptr
015e8     37 71 02 F6 | 	mov	local03, local02
015ec     04 00 00 FF 
015f0     F8 FA 85 F1 | 	sub	objptr, ##2296
015f4     14 70 06 F1 | 	add	local03, #20
015f8                 | LR__0009
015f8     38 6F 5A F2 | 	cmps	local02, local03 wcz
015fc     40 00 90 3D |  if_ae	jmp	#LR__0010
01600     00 5E 06 F6 | 	mov	arg01, #0
01604     78 64 B0 FD | 	call	#__system___getiolock_0150
01608     0C 5F 02 F6 | 	mov	arg01, result1
0160c     10 4D B0 FD | 	call	#__system___lockmem
01610                 | ' asm
01610     37 19 C2 FA | 	rdbyte	result1, local02
01614                 | ' return r
01614     0C 61 02 F6 | 	mov	arg02, result1
01618     07 60 46 F7 | 	zerox	arg02, #7
0161c     00 5E 06 F6 | 	mov	arg01, #0
01620     00 62 06 F6 | 	mov	arg03, #0
01624     68 50 B0 FD | 	call	#__system___basic_print_char
01628     00 5E 06 F6 | 	mov	arg01, #0
0162c     50 64 B0 FD | 	call	#__system___getiolock_0150
01630     0C 01 68 FC | 	wrlong	#0, result1
01634     00 18 06 F6 | 	mov	result1, #0
01638     01 6E 06 F1 | 	add	local02, #1
0163c     B8 FF 9F FD | 	jmp	#LR__0009
01640                 | LR__0010
01640     04 00 00 FF 
01644     FC FA 05 F1 | 	add	objptr, ##2300
01648     FD 1E 68 FC | 	wrlong	#15, objptr
0164c                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
0164c     00 6C 06 F6 | 	mov	local01, #0
01650     04 FA 85 F1 | 	sub	objptr, #4
01654     FD 5E 02 FB | 	rdlong	arg01, objptr
01658     02 00 00 FF 
0165c     38 5E 06 F1 | 	add	arg01, ##1080
01660                 | ' asm
01660     2F 73 C2 FA | 	rdbyte	local04, arg01
01664                 | ' return r
01664     07 72 46 F7 | 	zerox	local04, #7
01668     4D 72 0E F2 | 	cmp	local04, #77 wz
0166c     01 6C 66 A6 |  if_e	neg	local01, #1
01670     00 74 06 F6 | 	mov	local05, #0
01674     FD 5E 02 FB | 	rdlong	arg01, objptr
01678     04 00 00 FF 
0167c     F8 FA 85 F1 | 	sub	objptr, ##2296
01680     02 00 00 FF 
01684     3A 5E 06 F1 | 	add	arg01, ##1082
01688                 | ' asm
01688     2F 19 C2 FA | 	rdbyte	result1, arg01
0168c                 | ' return r
0168c     0C 77 02 F6 | 	mov	local06, result1
01690     07 76 46 F7 | 	zerox	local06, #7
01694     4B 76 0E F2 | 	cmp	local06, #75 wz
01698     01 74 66 A6 |  if_e	neg	local05, #1
0169c     3A 6D CA F7 | 	test	local01, local05 wz
016a0     04 00 00 5F 
016a4     FC FA 05 51 |  if_ne	add	objptr, ##2300
016a8     FD 3E 68 5C |  if_ne	wrlong	#31, objptr
016ac     04 00 00 5F 
016b0     FC FA 85 51 |  if_ne	sub	objptr, ##2300
016b4     02 60 06 F6 | 	mov	arg02, #2
016b8                 | ' 
016b8                 | ' ''---------- Set the (x,y) position of cursor
016b8                 | ' 
016b8                 | ' cursor_x:=x
016b8     34 FA 05 F1 | 	add	objptr, #52
016bc     FD 02 48 FC | 	wrbyte	#1, objptr
016c0                 | ' cursor_y:=y
016c0     01 FA 05 F1 | 	add	objptr, #1
016c4     FD 04 48 FC | 	wrbyte	#2, objptr
016c8     35 FA 85 F1 | 	sub	objptr, #53
016cc                 | ' position 1,2 : print samples;" ";"samples module"
016cc     00 5E 06 F6 | 	mov	arg01, #0
016d0     AC 63 B0 FD | 	call	#__system___getiolock_0150
016d4     0C 5F 02 F6 | 	mov	arg01, result1
016d8     44 4C B0 FD | 	call	#__system___lockmem
016dc     00 18 06 F6 | 	mov	result1, #0
016e0     04 00 00 FF 
016e4     FC FA 05 F1 | 	add	objptr, ##2300
016e8     FD 60 02 FB | 	rdlong	arg02, objptr
016ec     04 00 00 FF 
016f0     FC FA 85 F1 | 	sub	objptr, ##2300
016f4     00 5E 06 F6 | 	mov	arg01, #0
016f8     00 62 06 F6 | 	mov	arg03, #0
016fc     0A 64 06 F6 | 	mov	arg04, #10
01700     20 50 B0 FD | 	call	#__system___basic_print_integer
01704     43 00 00 FF 
01708     7D 60 06 F6 | 	mov	arg02, ##@LR__0463
0170c     00 5E 06 F6 | 	mov	arg01, #0
01710     00 62 06 F6 | 	mov	arg03, #0
01714     C4 4F B0 FD | 	call	#__system___basic_print_string
01718     43 00 00 FF 
0171c     7F 60 06 F6 | 	mov	arg02, ##@LR__0464
01720     00 5E 06 F6 | 	mov	arg01, #0
01724     00 62 06 F6 | 	mov	arg03, #0
01728     B0 4F B0 FD | 	call	#__system___basic_print_string
0172c     00 5E 06 F6 | 	mov	arg01, #0
01730     0A 60 06 F6 | 	mov	arg02, #10
01734     00 62 06 F6 | 	mov	arg03, #0
01738     54 4F B0 FD | 	call	#__system___basic_print_char
0173c     01 18 06 F6 | 	mov	result1, #1
01740     00 5E 06 F6 | 	mov	arg01, #0
01744     38 63 B0 FD | 	call	#__system___getiolock_0150
01748     0C 01 68 FC | 	wrlong	#0, result1
0174c     00 18 06 F6 | 	mov	result1, #0
01750     04 00 00 FF 
01754     F8 FA 05 F1 | 	add	objptr, ##2296
01758     FD 5E 02 FB | 	rdlong	arg01, objptr
0175c     04 FA 05 F1 | 	add	objptr, #4
01760     FD 60 02 FB | 	rdlong	arg02, objptr
01764     04 00 00 FF 
01768     FC FA 85 F1 | 	sub	objptr, ##2300
0176c     B0 F3 BF FD | 	call	#_getinfo
01770     03 00 00 FF 
01774     44 FB 05 F1 | 	add	objptr, ##1860
01778     58 47 B0 FD | 	call	#_audio019_spin2_start
0177c     0D 73 02 F6 | 	mov	local04, result2
01780     A4 FB 05 F1 | 	add	objptr, #420
01784     FD 18 62 FC | 	wrlong	result1, objptr
01788     04 FA 05 F1 | 	add	objptr, #4
0178c     FD 72 62 FC | 	wrlong	local04, objptr
01790     14 FA 05 F1 | 	add	objptr, #20
01794     FD 00 68 FC | 	wrlong	#0, objptr
01798     04 FA 05 F1 | 	add	objptr, #4
0179c     FD 00 68 FC | 	wrlong	#0, objptr
017a0     04 FA 05 F1 | 	add	objptr, #4
017a4     FD 00 68 FC | 	wrlong	#0, objptr
017a8     04 FA 05 F1 | 	add	objptr, #4
017ac     FD 00 68 FC | 	wrlong	#0, objptr
017b0     04 00 00 FF 
017b4     F0 FA 85 F1 | 	sub	objptr, ##2288
017b8     FD 6C 02 FB | 	rdlong	local01, objptr
017bc     08 00 00 FF 
017c0     68 FB 05 F1 | 	add	objptr, ##4456
017c4     FD 6C 62 FC | 	wrlong	local01, objptr
017c8     08 00 00 FF 
017cc     84 FB 85 F1 | 	sub	objptr, ##4484
017d0                 | ' dltest=v030.dl_ptr
017d0                 | ' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i 
017d0     00 6E 06 F6 | 	mov	local02, #0
017d4     74 E8 9F FE | 	loc	pa,	#(@LR__0012-@LR__0011)
017d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
017dc                 | LR__0011
017dc     37 73 02 F6 | 	mov	local04, local02
017e0     02 72 66 F0 | 	shl	local04, #2
017e4     04 00 00 FF 
017e8     10 FB 05 F1 | 	add	objptr, ##2320
017ec     FD 72 02 F1 | 	add	local04, objptr
017f0     04 00 00 FF 
017f4     74 FA 05 F1 | 	add	objptr, ##2164
017f8     FD 5E 02 FB | 	rdlong	arg01, objptr
017fc     08 00 00 FF 
01800     84 FB 85 F1 | 	sub	objptr, ##4484
01804     37 79 02 F6 | 	mov	local07, local02
01808     02 78 66 F0 | 	shl	local07, #2
0180c     3C 5F 02 F1 | 	add	arg01, local07
01810                 | ' asm
01810     2F 19 02 FB | 	rdlong	result1, arg01
01814                 | ' return r
01814     39 19 62 FC | 	wrlong	result1, local04
01818     01 6E 06 F1 | 	add	local02, #1
0181c     01 00 00 FF 
01820     1C 6E 5E F2 | 	cmps	local02, ##540 wcz
01824     B4 FF 9F CD |  if_b	jmp	#LR__0011
01828                 | LR__0012
01828     1A 60 06 F6 | 	mov	arg02, #26
0182c                 | ' 
0182c                 | ' ''---------- Set the (x,y) position of cursor
0182c                 | ' 
0182c                 | ' cursor_x:=x
0182c     34 FA 05 F1 | 	add	objptr, #52
01830     FD 00 48 FC | 	wrbyte	#0, objptr
01834                 | ' cursor_y:=y
01834     01 FA 05 F1 | 	add	objptr, #1
01838     FD 34 48 FC | 	wrbyte	#26, objptr
0183c     04 00 00 FF 
01840     BF FA 05 F1 | 	add	objptr, ##2239
01844     FD 5E 02 FB | 	rdlong	arg01, objptr
01848     04 00 00 FF 
0184c     F4 FA 85 F1 | 	sub	objptr, ##2292
01850     88 0F B0 FD | 	call	#_hng030rm_spin2_writeln
01854                 | ' position 0,26 : v030.writeln(ss$)
01854                 | ' print"123456789012345678901234567890"
01854     00 5E 06 F6 | 	mov	arg01, #0
01858     24 62 B0 FD | 	call	#__system___getiolock_0150
0185c     0C 5F 02 F6 | 	mov	arg01, result1
01860     BC 4A B0 FD | 	call	#__system___lockmem
01864     00 18 06 F6 | 	mov	result1, #0
01868     43 00 00 FF 
0186c     8E 60 06 F6 | 	mov	arg02, ##@LR__0465
01870     00 5E 06 F6 | 	mov	arg01, #0
01874     00 62 06 F6 | 	mov	arg03, #0
01878     60 4E B0 FD | 	call	#__system___basic_print_string
0187c     00 5E 06 F6 | 	mov	arg01, #0
01880     0A 60 06 F6 | 	mov	arg02, #10
01884     00 62 06 F6 | 	mov	arg03, #0
01888     04 4E B0 FD | 	call	#__system___basic_print_char
0188c     01 18 06 F6 | 	mov	result1, #1
01890     00 5E 06 F6 | 	mov	arg01, #0
01894     E8 61 B0 FD | 	call	#__system___getiolock_0150
01898     0C 01 68 FC | 	wrlong	#0, result1
0189c     00 18 06 F6 | 	mov	result1, #0
018a0                 | ' do
018a0                 | LR__0013
018a0     01 5E 06 F6 | 	mov	arg01, #1
018a4     10 09 B0 FD | 	call	#_hng030rm_spin2_waitvbl
018a8     02 00 00 FF 
018ac     48 FB 05 F1 | 	add	objptr, ##1352
018b0     CC 2A B0 FD | 	call	#_trackerplayer_spin2_tick
018b4     02 00 00 FF 
018b8     48 FB 85 F1 | 	sub	objptr, ##1352
018bc     1B 18 62 FD | 	getrnd	result1
018c0     0C 99 02 F6 | 	mov	muldiva_, result1
018c4     01 00 00 FF 
018c8     1C 9A 06 F6 | 	mov	muldivb_, ##540
018cc     C2 00 A0 FD | 	call	#unsdivide_
018d0     08 00 00 FF 
018d4     88 FB 05 F1 | 	add	objptr, ##4488
018d8     FD 98 62 FC | 	wrlong	muldiva_, objptr
018dc                 | '     
018dc                 | ' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
018dc                 | '      
018dc                 | '     if tracker.trigger(0)<>old1 then 
018dc     05 00 00 FF 
018e0     4A FA 85 F1 | 	sub	objptr, ##2634
018e4     FD 6C C2 FA | 	rdbyte	local01, objptr
018e8     C2 FB 05 F1 | 	add	objptr, #450
018ec     FD 7A 02 FB | 	rdlong	local08, objptr
018f0     04 00 00 FF 
018f4     00 FB 85 F1 | 	sub	objptr, ##2304
018f8     3D 6D 0A F2 | 	cmp	local01, local08 wz
018fc     8C 00 90 AD |  if_e	jmp	#LR__0014
01900     03 00 00 FF 
01904     3E FB 05 F1 | 	add	objptr, ##1854
01908     FD 6C C2 FA | 	rdbyte	local01, objptr
0190c     C2 FB 05 F1 | 	add	objptr, #450
01910     FD 6C 62 FC | 	wrlong	local01, objptr
01914     14 FA 85 F1 | 	sub	objptr, #20
01918     FD 5E 02 FB | 	rdlong	arg01, objptr
0191c     08 5E 06 F1 | 	add	arg01, #8
01920     01 00 00 FF 
01924     FD FA 85 F1 | 	sub	objptr, ##765
01928     FD 60 02 FB | 	rdlong	arg02, objptr
0192c     1E 60 26 F4 | 	bith	arg02, #30
01930                 | ' asm
01930     2F 61 62 FC | 	wrlong	arg02, arg01
01934     01 00 00 FF 
01938     FD FA 05 F1 | 	add	objptr, ##765
0193c     FD 5E 02 FB | 	rdlong	arg01, objptr
01940     0C 5E 06 F1 | 	add	arg01, #12
01944     01 00 00 FF 
01948     E9 FA 85 F1 | 	sub	objptr, ##745
0194c     FD 60 E2 FA | 	rdword	arg02, objptr
01950     08 FA 05 F1 | 	add	objptr, #8
01954     FD 76 02 FB | 	rdlong	local06, objptr
01958     3B 61 82 F1 | 	sub	arg02, local06
0195c                 | ' asm
0195c     2F 61 62 FC | 	wrlong	arg02, arg01
01960     01 00 00 FF 
01964     E1 FA 05 F1 | 	add	objptr, ##737
01968     FD 5E 02 FB | 	rdlong	arg01, objptr
0196c     10 5E 06 F1 | 	add	arg01, #16
01970     01 00 00 FF 
01974     E9 FA 85 F1 | 	sub	objptr, ##745
01978     FD 60 E2 FA | 	rdword	arg02, objptr
0197c     03 00 00 FF 
01980     03 FA 85 F1 | 	sub	objptr, ##1539
01984     0F 60 46 F7 | 	zerox	arg02, #15
01988                 | ' asm
01988     2F 61 62 FC | 	wrlong	arg02, arg01
0198c                 | LR__0014
0198c     04 00 00 FF 
01990     EC FA 05 F1 | 	add	objptr, ##2284
01994     FD 5E 02 FB | 	rdlong	arg01, objptr
01998     14 5E 06 F1 | 	add	arg01, #20
0199c     01 00 00 FF 
019a0     A5 FA 85 F1 | 	sub	objptr, ##677
019a4     FD 7A 02 FB | 	rdlong	local08, objptr
019a8     10 FA 05 F1 | 	add	objptr, #16
019ac     FD 76 02 FB | 	rdlong	local06, objptr
019b0     3B 7B 02 F1 | 	add	local08, local06
019b4     27 FB 85 F1 | 	sub	objptr, #295
019b8     FD 7C 02 FB | 	rdlong	local09, objptr
019bc     3E 7B 02 FD | 	qmul	local08, local09
019c0     18 60 62 FD | 	getqx	arg02
019c4                 | ' asm
019c4     2F 61 52 FC | 	wrword	arg02, arg01
019c8     01 00 00 FF 
019cc     BC FB 05 F1 | 	add	objptr, ##956
019d0     FD 5E 02 FB | 	rdlong	arg01, objptr
019d4     16 5E 06 F1 | 	add	arg01, #22
019d8                 | ' asm
019d8     0C 00 80 FF 
019dc     2F 01 58 FC | 	wrword	##6144, arg01
019e0     FD 5E 02 FB | 	rdlong	arg01, objptr
019e4     18 5E 06 F1 | 	add	arg01, #24
019e8     01 00 00 FF 
019ec     C5 FA 85 F1 | 	sub	objptr, ##709
019f0     FD 60 02 FB | 	rdlong	arg02, objptr
019f4     10 FA 05 F1 | 	add	objptr, #16
019f8     FD 76 02 FB | 	rdlong	local06, objptr
019fc     3B 61 02 F1 | 	add	arg02, local06
01a00                 | ' asm
01a00     2F 61 52 FC | 	wrword	arg02, arg01
01a04     01 00 00 FF 
01a08     B5 FA 05 F1 | 	add	objptr, ##693
01a0c     FD 5E 02 FB | 	rdlong	arg01, objptr
01a10     1A 5E 06 F1 | 	add	arg01, #26
01a14                 | ' asm
01a14     2F 03 58 FC | 	wrword	#1, arg01
01a18                 | '   
01a18                 | '   
01a18                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01a18                 | '     dpoke base+22, 8192-2048
01a18                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
01a18                 | '     dpoke base+26, 1
01a18                 | ' 
01a18                 | '  
01a18                 | '     if tracker.trigger(1) <> old2  then
01a18     AD FB 85 F1 | 	sub	objptr, #429
01a1c     FD 6C C2 FA | 	rdbyte	local01, objptr
01a20     C5 FB 05 F1 | 	add	objptr, #453
01a24     FD 7A 02 FB | 	rdlong	local08, objptr
01a28     04 00 00 FF 
01a2c     04 FB 85 F1 | 	sub	objptr, ##2308
01a30     3D 6D 0A F2 | 	cmp	local01, local08 wz
01a34     9C 00 90 AD |  if_e	jmp	#LR__0015
01a38     03 00 00 FF 
01a3c     3F FB 05 F1 | 	add	objptr, ##1855
01a40     FD 6C C2 FA | 	rdbyte	local01, objptr
01a44     C5 FB 05 F1 | 	add	objptr, #453
01a48     FD 6C 62 FC | 	wrlong	local01, objptr
01a4c     18 FA 85 F1 | 	sub	objptr, #24
01a50     FD 5E 02 FB | 	rdlong	arg01, objptr
01a54     28 5E 06 F1 | 	add	arg01, #40
01a58     01 00 00 FF 
01a5c     F9 FA 85 F1 | 	sub	objptr, ##761
01a60     FD 60 02 FB | 	rdlong	arg02, objptr
01a64     1E 60 26 F4 | 	bith	arg02, #30
01a68                 | ' asm
01a68     2F 61 62 FC | 	wrlong	arg02, arg01
01a6c     20 5E 06 F6 | 	mov	arg01, #32
01a70     01 00 00 FF 
01a74     F9 FA 05 F1 | 	add	objptr, ##761
01a78     FD 7A 02 FB | 	rdlong	local08, objptr
01a7c     3D 5F 02 F1 | 	add	arg01, local08
01a80     0C 5E 06 F1 | 	add	arg01, #12
01a84     01 00 00 FF 
01a88     E7 FA 85 F1 | 	sub	objptr, ##743
01a8c     FD 60 E2 FA | 	rdword	arg02, objptr
01a90     0A FA 05 F1 | 	add	objptr, #10
01a94     FD 76 02 FB | 	rdlong	local06, objptr
01a98     3B 61 82 F1 | 	sub	arg02, local06
01a9c                 | ' asm
01a9c     2F 61 62 FC | 	wrlong	arg02, arg01
01aa0     20 5E 06 F6 | 	mov	arg01, #32
01aa4     01 00 00 FF 
01aa8     DD FA 05 F1 | 	add	objptr, ##733
01aac     FD 7A 02 FB | 	rdlong	local08, objptr
01ab0     3D 5F 02 F1 | 	add	arg01, local08
01ab4     10 5E 06 F1 | 	add	arg01, #16
01ab8     01 00 00 FF 
01abc     E7 FA 85 F1 | 	sub	objptr, ##743
01ac0     FD 60 E2 FA | 	rdword	arg02, objptr
01ac4     03 00 00 FF 
01ac8     05 FA 85 F1 | 	sub	objptr, ##1541
01acc     0F 60 46 F7 | 	zerox	arg02, #15
01ad0                 | ' asm
01ad0     2F 61 62 FC | 	wrlong	arg02, arg01
01ad4                 | LR__0015
01ad4     20 5E 06 F6 | 	mov	arg01, #32
01ad8     04 00 00 FF 
01adc     EC FA 05 F1 | 	add	objptr, ##2284
01ae0     FD 7A 02 FB | 	rdlong	local08, objptr
01ae4     3D 5F 02 F1 | 	add	arg01, local08
01ae8     14 5E 06 F1 | 	add	arg01, #20
01aec     01 00 00 FF 
01af0     A1 FA 85 F1 | 	sub	objptr, ##673
01af4     FD 7A 02 FB | 	rdlong	local08, objptr
01af8     10 FA 05 F1 | 	add	objptr, #16
01afc     FD 76 02 FB | 	rdlong	local06, objptr
01b00     3B 7B 02 F1 | 	add	local08, local06
01b04     2B FB 85 F1 | 	sub	objptr, #299
01b08     FD 7C 02 FB | 	rdlong	local09, objptr
01b0c     3E 7B 02 FD | 	qmul	local08, local09
01b10     18 60 62 FD | 	getqx	arg02
01b14                 | ' asm
01b14     2F 61 52 FC | 	wrword	arg02, arg01
01b18     20 5E 06 F6 | 	mov	arg01, #32
01b1c     01 00 00 FF 
01b20     BC FB 05 F1 | 	add	objptr, ##956
01b24     FD 7A 02 FB | 	rdlong	local08, objptr
01b28     3D 5F 02 F1 | 	add	arg01, local08
01b2c     16 5E 06 F1 | 	add	arg01, #22
01b30                 | ' asm
01b30     14 00 80 FF 
01b34     2F 01 58 FC | 	wrword	##10240, arg01
01b38     20 5E 06 F6 | 	mov	arg01, #32
01b3c     FD 7A 02 FB | 	rdlong	local08, objptr
01b40     3D 5F 02 F1 | 	add	arg01, local08
01b44     18 5E 06 F1 | 	add	arg01, #24
01b48     01 00 00 FF 
01b4c     C1 FA 85 F1 | 	sub	objptr, ##705
01b50     FD 60 02 FB | 	rdlong	arg02, objptr
01b54     10 FA 05 F1 | 	add	objptr, #16
01b58     FD 76 02 FB | 	rdlong	local06, objptr
01b5c     3B 61 02 F1 | 	add	arg02, local06
01b60                 | ' asm
01b60     2F 61 52 FC | 	wrword	arg02, arg01
01b64     20 5E 06 F6 | 	mov	arg01, #32
01b68     01 00 00 FF 
01b6c     B1 FA 05 F1 | 	add	objptr, ##689
01b70     FD 7A 02 FB | 	rdlong	local08, objptr
01b74     3D 5F 02 F1 | 	add	arg01, local08
01b78     1A 5E 06 F1 | 	add	arg01, #26
01b7c                 | ' asm
01b7c     2F 03 58 FC | 	wrword	#1, arg01
01b80                 | '       
01b80                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01b80                 | '     dpoke 32+base+22, 8192+2048
01b80                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
01b80                 | '     dpoke 32+base+26, 1
01b80                 | ' 
01b80                 | '    if tracker.trigger(2) <> old3  then
01b80     AC FB 85 F1 | 	sub	objptr, #428
01b84     FD 6C C2 FA | 	rdbyte	local01, objptr
01b88     C8 FB 05 F1 | 	add	objptr, #456
01b8c     FD 7A 02 FB | 	rdlong	local08, objptr
01b90     04 00 00 FF 
01b94     08 FB 85 F1 | 	sub	objptr, ##2312
01b98     3D 6D 0A F2 | 	cmp	local01, local08 wz
01b9c     9C 00 90 AD |  if_e	jmp	#LR__0016
01ba0     03 00 00 FF 
01ba4     40 FB 05 F1 | 	add	objptr, ##1856
01ba8     FD 6C C2 FA | 	rdbyte	local01, objptr
01bac     C8 FB 05 F1 | 	add	objptr, #456
01bb0     FD 6C 62 FC | 	wrlong	local01, objptr
01bb4     1C FA 85 F1 | 	sub	objptr, #28
01bb8     FD 5E 02 FB | 	rdlong	arg01, objptr
01bbc     48 5E 06 F1 | 	add	arg01, #72
01bc0     01 00 00 FF 
01bc4     F5 FA 85 F1 | 	sub	objptr, ##757
01bc8     FD 60 02 FB | 	rdlong	arg02, objptr
01bcc     1E 60 26 F4 | 	bith	arg02, #30
01bd0                 | ' asm
01bd0     2F 61 62 FC | 	wrlong	arg02, arg01
01bd4     40 5E 06 F6 | 	mov	arg01, #64
01bd8     01 00 00 FF 
01bdc     F5 FA 05 F1 | 	add	objptr, ##757
01be0     FD 7A 02 FB | 	rdlong	local08, objptr
01be4     3D 5F 02 F1 | 	add	arg01, local08
01be8     0C 5E 06 F1 | 	add	arg01, #12
01bec     01 00 00 FF 
01bf0     E5 FA 85 F1 | 	sub	objptr, ##741
01bf4     FD 60 E2 FA | 	rdword	arg02, objptr
01bf8     0C FA 05 F1 | 	add	objptr, #12
01bfc     FD 76 02 FB | 	rdlong	local06, objptr
01c00     3B 61 82 F1 | 	sub	arg02, local06
01c04                 | ' asm
01c04     2F 61 62 FC | 	wrlong	arg02, arg01
01c08     40 5E 06 F6 | 	mov	arg01, #64
01c0c     01 00 00 FF 
01c10     D9 FA 05 F1 | 	add	objptr, ##729
01c14     FD 7A 02 FB | 	rdlong	local08, objptr
01c18     3D 5F 02 F1 | 	add	arg01, local08
01c1c     10 5E 06 F1 | 	add	arg01, #16
01c20     01 00 00 FF 
01c24     E5 FA 85 F1 | 	sub	objptr, ##741
01c28     FD 60 E2 FA | 	rdword	arg02, objptr
01c2c     03 00 00 FF 
01c30     07 FA 85 F1 | 	sub	objptr, ##1543
01c34     0F 60 46 F7 | 	zerox	arg02, #15
01c38                 | ' asm
01c38     2F 61 62 FC | 	wrlong	arg02, arg01
01c3c                 | LR__0016
01c3c     40 5E 06 F6 | 	mov	arg01, #64
01c40     04 00 00 FF 
01c44     EC FA 05 F1 | 	add	objptr, ##2284
01c48     FD 7A 02 FB | 	rdlong	local08, objptr
01c4c     3D 5F 02 F1 | 	add	arg01, local08
01c50     14 5E 06 F1 | 	add	arg01, #20
01c54     01 00 00 FF 
01c58     9D FA 85 F1 | 	sub	objptr, ##669
01c5c     FD 7A 02 FB | 	rdlong	local08, objptr
01c60     10 FA 05 F1 | 	add	objptr, #16
01c64     FD 76 02 FB | 	rdlong	local06, objptr
01c68     3B 7B 02 F1 | 	add	local08, local06
01c6c     2F FB 85 F1 | 	sub	objptr, #303
01c70     FD 7C 02 FB | 	rdlong	local09, objptr
01c74     3E 7B 02 FD | 	qmul	local08, local09
01c78     18 60 62 FD | 	getqx	arg02
01c7c                 | ' asm
01c7c     2F 61 52 FC | 	wrword	arg02, arg01
01c80     40 5E 06 F6 | 	mov	arg01, #64
01c84     01 00 00 FF 
01c88     BC FB 05 F1 | 	add	objptr, ##956
01c8c     FD 7A 02 FB | 	rdlong	local08, objptr
01c90     3D 5F 02 F1 | 	add	arg01, local08
01c94     16 5E 06 F1 | 	add	arg01, #22
01c98                 | ' asm
01c98     14 00 80 FF 
01c9c     2F 01 58 FC | 	wrword	##10240, arg01
01ca0     40 5E 06 F6 | 	mov	arg01, #64
01ca4     FD 7A 02 FB | 	rdlong	local08, objptr
01ca8     3D 5F 02 F1 | 	add	arg01, local08
01cac     18 5E 06 F1 | 	add	arg01, #24
01cb0     01 00 00 FF 
01cb4     BD FA 85 F1 | 	sub	objptr, ##701
01cb8     FD 60 02 FB | 	rdlong	arg02, objptr
01cbc     10 FA 05 F1 | 	add	objptr, #16
01cc0     FD 76 02 FB | 	rdlong	local06, objptr
01cc4     3B 61 02 F1 | 	add	arg02, local06
01cc8                 | ' asm
01cc8     2F 61 52 FC | 	wrword	arg02, arg01
01ccc     40 5E 06 F6 | 	mov	arg01, #64
01cd0     01 00 00 FF 
01cd4     AD FA 05 F1 | 	add	objptr, ##685
01cd8     FD 7A 02 FB | 	rdlong	local08, objptr
01cdc     3D 5F 02 F1 | 	add	arg01, local08
01ce0     1A 5E 06 F1 | 	add	arg01, #26
01ce4                 | ' asm
01ce4     2F 03 58 FC | 	wrword	#1, arg01
01ce8                 | '     
01ce8                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01ce8                 | '     dpoke 64+base+22, 8192+2048
01ce8                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
01ce8                 | '     dpoke 64+base+26, 1
01ce8                 | ' 
01ce8                 | '     if tracker.trigger(3) <> old4 then
01ce8     AB FB 85 F1 | 	sub	objptr, #427
01cec     FD 6C C2 FA | 	rdbyte	local01, objptr
01cf0     CB FB 05 F1 | 	add	objptr, #459
01cf4     FD 7A 02 FB | 	rdlong	local08, objptr
01cf8     04 00 00 FF 
01cfc     0C FB 85 F1 | 	sub	objptr, ##2316
01d00     3D 6D 0A F2 | 	cmp	local01, local08 wz
01d04     9C 00 90 AD |  if_e	jmp	#LR__0017
01d08     03 00 00 FF 
01d0c     41 FB 05 F1 | 	add	objptr, ##1857
01d10     FD 6C C2 FA | 	rdbyte	local01, objptr
01d14     CB FB 05 F1 | 	add	objptr, #459
01d18     FD 6C 62 FC | 	wrlong	local01, objptr
01d1c     20 FA 85 F1 | 	sub	objptr, #32
01d20     FD 5E 02 FB | 	rdlong	arg01, objptr
01d24     68 5E 06 F1 | 	add	arg01, #104
01d28     01 00 00 FF 
01d2c     F1 FA 85 F1 | 	sub	objptr, ##753
01d30     FD 60 02 FB | 	rdlong	arg02, objptr
01d34     1E 60 26 F4 | 	bith	arg02, #30
01d38                 | ' asm
01d38     2F 61 62 FC | 	wrlong	arg02, arg01
01d3c     60 5E 06 F6 | 	mov	arg01, #96
01d40     01 00 00 FF 
01d44     F1 FA 05 F1 | 	add	objptr, ##753
01d48     FD 7A 02 FB | 	rdlong	local08, objptr
01d4c     3D 5F 02 F1 | 	add	arg01, local08
01d50     0C 5E 06 F1 | 	add	arg01, #12
01d54     01 00 00 FF 
01d58     E3 FA 85 F1 | 	sub	objptr, ##739
01d5c     FD 60 E2 FA | 	rdword	arg02, objptr
01d60     0E FA 05 F1 | 	add	objptr, #14
01d64     FD 76 02 FB | 	rdlong	local06, objptr
01d68     3B 61 82 F1 | 	sub	arg02, local06
01d6c                 | ' asm
01d6c     2F 61 62 FC | 	wrlong	arg02, arg01
01d70     60 5E 06 F6 | 	mov	arg01, #96
01d74     01 00 00 FF 
01d78     D5 FA 05 F1 | 	add	objptr, ##725
01d7c     FD 7A 02 FB | 	rdlong	local08, objptr
01d80     3D 5F 02 F1 | 	add	arg01, local08
01d84     10 5E 06 F1 | 	add	arg01, #16
01d88     01 00 00 FF 
01d8c     E3 FA 85 F1 | 	sub	objptr, ##739
01d90     FD 60 E2 FA | 	rdword	arg02, objptr
01d94     03 00 00 FF 
01d98     09 FA 85 F1 | 	sub	objptr, ##1545
01d9c     0F 60 46 F7 | 	zerox	arg02, #15
01da0                 | ' asm
01da0     2F 61 62 FC | 	wrlong	arg02, arg01
01da4                 | LR__0017
01da4     60 5E 06 F6 | 	mov	arg01, #96
01da8     04 00 00 FF 
01dac     EC FA 05 F1 | 	add	objptr, ##2284
01db0     FD 7A 02 FB | 	rdlong	local08, objptr
01db4     3D 5F 02 F1 | 	add	arg01, local08
01db8     14 5E 06 F1 | 	add	arg01, #20
01dbc     01 00 00 FF 
01dc0     99 FA 85 F1 | 	sub	objptr, ##665
01dc4     FD 7A 02 FB | 	rdlong	local08, objptr
01dc8     10 FA 05 F1 | 	add	objptr, #16
01dcc     FD 76 02 FB | 	rdlong	local06, objptr
01dd0     3B 7B 02 F1 | 	add	local08, local06
01dd4     33 FB 85 F1 | 	sub	objptr, #307
01dd8     FD 7C 02 FB | 	rdlong	local09, objptr
01ddc     3E 7B 02 FD | 	qmul	local08, local09
01de0     18 60 62 FD | 	getqx	arg02
01de4                 | ' asm
01de4     2F 61 52 FC | 	wrword	arg02, arg01
01de8     60 5E 06 F6 | 	mov	arg01, #96
01dec     01 00 00 FF 
01df0     BC FB 05 F1 | 	add	objptr, ##956
01df4     FD 7A 02 FB | 	rdlong	local08, objptr
01df8     3D 5F 02 F1 | 	add	arg01, local08
01dfc     16 5E 06 F1 | 	add	arg01, #22
01e00                 | ' asm
01e00     0C 00 80 FF 
01e04     2F 01 58 FC | 	wrword	##6144, arg01
01e08     60 5E 06 F6 | 	mov	arg01, #96
01e0c     FD 7A 02 FB | 	rdlong	local08, objptr
01e10     3D 5F 02 F1 | 	add	arg01, local08
01e14     18 5E 06 F1 | 	add	arg01, #24
01e18     01 00 00 FF 
01e1c     B9 FA 85 F1 | 	sub	objptr, ##697
01e20     FD 60 02 FB | 	rdlong	arg02, objptr
01e24     10 FA 05 F1 | 	add	objptr, #16
01e28     FD 76 02 FB | 	rdlong	local06, objptr
01e2c     3B 61 02 F1 | 	add	arg02, local06
01e30                 | ' asm
01e30     2F 61 52 FC | 	wrword	arg02, arg01
01e34     60 5E 06 F6 | 	mov	arg01, #96
01e38     01 00 00 FF 
01e3c     A9 FA 05 F1 | 	add	objptr, ##681
01e40     FD 7A 02 FB | 	rdlong	local08, objptr
01e44     04 00 00 FF 
01e48     EC FA 85 F1 | 	sub	objptr, ##2284
01e4c     3D 5F 02 F1 | 	add	arg01, local08
01e50     1A 5E 06 F1 | 	add	arg01, #26
01e54     01 60 06 F6 | 	mov	arg02, #1
01e58                 | ' asm
01e58     2F 03 58 FC | 	wrword	#1, arg01
01e5c     4C EA BF FD | 	call	#_test
01e60     3C FA 9F FD | 	jmp	#LR__0013
01e64     AF F0 03 F6 | 	mov	ptra, fp
01e68     BA 00 A0 FD | 	call	#popregs_
01e6c                 | _program_ret
01e6c     2D 00 64 FD | 	ret
01e70                 | 
01e70                 | ' 
01e70                 | ' 
01e70                 | ' ''---------- putpixel - put a pixel on the screen
01e70                 | ' 
01e70                 | ' pub putpixel1(x,y,c) |byte b
01e70                 | _hng030rm_spin2_putpixel1
01e70                 | ' 
01e70                 | ' 
01e70                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01e70     00 1E 06 F6 | 	mov	_var01, #0
01e74     00 5E 5E F2 | 	cmps	arg01, #0 wcz
01e78     01 1E 66 36 |  if_ae	neg	_var01, #1
01e7c     00 20 06 F6 | 	mov	_var02, #0
01e80     90 FA 05 F1 | 	add	objptr, #144
01e84     FD 22 02 FB | 	rdlong	_var03, objptr
01e88     05 22 66 F0 | 	shl	_var03, #5
01e8c     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
01e90     01 20 66 C6 |  if_b	neg	_var02, #1
01e94     10 1F 02 F5 | 	and	_var01, _var02
01e98     00 24 06 F6 | 	mov	_var04, #0
01e9c     00 60 5E F2 | 	cmps	arg02, #0 wcz
01ea0     01 24 66 36 |  if_ae	neg	_var04, #1
01ea4     12 1F 02 F5 | 	and	_var01, _var04
01ea8     00 26 06 F6 | 	mov	_var05, #0
01eac     04 FA 05 F1 | 	add	objptr, #4
01eb0     FD 28 02 FB | 	rdlong	_var06, objptr
01eb4     94 FA 85 F1 | 	sub	objptr, #148
01eb8     14 61 5A F2 | 	cmps	arg02, _var06 wcz
01ebc     01 26 66 C6 |  if_b	neg	_var05, #1
01ec0     13 1F CA F7 | 	test	_var01, _var05 wz
01ec4     90 00 90 AD |  if_e	jmp	#LR__0020
01ec8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01ec8     FD 1E 02 FB | 	rdlong	_var01, objptr
01ecc     90 FA 05 F1 | 	add	objptr, #144
01ed0     FD 20 02 FB | 	rdlong	_var02, objptr
01ed4     90 FA 85 F1 | 	sub	objptr, #144
01ed8     02 20 66 F0 | 	shl	_var02, #2
01edc     30 21 02 FD | 	qmul	_var02, arg02
01ee0     18 2A 62 FD | 	getqx	_var07
01ee4     15 1F 02 F1 | 	add	_var01, _var07
01ee8     2F 25 02 F6 | 	mov	_var04, arg01
01eec     03 24 46 F0 | 	shr	_var04, #3
01ef0     12 1F 02 F1 | 	add	_var01, _var04
01ef4     0F 2D C2 FA | 	rdbyte	_var08, _var01
01ef8                 | '     if (c==0)
01ef8     00 62 0E F2 | 	cmp	arg03, #0 wz
01efc     18 00 90 5D |  if_ne	jmp	#LR__0018
01f00                 | '       b:=b & !(1<<(x//8))
01f00     2F 23 52 F6 | 	abs	_var03, arg01 wc
01f04     07 22 06 F5 | 	and	_var03, #7
01f08     11 23 62 C6 |  if_b	neg	_var03, _var03
01f0c     11 21 C2 F9 | 	decod	_var02, _var03
01f10     10 2D 22 F5 | 	andn	_var08, _var02
01f14                 | '     else
01f14     14 00 90 FD | 	jmp	#LR__0019
01f18                 | LR__0018
01f18                 | '       b:=b |(1<<(x//8))
01f18     2F 23 52 F6 | 	abs	_var03, arg01 wc
01f1c     07 22 06 F5 | 	and	_var03, #7
01f20     11 23 62 C6 |  if_b	neg	_var03, _var03
01f24     11 21 C2 F9 | 	decod	_var02, _var03
01f28     10 2D 42 F5 | 	or	_var08, _var02
01f2c                 | LR__0019
01f2c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01f2c     FD 1E 02 FB | 	rdlong	_var01, objptr
01f30     90 FA 05 F1 | 	add	objptr, #144
01f34     FD 20 02 FB | 	rdlong	_var02, objptr
01f38     90 FA 85 F1 | 	sub	objptr, #144
01f3c     02 20 66 F0 | 	shl	_var02, #2
01f40     30 21 02 FD | 	qmul	_var02, arg02
01f44     18 2A 62 FD | 	getqx	_var07
01f48     15 1F 02 F1 | 	add	_var01, _var07
01f4c     03 5E 46 F0 | 	shr	arg01, #3
01f50     2F 1F 02 F1 | 	add	_var01, arg01
01f54     0F 2D 42 FC | 	wrbyte	_var08, _var01
01f58                 | LR__0020
01f58                 | _hng030rm_spin2_putpixel1_ret
01f58     2D 00 64 FD | 	ret
01f5c                 | 
01f5c                 | ' 
01f5c                 | ' 
01f5c                 | ' pub putpixel2(x,y,c) |byte b
01f5c                 | _hng030rm_spin2_putpixel2
01f5c                 | ' 
01f5c                 | ' 
01f5c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01f5c     00 1E 06 F6 | 	mov	_var01, #0
01f60     00 5E 5E F2 | 	cmps	arg01, #0 wcz
01f64     01 1E 66 36 |  if_ae	neg	_var01, #1
01f68     00 20 06 F6 | 	mov	_var02, #0
01f6c     90 FA 05 F1 | 	add	objptr, #144
01f70     FD 22 02 FB | 	rdlong	_var03, objptr
01f74     04 22 66 F0 | 	shl	_var03, #4
01f78     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
01f7c     01 20 66 C6 |  if_b	neg	_var02, #1
01f80     10 1F 02 F5 | 	and	_var01, _var02
01f84     00 24 06 F6 | 	mov	_var04, #0
01f88     00 60 5E F2 | 	cmps	arg02, #0 wcz
01f8c     01 24 66 36 |  if_ae	neg	_var04, #1
01f90     12 1F 02 F5 | 	and	_var01, _var04
01f94     00 26 06 F6 | 	mov	_var05, #0
01f98     04 FA 05 F1 | 	add	objptr, #4
01f9c     FD 28 02 FB | 	rdlong	_var06, objptr
01fa0     94 FA 85 F1 | 	sub	objptr, #148
01fa4     14 61 5A F2 | 	cmps	arg02, _var06 wcz
01fa8     01 26 66 C6 |  if_b	neg	_var05, #1
01fac     13 1F CA F7 | 	test	_var01, _var05 wz
01fb0     90 00 90 AD |  if_e	jmp	#LR__0021
01fb4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01fb4     FD 1E 02 FB | 	rdlong	_var01, objptr
01fb8     90 FA 05 F1 | 	add	objptr, #144
01fbc     FD 20 02 FB | 	rdlong	_var02, objptr
01fc0     90 FA 85 F1 | 	sub	objptr, #144
01fc4     02 20 66 F0 | 	shl	_var02, #2
01fc8     30 21 02 FD | 	qmul	_var02, arg02
01fcc     18 2A 62 FD | 	getqx	_var07
01fd0     15 1F 02 F1 | 	add	_var01, _var07
01fd4     2F 25 02 F6 | 	mov	_var04, arg01
01fd8     02 24 46 F0 | 	shr	_var04, #2
01fdc     12 1F 02 F1 | 	add	_var01, _var04
01fe0     0F 2D C2 FA | 	rdbyte	_var08, _var01
01fe4                 | '     b:=b & !(%11<<((x//4)<<1))
01fe4     2F 23 52 F6 | 	abs	_var03, arg01 wc
01fe8     03 22 06 F5 | 	and	_var03, #3
01fec     11 23 62 C6 |  if_b	neg	_var03, _var03
01ff0     01 22 66 F0 | 	shl	_var03, #1
01ff4     03 20 06 F6 | 	mov	_var02, #3
01ff8     11 21 62 F0 | 	shl	_var02, _var03
01ffc     10 2D 22 F5 | 	andn	_var08, _var02
02000                 | '     b:=b |(c<<((x//4)<<1))
02000     2F 23 52 F6 | 	abs	_var03, arg01 wc
02004     03 22 06 F5 | 	and	_var03, #3
02008     11 23 62 C6 |  if_b	neg	_var03, _var03
0200c     01 22 66 F0 | 	shl	_var03, #1
02010     11 63 62 F0 | 	shl	arg03, _var03
02014     31 2D 42 F5 | 	or	_var08, arg03
02018                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02018     FD 1E 02 FB | 	rdlong	_var01, objptr
0201c     90 FA 05 F1 | 	add	objptr, #144
02020     FD 20 02 FB | 	rdlong	_var02, objptr
02024     90 FA 85 F1 | 	sub	objptr, #144
02028     02 20 66 F0 | 	shl	_var02, #2
0202c     30 21 02 FD | 	qmul	_var02, arg02
02030     18 2A 62 FD | 	getqx	_var07
02034     15 1F 02 F1 | 	add	_var01, _var07
02038     02 5E 46 F0 | 	shr	arg01, #2
0203c     2F 1F 02 F1 | 	add	_var01, arg01
02040     0F 2D 42 FC | 	wrbyte	_var08, _var01
02044                 | LR__0021
02044                 | _hng030rm_spin2_putpixel2_ret
02044     2D 00 64 FD | 	ret
02048                 | 
02048                 | ' 
02048                 | ' 
02048                 | ' pub putpixel4(x,y,c) |byte b
02048                 | _hng030rm_spin2_putpixel4
02048                 | ' 
02048                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02048     00 1E 06 F6 | 	mov	_var01, #0
0204c     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02050     01 1E 66 36 |  if_ae	neg	_var01, #1
02054     00 20 06 F6 | 	mov	_var02, #0
02058     90 FA 05 F1 | 	add	objptr, #144
0205c     FD 22 02 FB | 	rdlong	_var03, objptr
02060     04 22 66 F0 | 	shl	_var03, #4
02064     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02068     01 20 66 C6 |  if_b	neg	_var02, #1
0206c     10 1F 02 F5 | 	and	_var01, _var02
02070     00 24 06 F6 | 	mov	_var04, #0
02074     00 60 5E F2 | 	cmps	arg02, #0 wcz
02078     01 24 66 36 |  if_ae	neg	_var04, #1
0207c     12 1F 02 F5 | 	and	_var01, _var04
02080     00 26 06 F6 | 	mov	_var05, #0
02084     04 FA 05 F1 | 	add	objptr, #4
02088     FD 28 02 FB | 	rdlong	_var06, objptr
0208c     94 FA 85 F1 | 	sub	objptr, #148
02090     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02094     01 26 66 C6 |  if_b	neg	_var05, #1
02098     13 1F CA F7 | 	test	_var01, _var05 wz
0209c     90 00 90 AD |  if_e	jmp	#LR__0022
020a0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
020a0     FD 1E 02 FB | 	rdlong	_var01, objptr
020a4     90 FA 05 F1 | 	add	objptr, #144
020a8     FD 20 02 FB | 	rdlong	_var02, objptr
020ac     90 FA 85 F1 | 	sub	objptr, #144
020b0     02 20 66 F0 | 	shl	_var02, #2
020b4     30 21 02 FD | 	qmul	_var02, arg02
020b8     18 2A 62 FD | 	getqx	_var07
020bc     15 1F 02 F1 | 	add	_var01, _var07
020c0     2F 25 02 F6 | 	mov	_var04, arg01
020c4     01 24 46 F0 | 	shr	_var04, #1
020c8     12 1F 02 F1 | 	add	_var01, _var04
020cc     0F 2D C2 FA | 	rdbyte	_var08, _var01
020d0                 | '     b:=b & !(%1111<<((x//2)<<2))
020d0     2F 23 52 F6 | 	abs	_var03, arg01 wc
020d4     01 22 06 F5 | 	and	_var03, #1
020d8     11 23 62 C6 |  if_b	neg	_var03, _var03
020dc     02 22 66 F0 | 	shl	_var03, #2
020e0     0F 20 06 F6 | 	mov	_var02, #15
020e4     11 21 62 F0 | 	shl	_var02, _var03
020e8     10 2D 22 F5 | 	andn	_var08, _var02
020ec                 | '     b:=b |(c<<((x//2)<<2))
020ec     2F 23 52 F6 | 	abs	_var03, arg01 wc
020f0     01 22 06 F5 | 	and	_var03, #1
020f4     11 23 62 C6 |  if_b	neg	_var03, _var03
020f8     02 22 66 F0 | 	shl	_var03, #2
020fc     11 63 62 F0 | 	shl	arg03, _var03
02100     31 2D 42 F5 | 	or	_var08, arg03
02104                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02104     FD 1E 02 FB | 	rdlong	_var01, objptr
02108     90 FA 05 F1 | 	add	objptr, #144
0210c     FD 20 02 FB | 	rdlong	_var02, objptr
02110     90 FA 85 F1 | 	sub	objptr, #144
02114     02 20 66 F0 | 	shl	_var02, #2
02118     30 21 02 FD | 	qmul	_var02, arg02
0211c     18 2A 62 FD | 	getqx	_var07
02120     15 1F 02 F1 | 	add	_var01, _var07
02124     01 5E 46 F0 | 	shr	arg01, #1
02128     2F 1F 02 F1 | 	add	_var01, arg01
0212c     0F 2D 42 FC | 	wrbyte	_var08, _var01
02130                 | LR__0022
02130                 | _hng030rm_spin2_putpixel4_ret
02130     2D 00 64 FD | 	ret
02134                 | 
02134                 | ' 
02134                 | ' 
02134                 | ' pub putpixel8(x,y,c)
02134                 | _hng030rm_spin2_putpixel8
02134                 | ' 
02134                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02134     00 1E 06 F6 | 	mov	_var01, #0
02138     00 5E 5E F2 | 	cmps	arg01, #0 wcz
0213c     01 1E 66 36 |  if_ae	neg	_var01, #1
02140     00 20 06 F6 | 	mov	_var02, #0
02144     90 FA 05 F1 | 	add	objptr, #144
02148     FD 22 02 FB | 	rdlong	_var03, objptr
0214c     02 22 66 F0 | 	shl	_var03, #2
02150     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02154     01 20 66 C6 |  if_b	neg	_var02, #1
02158     10 1F 02 F5 | 	and	_var01, _var02
0215c     00 24 06 F6 | 	mov	_var04, #0
02160     00 60 5E F2 | 	cmps	arg02, #0 wcz
02164     01 24 66 36 |  if_ae	neg	_var04, #1
02168     12 1F 02 F5 | 	and	_var01, _var04
0216c     00 26 06 F6 | 	mov	_var05, #0
02170     04 FA 05 F1 | 	add	objptr, #4
02174     FD 28 02 FB | 	rdlong	_var06, objptr
02178     94 FA 85 F1 | 	sub	objptr, #148
0217c     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02180     01 26 66 C6 |  if_b	neg	_var05, #1
02184     13 1F CA F7 | 	test	_var01, _var05 wz
02188     28 00 90 AD |  if_e	jmp	#LR__0023
0218c                 | '     byte[buf_ptr+4*cpl*y+x]:=c
0218c     FD 1E 02 FB | 	rdlong	_var01, objptr
02190     90 FA 05 F1 | 	add	objptr, #144
02194     FD 20 02 FB | 	rdlong	_var02, objptr
02198     90 FA 85 F1 | 	sub	objptr, #144
0219c     02 20 66 F0 | 	shl	_var02, #2
021a0     30 21 02 FD | 	qmul	_var02, arg02
021a4     18 2A 62 FD | 	getqx	_var07
021a8     15 1F 02 F1 | 	add	_var01, _var07
021ac     2F 1F 02 F1 | 	add	_var01, arg01
021b0     0F 63 42 FC | 	wrbyte	arg03, _var01
021b4                 | LR__0023
021b4                 | _hng030rm_spin2_putpixel8_ret
021b4     2D 00 64 FD | 	ret
021b8                 | 
021b8                 | ' 
021b8                 | ' '*************************************************************************
021b8                 | ' '                                                                        *
021b8                 | ' '  VBlank functions                                                      *
021b8                 | ' '                                                                        *
021b8                 | ' '*************************************************************************
021b8                 | ' 
021b8                 | ' pub waitvbl(amount) | i
021b8                 | _hng030rm_spin2_waitvbl
021b8     04 5A 05 F6 | 	mov	COUNT_, #4
021bc     B0 00 A0 FD | 	call	#pushregs_
021c0     2F 6D 02 F6 | 	mov	local01, arg01
021c4                 | ' 
021c4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
021c4                 | ' 
021c4                 | ' repeat i from 1 to amount
021c4     01 6E 06 F6 | 	mov	local02, #1
021c8     01 6C 5E F2 | 	cmps	local01, #1 wcz
021cc     01 70 06 16 |  if_a	mov	local03, #1
021d0     01 70 66 E6 |  if_be	neg	local03, #1
021d4     38 6D 02 F1 | 	add	local01, local03
021d8                 | LR__0024
021d8                 | '   repeat until vblank==0
021d8                 | LR__0025
021d8     40 FA 05 F1 | 	add	objptr, #64
021dc     FD 72 0A FB | 	rdlong	local04, objptr wz
021e0     40 FA 85 F1 | 	sub	objptr, #64
021e4     0C 00 90 AD |  if_e	jmp	#LR__0026
021e8                 | '     waitus(100)
021e8     64 5E 06 F6 | 	mov	arg01, #100
021ec     78 43 B0 FD | 	call	#__system___waitus
021f0     E4 FF 9F FD | 	jmp	#LR__0025
021f4                 | LR__0026
021f4                 | '   repeat until vblank==1
021f4                 | LR__0027
021f4     40 FA 05 F1 | 	add	objptr, #64
021f8     FD 72 02 FB | 	rdlong	local04, objptr
021fc     40 FA 85 F1 | 	sub	objptr, #64
02200     01 72 0E F2 | 	cmp	local04, #1 wz
02204     0C 00 90 AD |  if_e	jmp	#LR__0028
02208                 | '     waitus(100)
02208     64 5E 06 F6 | 	mov	arg01, #100
0220c     58 43 B0 FD | 	call	#__system___waitus
02210     E0 FF 9F FD | 	jmp	#LR__0027
02214                 | LR__0028
02214     38 6F 02 F1 | 	add	local02, local03
02218     36 6F 0A F2 | 	cmp	local02, local01 wz
0221c     B8 FF 9F 5D |  if_ne	jmp	#LR__0024
02220     AF F0 03 F6 | 	mov	ptra, fp
02224     BA 00 A0 FD | 	call	#popregs_
02228                 | _hng030rm_spin2_waitvbl_ret
02228     2D 00 64 FD | 	ret
0222c                 | 
0222c                 | ' 
0222c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
0222c                 | ' 
0222c                 | ' pub setbordercolor(r,g,b) | color
0222c                 | _hng030rm_spin2_setbordercolor
0222c                 | ' 
0222c                 | ' color:=r<<24+g<<16+b<<8
0222c     18 5E 66 F0 | 	shl	arg01, #24
02230     10 60 66 F0 | 	shl	arg02, #16
02234     30 5F 02 F1 | 	add	arg01, arg02
02238     08 62 66 F0 | 	shl	arg03, #8
0223c     31 5F 02 F1 | 	add	arg01, arg03
02240                 | ' bordercolor:=color
02240     2C FA 05 F1 | 	add	objptr, #44
02244     FD 5E 62 FC | 	wrlong	arg01, objptr
02248     2C FA 85 F1 | 	sub	objptr, #44
0224c                 | _hng030rm_spin2_setbordercolor_ret
0224c     2D 00 64 FD | 	ret
02250                 | 
02250                 | ' 
02250                 | ' 
02250                 | ' '*************************************************************************
02250                 | ' '                                                                        *
02250                 | ' '  Text functions                                                        *
02250                 | ' '                                                                        *
02250                 | ' '*************************************************************************
02250                 | ' 
02250                 | ' ''---------- Clear the screen, set its foreground/background color
02250                 | ' 
02250                 | ' pub cls(fc,bc)   :c
02250                 | _hng030rm_spin2_cls
02250     06 5A 05 F6 | 	mov	COUNT_, #6
02254     B0 00 A0 FD | 	call	#pushregs_
02258     2F 6D 02 F6 | 	mov	local01, arg01
0225c     30 6F 02 F6 | 	mov	local02, arg02
02260                 | ' 
02260                 | ' if (graphmode<512)
02260     C4 FA 05 F1 | 	add	objptr, #196
02264     FD 70 02 FB | 	rdlong	local03, objptr
02268     C4 FA 85 F1 | 	sub	objptr, #196
0226c     01 00 00 FF 
02270     00 70 5E F2 | 	cmps	local03, ##512 wcz
02274     34 00 90 3D |  if_ae	jmp	#LR__0029
02278                 | '   c:=fc<<24+bc<<16+$20
02278     36 73 02 F6 | 	mov	local04, local01
0227c     18 72 66 F0 | 	shl	local04, #24
02280     37 75 02 F6 | 	mov	local05, local02
02284     10 74 66 F0 | 	shl	local05, #16
02288     3A 73 02 F1 | 	add	local04, local05
0228c     20 72 06 F1 | 	add	local04, #32
02290                 | '   longfill(buf_ptr,c,buflen)
02290     FD 5E 02 FB | 	rdlong	arg01, objptr
02294     30 FA 05 F1 | 	add	objptr, #48
02298     FD 62 02 FB | 	rdlong	arg03, objptr
0229c     30 FA 85 F1 | 	sub	objptr, #48
022a0     39 61 02 F6 | 	mov	arg02, local04
022a4     A8 00 A0 FD | 	call	#\builtin_longfill_
022a8                 | ' else
022a8     AC 00 90 FD | 	jmp	#LR__0035
022ac                 | LR__0029
022ac                 | '   if (graphmode & 48) ==48
022ac     C4 FA 05 F1 | 	add	objptr, #196
022b0     FD 70 02 FB | 	rdlong	local03, objptr
022b4     C4 FA 85 F1 | 	sub	objptr, #196
022b8     30 70 06 F5 | 	and	local03, #48
022bc     30 70 0E F2 | 	cmp	local03, #48 wz
022c0                 | '     c:=bc
022c0     37 73 02 A6 |  if_e	mov	local04, local02
022c4     74 00 90 AD |  if_e	jmp	#LR__0034
022c8                 | '   elseif (graphmode & 48) ==32
022c8     C4 FA 05 F1 | 	add	objptr, #196
022cc     FD 70 02 FB | 	rdlong	local03, objptr
022d0     C4 FA 85 F1 | 	sub	objptr, #196
022d4     30 70 06 F5 | 	and	local03, #48
022d8     20 70 0E F2 | 	cmp	local03, #32 wz
022dc     10 00 90 5D |  if_ne	jmp	#LR__0030
022e0                 | '     c:=bc<<4+bc
022e0     37 73 02 F6 | 	mov	local04, local02
022e4     04 72 66 F0 | 	shl	local04, #4
022e8     37 73 02 F1 | 	add	local04, local02
022ec     4C 00 90 FD | 	jmp	#LR__0033
022f0                 | LR__0030
022f0                 | '   elseif (graphmode & 48) ==16
022f0     C4 FA 05 F1 | 	add	objptr, #196
022f4     FD 70 02 FB | 	rdlong	local03, objptr
022f8     C4 FA 85 F1 | 	sub	objptr, #196
022fc     30 70 06 F5 | 	and	local03, #48
02300     10 70 0E F2 | 	cmp	local03, #16 wz
02304     28 00 90 5D |  if_ne	jmp	#LR__0031
02308                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02308     37 73 02 F6 | 	mov	local04, local02
0230c     06 72 66 F0 | 	shl	local04, #6
02310     37 75 02 F6 | 	mov	local05, local02
02314     04 74 66 F0 | 	shl	local05, #4
02318     3A 73 02 F1 | 	add	local04, local05
0231c     37 77 02 F6 | 	mov	local06, local02
02320     02 76 66 F0 | 	shl	local06, #2
02324     3B 73 02 F1 | 	add	local04, local06
02328     37 73 02 F1 | 	add	local04, local02
0232c                 | '   else
0232c     0C 00 90 FD | 	jmp	#LR__0032
02330                 | LR__0031
02330                 | '     if bc==1
02330     01 6E 0E F2 | 	cmp	local02, #1 wz
02334                 | '       c:=255
02334     FF 72 06 A6 |  if_e	mov	local04, #255
02338                 | '     else
02338                 | '       c:=0
02338     00 72 06 56 |  if_ne	mov	local04, #0
0233c                 | LR__0032
0233c                 | LR__0033
0233c                 | LR__0034
0233c                 | '   bytefill(buf_ptr,c,buflen*4)
0233c     FD 5E 02 FB | 	rdlong	arg01, objptr
02340     30 FA 05 F1 | 	add	objptr, #48
02344     FD 62 02 FB | 	rdlong	arg03, objptr
02348     30 FA 85 F1 | 	sub	objptr, #48
0234c     02 62 66 F0 | 	shl	arg03, #2
02350     39 61 02 F6 | 	mov	arg02, local04
02354     A0 00 A0 FD | 	call	#\builtin_bytefill_
02358                 | LR__0035
02358                 | ' setwritecolors(fc,bc)
02358                 | ' 
02358                 | ' 
02358                 | ' write_color:=ff
02358     38 FA 05 F1 | 	add	objptr, #56
0235c     FD 6C 62 FC | 	wrlong	local01, objptr
02360                 | ' write_background:=bb
02360     04 FA 05 F1 | 	add	objptr, #4
02364     FD 6E 62 FC | 	wrlong	local02, objptr
02368                 | ' cursor_x:=0
02368     08 FA 85 F1 | 	sub	objptr, #8
0236c     FD 00 48 FC | 	wrbyte	#0, objptr
02370                 | ' cursor_y:=0
02370     01 FA 05 F1 | 	add	objptr, #1
02374     FD 00 48 FC | 	wrbyte	#0, objptr
02378     35 FA 85 F1 | 	sub	objptr, #53
0237c     39 19 02 F6 | 	mov	result1, local04
02380     AF F0 03 F6 | 	mov	ptra, fp
02384     BA 00 A0 FD | 	call	#popregs_
02388                 | _hng030rm_spin2_cls_ret
02388     2D 00 64 FD | 	ret
0238c                 | 
0238c                 | ' 
0238c                 | ' ''--------- Output a string at position x,y without changing colors
0238c                 | ' 
0238c                 | ' pub outtextxy(x,y,text) | iii
0238c                 | _hng030rm_spin2_outtextxy
0238c     0F 5A 05 F6 | 	mov	COUNT_, #15
02390     B0 00 A0 FD | 	call	#pushregs_
02394     2F 6D 02 F6 | 	mov	local01, arg01
02398                 | ' 
02398                 | ' repeat iii from 0 to strsize(text)-1
02398     00 6E 06 F6 | 	mov	local02, #0
0239c     31 5F 02 F6 | 	mov	arg01, arg03
023a0     00 70 06 F6 | 	mov	local03, #0
023a4     68 DC 9F FE | 	loc	pa,	#(@LR__0037-@LR__0036)
023a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
023ac                 | LR__0036
023ac     2F 73 CA FA | 	rdbyte	local04, arg01 wz
023b0     01 70 06 51 |  if_ne	add	local03, #1
023b4     01 5E 06 51 |  if_ne	add	arg01, #1
023b8     F0 FF 9F 5D |  if_ne	jmp	#LR__0036
023bc                 | LR__0037
023bc     38 19 02 F6 | 	mov	result1, local03
023c0     0C 75 02 F6 | 	mov	local05, result1
023c4     01 74 86 F1 | 	sub	local05, #1
023c8     00 74 5E F2 | 	cmps	local05, #0 wcz
023cc     01 76 06 16 |  if_a	mov	local06, #1
023d0     01 76 66 E6 |  if_be	neg	local06, #1
023d4     3B 75 02 F1 | 	add	local05, local06
023d8     9C DC 9F FE | 	loc	pa,	#(@LR__0039-@LR__0038)
023dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
023e0                 | LR__0038
023e0                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
023e0     FD 78 02 FB | 	rdlong	local07, objptr
023e4     90 FA 05 F1 | 	add	objptr, #144
023e8     FD 7A 02 FB | 	rdlong	local08, objptr
023ec     90 FA 85 F1 | 	sub	objptr, #144
023f0     30 7B 02 FD | 	qmul	local08, arg02
023f4     18 7C 62 FD | 	getqx	local09
023f8     36 7D 02 F1 | 	add	local09, local01
023fc     37 7D 02 F1 | 	add	local09, local02
02400     02 7C 66 F0 | 	shl	local09, #2
02404     3E 79 02 F1 | 	add	local07, local09
02408     3C 7F 02 FB | 	rdlong	local10, local07
0240c     FF 7E 26 F5 | 	andn	local10, #255
02410     31 81 02 F6 | 	mov	local11, arg03
02414     37 81 02 F1 | 	add	local11, local02
02418     40 83 C2 FA | 	rdbyte	local12, local11
0241c     41 7F 42 F5 | 	or	local10, local12
02420     FD 84 02 FB | 	rdlong	local13, objptr
02424     90 FA 05 F1 | 	add	objptr, #144
02428     FD 86 02 FB | 	rdlong	local14, objptr
0242c     90 FA 85 F1 | 	sub	objptr, #144
02430     30 87 02 FD | 	qmul	local14, arg02
02434     18 88 62 FD | 	getqx	local15
02438     36 89 02 F1 | 	add	local15, local01
0243c     37 89 02 F1 | 	add	local15, local02
02440     02 88 66 F0 | 	shl	local15, #2
02444     44 85 02 F1 | 	add	local13, local15
02448     42 7F 62 FC | 	wrlong	local10, local13
0244c     3B 6F 02 F1 | 	add	local02, local06
02450     3A 6F 0A F2 | 	cmp	local02, local05 wz
02454     88 FF 9F 5D |  if_ne	jmp	#LR__0038
02458                 | LR__0039
02458     AF F0 03 F6 | 	mov	ptra, fp
0245c     BA 00 A0 FD | 	call	#popregs_
02460                 | _hng030rm_spin2_outtextxy_ret
02460     2D 00 64 FD | 	ret
02464                 | 
02464                 | ' 
02464                 | ' ''---------- Output a char at the cursor position, move the cursor
02464                 | ' 
02464                 | ' pub putchar(achar) | c,x,y
02464                 | _hng030rm_spin2_putchar
02464     0F 5A 05 F6 | 	mov	COUNT_, #15
02468     B0 00 A0 FD | 	call	#pushregs_
0246c     2F 6D 02 F6 | 	mov	local01, arg01
02470                 | ' 
02470                 | ' if achar==10
02470     0A 6C 0E F2 | 	cmp	local01, #10 wz
02474     08 00 90 5D |  if_ne	jmp	#LR__0040
02478                 | '   crlf()
02478     A0 04 B0 FD | 	call	#_hng030rm_spin2_crlf
0247c                 | ' else  
0247c     64 01 90 FD | 	jmp	#LR__0043
02480                 | LR__0040
02480                 | '   x:=cursor_x
02480     34 FA 05 F1 | 	add	objptr, #52
02484     FD 6E C2 FA | 	rdbyte	local02, objptr
02488                 | '   y:=cursor_y
02488     01 FA 05 F1 | 	add	objptr, #1
0248c     FD 70 C2 FA | 	rdbyte	local03, objptr
02490                 | '   c:=write_color<<24+write_background<<16
02490     03 FA 05 F1 | 	add	objptr, #3
02494     FD 72 02 FB | 	rdlong	local04, objptr
02498     18 72 66 F0 | 	shl	local04, #24
0249c     04 FA 05 F1 | 	add	objptr, #4
024a0     FD 74 02 FB | 	rdlong	local05, objptr
024a4     3C FA 85 F1 | 	sub	objptr, #60
024a8     10 74 66 F0 | 	shl	local05, #16
024ac     3A 73 02 F1 | 	add	local04, local05
024b0                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
024b0     FD 76 02 FB | 	rdlong	local06, objptr
024b4     90 FA 05 F1 | 	add	objptr, #144
024b8     FD 78 02 FB | 	rdlong	local07, objptr
024bc     90 FA 85 F1 | 	sub	objptr, #144
024c0     38 79 02 FD | 	qmul	local07, local03
024c4     18 7A 62 FD | 	getqx	local08
024c8     37 7B 02 F1 | 	add	local08, local02
024cc     02 7A 66 F0 | 	shl	local08, #2
024d0     3D 77 02 F1 | 	add	local06, local08
024d4     3B 7D 02 FB | 	rdlong	local09, local06
024d8     7F 00 00 FF 
024dc     FF 7D 06 F5 | 	and	local09, ##65535
024e0     39 7D 42 F5 | 	or	local09, local04
024e4     FD 7E 02 FB | 	rdlong	local10, objptr
024e8     90 FA 05 F1 | 	add	objptr, #144
024ec     FD 80 02 FB | 	rdlong	local11, objptr
024f0     90 FA 85 F1 | 	sub	objptr, #144
024f4     38 81 02 FD | 	qmul	local11, local03
024f8     18 82 62 FD | 	getqx	local12
024fc     37 83 02 F1 | 	add	local12, local02
02500     02 82 66 F0 | 	shl	local12, #2
02504     41 7F 02 F1 | 	add	local10, local12
02508     3F 7D 62 FC | 	wrlong	local09, local10
0250c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
0250c     FD 76 02 FB | 	rdlong	local06, objptr
02510     90 FA 05 F1 | 	add	objptr, #144
02514     FD 78 02 FB | 	rdlong	local07, objptr
02518     90 FA 85 F1 | 	sub	objptr, #144
0251c     38 79 02 FD | 	qmul	local07, local03
02520     18 7A 62 FD | 	getqx	local08
02524     37 7B 02 F1 | 	add	local08, local02
02528     02 7A 66 F0 | 	shl	local08, #2
0252c     3D 77 02 F1 | 	add	local06, local08
02530     3B 7D 02 FB | 	rdlong	local09, local06
02534     FF 7C 26 F5 | 	andn	local09, #255
02538     36 7F 02 F6 | 	mov	local10, local01
0253c     FF 7E 06 F5 | 	and	local10, #255
02540     3F 7D 42 F5 | 	or	local09, local10
02544     FD 84 02 FB | 	rdlong	local13, objptr
02548     90 FA 05 F1 | 	add	objptr, #144
0254c     FD 86 02 FB | 	rdlong	local14, objptr
02550     38 87 02 FD | 	qmul	local14, local03
02554     18 88 62 FD | 	getqx	local15
02558     37 89 02 F1 | 	add	local15, local02
0255c     02 88 66 F0 | 	shl	local15, #2
02560     44 85 02 F1 | 	add	local13, local15
02564     42 7D 62 FC | 	wrlong	local09, local13
02568                 | '   cursor_x+=1
02568     5C FA 85 F1 | 	sub	objptr, #92
0256c     FD 7C C2 FA | 	rdbyte	local09, objptr
02570     01 7C 06 F1 | 	add	local09, #1
02574     FD 7C 42 FC | 	wrbyte	local09, objptr
02578                 | '   if cursor_x==cpl
02578     FD 7C C2 FA | 	rdbyte	local09, objptr
0257c     5C FA 05 F1 | 	add	objptr, #92
02580     FD 74 02 FB | 	rdlong	local05, objptr
02584     90 FA 85 F1 | 	sub	objptr, #144
02588     3A 7D 0A F2 | 	cmp	local09, local05 wz
0258c     54 00 90 5D |  if_ne	jmp	#LR__0042
02590                 | '     cursor_x:=0
02590     34 FA 05 F1 | 	add	objptr, #52
02594     FD 00 48 FC | 	wrbyte	#0, objptr
02598                 | '     cursor_y+=1
02598     01 FA 05 F1 | 	add	objptr, #1
0259c     FD 7C C2 FA | 	rdbyte	local09, objptr
025a0     01 7C 06 F1 | 	add	local09, #1
025a4     FD 7C 42 FC | 	wrbyte	local09, objptr
025a8                 | '     if cursor_y>lines-1
025a8     5F FA 05 F1 | 	add	objptr, #95
025ac     FD 7C 02 FB | 	rdlong	local09, objptr
025b0     01 7C 86 F1 | 	sub	local09, #1
025b4     5F FA 85 F1 | 	sub	objptr, #95
025b8     FD 74 C2 FA | 	rdbyte	local05, objptr
025bc     35 FA 85 F1 | 	sub	objptr, #53
025c0     3E 75 5A F2 | 	cmps	local05, local09 wcz
025c4     1C 00 90 ED |  if_be	jmp	#LR__0041
025c8                 | '       scrollup()
025c8     7C 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
025cc                 | '       cursor_y:=lines-1
025cc     94 FA 05 F1 | 	add	objptr, #148
025d0     FD 7C 02 FB | 	rdlong	local09, objptr
025d4     01 7C 86 F1 | 	sub	local09, #1
025d8     5F FA 85 F1 | 	sub	objptr, #95
025dc     FD 7C 42 FC | 	wrbyte	local09, objptr
025e0     35 FA 85 F1 | 	sub	objptr, #53
025e4                 | LR__0041
025e4                 | LR__0042
025e4                 | LR__0043
025e4     AF F0 03 F6 | 	mov	ptra, fp
025e8     BA 00 A0 FD | 	call	#popregs_
025ec                 | _hng030rm_spin2_putchar_ret
025ec     2D 00 64 FD | 	ret
025f0                 | 
025f0                 | ' 
025f0                 | ' ''--------- Output a string at the cursor position, move the cursor
025f0                 | ' 
025f0                 | ' pub write(text) | iii,c,ncx,ncy
025f0                 | _hng030rm_spin2_write
025f0     16 5A 05 F6 | 	mov	COUNT_, #22
025f4     B0 00 A0 FD | 	call	#pushregs_
025f8     2F 6D 02 F6 | 	mov	local01, arg01
025fc                 | ' 
025fc                 | ' c:=write_color<<24+write_background<<16
025fc     38 FA 05 F1 | 	add	objptr, #56
02600     FD 6E 02 FB | 	rdlong	local02, objptr
02604     18 6E 66 F0 | 	shl	local02, #24
02608     04 FA 05 F1 | 	add	objptr, #4
0260c     FD 70 02 FB | 	rdlong	local03, objptr
02610     10 70 66 F0 | 	shl	local03, #16
02614     38 6F 02 F1 | 	add	local02, local03
02618                 | ' 'debug(uhex_long(write_color))
02618                 | ' ncy:=cursor_y
02618     07 FA 85 F1 | 	sub	objptr, #7
0261c     FD 72 C2 FA | 	rdbyte	local04, objptr
02620                 | ' ncx:=cursor_x+strsize(text)
02620     01 FA 85 F1 | 	sub	objptr, #1
02624     FD 74 C2 FA | 	rdbyte	local05, objptr
02628     34 FA 85 F1 | 	sub	objptr, #52
0262c     36 5F 02 F6 | 	mov	arg01, local01
02630     00 76 06 F6 | 	mov	local06, #0
02634     D8 D9 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
02638     93 00 A0 FD | 	call	#FCACHE_LOAD_
0263c                 | LR__0044
0263c     2F 79 CA FA | 	rdbyte	local07, arg01 wz
02640     01 76 06 51 |  if_ne	add	local06, #1
02644     01 5E 06 51 |  if_ne	add	arg01, #1
02648     F0 FF 9F 5D |  if_ne	jmp	#LR__0044
0264c                 | LR__0045
0264c     3B 19 02 F6 | 	mov	result1, local06
02650     3B 75 02 F1 | 	add	local05, local06
02654     3A 7B 02 F6 | 	mov	local08, local05
02658     D4 D9 9F FE | 	loc	pa,	#(@LR__0047-@LR__0046)
0265c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02660                 | ' repeat while ncx>cpl-1
02660                 | LR__0046
02660     90 FA 05 F1 | 	add	objptr, #144
02664     FD 74 02 FB | 	rdlong	local05, objptr
02668     90 FA 85 F1 | 	sub	objptr, #144
0266c     01 74 86 F1 | 	sub	local05, #1
02670     3A 7B 5A F2 | 	cmps	local08, local05 wcz
02674     18 00 90 ED |  if_be	jmp	#LR__0048
02678                 | '   ncx-=cpl
02678     90 FA 05 F1 | 	add	objptr, #144
0267c     FD 7C 02 FB | 	rdlong	local09, objptr
02680     90 FA 85 F1 | 	sub	objptr, #144
02684     3E 7B 82 F1 | 	sub	local08, local09
02688                 | '   ncy+=1
02688     01 72 06 F1 | 	add	local04, #1
0268c     D0 FF 9F FD | 	jmp	#LR__0046
02690                 | LR__0047
02690                 | LR__0048
02690                 | ' repeat while ncy>lines-1
02690                 | LR__0049
02690     94 FA 05 F1 | 	add	objptr, #148
02694     FD 74 02 FB | 	rdlong	local05, objptr
02698     94 FA 85 F1 | 	sub	objptr, #148
0269c     01 74 86 F1 | 	sub	local05, #1
026a0     3A 73 5A F2 | 	cmps	local04, local05 wcz
026a4     20 00 90 ED |  if_be	jmp	#LR__0050
026a8                 | '   ncy-=1
026a8     01 72 86 F1 | 	sub	local04, #1
026ac                 | '   scrollup()
026ac     98 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
026b0                 | '   cursor_y-=1
026b0     35 FA 05 F1 | 	add	objptr, #53
026b4     FD 74 C2 FA | 	rdbyte	local05, objptr
026b8     01 74 86 F1 | 	sub	local05, #1
026bc     FD 74 42 FC | 	wrbyte	local05, objptr
026c0     35 FA 85 F1 | 	sub	objptr, #53
026c4     C8 FF 9F FD | 	jmp	#LR__0049
026c8                 | LR__0050
026c8                 | ' 
026c8                 | ' repeat iii from 0 to strsize(text)-1
026c8     00 7E 06 F6 | 	mov	local10, #0
026cc     36 5F 02 F6 | 	mov	arg01, local01
026d0     00 76 06 F6 | 	mov	local06, #0
026d4     38 D9 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
026d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
026dc                 | LR__0051
026dc     2F 79 CA FA | 	rdbyte	local07, arg01 wz
026e0     01 76 06 51 |  if_ne	add	local06, #1
026e4     01 5E 06 51 |  if_ne	add	arg01, #1
026e8     F0 FF 9F 5D |  if_ne	jmp	#LR__0051
026ec                 | LR__0052
026ec     3B 19 02 F6 | 	mov	result1, local06
026f0     0C 81 02 F6 | 	mov	local11, result1
026f4     01 80 86 F1 | 	sub	local11, #1
026f8     00 80 5E F2 | 	cmps	local11, #0 wcz
026fc     01 70 06 16 |  if_a	mov	local03, #1
02700     01 70 66 E6 |  if_be	neg	local03, #1
02704     38 81 02 F1 | 	add	local11, local03
02708     84 D9 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
0270c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02710                 | LR__0053
02710                 | ' 
02710                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02710     FD 82 02 FB | 	rdlong	local12, objptr
02714     90 FA 05 F1 | 	add	objptr, #144
02718     FD 84 02 FB | 	rdlong	local13, objptr
0271c     5B FA 85 F1 | 	sub	objptr, #91
02720     FD 86 C2 FA | 	rdbyte	local14, objptr
02724     43 85 02 FD | 	qmul	local13, local14
02728     18 88 62 FD | 	getqx	local15
0272c     01 FA 85 F1 | 	sub	objptr, #1
02730     FD 8A C2 FA | 	rdbyte	local16, objptr
02734     34 FA 85 F1 | 	sub	objptr, #52
02738     45 89 02 F1 | 	add	local15, local16
0273c     3F 89 02 F1 | 	add	local15, local10
02740     02 88 66 F0 | 	shl	local15, #2
02744     44 83 02 F1 | 	add	local12, local15
02748     41 8D 02 FB | 	rdlong	local17, local12
0274c     7F 00 00 FF 
02750     FF 8D 06 F5 | 	and	local17, ##65535
02754     37 8D 42 F5 | 	or	local17, local02
02758     FD 8E 02 FB | 	rdlong	local18, objptr
0275c     90 FA 05 F1 | 	add	objptr, #144
02760     FD 90 02 FB | 	rdlong	local19, objptr
02764     5B FA 85 F1 | 	sub	objptr, #91
02768     FD 92 C2 FA | 	rdbyte	local20, objptr
0276c     49 91 02 FD | 	qmul	local19, local20
02770     18 94 62 FD | 	getqx	local21
02774     01 FA 85 F1 | 	sub	objptr, #1
02778     FD 96 C2 FA | 	rdbyte	local22, objptr
0277c     34 FA 85 F1 | 	sub	objptr, #52
02780     4B 95 02 F1 | 	add	local21, local22
02784     3F 95 02 F1 | 	add	local21, local10
02788     02 94 66 F0 | 	shl	local21, #2
0278c     4A 8F 02 F1 | 	add	local18, local21
02790     47 8D 62 FC | 	wrlong	local17, local18
02794     38 7F 02 F1 | 	add	local10, local03
02798     40 7F 0A F2 | 	cmp	local10, local11 wz
0279c     70 FF 9F 5D |  if_ne	jmp	#LR__0053
027a0                 | LR__0054
027a0                 | ' 
027a0                 | ' outtextxy(cursor_x,cursor_y,text)
027a0     34 FA 05 F1 | 	add	objptr, #52
027a4     FD 5E C2 FA | 	rdbyte	arg01, objptr
027a8     01 FA 05 F1 | 	add	objptr, #1
027ac     FD 60 C2 FA | 	rdbyte	arg02, objptr
027b0     35 FA 85 F1 | 	sub	objptr, #53
027b4     36 63 02 F6 | 	mov	arg03, local01
027b8     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
027bc                 | ' 
027bc                 | ' cursor_x:=ncx
027bc     34 FA 05 F1 | 	add	objptr, #52
027c0     FD 7A 42 FC | 	wrbyte	local08, objptr
027c4                 | ' cursor_y:=ncy
027c4     01 FA 05 F1 | 	add	objptr, #1
027c8     FD 72 42 FC | 	wrbyte	local04, objptr
027cc     35 FA 85 F1 | 	sub	objptr, #53
027d0     AF F0 03 F6 | 	mov	ptra, fp
027d4     BA 00 A0 FD | 	call	#popregs_
027d8                 | _hng030rm_spin2_write_ret
027d8     2D 00 64 FD | 	ret
027dc                 | 
027dc                 | ' 
027dc                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
027dc                 | ' 
027dc                 | ' pub writeln(text)
027dc                 | _hng030rm_spin2_writeln
027dc     02 5A 05 F6 | 	mov	COUNT_, #2
027e0     B0 00 A0 FD | 	call	#pushregs_
027e4                 | ' 
027e4                 | ' write(text)
027e4     08 FE BF FD | 	call	#_hng030rm_spin2_write
027e8                 | ' cursor_x:=0
027e8     34 FA 05 F1 | 	add	objptr, #52
027ec     FD 00 48 FC | 	wrbyte	#0, objptr
027f0                 | ' cursor_y+=1
027f0     01 FA 05 F1 | 	add	objptr, #1
027f4     FD 6C C2 FA | 	rdbyte	local01, objptr
027f8     01 6C 06 F1 | 	add	local01, #1
027fc     FD 6C 42 FC | 	wrbyte	local01, objptr
02800                 | ' if (cursor_y>lines-1)
02800     5F FA 05 F1 | 	add	objptr, #95
02804     FD 6C 02 FB | 	rdlong	local01, objptr
02808     01 6C 86 F1 | 	sub	local01, #1
0280c     5F FA 85 F1 | 	sub	objptr, #95
02810     FD 6E C2 FA | 	rdbyte	local02, objptr
02814     35 FA 85 F1 | 	sub	objptr, #53
02818     36 6F 5A F2 | 	cmps	local02, local01 wcz
0281c     1C 00 90 ED |  if_be	jmp	#LR__0055
02820                 | '   scrollup()
02820     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
02824                 | '   cursor_y:=lines-1
02824     94 FA 05 F1 | 	add	objptr, #148
02828     FD 6C 02 FB | 	rdlong	local01, objptr
0282c     01 6C 86 F1 | 	sub	local01, #1
02830     5F FA 85 F1 | 	sub	objptr, #95
02834     FD 6C 42 FC | 	wrbyte	local01, objptr
02838     35 FA 85 F1 | 	sub	objptr, #53
0283c                 | LR__0055
0283c     AF F0 03 F6 | 	mov	ptra, fp
02840     BA 00 A0 FD | 	call	#popregs_
02844                 | _hng030rm_spin2_writeln_ret
02844     2D 00 64 FD | 	ret
02848                 | 
02848                 | ' 
02848                 | ' ''-----------  Scroll the screen one line up
02848                 | ' 
02848                 | ' pub scrollup() | i
02848                 | _hng030rm_spin2_scrollup
02848     0D 5A 05 F6 | 	mov	COUNT_, #13
0284c     B0 00 A0 FD | 	call	#pushregs_
02850                 | ' 
02850                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02850     FD 5E 02 FB | 	rdlong	arg01, objptr
02854     2F 61 02 F6 | 	mov	arg02, arg01
02858     90 FA 05 F1 | 	add	objptr, #144
0285c     FD 6C 02 FB | 	rdlong	local01, objptr
02860     02 6C 66 F0 | 	shl	local01, #2
02864     36 61 02 F1 | 	add	arg02, local01
02868     60 FA 85 F1 | 	sub	objptr, #96
0286c     FD 62 02 FB | 	rdlong	arg03, objptr
02870     60 FA 05 F1 | 	add	objptr, #96
02874     FD 6E 02 FB | 	rdlong	local02, objptr
02878     90 FA 85 F1 | 	sub	objptr, #144
0287c     37 63 82 F1 | 	sub	arg03, local02
02880     BC 39 B0 FD | 	call	#__system__longmove
02884                 | ' repeat i from buflen-cpl to buflen-1
02884     30 FA 05 F1 | 	add	objptr, #48
02888     FD 70 02 FB | 	rdlong	local03, objptr
0288c     60 FA 05 F1 | 	add	objptr, #96
02890     FD 72 02 FB | 	rdlong	local04, objptr
02894     39 71 82 F1 | 	sub	local03, local04
02898     60 FA 85 F1 | 	sub	objptr, #96
0289c     FD 74 02 FB | 	rdlong	local05, objptr
028a0     01 74 86 F1 | 	sub	local05, #1
028a4     FD 76 02 FB | 	rdlong	local06, objptr
028a8     60 FA 05 F1 | 	add	objptr, #96
028ac     FD 78 02 FB | 	rdlong	local07, objptr
028b0     90 FA 85 F1 | 	sub	objptr, #144
028b4     3C 77 82 F1 | 	sub	local06, local07
028b8     3B 75 5A F2 | 	cmps	local05, local06 wcz
028bc     01 7A 06 16 |  if_a	mov	local08, #1
028c0     01 7A 66 E6 |  if_be	neg	local08, #1
028c4     3D 75 02 F1 | 	add	local05, local08
028c8     74 D7 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
028cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
028d0                 | LR__0056
028d0                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
028d0     FD 7C 02 FB | 	rdlong	local09, objptr
028d4     38 7F 02 F6 | 	mov	local10, local03
028d8     02 7E 66 F0 | 	shl	local10, #2
028dc     3F 7D 02 F1 | 	add	local09, local10
028e0     3E 81 02 FB | 	rdlong	local11, local09
028e4     80 FF 7F FF 
028e8     00 80 06 F5 | 	and	local11, ##-65536
028ec     20 80 46 F5 | 	or	local11, #32
028f0     FD 82 02 FB | 	rdlong	local12, objptr
028f4     38 85 02 F6 | 	mov	local13, local03
028f8     02 84 66 F0 | 	shl	local13, #2
028fc     42 83 02 F1 | 	add	local12, local13
02900     41 81 62 FC | 	wrlong	local11, local12
02904     3D 71 02 F1 | 	add	local03, local08
02908     3A 71 0A F2 | 	cmp	local03, local05 wz
0290c     C0 FF 9F 5D |  if_ne	jmp	#LR__0056
02910                 | LR__0057
02910     AF F0 03 F6 | 	mov	ptra, fp
02914     BA 00 A0 FD | 	call	#popregs_
02918                 | _hng030rm_spin2_scrollup_ret
02918     2D 00 64 FD | 	ret
0291c                 | 
0291c                 | ' 
0291c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
0291c                 | ' 
0291c                 | ' pub crlf()
0291c                 | _hng030rm_spin2_crlf
0291c     02 5A 05 F6 | 	mov	COUNT_, #2
02920     B0 00 A0 FD | 	call	#pushregs_
02924                 | ' 
02924                 | ' cursor_x:=0
02924     34 FA 05 F1 | 	add	objptr, #52
02928     FD 00 48 FC | 	wrbyte	#0, objptr
0292c                 | ' cursor_y+=1
0292c     01 FA 05 F1 | 	add	objptr, #1
02930     FD 6C C2 FA | 	rdbyte	local01, objptr
02934     01 6C 06 F1 | 	add	local01, #1
02938     FD 6C 42 FC | 	wrbyte	local01, objptr
0293c                 | ' if cursor_y>lines-1
0293c     5F FA 05 F1 | 	add	objptr, #95
02940     FD 6C 02 FB | 	rdlong	local01, objptr
02944     01 6C 86 F1 | 	sub	local01, #1
02948     5F FA 85 F1 | 	sub	objptr, #95
0294c     FD 6E C2 FA | 	rdbyte	local02, objptr
02950     35 FA 85 F1 | 	sub	objptr, #53
02954     36 6F 5A F2 | 	cmps	local02, local01 wcz
02958     1C 00 90 ED |  if_be	jmp	#LR__0058
0295c                 | '   scrollup()
0295c     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
02960                 | '   cursor_y:=lines-1
02960     94 FA 05 F1 | 	add	objptr, #148
02964     FD 6C 02 FB | 	rdlong	local01, objptr
02968     01 6C 86 F1 | 	sub	local01, #1
0296c     5F FA 85 F1 | 	sub	objptr, #95
02970     FD 6C 42 FC | 	wrbyte	local01, objptr
02974     35 FA 85 F1 | 	sub	objptr, #53
02978                 | LR__0058
02978     AF F0 03 F6 | 	mov	ptra, fp
0297c     BA 00 A0 FD | 	call	#popregs_
02980                 | _hng030rm_spin2_crlf_ret
02980     2D 00 64 FD | 	ret
02984                 | 
02984                 | ' 
02984                 | ' 
02984                 | ' 
02984                 | ' pub inttostr2(i,d):result |q,pos,k,j
02984                 | _hng030rm_spin2_inttostr2
02984                 | ' 
02984                 | ' j:=i
02984                 | ' pos:=d-1
02984     30 1F 02 F6 | 	mov	_var01, arg02
02988     01 1E 86 F1 | 	sub	_var01, #1
0298c                 | ' k:=0
0298c                 | ' 
0298c                 | ' n_string[d]:=0
0298c     30 21 02 F6 | 	mov	_var02, arg02
02990     44 FA 05 F1 | 	add	objptr, #68
02994     FD 22 02 F6 | 	mov	_var03, objptr
02998     FD 20 02 F1 | 	add	_var02, objptr
0299c     10 01 48 FC | 	wrbyte	#0, _var02
029a0                 | ' repeat k from 0 to d-1
029a0     00 24 06 F6 | 	mov	_var04, #0
029a4     01 60 86 F1 | 	sub	arg02, #1
029a8     30 27 02 F6 | 	mov	_var05, arg02
029ac     00 26 5E F2 | 	cmps	_var05, #0 wcz
029b0     44 FA 85 F1 | 	sub	objptr, #68
029b4     01 22 06 16 |  if_a	mov	_var03, #1
029b8     01 22 66 E6 |  if_be	neg	_var03, #1
029bc     11 27 02 F1 | 	add	_var05, _var03
029c0     5C D6 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
029c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
029c8                 | LR__0059
029c8                 | '   n_string[k]:=48
029c8     12 29 02 F6 | 	mov	_var06, _var04
029cc     44 FA 05 F1 | 	add	objptr, #68
029d0     FD 28 02 F1 | 	add	_var06, objptr
029d4     14 61 48 FC | 	wrbyte	#48, _var06
029d8     11 25 02 F1 | 	add	_var04, _var03
029dc     13 25 0A F2 | 	cmp	_var04, _var05 wz
029e0     44 FA 85 F1 | 	sub	objptr, #68
029e4     E0 FF 9F 5D |  if_ne	jmp	#LR__0059
029e8                 | LR__0060
029e8                 | ' 
029e8                 | ' if (j<>0)
029e8     00 5E 0E F2 | 	cmp	arg01, #0 wz
029ec     40 00 90 AD |  if_e	jmp	#LR__0063
029f0                 | ' 
029f0                 | '   repeat while (pos>-1)
029f0                 | LR__0061
029f0     FF FF 7F FF 
029f4     FF 1F 5E F2 | 	cmps	_var01, ##-1 wcz
029f8     34 00 90 ED |  if_be	jmp	#LR__0062
029fc                 | '     q:=j+//10
029fc     2F 99 02 F6 | 	mov	muldiva_, arg01
02a00     0A 9A 06 F6 | 	mov	muldivb_, #10
02a04     C2 00 A0 FD | 	call	#unsdivide_
02a08                 | '     q:=48+q
02a08     30 2A 06 F6 | 	mov	_var07, #48
02a0c     4C 2B 02 F1 | 	add	_var07, muldiva_
02a10                 | '     n_string[pos]:=q
02a10     0F 61 02 F6 | 	mov	arg02, _var01
02a14     44 FA 05 F1 | 	add	objptr, #68
02a18     FD 60 02 F1 | 	add	arg02, objptr
02a1c     30 2B 42 FC | 	wrbyte	_var07, arg02
02a20                 | '     j:=j+/10
02a20     4D 5F 02 F6 | 	mov	arg01, muldivb_
02a24                 | '     pos-=1
02a24     01 1E 86 F1 | 	sub	_var01, #1
02a28     44 FA 85 F1 | 	sub	objptr, #68
02a2c     C0 FF 9F FD | 	jmp	#LR__0061
02a30                 | LR__0062
02a30                 | LR__0063
02a30                 | ' 
02a30                 | ' 
02a30                 | ' q:=@n_string
02a30     44 FA 05 F1 | 	add	objptr, #68
02a34     FD 18 02 F6 | 	mov	result1, objptr
02a38     44 FA 85 F1 | 	sub	objptr, #68
02a3c                 | ' return q
02a3c                 | _hng030rm_spin2_inttostr2_ret
02a3c     2D 00 64 FD | 	ret
02a40                 | 
02a40                 | ' 
02a40                 | ' 
02a40                 | ' 
02a40                 | ' '*************************************************************************
02a40                 | ' '                                                                        *
02a40                 | ' '  Mode setting and driver start                                                          *
02a40                 | ' '                                                                        *
02a40                 | ' '*************************************************************************
02a40                 | ' 
02a40                 | ' ''---------  Set the graphics mode
02a40                 | ' 
02a40                 | ' 
02a40                 | ' 
02a40                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02a40                 | _hng030rm_spin2_setmode
02a40     0A 5A 05 F6 | 	mov	COUNT_, #10
02a44     B0 00 A0 FD | 	call	#pushregs_
02a48     2F 6D 02 F6 | 	mov	local01, arg01
02a4c                 | ' 
02a4c                 | ' '' mode:tn_bb_cc_vv_hh
02a4c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02a4c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02a4c                 | ' 
02a4c                 | ' if mode==(512+192+48)
02a4c     01 00 00 FF 
02a50     F0 6C 0E F2 | 	cmp	local01, ##752 wz
02a54                 | '   return 'no RAM
02a54     C0 05 90 AD |  if_e	jmp	#LR__0086
02a58                 | ' 
02a58                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02a58     36 6F 02 F6 | 	mov	local02, local01
02a5c     06 6E 46 F0 | 	shr	local02, #6
02a60     07 6E 06 F5 | 	and	local02, #7
02a64     08 6E 26 F3 | 	fle	local02, #8
02a68     37 71 02 F6 | 	mov	local03, local02
02a6c     30 70 62 FD | 	jmprel	local03
02a70                 | LR__0064
02a70     20 00 90 FD | 	jmp	#LR__0065
02a74     48 00 90 FD | 	jmp	#LR__0066
02a78     70 00 90 FD | 	jmp	#LR__0067
02a7c     98 00 90 FD | 	jmp	#LR__0068
02a80     C0 00 90 FD | 	jmp	#LR__0069
02a84     E8 00 90 FD | 	jmp	#LR__0070
02a88     10 01 90 FD | 	jmp	#LR__0071
02a8c     38 01 90 FD | 	jmp	#LR__0072
02a90     68 01 90 FD | 	jmp	#LR__0073
02a94                 | LR__0065
02a94                 | ' 
02a94                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02a94     50 FA 05 F1 | 	add	objptr, #80
02a98     FD 5E 02 F6 | 	mov	arg01, objptr
02a9c     50 FA 85 F1 | 	sub	objptr, #80
02aa0     0E 00 00 FF 
02aa4     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02aa8     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02aac     0E 00 00 FF 
02ab0     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02ab4     10 62 06 F6 | 	mov	arg03, #16
02ab8     84 37 B0 FD | 	call	#__system__longmove
02abc     3C 01 90 FD | 	jmp	#LR__0073
02ac0                 | LR__0066
02ac0                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02ac0     50 FA 05 F1 | 	add	objptr, #80
02ac4     FD 5E 02 F6 | 	mov	arg01, objptr
02ac8     50 FA 85 F1 | 	sub	objptr, #80
02acc     0E 00 00 FF 
02ad0     98 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02ad4     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02ad8     0E 00 00 FF 
02adc     98 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02ae0     10 62 06 F6 | 	mov	arg03, #16
02ae4     58 37 B0 FD | 	call	#__system__longmove
02ae8     10 01 90 FD | 	jmp	#LR__0073
02aec                 | LR__0067
02aec                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02aec     50 FA 05 F1 | 	add	objptr, #80
02af0     FD 5E 02 F6 | 	mov	arg01, objptr
02af4     50 FA 85 F1 | 	sub	objptr, #80
02af8     0E 00 00 FF 
02afc     D8 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02b00     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b04     0E 00 00 FF 
02b08     D8 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02b0c     10 62 06 F6 | 	mov	arg03, #16
02b10     2C 37 B0 FD | 	call	#__system__longmove
02b14     E4 00 90 FD | 	jmp	#LR__0073
02b18                 | LR__0068
02b18                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02b18     50 FA 05 F1 | 	add	objptr, #80
02b1c     FD 5E 02 F6 | 	mov	arg01, objptr
02b20     50 FA 85 F1 | 	sub	objptr, #80
02b24     0E 00 00 FF 
02b28     18 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b2c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b30     0E 00 00 FF 
02b34     18 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b38     10 62 06 F6 | 	mov	arg03, #16
02b3c     00 37 B0 FD | 	call	#__system__longmove
02b40     B8 00 90 FD | 	jmp	#LR__0073
02b44                 | LR__0069
02b44                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02b44     50 FA 05 F1 | 	add	objptr, #80
02b48     FD 5E 02 F6 | 	mov	arg01, objptr
02b4c     50 FA 85 F1 | 	sub	objptr, #80
02b50     0E 00 00 FF 
02b54     58 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02b58     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b5c     0E 00 00 FF 
02b60     58 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02b64     10 62 06 F6 | 	mov	arg03, #16
02b68     D4 36 B0 FD | 	call	#__system__longmove
02b6c     8C 00 90 FD | 	jmp	#LR__0073
02b70                 | LR__0070
02b70                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02b70     50 FA 05 F1 | 	add	objptr, #80
02b74     FD 5E 02 F6 | 	mov	arg01, objptr
02b78     50 FA 85 F1 | 	sub	objptr, #80
02b7c     0E 00 00 FF 
02b80     98 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b84     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b88     0E 00 00 FF 
02b8c     98 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b90     10 62 06 F6 | 	mov	arg03, #16
02b94     A8 36 B0 FD | 	call	#__system__longmove
02b98     60 00 90 FD | 	jmp	#LR__0073
02b9c                 | LR__0071
02b9c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02b9c     50 FA 05 F1 | 	add	objptr, #80
02ba0     FD 5E 02 F6 | 	mov	arg01, objptr
02ba4     50 FA 85 F1 | 	sub	objptr, #80
02ba8     0E 00 00 FF 
02bac     D8 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02bb0     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02bb4     0E 00 00 FF 
02bb8     D8 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02bbc     10 62 06 F6 | 	mov	arg03, #16
02bc0     7C 36 B0 FD | 	call	#__system__longmove
02bc4     34 00 90 FD | 	jmp	#LR__0073
02bc8                 | LR__0072
02bc8                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02bc8     50 FA 05 F1 | 	add	objptr, #80
02bcc     FD 72 02 F6 | 	mov	local04, objptr
02bd0     0F 00 00 FF 
02bd4     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02bd8     03 75 02 F6 | 	mov	local05, ptr__hng030rm_spin2_dat__
02bdc     10 76 06 F6 | 	mov	local06, #16
02be0     39 5F 02 F6 | 	mov	arg01, local04
02be4     3A 61 02 F6 | 	mov	arg02, local05
02be8     10 62 06 F6 | 	mov	arg03, #16
02bec     50 FA 85 F1 | 	sub	objptr, #80
02bf0     0F 00 00 FF 
02bf4     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02bf8     44 36 B0 FD | 	call	#__system__longmove
02bfc                 | LR__0073
02bfc                 | ' 
02bfc                 | ' ' 4-bit graphics: do nothing with timings :)
02bfc                 | ' if mode<512
02bfc     01 00 00 FF 
02c00     00 6C 5E F2 | 	cmps	local01, ##512 wcz
02c04     1C 00 90 3D |  if_ae	jmp	#LR__0074
02c08                 | '   palette_ptr:=@ataripalette
02c08     0C 00 00 FF 
02c0c     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c10     18 FA 05 F1 | 	add	objptr, #24
02c14     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c18     18 FA 85 F1 | 	sub	objptr, #24
02c1c     0C 00 00 FF 
02c20     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c24                 | LR__0074
02c24                 | ' 
02c24                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c24     36 6F 02 F6 | 	mov	local02, local01
02c28     01 00 00 FF 
02c2c     30 6E 06 F5 | 	and	local02, ##560
02c30     01 00 00 FF 
02c34     30 6E 0E F2 | 	cmp	local02, ##560 wz
02c38     44 00 90 5D |  if_ne	jmp	#LR__0075
02c3c                 | '   timings[5]:=4
02c3c     64 FA 05 F1 | 	add	objptr, #100
02c40     FD 08 68 FC | 	wrlong	#4, objptr
02c44                 | '   timings[11]:=timings[11]<<1
02c44     18 FA 05 F1 | 	add	objptr, #24
02c48     FD 6E 02 FB | 	rdlong	local02, objptr
02c4c     01 6E 66 F0 | 	shl	local02, #1
02c50     FD 6E 62 FC | 	wrlong	local02, objptr
02c54                 | '   putpixel:=p8
02c54     6C FA 05 F1 | 	add	objptr, #108
02c58     FD 6E 02 FB | 	rdlong	local02, objptr
02c5c     10 FA 85 F1 | 	sub	objptr, #16
02c60     FD 6E 62 FC | 	wrlong	local02, objptr
02c64                 | '   palette_ptr:=@ataripalette
02c64     0C 00 00 FF 
02c68     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c6c     C0 FA 85 F1 | 	sub	objptr, #192
02c70     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c74     18 FA 85 F1 | 	sub	objptr, #24
02c78     0C 00 00 FF 
02c7c     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c80                 | LR__0075
02c80                 | ' 
02c80                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02c80     36 6F 02 F6 | 	mov	local02, local01
02c84     01 00 00 FF 
02c88     30 6E 06 F5 | 	and	local02, ##560
02c8c     01 00 00 FF 
02c90     10 6E 0E F2 | 	cmp	local02, ##528 wz
02c94     44 00 90 5D |  if_ne	jmp	#LR__0076
02c98                 | '   timings[5]:=16
02c98     64 FA 05 F1 | 	add	objptr, #100
02c9c     FD 20 68 FC | 	wrlong	#16, objptr
02ca0                 | '   timings[11]:=timings[11]>>1
02ca0     18 FA 05 F1 | 	add	objptr, #24
02ca4     FD 6E 02 FB | 	rdlong	local02, objptr
02ca8     01 6E 46 F0 | 	shr	local02, #1
02cac     FD 6E 62 FC | 	wrlong	local02, objptr
02cb0                 | '   putpixel:=p2
02cb0     64 FA 05 F1 | 	add	objptr, #100
02cb4     FD 6E 02 FB | 	rdlong	local02, objptr
02cb8     08 FA 85 F1 | 	sub	objptr, #8
02cbc     FD 6E 62 FC | 	wrlong	local02, objptr
02cc0                 | '   palette_ptr:=@fourcolors
02cc0     0C 00 00 FF 
02cc4     08 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02cc8     C0 FA 85 F1 | 	sub	objptr, #192
02ccc     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02cd0     18 FA 85 F1 | 	sub	objptr, #24
02cd4     0C 00 00 FF 
02cd8     08 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02cdc                 | LR__0076
02cdc                 | ' 
02cdc                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02cdc     36 6F 02 F6 | 	mov	local02, local01
02ce0     01 00 00 FF 
02ce4     30 6E 06 F5 | 	and	local02, ##560
02ce8     01 00 00 FF 
02cec     00 6E 0E F2 | 	cmp	local02, ##512 wz
02cf0     44 00 90 5D |  if_ne	jmp	#LR__0077
02cf4                 | '   timings[5]:=32
02cf4     64 FA 05 F1 | 	add	objptr, #100
02cf8     FD 40 68 FC | 	wrlong	#32, objptr
02cfc                 | '   timings[11]:=timings[11]>>2
02cfc     18 FA 05 F1 | 	add	objptr, #24
02d00     FD 6E 02 FB | 	rdlong	local02, objptr
02d04     02 6E 46 F0 | 	shr	local02, #2
02d08     FD 6E 62 FC | 	wrlong	local02, objptr
02d0c                 | '   putpixel:=p1
02d0c     60 FA 05 F1 | 	add	objptr, #96
02d10     FD 6E 02 FB | 	rdlong	local02, objptr
02d14     04 FA 85 F1 | 	sub	objptr, #4
02d18     FD 6E 62 FC | 	wrlong	local02, objptr
02d1c                 | '   palette_ptr:=@twocolors
02d1c     0C 00 00 FF 
02d20     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d24     C0 FA 85 F1 | 	sub	objptr, #192
02d28     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d2c     18 FA 85 F1 | 	sub	objptr, #24
02d30     0C 00 00 FF 
02d34     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d38                 | LR__0077
02d38                 | ' 
02d38                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d38     36 6F 02 F6 | 	mov	local02, local01
02d3c     01 00 00 FF 
02d40     30 6E 06 F5 | 	and	local02, ##560
02d44     01 00 00 FF 
02d48     20 6E 0E F2 | 	cmp	local02, ##544 wz
02d4c     2C 00 90 5D |  if_ne	jmp	#LR__0078
02d50                 | '   putpixel:=p4
02d50     E4 FA 05 F1 | 	add	objptr, #228
02d54     FD 6E 02 FB | 	rdlong	local02, objptr
02d58     0C FA 85 F1 | 	sub	objptr, #12
02d5c     FD 6E 62 FC | 	wrlong	local02, objptr
02d60                 | '   palette_ptr:=@vga16
02d60     0C 00 00 FF 
02d64     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02d68     C0 FA 85 F1 | 	sub	objptr, #192
02d6c     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d70     18 FA 85 F1 | 	sub	objptr, #24
02d74     0C 00 00 FF 
02d78     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d7c                 | LR__0078
02d7c                 | ' 
02d7c                 | ' repeat i from 0 to 4
02d7c     00 78 06 F6 | 	mov	local07, #0
02d80     D8 D2 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
02d84     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d88                 | LR__0079
02d88                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d88     3C 73 02 F6 | 	mov	local04, local07
02d8c     02 72 66 F0 | 	shl	local04, #2
02d90     50 FA 05 F1 | 	add	objptr, #80
02d94     FD 74 02 F6 | 	mov	local05, objptr
02d98     FD 72 02 F1 | 	add	local04, objptr
02d9c     2C FA 85 F1 | 	sub	objptr, #44
02da0     FD 7A 02 FB | 	rdlong	local08, objptr
02da4     3D 77 02 F6 | 	mov	local06, local08
02da8     11 76 66 F0 | 	shl	local06, #17
02dac     39 6F 02 FB | 	rdlong	local02, local04
02db0     3B 6F 02 F1 | 	add	local02, local06
02db4     80 40 38 FF 
02db8     00 6E 06 F1 | 	add	local02, ##1887502336
02dbc     3C 7D 02 F6 | 	mov	local09, local07
02dc0     02 7C 66 F0 | 	shl	local09, #2
02dc4     2C FA 05 F1 | 	add	objptr, #44
02dc8     FD 7E 02 F6 | 	mov	local10, objptr
02dcc     FD 7C 02 F1 | 	add	local09, objptr
02dd0     3E 6F 62 FC | 	wrlong	local02, local09
02dd4     01 78 06 F1 | 	add	local07, #1
02dd8     05 78 5E F2 | 	cmps	local07, #5 wcz
02ddc     50 FA 85 F1 | 	sub	objptr, #80
02de0     A4 FF 9F CD |  if_b	jmp	#LR__0079
02de4                 | LR__0080
02de4                 | ' timings[5]:=timings[5]+hdmibase<<17
02de4     24 FA 05 F1 | 	add	objptr, #36
02de8     FD 72 02 FB | 	rdlong	local04, objptr
02dec     11 72 66 F0 | 	shl	local04, #17
02df0     40 FA 05 F1 | 	add	objptr, #64
02df4     FD 76 02 FB | 	rdlong	local06, objptr
02df8     3B 6F 02 F6 | 	mov	local02, local06
02dfc     39 6F 02 F1 | 	add	local02, local04
02e00     FD 6E 62 FC | 	wrlong	local02, objptr
02e04                 | ' clkfreq:=timings[13]
02e04     20 FA 05 F1 | 	add	objptr, #32
02e08     FD 6E 02 FB | 	rdlong	local02, objptr
02e0c     14 6E 66 FC | 	wrlong	local02, #20
02e10                 | ' hubset(timings[14])
02e10     04 FA 05 F1 | 	add	objptr, #4
02e14     FD 5E 02 FB | 	rdlong	arg01, objptr
02e18     88 FA 85 F1 | 	sub	objptr, #136
02e1c     00 5E 62 FD | 	hubset	arg01
02e20                 | ' waitms(1)
02e20     01 5E 06 F6 | 	mov	arg01, #1
02e24     C4 36 B0 FD | 	call	#__system___waitms
02e28                 | ' 
02e28                 | ' 
02e28                 | ' xzoom:=1<<(mode & 3)
02e28     36 73 02 F6 | 	mov	local04, local01
02e2c     03 72 06 F5 | 	and	local04, #3
02e30     39 6F C2 F9 | 	decod	local02, local04
02e34     CC FA 05 F1 | 	add	objptr, #204
02e38     FD 6E 62 FC | 	wrlong	local02, objptr
02e3c                 | ' 
02e3c                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02e3c     37 73 02 F6 | 	mov	local04, local02
02e40     CC FA 85 F1 | 	sub	objptr, #204
02e44     08 72 0E F2 | 	cmp	local04, #8 wz
02e48     24 00 90 5D |  if_ne	jmp	#LR__0081
02e4c     36 75 02 F6 | 	mov	local05, local01
02e50     04 74 46 F0 | 	shr	local05, #4
02e54     03 74 06 F5 | 	and	local05, #3
02e58     03 74 0E F2 | 	cmp	local05, #3 wz
02e5c     10 00 90 AD |  if_e	jmp	#LR__0081
02e60                 | '   xzoom:=4
02e60     04 6E 06 F6 | 	mov	local02, #4
02e64     CC FA 05 F1 | 	add	objptr, #204
02e68     FD 08 68 FC | 	wrlong	#4, objptr
02e6c     CC FA 85 F1 | 	sub	objptr, #204
02e70                 | LR__0081
02e70                 | ' 
02e70                 | ' yzoom:=1<<((mode>>2) & 3)
02e70     36 73 02 F6 | 	mov	local04, local01
02e74     02 72 46 F0 | 	shr	local04, #2
02e78     03 72 06 F5 | 	and	local04, #3
02e7c     39 6F C2 F9 | 	decod	local02, local04
02e80     D0 FA 05 F1 | 	add	objptr, #208
02e84     FD 6E 62 FC | 	wrlong	local02, objptr
02e88                 | ' azoom:=xzoom*yzoom
02e88     04 FA 85 F1 | 	sub	objptr, #4
02e8c     FD 72 02 FB | 	rdlong	local04, objptr
02e90     04 FA 05 F1 | 	add	objptr, #4
02e94     FD 76 02 FB | 	rdlong	local06, objptr
02e98     3B 73 02 FD | 	qmul	local04, local06
02e9c     18 6E 62 FD | 	getqx	local02
02ea0     04 FA 05 F1 | 	add	objptr, #4
02ea4     FD 6E 62 FC | 	wrlong	local02, objptr
02ea8                 | ' 
02ea8                 | ' cpl:=timings[11]
02ea8     58 FA 85 F1 | 	sub	objptr, #88
02eac     FD 6E 02 FB | 	rdlong	local02, objptr
02eb0     14 FA 05 F1 | 	add	objptr, #20
02eb4     FD 6E 62 FC | 	wrlong	local02, objptr
02eb8     90 FA 85 F1 | 	sub	objptr, #144
02ebc                 | ' if (mode<512)
02ebc     01 00 00 FF 
02ec0     00 6C 5E F2 | 	cmps	local01, ##512 wcz
02ec4     60 00 90 3D |  if_ae	jmp	#LR__0082
02ec8                 | '   lines:=(timings[12]>>4)+/yzoom
02ec8     80 FA 05 F1 | 	add	objptr, #128
02ecc     FD 98 02 FB | 	rdlong	muldiva_, objptr
02ed0     04 98 46 F0 | 	shr	muldiva_, #4
02ed4     50 FA 05 F1 | 	add	objptr, #80
02ed8     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02edc     D0 FA 85 F1 | 	sub	objptr, #208
02ee0     C2 00 A0 FD | 	call	#unsdivide_
02ee4     94 FA 05 F1 | 	add	objptr, #148
02ee8     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02eec                 | '   if ((timings[12]>>4)+//yzoom) <>0
02eec     14 FA 85 F1 | 	sub	objptr, #20
02ef0     FD 98 02 FB | 	rdlong	muldiva_, objptr
02ef4     04 98 46 F0 | 	shr	muldiva_, #4
02ef8     50 FA 05 F1 | 	add	objptr, #80
02efc     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f00     D0 FA 85 F1 | 	sub	objptr, #208
02f04     C2 00 A0 FD | 	call	#unsdivide_
02f08     00 98 0E F2 | 	cmp	muldiva_, #0 wz
02f0c     AC 00 90 AD |  if_e	jmp	#LR__0085
02f10                 | '     lines +=1
02f10     94 FA 05 F1 | 	add	objptr, #148
02f14     FD 6E 02 FB | 	rdlong	local02, objptr
02f18     01 6E 06 F1 | 	add	local02, #1
02f1c     FD 6E 62 FC | 	wrlong	local02, objptr
02f20     94 FA 85 F1 | 	sub	objptr, #148
02f24                 | ' 
02f24                 | ' else
02f24     94 00 90 FD | 	jmp	#LR__0085
02f28                 | LR__0082
02f28                 | '   lines:=timings[12]/yzoom
02f28     80 FA 05 F1 | 	add	objptr, #128
02f2c     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f30     50 FA 05 F1 | 	add	objptr, #80
02f34     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f38     D0 FA 85 F1 | 	sub	objptr, #208
02f3c     C6 00 A0 FD | 	call	#divide_
02f40     94 FA 05 F1 | 	add	objptr, #148
02f44     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02f48                 | '   if cpl//xzoom==0
02f48     04 FA 85 F1 | 	sub	objptr, #4
02f4c     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f50     3C FA 05 F1 | 	add	objptr, #60
02f54     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f58     CC FA 85 F1 | 	sub	objptr, #204
02f5c     C6 00 A0 FD | 	call	#divide_
02f60     00 98 0E F2 | 	cmp	muldiva_, #0 wz
02f64     28 00 90 5D |  if_ne	jmp	#LR__0083
02f68                 | '     cpl:=cpl/xzoom
02f68     90 FA 05 F1 | 	add	objptr, #144
02f6c     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f70     3C FA 05 F1 | 	add	objptr, #60
02f74     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02f78     CC FA 85 F1 | 	sub	objptr, #204
02f7c     C6 00 A0 FD | 	call	#divide_
02f80     90 FA 05 F1 | 	add	objptr, #144
02f84     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02f88     90 FA 85 F1 | 	sub	objptr, #144
02f8c                 | '   else
02f8c     2C 00 90 FD | 	jmp	#LR__0084
02f90                 | LR__0083
02f90                 | '     cpl:=cpl/xzoom+1
02f90     90 FA 05 F1 | 	add	objptr, #144
02f94     FD 98 02 FB | 	rdlong	muldiva_, objptr
02f98     3C FA 05 F1 | 	add	objptr, #60
02f9c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02fa0     CC FA 85 F1 | 	sub	objptr, #204
02fa4     C6 00 A0 FD | 	call	#divide_
02fa8     4D 6F 02 F6 | 	mov	local02, muldivb_
02fac     01 6E 06 F1 | 	add	local02, #1
02fb0     90 FA 05 F1 | 	add	objptr, #144
02fb4     FD 6E 62 FC | 	wrlong	local02, objptr
02fb8     90 FA 85 F1 | 	sub	objptr, #144
02fbc                 | LR__0084
02fbc                 | LR__0085
02fbc                 | ' 
02fbc                 | ' buflen:=(cpl*lines)
02fbc     90 FA 05 F1 | 	add	objptr, #144
02fc0     FD 72 02 FB | 	rdlong	local04, objptr
02fc4     04 FA 05 F1 | 	add	objptr, #4
02fc8     FD 76 02 FB | 	rdlong	local06, objptr
02fcc     3B 73 02 FD | 	qmul	local04, local06
02fd0     18 6E 62 FD | 	getqx	local02
02fd4     64 FA 85 F1 | 	sub	objptr, #100
02fd8     FD 6E 62 FC | 	wrlong	local02, objptr
02fdc                 | ' buf_ptr:=$80000-4*buflen
02fdc     37 73 02 F6 | 	mov	local04, local02
02fe0     30 FA 85 F1 | 	sub	objptr, #48
02fe4     02 72 66 F0 | 	shl	local04, #2
02fe8     13 6E C6 F9 | 	decod	local02, #19
02fec     39 6F 82 F1 | 	sub	local02, local04
02ff0     FD 6E 62 FC | 	wrlong	local02, objptr
02ff4                 | ' mode_ptr:=@timings
02ff4     50 FA 05 F1 | 	add	objptr, #80
02ff8     FD 6E 02 F6 | 	mov	local02, objptr
02ffc     3C FA 85 F1 | 	sub	objptr, #60
03000     FD 6E 62 FC | 	wrlong	local02, objptr
03004                 | ' graphmode:=mode
03004     B0 FA 05 F1 | 	add	objptr, #176
03008     FD 6C 62 FC | 	wrlong	local01, objptr
0300c     C4 FA 85 F1 | 	sub	objptr, #196
03010                 | ' makedl(mode)
03010     36 5F 02 F6 | 	mov	arg01, local01
03014     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
03018                 | LR__0086
03018     AF F0 03 F6 | 	mov	ptra, fp
0301c     BA 00 A0 FD | 	call	#popregs_
03020                 | _hng030rm_spin2_setmode_ret
03020     2D 00 64 FD | 	ret
03024                 | 
03024                 | ' 
03024                 | ' 
03024                 | ' 
03024                 | ' 
03024                 | ' '---------- Make a display list
03024                 | ' 
03024                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
03024                 | _hng030rm_spin2_makedl
03024                 | ' 
03024                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03024                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03024                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03024                 | ' 
03024                 | ' '   0 - display a up/down border line
03024                 | ' 
03024                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03024                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03024                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03024                 | ' '    nnnn - font line to display, 0..15
03024                 | ' '    llllll - character line, determines the cursor Y position
03024                 | ' 
03024                 | ' 
03024                 | ' if (mode &256==0)
03024     00 5F CE F7 | 	test	arg01, #256 wz
03028     1C 00 90 5D |  if_ne	jmp	#LR__0087
0302c                 | '   dl_ptr:=buf_ptr-4*576
0302c     FD 1E 02 FB | 	rdlong	_var01, objptr
03030     04 00 00 FF 
03034     00 1F 86 F1 | 	sub	_var01, ##2304
03038     1C FA 05 F1 | 	add	objptr, #28
0303c     FD 1E 62 FC | 	wrlong	_var01, objptr
03040     1C FA 85 F1 | 	sub	objptr, #28
03044                 | ' else
03044     18 00 90 FD | 	jmp	#LR__0088
03048                 | LR__0087
03048                 | '   dl_ptr:=buf_ptr-4*496
03048     FD 1E 02 FB | 	rdlong	_var01, objptr
0304c     03 00 00 FF 
03050     C0 1F 86 F1 | 	sub	_var01, ##1984
03054     1C FA 05 F1 | 	add	objptr, #28
03058     FD 1E 62 FC | 	wrlong	_var01, objptr
0305c     1C FA 85 F1 | 	sub	objptr, #28
03060                 | LR__0088
03060                 | '  ' dl_ptr:=buf_ptr-4*540
03060                 | ' 
03060                 | ' vzoom:=((mode>>2) & 3)
03060     2F 21 02 F6 | 	mov	_var02, arg01
03064     02 20 46 F0 | 	shr	_var02, #2
03068     03 20 06 F5 | 	and	_var02, #3
0306c                 | ' 
0306c                 | ' 
0306c                 | ' if mode<512 '' text modes
0306c     01 00 00 FF 
03070     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03074     E8 01 90 3D |  if_ae	jmp	#LR__0096
03078                 | ' 
03078                 | '   if timings[6]>0 'borders
03078     68 FA 05 F1 | 	add	objptr, #104
0307c     FD 1E 02 FB | 	rdlong	_var01, objptr
03080     68 FA 85 F1 | 	sub	objptr, #104
03084     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03088     D4 00 90 ED |  if_be	jmp	#LR__0093
0308c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0308c     00 22 06 F6 | 	mov	_var03, #0
03090     68 FA 05 F1 | 	add	objptr, #104
03094     FD 24 02 FB | 	rdlong	_var04, objptr
03098     68 FA 85 F1 | 	sub	objptr, #104
0309c     01 24 86 F1 | 	sub	_var04, #1
030a0     00 24 5E F2 | 	cmps	_var04, #0 wcz
030a4     01 26 06 16 |  if_a	mov	_var05, #1
030a8     01 26 66 E6 |  if_be	neg	_var05, #1
030ac     13 29 02 F6 | 	mov	_var06, _var05
030b0     13 25 02 F1 | 	add	_var04, _var05
030b4     70 CF 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
030b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
030bc                 | LR__0089
030bc                 | '       long[dl_ptr+4*i]:=$0
030bc     1C FA 05 F1 | 	add	objptr, #28
030c0     FD 2A 02 FB | 	rdlong	_var07, objptr
030c4     1C FA 85 F1 | 	sub	objptr, #28
030c8     11 2D 02 F6 | 	mov	_var08, _var03
030cc     02 2C 66 F0 | 	shl	_var08, #2
030d0     16 2B 02 F1 | 	add	_var07, _var08
030d4     15 01 68 FC | 	wrlong	#0, _var07
030d8     14 23 02 F1 | 	add	_var03, _var06
030dc     12 23 0A F2 | 	cmp	_var03, _var04 wz
030e0     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
030e4                 | LR__0090
030e4                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
030e4     68 FA 05 F1 | 	add	objptr, #104
030e8     FD 22 02 FB | 	rdlong	_var03, objptr
030ec     18 FA 05 F1 | 	add	objptr, #24
030f0     FD 26 02 FB | 	rdlong	_var05, objptr
030f4     13 23 02 F1 | 	add	_var03, _var05
030f8     0C FA 05 F1 | 	add	objptr, #12
030fc     FD 2E 02 FB | 	rdlong	_var09, objptr
03100     01 2E 86 F1 | 	sub	_var09, #1
03104     24 FA 85 F1 | 	sub	objptr, #36
03108     FD 30 02 FB | 	rdlong	_var10, objptr
0310c     18 FA 05 F1 | 	add	objptr, #24
03110     FD 32 02 FB | 	rdlong	_var11, objptr
03114     80 FA 85 F1 | 	sub	objptr, #128
03118     19 31 02 F1 | 	add	_var10, _var11
0311c     18 2F 5A F2 | 	cmps	_var09, _var10 wcz
03120     01 2C 06 16 |  if_a	mov	_var08, #1
03124     01 2C 66 E6 |  if_be	neg	_var08, #1
03128     16 35 02 F6 | 	mov	_var12, _var08
0312c     16 2F 02 F1 | 	add	_var09, _var08
03130     F4 CE 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
03134     93 00 A0 FD | 	call	#FCACHE_LOAD_
03138                 | LR__0091
03138                 | '       long[dl_ptr+4*i]:=$0
03138     1C FA 05 F1 | 	add	objptr, #28
0313c     FD 36 02 FB | 	rdlong	_var13, objptr
03140     1C FA 85 F1 | 	sub	objptr, #28
03144     11 39 02 F6 | 	mov	_var14, _var03
03148     02 38 66 F0 | 	shl	_var14, #2
0314c     1C 37 02 F1 | 	add	_var13, _var14
03150     1B 01 68 FC | 	wrlong	#0, _var13
03154     1A 23 02 F1 | 	add	_var03, _var12
03158     17 23 0A F2 | 	cmp	_var03, _var09 wz
0315c     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
03160                 | LR__0092
03160                 | LR__0093
03160                 | '   lpc:=16<<vzoom
03160     10 3A 06 F6 | 	mov	_var15, #16
03164     10 3B 62 F0 | 	shl	_var15, _var02
03168                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03168     68 FA 05 F1 | 	add	objptr, #104
0316c     FD 22 02 FB | 	rdlong	_var03, objptr
03170     11 3D 02 F6 | 	mov	_var16, _var03
03174     18 FA 05 F1 | 	add	objptr, #24
03178     FD 3E 02 FB | 	rdlong	_var17, objptr
0317c     1F 3D 02 F1 | 	add	_var16, _var17
03180     01 3C 86 F1 | 	sub	_var16, #1
03184     18 FA 85 F1 | 	sub	objptr, #24
03188     FD 2C 02 FB | 	rdlong	_var08, objptr
0318c     68 FA 85 F1 | 	sub	objptr, #104
03190     16 3D 5A F2 | 	cmps	_var16, _var08 wcz
03194     01 40 06 16 |  if_a	mov	_var18, #1
03198     01 40 66 E6 |  if_be	neg	_var18, #1
0319c     20 43 02 F6 | 	mov	_var19, _var18
031a0     20 3D 02 F1 | 	add	_var16, _var18
031a4     0C CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
031a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
031ac                 | LR__0094
031ac                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
031ac     11 99 02 F6 | 	mov	muldiva_, _var03
031b0     68 FA 05 F1 | 	add	objptr, #104
031b4     FD 44 02 FB | 	rdlong	_var20, objptr
031b8     68 FA 85 F1 | 	sub	objptr, #104
031bc     22 99 82 F1 | 	sub	muldiva_, _var20
031c0     1D 9B 02 F6 | 	mov	muldivb_, _var15
031c4     C2 00 A0 FD | 	call	#unsdivide_
031c8     10 99 42 F0 | 	shr	muldiva_, _var02
031cc     4C 47 02 F6 | 	mov	_var21, muldiva_
031d0                 | '     charline:=(i-timings[6])+/lpc
031d0     11 99 02 F6 | 	mov	muldiva_, _var03
031d4     68 FA 05 F1 | 	add	objptr, #104
031d8     FD 48 02 FB | 	rdlong	_var22, objptr
031dc     68 FA 85 F1 | 	sub	objptr, #104
031e0     24 99 82 F1 | 	sub	muldiva_, _var22
031e4     1D 9B 02 F6 | 	mov	muldivb_, _var15
031e8     C2 00 A0 FD | 	call	#unsdivide_
031ec     4D 4B 02 F6 | 	mov	_var23, muldivb_
031f0                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
031f0     FD 32 02 FB | 	rdlong	_var11, objptr
031f4     90 FA 05 F1 | 	add	objptr, #144
031f8     FD 44 02 FB | 	rdlong	_var20, objptr
031fc     25 45 02 FD | 	qmul	_var20, _var23
03200     18 4C 62 FD | 	getqx	_var24
03204     02 4C 66 F0 | 	shl	_var24, #2
03208     26 33 02 F1 | 	add	_var11, _var24
0320c     2F 39 02 F6 | 	mov	_var14, arg01
03210     03 38 06 F5 | 	and	_var14, #3
03214     1C 33 02 F1 | 	add	_var11, _var14
03218                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03218     0C 32 66 F0 | 	shl	_var11, #12
0321c     23 49 02 F6 | 	mov	_var22, _var21
03220     08 48 66 F0 | 	shl	_var22, #8
03224     24 33 02 F1 | 	add	_var11, _var22
03228     25 45 02 F6 | 	mov	_var20, _var23
0322c     02 44 66 F0 | 	shl	_var20, #2
03230     22 33 02 F1 | 	add	_var11, _var20
03234     01 32 06 F1 | 	add	_var11, #1
03238     74 FA 85 F1 | 	sub	objptr, #116
0323c     FD 36 02 FB | 	rdlong	_var13, objptr
03240     1C FA 85 F1 | 	sub	objptr, #28
03244     11 39 02 F6 | 	mov	_var14, _var03
03248     02 38 66 F0 | 	shl	_var14, #2
0324c     1C 37 02 F1 | 	add	_var13, _var14
03250     1B 33 62 FC | 	wrlong	_var11, _var13
03254     21 23 02 F1 | 	add	_var03, _var19
03258     1E 23 0A F2 | 	cmp	_var03, _var16 wz
0325c     4C FF 9F 5D |  if_ne	jmp	#LR__0094
03260                 | LR__0095
03260                 | LR__0096
03260                 | ' 
03260                 | ' 
03260                 | ' 
03260                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03260     01 00 00 FF 
03264     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03268     A8 01 90 CD |  if_b	jmp	#LR__0104
0326c                 | ' 
0326c                 | '   if timings[6]>0 'borders
0326c     68 FA 05 F1 | 	add	objptr, #104
03270     FD 1E 02 FB | 	rdlong	_var01, objptr
03274     68 FA 85 F1 | 	sub	objptr, #104
03278     00 1E 5E F2 | 	cmps	_var01, #0 wcz
0327c     D4 00 90 ED |  if_be	jmp	#LR__0101
03280                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03280     00 22 06 F6 | 	mov	_var03, #0
03284     68 FA 05 F1 | 	add	objptr, #104
03288     FD 4E 02 FB | 	rdlong	_var25, objptr
0328c     68 FA 85 F1 | 	sub	objptr, #104
03290     01 4E 86 F1 | 	sub	_var25, #1
03294     00 4E 5E F2 | 	cmps	_var25, #0 wcz
03298     01 26 06 16 |  if_a	mov	_var05, #1
0329c     01 26 66 E6 |  if_be	neg	_var05, #1
032a0     13 51 02 F6 | 	mov	_var26, _var05
032a4     13 4F 02 F1 | 	add	_var25, _var05
032a8     7C CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
032ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b0                 | LR__0097
032b0                 | '       long[dl_ptr+4*i]:=$0
032b0     1C FA 05 F1 | 	add	objptr, #28
032b4     FD 2A 02 FB | 	rdlong	_var07, objptr
032b8     1C FA 85 F1 | 	sub	objptr, #28
032bc     11 2D 02 F6 | 	mov	_var08, _var03
032c0     02 2C 66 F0 | 	shl	_var08, #2
032c4     16 2B 02 F1 | 	add	_var07, _var08
032c8     15 01 68 FC | 	wrlong	#0, _var07
032cc     28 23 02 F1 | 	add	_var03, _var26
032d0     27 23 0A F2 | 	cmp	_var03, _var25 wz
032d4     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
032d8                 | LR__0098
032d8                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
032d8     68 FA 05 F1 | 	add	objptr, #104
032dc     FD 22 02 FB | 	rdlong	_var03, objptr
032e0     18 FA 05 F1 | 	add	objptr, #24
032e4     FD 26 02 FB | 	rdlong	_var05, objptr
032e8     13 23 02 F1 | 	add	_var03, _var05
032ec     0C FA 05 F1 | 	add	objptr, #12
032f0     FD 52 02 FB | 	rdlong	_var27, objptr
032f4     01 52 86 F1 | 	sub	_var27, #1
032f8     24 FA 85 F1 | 	sub	objptr, #36
032fc     FD 30 02 FB | 	rdlong	_var10, objptr
03300     18 FA 05 F1 | 	add	objptr, #24
03304     FD 32 02 FB | 	rdlong	_var11, objptr
03308     80 FA 85 F1 | 	sub	objptr, #128
0330c     19 31 02 F1 | 	add	_var10, _var11
03310     18 53 5A F2 | 	cmps	_var27, _var10 wcz
03314     01 2C 06 16 |  if_a	mov	_var08, #1
03318     01 2C 66 E6 |  if_be	neg	_var08, #1
0331c     16 55 02 F6 | 	mov	_var28, _var08
03320     16 53 02 F1 | 	add	_var27, _var08
03324     00 CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
03328     93 00 A0 FD | 	call	#FCACHE_LOAD_
0332c                 | LR__0099
0332c                 | '       long[dl_ptr+4*i]:=$0
0332c     1C FA 05 F1 | 	add	objptr, #28
03330     FD 36 02 FB | 	rdlong	_var13, objptr
03334     1C FA 85 F1 | 	sub	objptr, #28
03338     11 39 02 F6 | 	mov	_var14, _var03
0333c     02 38 66 F0 | 	shl	_var14, #2
03340     1C 37 02 F1 | 	add	_var13, _var14
03344     1B 01 68 FC | 	wrlong	#0, _var13
03348     2A 23 02 F1 | 	add	_var03, _var28
0334c     29 23 0A F2 | 	cmp	_var03, _var27 wz
03350     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
03354                 | LR__0100
03354                 | LR__0101
03354                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03354     68 FA 05 F1 | 	add	objptr, #104
03358     FD 22 02 FB | 	rdlong	_var03, objptr
0335c     11 57 02 F6 | 	mov	_var29, _var03
03360     18 FA 05 F1 | 	add	objptr, #24
03364     FD 3E 02 FB | 	rdlong	_var17, objptr
03368     1F 57 02 F1 | 	add	_var29, _var17
0336c     01 56 86 F1 | 	sub	_var29, #1
03370     18 FA 85 F1 | 	sub	objptr, #24
03374     FD 2C 02 FB | 	rdlong	_var08, objptr
03378     68 FA 85 F1 | 	sub	objptr, #104
0337c     16 57 5A F2 | 	cmps	_var29, _var08 wcz
03380     01 40 06 16 |  if_a	mov	_var18, #1
03384     01 40 66 E6 |  if_be	neg	_var18, #1
03388     20 59 02 F6 | 	mov	_var30, _var18
0338c     20 57 02 F1 | 	add	_var29, _var18
03390     E8 CC 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
03394     93 00 A0 FD | 	call	#FCACHE_LOAD_
03398                 | LR__0102
03398                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03398     FD 32 02 FB | 	rdlong	_var11, objptr
0339c     11 49 02 F6 | 	mov	_var22, _var03
033a0     68 FA 05 F1 | 	add	objptr, #104
033a4     FD 44 02 FB | 	rdlong	_var20, objptr
033a8     22 49 82 F1 | 	sub	_var22, _var20
033ac     10 49 42 F0 | 	shr	_var22, _var02
033b0     28 FA 05 F1 | 	add	objptr, #40
033b4     FD 38 02 FB | 	rdlong	_var14, objptr
033b8     24 39 02 FD | 	qmul	_var14, _var22
033bc     18 5A 62 FD | 	getqx	_var31
033c0     02 5A 66 F0 | 	shl	_var31, #2
033c4     2D 33 02 F1 | 	add	_var11, _var31
033c8     2F 5D 02 F6 | 	mov	_var32, arg01
033cc     03 5C 06 F5 | 	and	_var32, #3
033d0     2E 33 02 F1 | 	add	_var11, _var32
033d4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
033d4     0C 32 66 F0 | 	shl	_var11, #12
033d8     02 32 06 F1 | 	add	_var11, #2
033dc     2F 49 02 F6 | 	mov	_var22, arg01
033e0     30 48 06 F5 | 	and	_var22, #48
033e4     02 48 46 F0 | 	shr	_var22, #2
033e8     24 33 02 F1 | 	add	_var11, _var22
033ec     74 FA 85 F1 | 	sub	objptr, #116
033f0     FD 44 02 FB | 	rdlong	_var20, objptr
033f4     1C FA 85 F1 | 	sub	objptr, #28
033f8     11 4D 02 F6 | 	mov	_var24, _var03
033fc     02 4C 66 F0 | 	shl	_var24, #2
03400     26 45 02 F1 | 	add	_var20, _var24
03404     22 33 62 FC | 	wrlong	_var11, _var20
03408     2C 23 02 F1 | 	add	_var03, _var30
0340c     2B 23 0A F2 | 	cmp	_var03, _var29 wz
03410     84 FF 9F 5D |  if_ne	jmp	#LR__0102
03414                 | LR__0103
03414                 | LR__0104
03414                 | _hng030rm_spin2_makedl_ret
03414     2D 00 64 FD | 	ret
03418                 | 
03418                 | '       
03418                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03418                 | ' 
03418                 | ' pub start(mode,base):result
03418                 | _hng030rm_spin2_start
03418     02 5A 05 F6 | 	mov	COUNT_, #2
0341c     B0 00 A0 FD | 	call	#pushregs_
03420     2F 6D 02 F6 | 	mov	local01, arg01
03424                 | ' 
03424                 | ' ' initialize pointers and variables
03424                 | ' 
03424                 | ' border_ptr:=@bordercolor
03424     2C FA 05 F1 | 	add	objptr, #44
03428     FD 6E 02 F6 | 	mov	local02, objptr
0342c     24 FA 85 F1 | 	sub	objptr, #36
03430     FD 6E 62 FC | 	wrlong	local02, objptr
03434                 | ' font_ptr:=@st_font
03434     08 00 00 FF 
03438     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
0343c     04 FA 85 F1 | 	sub	objptr, #4
03440     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03444                 | ' hdmibase:=base
03444     20 FA 05 F1 | 	add	objptr, #32
03448     FD 60 62 FC | 	wrlong	arg02, objptr
0344c     24 FA 85 F1 | 	sub	objptr, #36
03450                 | ' p1:=@putpixel1
03450     FD 5E 02 F6 | 	mov	arg01, objptr
03454     05 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
03458     08 00 00 FF 
0345c     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
03460     7C 2E B0 FD | 	call	#__system___make_methodptr
03464     DC FA 05 F1 | 	add	objptr, #220
03468     FD 18 62 FC | 	wrlong	result1, objptr
0346c     DC FA 85 F1 | 	sub	objptr, #220
03470                 | ' p2:=@putpixel2
03470     FD 5E 02 F6 | 	mov	arg01, objptr
03474     06 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
03478     64 2E B0 FD | 	call	#__system___make_methodptr
0347c     E0 FA 05 F1 | 	add	objptr, #224
03480     FD 18 62 FC | 	wrlong	result1, objptr
03484     E0 FA 85 F1 | 	sub	objptr, #224
03488                 | ' p4:=@putpixel4
03488     FD 5E 02 F6 | 	mov	arg01, objptr
0348c     07 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
03490     4C 2E B0 FD | 	call	#__system___make_methodptr
03494     E4 FA 05 F1 | 	add	objptr, #228
03498     FD 18 62 FC | 	wrlong	result1, objptr
0349c     E4 FA 85 F1 | 	sub	objptr, #228
034a0                 | ' p8:=@putpixel8
034a0     FD 5E 02 F6 | 	mov	arg01, objptr
034a4     08 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
034a8     34 2E B0 FD | 	call	#__system___make_methodptr
034ac     E8 FA 05 F1 | 	add	objptr, #232
034b0     FD 18 62 FC | 	wrlong	result1, objptr
034b4     E8 FA 85 F1 | 	sub	objptr, #232
034b8                 | ' 
034b8                 | ' 
034b8                 | ' ' the mode has to be set here to enable computing the buffer length
034b8                 | ' 
034b8                 | ' setmode(mode)
034b8     36 5F 02 F6 | 	mov	arg01, local01
034bc     80 F5 BF FD | 	call	#_hng030rm_spin2_setmode
034c0                 | ' 
034c0                 | ' vblank_ptr:=@vblank
034c0     40 FA 05 F1 | 	add	objptr, #64
034c4     FD 6E 02 F6 | 	mov	local02, objptr
034c8     34 FA 85 F1 | 	sub	objptr, #52
034cc     FD 6E 62 FC | 	wrlong	local02, objptr
034d0                 | ' cursor_ptr:=@cursor_x
034d0     28 FA 05 F1 | 	add	objptr, #40
034d4     FD 6E 02 F6 | 	mov	local02, objptr
034d8     24 FA 85 F1 | 	sub	objptr, #36
034dc     FD 6E 62 FC | 	wrlong	local02, objptr
034e0                 | ' 
034e0                 | ' fontnum_ptr:=@fontnum
034e0     88 FA 05 F1 | 	add	objptr, #136
034e4     FD 6E 02 F6 | 	mov	local02, objptr
034e8     78 FA 85 F1 | 	sub	objptr, #120
034ec     FD 6E 62 FC | 	wrlong	local02, objptr
034f0                 | ' 
034f0                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
034f0     78 FA 05 F1 | 	add	objptr, #120
034f4     FD 00 68 FC | 	wrlong	#0, objptr
034f8                 | ' bytemove(@colors,@vgacolors,16)
034f8     1C FA 05 F1 | 	add	objptr, #28
034fc     FD 5E 02 F6 | 	mov	arg01, objptr
03500     B4 FA 85 F1 | 	sub	objptr, #180
03504     0F 00 00 FF 
03508     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
0350c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03510     0F 00 00 FF 
03514     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03518     10 62 06 F6 | 	mov	arg03, #16
0351c     90 2C B0 FD | 	call	#__system____builtin_memmove
03520                 | ' 
03520                 | ' ' initialize a cursor
03520                 | ' 
03520                 | ' cursor_x:=0
03520     34 FA 05 F1 | 	add	objptr, #52
03524     FD 00 48 FC | 	wrbyte	#0, objptr
03528                 | ' cursor_y:=0
03528     01 FA 05 F1 | 	add	objptr, #1
0352c     FD 00 48 FC | 	wrbyte	#0, objptr
03530                 | ' cursor_sh:=14
03530     01 FA 05 F1 | 	add	objptr, #1
03534     FD 1C 48 FC | 	wrbyte	#14, objptr
03538     36 FA 85 F1 | 	sub	objptr, #54
0353c                 | ' 
0353c                 | ' 
0353c                 | ' ' start the cog
0353c                 | ' 
0353c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
0353c     0F 00 00 FF 
03540     68 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
03544     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03548     0F 00 00 FF 
0354c     68 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
03550     FD 62 02 F6 | 	mov	arg03, objptr
03554     10 5E 06 F6 | 	mov	arg01, #16
03558     28 62 62 FD | 	setq	arg03
0355c     30 5F F2 FC | 	coginit	arg01, arg02 wc
03560     01 5E 66 C6 |  if_b	neg	arg01, #1
03564     2F 19 02 F6 | 	mov	result1, arg01
03568     28 FA 05 F1 | 	add	objptr, #40
0356c     FD 18 62 FC | 	wrlong	result1, objptr
03570     28 FA 85 F1 | 	sub	objptr, #40
03574                 | ' waitms(20)
03574     14 5E 06 F6 | 	mov	arg01, #20
03578     70 2F B0 FD | 	call	#__system___waitms
0357c                 | ' 
0357c                 | ' ' clear the screen and set the colors to green on black
0357c                 | ' 
0357c                 | ' cls(c_green,c_black)
0357c     C7 5E 06 F6 | 	mov	arg01, #199
03580     00 60 06 F6 | 	mov	arg02, #0
03584     C8 EC BF FD | 	call	#_hng030rm_spin2_cls
03588                 | ' setbordercolor(0,0,128)
03588     00 5E 06 F6 | 	mov	arg01, #0
0358c     00 60 06 F6 | 	mov	arg02, #0
03590     80 62 06 F6 | 	mov	arg03, #128
03594     94 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
03598                 | ' setwritecolors(c_green,c_black)
03598                 | ' 
03598                 | ' 
03598                 | ' write_color:=ff
03598     38 FA 05 F1 | 	add	objptr, #56
0359c     FD 8E 69 FC | 	wrlong	#199, objptr
035a0                 | ' write_background:=bb
035a0     04 FA 05 F1 | 	add	objptr, #4
035a4     FD 00 68 FC | 	wrlong	#0, objptr
035a8                 | ' 
035a8                 | ' return cog
035a8     14 FA 85 F1 | 	sub	objptr, #20
035ac     FD 18 02 FB | 	rdlong	result1, objptr
035b0     28 FA 85 F1 | 	sub	objptr, #40
035b4     AF F0 03 F6 | 	mov	ptra, fp
035b8     BA 00 A0 FD | 	call	#popregs_
035bc                 | _hng030rm_spin2_start_ret
035bc     2D 00 64 FD | 	ret
035c0                 | 
035c0                 | ' 'this is the object and not a program
035c0                 | ' 
035c0                 | ' pub start() :cog
035c0                 | _retrocog_spin2_start
035c0     02 5A 05 F6 | 	mov	COUNT_, #2
035c4     B0 00 A0 FD | 	call	#pushregs_
035c8                 | ' 
035c8                 | ' cog:=cogspin(16,serialcog(),@serialstack)
035c8     FD 6C 02 F6 | 	mov	local01, objptr
035cc     01 00 00 FF 
035d0     40 FB 05 F1 | 	add	objptr, ##832
035d4     FD 6E 02 F6 | 	mov	local02, objptr
035d8     37 6D 62 FC | 	wrlong	local01, local02
035dc     04 6E 06 F1 | 	add	local02, #4
035e0     37 13 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
035e4     FD 62 02 F6 | 	mov	arg03, objptr
035e8     01 00 00 FF 
035ec     40 FB 85 F1 | 	sub	objptr, ##832
035f0     10 5E 06 F6 | 	mov	arg01, #16
035f4     28 62 62 FD | 	setq	arg03
035f8     FA 5E F2 FC | 	coginit	arg01, entryptr__ wc
035fc     01 5E 66 C6 |  if_b	neg	arg01, #1
03600     2F 19 02 F6 | 	mov	result1, arg01
03604                 | ' return cog
03604     AF F0 03 F6 | 	mov	ptra, fp
03608     BA 00 A0 FD | 	call	#popregs_
0360c                 | _retrocog_spin2_start_ret
0360c     2D 00 64 FD | 	ret
03610                 | 
03610                 | ' 
03610                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03610                 | _retrocog_spin2_serialcog
03610     0C 5A 05 F6 | 	mov	COUNT_, #12
03614     B0 00 A0 FD | 	call	#pushregs_
03618                 | ' 
03618                 | ' 'start serial and midi
03618                 | ' 
03618                 | ' serial_start(rxpin, txpin, baudrate)
03618     20 5E 06 F6 | 	mov	arg01, #32
0361c     21 60 06 F6 | 	mov	arg02, #33
03620     A6 0E 00 FF 
03624     00 62 06 F6 | 	mov	arg03, ##1920000
03628     C0 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0362c                 | ' serial_start(midiin,midiout,mbaudrate)
0362c     1D 5E 06 F6 | 	mov	arg01, #29
03630     1E 60 06 F6 | 	mov	arg02, #30
03634     3D 00 00 FF 
03638     12 62 06 F6 | 	mov	arg03, ##31250
0363c     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03640                 | ' serial_start(srxpin,stxpin,sbaudrate)
03640     3E 6C 06 F6 | 	mov	local01, #62
03644     42 0F 00 FF 
03648     80 6E 06 F6 | 	mov	local02, ##2000000
0364c     3F 5E 06 F6 | 	mov	arg01, #63
03650     3E 60 06 F6 | 	mov	arg02, #62
03654     42 0F 00 FF 
03658     80 62 06 F6 | 	mov	arg03, ##2000000
0365c     8C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03660                 | ' 
03660                 | ' mb:=(-1)
03660     01 70 66 F6 | 	neg	local03, #1
03664                 | ' b:=(-1)
03664     01 72 66 F6 | 	neg	local04, #1
03668                 | ' 
03668                 | ' mousefront:=0
03668     00 74 06 F6 | 	mov	local05, #0
0366c     08 FA 05 F1 | 	add	objptr, #8
03670     FD 00 68 FC | 	wrlong	#0, objptr
03674                 | ' mousetail:=0
03674     04 FA 05 F1 | 	add	objptr, #4
03678     FD 00 68 FC | 	wrlong	#0, objptr
0367c     0C FA 85 F1 | 	sub	objptr, #12
03680                 | ' kbdfront:=0
03680     FD 00 68 FC | 	wrlong	#0, objptr
03684                 | ' kbdtail:=0
03684     04 FA 05 F1 | 	add	objptr, #4
03688     FD 00 68 FC | 	wrlong	#0, objptr
0368c                 | ' midifront:=0
0368c     0C FA 05 F1 | 	add	objptr, #12
03690     FD 00 68 FC | 	wrlong	#0, objptr
03694                 | ' miditail:=0
03694     04 FA 05 F1 | 	add	objptr, #4
03698     FD 00 68 FC | 	wrlong	#0, objptr
0369c                 | ' serialfront:=0
0369c     04 FA 05 F1 | 	add	objptr, #4
036a0     FD 00 68 FC | 	wrlong	#0, objptr
036a4                 | ' serialtail:=0
036a4     04 FA 05 F1 | 	add	objptr, #4
036a8     FD 00 68 FC | 	wrlong	#0, objptr
036ac                 | ' long[$30]:=0
036ac     30 00 6C FC | 	wrlong	#0, #48
036b0                 | ' long[$34]:=0
036b0     34 00 6C FC | 	wrlong	#0, #52
036b4                 | ' long[$38]:=0
036b4     38 00 6C FC | 	wrlong	#0, #56
036b8     1C FA 85 F1 | 	sub	objptr, #28
036bc                 | ' long[$3C]:=0
036bc     3C 00 6C FC | 	wrlong	#0, #60
036c0                 | ' 
036c0                 | ' repeat
036c0                 | LR__0105
036c0                 | ' 
036c0                 | ' '  repeat 
036c0                 | '   rr:=rxcheck(rxpin)
036c0     20 5E 06 F6 | 	mov	arg01, #32
036c4     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
036c8     0C 77 02 F6 | 	mov	local06, result1
036cc                 | '   mrr:=rxcheck(midiin)
036cc     1D 5E 06 F6 | 	mov	arg01, #29
036d0     94 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
036d4     0C 79 02 F6 | 	mov	local07, result1
036d8                 | '   srr:=rxcheck(srxpin)
036d8     3F 5E 06 F6 | 	mov	arg01, #63
036dc     88 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
036e0     0C 75 02 F6 | 	mov	local05, result1
036e4     3A 7B 02 F6 | 	mov	local08, local05
036e8                 | ' 
036e8                 | ' '  until rr>=0 || mrr>=0  || srr>=0
036e8                 | ' 
036e8                 | '   
036e8                 | ' ' midi. Must be >= $80 for a command
036e8                 | ' '$80-$8F - 3 bytes note off. note, velocity
036e8                 | ' '$90-$9F - 3 bytes note on, note, velocity
036e8                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
036e8                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
036e8                 | ' '$C0-$CF - 2 bytes program change
036e8                 | ' '$D0-$DF - 2 bytes mono aftertouch
036e8                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
036e8                 | ' '$F0-$FF - 1 byte
036e8                 | '   
036e8                 | '   if srr>=0
036e8     00 7A 5E F2 | 	cmps	local08, #0 wcz
036ec     78 00 90 CD |  if_b	jmp	#LR__0107
036f0                 | '   
036f0                 | '     if serialfront<>((serialtail-1) //32)
036f0     1C FA 05 F1 | 	add	objptr, #28
036f4     FD 6C 02 FB | 	rdlong	local01, objptr
036f8     36 75 02 F6 | 	mov	local05, local01
036fc     01 74 86 F1 | 	sub	local05, #1
03700     3A 6F 52 F6 | 	abs	local02, local05 wc
03704     1F 6E 06 F5 | 	and	local02, #31
03708     37 6F 62 C6 |  if_b	neg	local02, local02
0370c     04 FA 85 F1 | 	sub	objptr, #4
03710     FD 7C 02 FB | 	rdlong	local09, objptr
03714     18 FA 85 F1 | 	sub	objptr, #24
03718     3E 7F 02 F6 | 	mov	local10, local09
0371c     37 7F 0A F2 | 	cmp	local10, local02 wz
03720     44 00 90 AD |  if_e	jmp	#LR__0106
03724                 | '       serialbuf[serialfront]:=srr
03724     18 FA 05 F1 | 	add	objptr, #24
03728     FD 74 02 FB | 	rdlong	local05, objptr
0372c     01 00 00 FF 
03730     08 FB 05 F1 | 	add	objptr, ##776
03734     FD 74 02 F1 | 	add	local05, objptr
03738     3A 7B 42 FC | 	wrbyte	local08, local05
0373c                 | '       serialfront+=1
0373c     01 00 00 FF 
03740     08 FB 85 F1 | 	sub	objptr, ##776
03744     FD 6E 02 FB | 	rdlong	local02, objptr
03748     01 6E 06 F1 | 	add	local02, #1
0374c     FD 6E 62 FC | 	wrlong	local02, objptr
03750                 | '       serialfront:=serialfront // 32
03750     37 6D 02 F6 | 	mov	local01, local02
03754     36 75 52 F6 | 	abs	local05, local01 wc
03758     1F 74 06 F5 | 	and	local05, #31
0375c     3A 75 62 C6 |  if_b	neg	local05, local05
03760     FD 74 62 FC | 	wrlong	local05, objptr
03764     18 FA 85 F1 | 	sub	objptr, #24
03768                 | LR__0106
03768                 | LR__0107
03768                 | '     
03768                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03768     80 78 5E F2 | 	cmps	local07, #128 wcz
0376c     08 00 90 CD |  if_b	jmp	#LR__0108
03770     BF 78 5E F2 | 	cmps	local07, #191 wcz
03774     10 00 90 ED |  if_be	jmp	#LR__0109
03778                 | LR__0108
03778     E0 78 5E F2 | 	cmps	local07, #224 wcz
0377c     18 00 90 CD |  if_b	jmp	#LR__0110
03780     EF 78 5E F2 | 	cmps	local07, #239 wcz
03784     10 00 90 1D |  if_a	jmp	#LR__0110
03788                 | LR__0109
03788                 | '     mb:=2
03788     02 70 06 F6 | 	mov	local03, #2
0378c                 | '     midireport:=mrr<<24
0378c     3C 75 02 F6 | 	mov	local05, local07
03790     18 74 66 F0 | 	shl	local05, #24
03794     3A 81 02 F6 | 	mov	local11, local05
03798                 | LR__0110
03798                 | ' 
03798                 | '   if (mrr>=$C0) && (mrr<=$DF)
03798     C0 78 5E F2 | 	cmps	local07, #192 wcz
0379c     18 00 90 CD |  if_b	jmp	#LR__0111
037a0     DF 78 5E F2 | 	cmps	local07, #223 wcz
037a4     10 00 90 1D |  if_a	jmp	#LR__0111
037a8                 | '     mb:=1
037a8     01 70 06 F6 | 	mov	local03, #1
037ac                 | '     midireport:=mrr<<24
037ac     3C 75 02 F6 | 	mov	local05, local07
037b0     18 74 66 F0 | 	shl	local05, #24
037b4     3A 81 02 F6 | 	mov	local11, local05
037b8                 | LR__0111
037b8                 | '   
037b8                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
037b8     F0 78 5E F2 | 	cmps	local07, #240 wcz
037bc                 | '     mb:=4
037bc     04 70 06 36 |  if_ae	mov	local03, #4
037c0                 | '     midireport:=mrr<<24  
037c0     3C 81 02 36 |  if_ae	mov	local11, local07
037c4     18 80 66 30 |  if_ae	shl	local11, #24
037c8                 | '   
037c8                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
037c8     80 78 5E F2 | 	cmps	local07, #128 wcz
037cc     44 00 90 3D |  if_ae	jmp	#LR__0113
037d0     00 70 5E F2 | 	cmps	local03, #0 wcz
037d4     3C 00 90 ED |  if_be	jmp	#LR__0113
037d8     00 78 5E F2 | 	cmps	local07, #0 wcz
037dc     34 00 90 CD |  if_b	jmp	#LR__0113
037e0                 | '     
037e0                 | '     mb--
037e0     38 75 02 F6 | 	mov	local05, local03
037e4     38 6D 02 F6 | 	mov	local01, local03
037e8     01 6C 86 F1 | 	sub	local01, #1
037ec     36 71 02 F6 | 	mov	local03, local01
037f0                 | '     if mb<3
037f0     03 70 5E F2 | 	cmps	local03, #3 wcz
037f4     1C 00 90 3D |  if_ae	jmp	#LR__0112
037f8                 | '       midireport+=mrr<<(mb<<3)
037f8     40 75 02 F6 | 	mov	local05, local11
037fc     3C 6D 02 F6 | 	mov	local01, local07
03800     38 6F 02 F6 | 	mov	local02, local03
03804     03 6E 66 F0 | 	shl	local02, #3
03808     37 6D 62 F0 | 	shl	local01, local02
0380c     36 75 02 F1 | 	add	local05, local01
03810     3A 81 02 F6 | 	mov	local11, local05
03814                 | LR__0112
03814                 | LR__0113
03814                 | '   
03814                 | '   if mb==0
03814     00 70 0E F2 | 	cmp	local03, #0 wz
03818     80 00 90 5D |  if_ne	jmp	#LR__0115
0381c                 | '     
0381c                 | '     if midifront<>((miditail-1) //32)
0381c     14 FA 05 F1 | 	add	objptr, #20
03820     FD 6C 02 FB | 	rdlong	local01, objptr
03824     36 75 02 F6 | 	mov	local05, local01
03828     01 74 86 F1 | 	sub	local05, #1
0382c     3A 6F 52 F6 | 	abs	local02, local05 wc
03830     1F 6E 06 F5 | 	and	local02, #31
03834     37 6F 62 C6 |  if_b	neg	local02, local02
03838     04 FA 85 F1 | 	sub	objptr, #4
0383c     FD 7C 02 FB | 	rdlong	local09, objptr
03840     10 FA 85 F1 | 	sub	objptr, #16
03844     3E 7F 02 F6 | 	mov	local10, local09
03848     37 7F 0A F2 | 	cmp	local10, local02 wz
0384c     48 00 90 AD |  if_e	jmp	#LR__0114
03850                 | '       midibuf[midifront]:=midireport
03850     10 FA 05 F1 | 	add	objptr, #16
03854     FD 74 02 FB | 	rdlong	local05, objptr
03858     02 74 66 F0 | 	shl	local05, #2
0385c     01 00 00 FF 
03860     90 FA 05 F1 | 	add	objptr, ##656
03864     FD 74 02 F1 | 	add	local05, objptr
03868     3A 81 62 FC | 	wrlong	local11, local05
0386c                 | '       midifront+=1
0386c     01 00 00 FF 
03870     90 FA 85 F1 | 	sub	objptr, ##656
03874     FD 6E 02 FB | 	rdlong	local02, objptr
03878     01 6E 06 F1 | 	add	local02, #1
0387c     FD 6E 62 FC | 	wrlong	local02, objptr
03880                 | '       midifront:=midifront // 32
03880     37 6D 02 F6 | 	mov	local01, local02
03884     36 75 52 F6 | 	abs	local05, local01 wc
03888     1F 74 06 F5 | 	and	local05, #31
0388c     3A 75 62 C6 |  if_b	neg	local05, local05
03890     FD 74 62 FC | 	wrlong	local05, objptr
03894     10 FA 85 F1 | 	sub	objptr, #16
03898                 | LR__0114
03898                 | '     mb:=(-1)
03898     01 70 66 F6 | 	neg	local03, #1
0389c                 | LR__0115
0389c                 | ' 
0389c                 | ' 'Keyboard and mouse
0389c                 | ' 
0389c                 | '   if (rr>=$80) && (rr<>$FF)
0389c     80 76 5E F2 | 	cmps	local06, #128 wcz
038a0     18 00 90 CD |  if_b	jmp	#LR__0116
038a4     FF 76 0E F2 | 	cmp	local06, #255 wz
038a8     10 00 90 AD |  if_e	jmp	#LR__0116
038ac                 | '     b:=3
038ac     03 72 06 F6 | 	mov	local04, #3
038b0                 | '     kbmreport:=rr<<24
038b0     3B 75 02 F6 | 	mov	local05, local06
038b4     18 74 66 F0 | 	shl	local05, #24
038b8     3A 83 02 F6 | 	mov	local12, local05
038bc                 | LR__0116
038bc                 | '   
038bc                 | '   if (rr<$80) && (b>0) && (rr>=0)
038bc     80 76 5E F2 | 	cmps	local06, #128 wcz
038c0     30 00 90 3D |  if_ae	jmp	#LR__0117
038c4     00 72 5E F2 | 	cmps	local04, #0 wcz
038c8     28 00 90 ED |  if_be	jmp	#LR__0117
038cc     00 76 5E F2 | 	cmps	local06, #0 wcz
038d0     20 00 90 CD |  if_b	jmp	#LR__0117
038d4                 | '     b--
038d4     01 72 86 F1 | 	sub	local04, #1
038d8                 | '     kbmreport+=rr<<(b<<3)  
038d8     41 75 02 F6 | 	mov	local05, local12
038dc     3B 6D 02 F6 | 	mov	local01, local06
038e0     39 6F 02 F6 | 	mov	local02, local04
038e4     03 6E 66 F0 | 	shl	local02, #3
038e8     37 6D 62 F0 | 	shl	local01, local02
038ec     36 75 02 F1 | 	add	local05, local01
038f0     3A 83 02 F6 | 	mov	local12, local05
038f4                 | LR__0117
038f4                 | '   
038f4                 | '   if (rr==$FF)
038f4     FF 76 0E F2 | 	cmp	local06, #255 wz
038f8                 | '     b:=0   
038f8     00 72 06 A6 |  if_e	mov	local04, #0
038fc                 | ' 
038fc                 | '   if b==0  
038fc     00 72 0E F2 | 	cmp	local04, #0 wz
03900     0C 01 90 5D |  if_ne	jmp	#LR__0122
03904                 | '  
03904                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03904     00 00 40 FF 
03908     00 82 1E F2 | 	cmp	local12, ##-2147483648 wcz
0390c     80 00 90 CD |  if_b	jmp	#LR__0119
03910     00 80 43 FF 
03914     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
03918     74 00 90 3D |  if_ae	jmp	#LR__0119
0391c                 | '       if mousefront<>((mousetail-1) //128)
0391c     0C FA 05 F1 | 	add	objptr, #12
03920     FD 6C 02 FB | 	rdlong	local01, objptr
03924     36 75 02 F6 | 	mov	local05, local01
03928     01 74 86 F1 | 	sub	local05, #1
0392c     3A 6F 52 F6 | 	abs	local02, local05 wc
03930     7F 6E 06 F5 | 	and	local02, #127
03934     37 6F 62 C6 |  if_b	neg	local02, local02
03938     04 FA 85 F1 | 	sub	objptr, #4
0393c     FD 7C 02 FB | 	rdlong	local09, objptr
03940     08 FA 85 F1 | 	sub	objptr, #8
03944     3E 7F 02 F6 | 	mov	local10, local09
03948     37 7F 0A F2 | 	cmp	local10, local02 wz
0394c     40 00 90 AD |  if_e	jmp	#LR__0118
03950                 | '         mousebuf[mousefront]:=kbmreport
03950     08 FA 05 F1 | 	add	objptr, #8
03954     FD 74 02 FB | 	rdlong	local05, objptr
03958     02 74 66 F0 | 	shl	local05, #2
0395c     98 FA 05 F1 | 	add	objptr, #152
03960     FD 74 02 F1 | 	add	local05, objptr
03964     3A 83 62 FC | 	wrlong	local12, local05
03968                 | '         mousefront+=1
03968     98 FA 85 F1 | 	sub	objptr, #152
0396c     FD 6E 02 FB | 	rdlong	local02, objptr
03970     01 6E 06 F1 | 	add	local02, #1
03974     FD 6E 62 FC | 	wrlong	local02, objptr
03978                 | '         mousefront:=mousefront // 128
03978     37 6D 02 F6 | 	mov	local01, local02
0397c     36 75 52 F6 | 	abs	local05, local01 wc
03980     7F 74 06 F5 | 	and	local05, #127
03984     3A 75 62 C6 |  if_b	neg	local05, local05
03988     FD 74 62 FC | 	wrlong	local05, objptr
0398c     08 FA 85 F1 | 	sub	objptr, #8
03990                 | LR__0118
03990                 | LR__0119
03990                 | '     b:=(-1)
03990     01 72 66 F6 | 	neg	local04, #1
03994                 | ' 
03994                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03994     00 80 43 FF 
03998     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
0399c     6C 00 90 CD |  if_b	jmp	#LR__0121
039a0     00 00 45 FF 
039a4     00 82 1E F2 | 	cmp	local12, ##-1979711488 wcz
039a8     60 00 90 3D |  if_ae	jmp	#LR__0121
039ac                 | '       if kbdfront<>((kbdtail-1) //32)
039ac     04 FA 05 F1 | 	add	objptr, #4
039b0     FD 6C 02 FB | 	rdlong	local01, objptr
039b4     04 FA 85 F1 | 	sub	objptr, #4
039b8     36 75 02 F6 | 	mov	local05, local01
039bc     01 74 86 F1 | 	sub	local05, #1
039c0     3A 6F 52 F6 | 	abs	local02, local05 wc
039c4     1F 6E 06 F5 | 	and	local02, #31
039c8     37 6F 62 C6 |  if_b	neg	local02, local02
039cc     FD 7E 02 FB | 	rdlong	local10, objptr
039d0     37 7F 0A F2 | 	cmp	local10, local02 wz
039d4     34 00 90 AD |  if_e	jmp	#LR__0120
039d8                 | '         kbdbuf[kbdfront]:=kbmreport
039d8     FD 74 02 FB | 	rdlong	local05, objptr
039dc     02 74 66 F0 | 	shl	local05, #2
039e0     20 FA 05 F1 | 	add	objptr, #32
039e4     FD 74 02 F1 | 	add	local05, objptr
039e8     3A 83 62 FC | 	wrlong	local12, local05
039ec                 | '         kbdfront+=1
039ec     20 FA 85 F1 | 	sub	objptr, #32
039f0     FD 6C 02 FB | 	rdlong	local01, objptr
039f4     01 6C 06 F1 | 	add	local01, #1
039f8     FD 6C 62 FC | 	wrlong	local01, objptr
039fc                 | '         kbdfront:=kbdfront // 32
039fc     36 75 52 F6 | 	abs	local05, local01 wc
03a00     1F 74 06 F5 | 	and	local05, #31
03a04     3A 75 62 C6 |  if_b	neg	local05, local05
03a08     FD 74 62 FC | 	wrlong	local05, objptr
03a0c                 | LR__0120
03a0c                 | LR__0121
03a0c                 | '     b:=(-1)
03a0c     01 72 66 F6 | 	neg	local04, #1
03a10                 | LR__0122
03a10                 | ' 
03a10                 | ' 
03a10                 | '   if long[$30]==0
03a10     30 74 0E FB | 	rdlong	local05, #48 wz
03a14     64 00 90 5D |  if_ne	jmp	#LR__0124
03a18                 | '     if kbdfront<>kbdtail
03a18     FD 74 02 FB | 	rdlong	local05, objptr
03a1c     04 FA 05 F1 | 	add	objptr, #4
03a20     FD 6E 02 FB | 	rdlong	local02, objptr
03a24     04 FA 85 F1 | 	sub	objptr, #4
03a28     37 6D 02 F6 | 	mov	local01, local02
03a2c     36 75 0A F2 | 	cmp	local05, local01 wz
03a30     48 00 90 AD |  if_e	jmp	#LR__0123
03a34                 | '       long[$30]:=kbdbuf[kbdtail]
03a34     04 FA 05 F1 | 	add	objptr, #4
03a38     FD 74 02 FB | 	rdlong	local05, objptr
03a3c     02 74 66 F0 | 	shl	local05, #2
03a40     1C FA 05 F1 | 	add	objptr, #28
03a44     FD 74 02 F1 | 	add	local05, objptr
03a48     3A 7F 02 FB | 	rdlong	local10, local05
03a4c     30 7E 66 FC | 	wrlong	local10, #48
03a50                 | '       kbdtail++
03a50     1C FA 85 F1 | 	sub	objptr, #28
03a54     FD 7E 02 FB | 	rdlong	local10, objptr
03a58     3F 6F 02 F6 | 	mov	local02, local10
03a5c     01 6E 06 F1 | 	add	local02, #1
03a60     FD 6E 62 FC | 	wrlong	local02, objptr
03a64                 | '       kbdtail:= kbdtail // 32
03a64     37 6D 02 F6 | 	mov	local01, local02
03a68     36 75 52 F6 | 	abs	local05, local01 wc
03a6c     1F 74 06 F5 | 	and	local05, #31
03a70     3A 75 62 C6 |  if_b	neg	local05, local05
03a74     FD 74 62 FC | 	wrlong	local05, objptr
03a78     04 FA 85 F1 | 	sub	objptr, #4
03a7c                 | LR__0123
03a7c                 | LR__0124
03a7c                 | '       
03a7c                 | '   if long[$34]==0
03a7c     34 74 0E FB | 	rdlong	local05, #52 wz
03a80     68 00 90 5D |  if_ne	jmp	#LR__0126
03a84                 | '     if mousefront<>mousetail
03a84     08 FA 05 F1 | 	add	objptr, #8
03a88     FD 6C 02 FB | 	rdlong	local01, objptr
03a8c     04 FA 05 F1 | 	add	objptr, #4
03a90     FD 7E 02 FB | 	rdlong	local10, objptr
03a94     0C FA 85 F1 | 	sub	objptr, #12
03a98     3F 6F 02 F6 | 	mov	local02, local10
03a9c     37 6D 0A F2 | 	cmp	local01, local02 wz
03aa0     48 00 90 AD |  if_e	jmp	#LR__0125
03aa4                 | '       long[$34]:=mousebuf[mousetail]
03aa4     0C FA 05 F1 | 	add	objptr, #12
03aa8     FD 74 02 FB | 	rdlong	local05, objptr
03aac     02 74 66 F0 | 	shl	local05, #2
03ab0     94 FA 05 F1 | 	add	objptr, #148
03ab4     FD 74 02 F1 | 	add	local05, objptr
03ab8     3A 7F 02 FB | 	rdlong	local10, local05
03abc     34 7E 66 FC | 	wrlong	local10, #52
03ac0                 | '       mousetail++
03ac0     94 FA 85 F1 | 	sub	objptr, #148
03ac4     FD 7E 02 FB | 	rdlong	local10, objptr
03ac8     3F 6F 02 F6 | 	mov	local02, local10
03acc     01 6E 06 F1 | 	add	local02, #1
03ad0     FD 6E 62 FC | 	wrlong	local02, objptr
03ad4                 | '       mousetail:= mousetail // 128
03ad4     37 6D 02 F6 | 	mov	local01, local02
03ad8     36 75 52 F6 | 	abs	local05, local01 wc
03adc     7F 74 06 F5 | 	and	local05, #127
03ae0     3A 75 62 C6 |  if_b	neg	local05, local05
03ae4     FD 74 62 FC | 	wrlong	local05, objptr
03ae8     0C FA 85 F1 | 	sub	objptr, #12
03aec                 | LR__0125
03aec                 | LR__0126
03aec                 | ' 
03aec                 | '       
03aec                 | '   if long[$38]==0
03aec     38 74 0E FB | 	rdlong	local05, #56 wz
03af0     70 00 90 5D |  if_ne	jmp	#LR__0128
03af4                 | '     if midifront<>miditail
03af4     10 FA 05 F1 | 	add	objptr, #16
03af8     FD 6C 02 FB | 	rdlong	local01, objptr
03afc     04 FA 05 F1 | 	add	objptr, #4
03b00     FD 7E 02 FB | 	rdlong	local10, objptr
03b04     14 FA 85 F1 | 	sub	objptr, #20
03b08     3F 6F 02 F6 | 	mov	local02, local10
03b0c     37 6D 0A F2 | 	cmp	local01, local02 wz
03b10     50 00 90 AD |  if_e	jmp	#LR__0127
03b14                 | '       long[$38]:=midibuf[miditail]
03b14     14 FA 05 F1 | 	add	objptr, #20
03b18     FD 74 02 FB | 	rdlong	local05, objptr
03b1c     02 74 66 F0 | 	shl	local05, #2
03b20     01 00 00 FF 
03b24     8C FA 05 F1 | 	add	objptr, ##652
03b28     FD 74 02 F1 | 	add	local05, objptr
03b2c     3A 7F 02 FB | 	rdlong	local10, local05
03b30     38 7E 66 FC | 	wrlong	local10, #56
03b34                 | '       miditail++
03b34     01 00 00 FF 
03b38     8C FA 85 F1 | 	sub	objptr, ##652
03b3c     FD 7E 02 FB | 	rdlong	local10, objptr
03b40     3F 6F 02 F6 | 	mov	local02, local10
03b44     01 6E 06 F1 | 	add	local02, #1
03b48     FD 6E 62 FC | 	wrlong	local02, objptr
03b4c                 | '       miditail:= miditail // 32
03b4c     37 6D 02 F6 | 	mov	local01, local02
03b50     36 75 52 F6 | 	abs	local05, local01 wc
03b54     1F 74 06 F5 | 	and	local05, #31
03b58     3A 75 62 C6 |  if_b	neg	local05, local05
03b5c     FD 74 62 FC | 	wrlong	local05, objptr
03b60     14 FA 85 F1 | 	sub	objptr, #20
03b64                 | LR__0127
03b64                 | LR__0128
03b64                 | '       
03b64                 | '   if long[$3c]==0
03b64     3C 74 0E FB | 	rdlong	local05, #60 wz
03b68     54 FB 9F 5D |  if_ne	jmp	#LR__0105
03b6c                 | '     if serialfront<>serialtail
03b6c     18 FA 05 F1 | 	add	objptr, #24
03b70     FD 6C 02 FB | 	rdlong	local01, objptr
03b74     04 FA 05 F1 | 	add	objptr, #4
03b78     FD 7E 02 FB | 	rdlong	local10, objptr
03b7c     1C FA 85 F1 | 	sub	objptr, #28
03b80     3F 6F 02 F6 | 	mov	local02, local10
03b84     37 6D 0A F2 | 	cmp	local01, local02 wz
03b88     34 FB 9F AD |  if_e	jmp	#LR__0105
03b8c                 | '       byte[$3c]:=255
03b8c     3C FE 4D FC | 	wrbyte	#255, #60
03b90                 | '       byte[$3D]:=serialbuf[serialtail]
03b90     1C FA 05 F1 | 	add	objptr, #28
03b94     FD 74 02 FB | 	rdlong	local05, objptr
03b98     01 00 00 FF 
03b9c     04 FB 05 F1 | 	add	objptr, ##772
03ba0     FD 74 02 F1 | 	add	local05, objptr
03ba4     3A 7F C2 FA | 	rdbyte	local10, local05
03ba8     3D 7E 46 FC | 	wrbyte	local10, #61
03bac                 | '       serialtail++
03bac     01 00 00 FF 
03bb0     04 FB 85 F1 | 	sub	objptr, ##772
03bb4     FD 7E 02 FB | 	rdlong	local10, objptr
03bb8     3F 6F 02 F6 | 	mov	local02, local10
03bbc     01 6E 06 F1 | 	add	local02, #1
03bc0     FD 6E 62 FC | 	wrlong	local02, objptr
03bc4                 | '       serialtail:= serialtail // 32
03bc4     37 6D 02 F6 | 	mov	local01, local02
03bc8     36 75 52 F6 | 	abs	local05, local01 wc
03bcc     1F 74 06 F5 | 	and	local05, #31
03bd0     3A 75 62 C6 |  if_b	neg	local05, local05
03bd4     FD 74 62 FC | 	wrlong	local05, objptr
03bd8     1C FA 85 F1 | 	sub	objptr, #28
03bdc     E0 FA 9F FD | 	jmp	#LR__0105
03be0     AF F0 03 F6 | 	mov	ptra, fp
03be4     BA 00 A0 FD | 	call	#popregs_
03be8                 | _retrocog_spin2_serialcog_ret
03be8     2D 00 64 FD | 	ret
03bec                 | 
03bec                 | '       
03bec                 | ' 
03bec                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03bec                 | ' 
03bec                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03bec                 | _retrocog_spin2_serial_start
03bec     04 5A 05 F6 | 	mov	COUNT_, #4
03bf0     B0 00 A0 FD | 	call	#pushregs_
03bf4     2F 6D 02 F6 | 	mov	local01, arg01
03bf8     30 6F 02 F6 | 	mov	local02, arg02
03bfc                 | ' 
03bfc                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03bfc     14 5E 06 FB | 	rdlong	arg01, #20
03c00     10 60 C6 F9 | 	decod	arg02, #16
03c04     30 5F 02 FD | 	qmul	arg01, arg02
03c08     19 70 62 FD | 	getqy	local03
03c0c     18 72 62 FD | 	getqx	local04
03c10     28 70 62 FD | 	setq	local03
03c14     31 73 12 FD | 	qdiv	local04, arg03
03c18     18 18 62 FD | 	getqx	result1
03c1c     0C 63 02 F6 | 	mov	arg03, result1
03c20     FE FF 7F FF 
03c24     00 62 06 F5 | 	and	arg03, ##-1024
03c28                 | ' bitmode |= 7                                                  ' set bits (8)
03c28     07 62 46 F5 | 	or	arg03, #7
03c2c                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03c2c     40 6C 62 FD | 	dirl	local01
03c30     08 00 80 FF 
03c34     36 7D 08 FC | 	wrpin	##4158, local01
03c38     36 63 12 FC | 	wxpin	arg03, local01
03c3c     36 01 28 FC | 	wypin	#0, local01
03c40     41 6C 62 FD | 	dirh	local01
03c44                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03c44     40 6E 62 FD | 	dirl	local02
03c48     37 F9 08 FC | 	wrpin	#124, local02
03c4c     37 63 12 FC | 	wxpin	arg03, local02
03c50     37 01 28 FC | 	wypin	#0, local02
03c54     41 6E 62 FD | 	dirh	local02
03c58                 | ' pinhigh(rxpin)
03c58     59 6C 62 FD | 	drvh	local01
03c5c     AF F0 03 F6 | 	mov	ptra, fp
03c60     BA 00 A0 FD | 	call	#popregs_
03c64                 | _retrocog_spin2_serial_start_ret
03c64     2D 00 64 FD | 	ret
03c68                 | 
03c68                 | ' 
03c68                 | ' pub rxcheck(pin) : rxbyte | check
03c68                 | _retrocog_spin2_rxcheck
03c68     03 5A 05 F6 | 	mov	COUNT_, #3
03c6c     B0 00 A0 FD | 	call	#pushregs_
03c70     2F 6D 02 F6 | 	mov	local01, arg01
03c74                 | ' 
03c74                 | ' '' Check for serial input
03c74                 | ' '' -- returns -1 if nothing available
03c74                 | ' 
03c74                 | '   rxbyte := -1
03c74     01 6E 66 F6 | 	neg	local02, #1
03c78                 | '   check := pinr(pin)
03c78     36 5F 02 F6 | 	mov	arg01, local01
03c7c     4C 28 B0 FD | 	call	#__system___pinread
03c80     0C 71 0A F6 | 	mov	local03, result1 wz
03c84                 | '   if (check)
03c84                 | '     rxbyte := rdpin(pin) >> 24
03c84     00 6E 06 56 |  if_ne	mov	local02, #0
03c88     36 6F 8A 5A |  if_ne	rdpin	local02, local01
03c8c     18 6E 46 50 |  if_ne	shr	local02, #24
03c90     37 19 02 F6 | 	mov	result1, local02
03c94     AF F0 03 F6 | 	mov	ptra, fp
03c98     BA 00 A0 FD | 	call	#popregs_
03c9c                 | _retrocog_spin2_rxcheck_ret
03c9c     2D 00 64 FD | 	ret
03ca0                 | 
03ca0                 | _trackerplayer_spin2_initModule
03ca0     0B 5A 05 F6 | 	mov	COUNT_, #11
03ca4     B0 00 A0 FD | 	call	#pushregs_
03ca8     30 F0 07 F1 | 	add	ptra, #48
03cac     AF 5E 62 FC | 	wrlong	arg01, fp
03cb0     04 5E 05 F1 | 	add	fp, #4
03cb4     AF 60 62 FC | 	wrlong	arg02, fp
03cb8     04 5E 85 F1 | 	sub	fp, #4
03cbc                 | ' 
03cbc                 | '   ' Set some data pointers
03cbc                 | '   magicFour      := hubPtr + 1080
03cbc     AF 6C 02 FB | 	rdlong	local01, fp
03cc0     02 00 00 FF 
03cc4     38 6C 06 F1 | 	add	local01, ##1080
03cc8     9D FA 05 F1 | 	add	objptr, #157
03ccc     FD 6C 62 FC | 	wrlong	local01, objptr
03cd0                 | '   nameStr        := hubPtr
03cd0     AF 6C 02 FB | 	rdlong	local01, fp
03cd4     97 FA 85 F1 | 	sub	objptr, #151
03cd8     FD 6C 62 FC | 	wrlong	local01, objptr
03cdc                 | '   samplesInfoLut := hubPtr + 20
03cdc     AF 6C 02 FB | 	rdlong	local01, fp
03ce0     14 6C 06 F1 | 	add	local01, #20
03ce4     04 FA 05 F1 | 	add	objptr, #4
03ce8     FD 6C 62 FC | 	wrlong	local01, objptr
03cec                 | ' 
03cec                 | '   ' Is this a 31 sample module?
03cec                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03cec     93 FA 05 F1 | 	add	objptr, #147
03cf0     FD 6C 02 FB | 	rdlong	local01, objptr
03cf4     9D FA 85 F1 | 	sub	objptr, #157
03cf8     36 6F C2 FA | 	rdbyte	local02, local01
03cfc     4D 6E 0E F2 | 	cmp	local02, #77 wz
03d00     4C 01 90 5D |  if_ne	jmp	#LR__0132
03d04     9D FA 05 F1 | 	add	objptr, #157
03d08     FD 70 02 FB | 	rdlong	local03, objptr
03d0c     9D FA 85 F1 | 	sub	objptr, #157
03d10     02 70 06 F1 | 	add	local03, #2
03d14     38 73 C2 FA | 	rdbyte	local04, local03
03d18     4B 72 0E F2 | 	cmp	local04, #75 wz
03d1c     30 01 90 5D |  if_ne	jmp	#LR__0132
03d20                 | '     songLength          := byte[hubPtr + 950]
03d20     AF 6C 02 FB | 	rdlong	local01, fp
03d24     01 00 00 FF 
03d28     B6 6D 06 F1 | 	add	local01, ##950
03d2c     36 75 C2 FA | 	rdbyte	local05, local01
03d30     9A FA 05 F1 | 	add	objptr, #154
03d34     FD 74 42 FC | 	wrbyte	local05, objptr
03d38                 | '     unknown1            := byte[hubPtr + 951]
03d38     AF 6C 02 FB | 	rdlong	local01, fp
03d3c     01 00 00 FF 
03d40     B7 6D 06 F1 | 	add	local01, ##951
03d44     36 75 C2 FA | 	rdbyte	local05, local01
03d48     02 FA 05 F1 | 	add	objptr, #2
03d4c     FD 74 42 FC | 	wrbyte	local05, objptr
03d50                 | '     songPositionsLut    :=      hubPtr + 952
03d50     AF 6C 02 FB | 	rdlong	local01, fp
03d54     01 00 00 FF 
03d58     B8 6D 06 F1 | 	add	local01, ##952
03d5c     06 FA 85 F1 | 	sub	objptr, #6
03d60     FD 6C 62 FC | 	wrlong	local01, objptr
03d64                 | '     patternsData        :=      hubPtr + 1084
03d64     AF 6C 02 FB | 	rdlong	local01, fp
03d68     02 00 00 FF 
03d6c     3C 6C 06 F1 | 	add	local01, ##1084
03d70     04 FA 85 F1 | 	sub	objptr, #4
03d74     FD 6C 62 FC | 	wrlong	local01, objptr
03d78                 | '     numberOfInstruments := 31
03d78     14 FA 05 F1 | 	add	objptr, #20
03d7c     FD 3E 48 FC | 	wrbyte	#31, objptr
03d80                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03d80     0B FA 85 F1 | 	sub	objptr, #11
03d84     FD 00 48 FC | 	wrbyte	#0, objptr
03d88     9B FA 85 F1 | 	sub	objptr, #155
03d8c                 | '     repeat i from 952 to 1079
03d8c     08 5E 05 F1 | 	add	fp, #8
03d90     01 00 80 FF 
03d94     AF 70 6B FC | 	wrlong	##952, fp
03d98     08 5E 85 F1 | 	sub	fp, #8
03d9c     D0 C2 9F FE | 	loc	pa,	#(@LR__0131-@LR__0129)
03da0     93 00 A0 FD | 	call	#FCACHE_LOAD_
03da4                 | LR__0129
03da4                 | '       if byte[hubPtr][i] > numberOfPatterns
03da4     AF 76 02 FB | 	rdlong	local06, fp
03da8     08 5E 05 F1 | 	add	fp, #8
03dac     AF 6E 02 FB | 	rdlong	local02, fp
03db0     08 5E 85 F1 | 	sub	fp, #8
03db4     3B 6F 02 F1 | 	add	local02, local06
03db8     37 73 C2 FA | 	rdbyte	local04, local02
03dbc     9B FA 05 F1 | 	add	objptr, #155
03dc0     FD 78 C2 FA | 	rdbyte	local07, objptr
03dc4     9B FA 85 F1 | 	sub	objptr, #155
03dc8     3C 73 5A F2 | 	cmps	local04, local07 wcz
03dcc     24 00 90 ED |  if_be	jmp	#LR__0130
03dd0                 | '         numberOfPatterns := byte[hubPtr][i]
03dd0     AF 76 02 FB | 	rdlong	local06, fp
03dd4     08 5E 05 F1 | 	add	fp, #8
03dd8     AF 6E 02 FB | 	rdlong	local02, fp
03ddc     08 5E 85 F1 | 	sub	fp, #8
03de0     3B 6F 02 F1 | 	add	local02, local06
03de4     37 73 C2 FA | 	rdbyte	local04, local02
03de8     9B FA 05 F1 | 	add	objptr, #155
03dec     FD 72 42 FC | 	wrbyte	local04, objptr
03df0     9B FA 85 F1 | 	sub	objptr, #155
03df4                 | LR__0130
03df4     08 5E 05 F1 | 	add	fp, #8
03df8     AF 74 02 FB | 	rdlong	local05, fp
03dfc     01 74 06 F1 | 	add	local05, #1
03e00     AF 74 62 FC | 	wrlong	local05, fp
03e04     08 5E 85 F1 | 	sub	fp, #8
03e08     02 00 00 FF 
03e0c     38 74 1E F2 | 	cmp	local05, ##1080 wcz
03e10     90 FF 9F CD |  if_b	jmp	#LR__0129
03e14                 | LR__0131
03e14                 | '     numberOfPatterns++
03e14     9B FA 05 F1 | 	add	objptr, #155
03e18     FD 74 C2 FA | 	rdbyte	local05, objptr
03e1c     FD 6E C2 FA | 	rdbyte	local02, objptr
03e20     01 6E 06 F1 | 	add	local02, #1
03e24     FD 6E 42 FC | 	wrbyte	local02, objptr
03e28                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03e28     09 FA 85 F1 | 	sub	objptr, #9
03e2c     FD 6C 02 FB | 	rdlong	local01, objptr
03e30     09 FA 05 F1 | 	add	objptr, #9
03e34     FD 6E C2 FA | 	rdbyte	local02, objptr
03e38     0A 6E 66 F0 | 	shl	local02, #10
03e3c     37 6D 02 F1 | 	add	local01, local02
03e40     8D FA 85 F1 | 	sub	objptr, #141
03e44     FD 6C 62 FC | 	wrlong	local01, objptr
03e48     0E FA 85 F1 | 	sub	objptr, #14
03e4c                 | ' 
03e4c                 | '   ' This must be an oldschool 15 sample soundtracker module
03e4c                 | '   else
03e4c     1C 01 90 FD | 	jmp	#LR__0136
03e50                 | LR__0132
03e50                 | '     songLength          := byte[hubPtr + 470]
03e50     AF 6C 02 FB | 	rdlong	local01, fp
03e54     D6 6D 06 F1 | 	add	local01, #470
03e58     36 75 C2 FA | 	rdbyte	local05, local01
03e5c     9A FA 05 F1 | 	add	objptr, #154
03e60     FD 74 42 FC | 	wrbyte	local05, objptr
03e64                 | '     unknown1            := byte[hubPtr + 471]
03e64     AF 6C 02 FB | 	rdlong	local01, fp
03e68     D7 6D 06 F1 | 	add	local01, #471
03e6c     36 75 C2 FA | 	rdbyte	local05, local01
03e70     02 FA 05 F1 | 	add	objptr, #2
03e74     FD 74 42 FC | 	wrbyte	local05, objptr
03e78                 | '     songPositionsLut    :=      hubPtr + 472
03e78     AF 6C 02 FB | 	rdlong	local01, fp
03e7c     D8 6D 06 F1 | 	add	local01, #472
03e80     06 FA 85 F1 | 	sub	objptr, #6
03e84     FD 6C 62 FC | 	wrlong	local01, objptr
03e88                 | '     patternsData        :=      hubPtr + 600
03e88     AF 6C 02 FB | 	rdlong	local01, fp
03e8c     01 00 00 FF 
03e90     58 6C 06 F1 | 	add	local01, ##600
03e94     04 FA 85 F1 | 	sub	objptr, #4
03e98     FD 6C 62 FC | 	wrlong	local01, objptr
03e9c                 | '     numberOfInstruments := 15
03e9c     14 FA 05 F1 | 	add	objptr, #20
03ea0     FD 1E 48 FC | 	wrbyte	#15, objptr
03ea4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03ea4     0B FA 85 F1 | 	sub	objptr, #11
03ea8     FD 00 48 FC | 	wrbyte	#0, objptr
03eac     9B FA 85 F1 | 	sub	objptr, #155
03eb0                 | '     repeat i from 472 to 599
03eb0     08 5E 05 F1 | 	add	fp, #8
03eb4     AF B0 6B FC | 	wrlong	#472, fp
03eb8     08 5E 85 F1 | 	sub	fp, #8
03ebc     B0 C1 9F FE | 	loc	pa,	#(@LR__0135-@LR__0133)
03ec0     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ec4                 | LR__0133
03ec4                 | '       if byte[hubPtr][i] > numberOfPatterns
03ec4     AF 76 02 FB | 	rdlong	local06, fp
03ec8     08 5E 05 F1 | 	add	fp, #8
03ecc     AF 6E 02 FB | 	rdlong	local02, fp
03ed0     08 5E 85 F1 | 	sub	fp, #8
03ed4     3B 6F 02 F1 | 	add	local02, local06
03ed8     37 73 C2 FA | 	rdbyte	local04, local02
03edc     9B FA 05 F1 | 	add	objptr, #155
03ee0     FD 78 C2 FA | 	rdbyte	local07, objptr
03ee4     9B FA 85 F1 | 	sub	objptr, #155
03ee8     3C 73 5A F2 | 	cmps	local04, local07 wcz
03eec     24 00 90 ED |  if_be	jmp	#LR__0134
03ef0                 | '         numberOfPatterns := byte[hubPtr][i]
03ef0     AF 76 02 FB | 	rdlong	local06, fp
03ef4     08 5E 05 F1 | 	add	fp, #8
03ef8     AF 6E 02 FB | 	rdlong	local02, fp
03efc     08 5E 85 F1 | 	sub	fp, #8
03f00     3B 6F 02 F1 | 	add	local02, local06
03f04     37 73 C2 FA | 	rdbyte	local04, local02
03f08     9B FA 05 F1 | 	add	objptr, #155
03f0c     FD 72 42 FC | 	wrbyte	local04, objptr
03f10     9B FA 85 F1 | 	sub	objptr, #155
03f14                 | LR__0134
03f14     08 5E 05 F1 | 	add	fp, #8
03f18     AF 74 02 FB | 	rdlong	local05, fp
03f1c     01 74 06 F1 | 	add	local05, #1
03f20     AF 74 62 FC | 	wrlong	local05, fp
03f24     08 5E 85 F1 | 	sub	fp, #8
03f28     01 00 00 FF 
03f2c     58 74 1E F2 | 	cmp	local05, ##600 wcz
03f30     90 FF 9F CD |  if_b	jmp	#LR__0133
03f34                 | LR__0135
03f34                 | '     numberOfPatterns++
03f34     9B FA 05 F1 | 	add	objptr, #155
03f38     FD 74 C2 FA | 	rdbyte	local05, objptr
03f3c     FD 6E C2 FA | 	rdbyte	local02, objptr
03f40     01 6E 06 F1 | 	add	local02, #1
03f44     FD 6E 42 FC | 	wrbyte	local02, objptr
03f48                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03f48     09 FA 85 F1 | 	sub	objptr, #9
03f4c     FD 6C 02 FB | 	rdlong	local01, objptr
03f50     09 FA 05 F1 | 	add	objptr, #9
03f54     FD 6E C2 FA | 	rdbyte	local02, objptr
03f58     0A 6E 66 F0 | 	shl	local02, #10
03f5c     37 6D 02 F1 | 	add	local01, local02
03f60     8D FA 85 F1 | 	sub	objptr, #141
03f64     FD 6C 62 FC | 	wrlong	local01, objptr
03f68     0E FA 85 F1 | 	sub	objptr, #14
03f6c                 | LR__0136
03f6c                 | ' 
03f6c                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03f6c                 | '   tmpPtr := sampleDataPtr
03f6c     0E FA 05 F1 | 	add	objptr, #14
03f70     FD 6C 02 FB | 	rdlong	local01, objptr
03f74     0C 5E 05 F1 | 	add	fp, #12
03f78     AF 6C 62 FC | 	wrlong	local01, fp
03f7c                 | '   repeat i from 1 to numberOfInstruments
03f7c     04 5E 85 F1 | 	sub	fp, #4
03f80     AF 02 68 FC | 	wrlong	#1, fp
03f84     08 5E 85 F1 | 	sub	fp, #8
03f88     98 FA 05 F1 | 	add	objptr, #152
03f8c     FD 6E C2 FA | 	rdbyte	local02, objptr
03f90     01 6E 5E F2 | 	cmps	local02, #1 wcz
03f94     01 74 06 16 |  if_a	mov	local05, #1
03f98     01 74 66 E6 |  if_be	neg	local05, #1
03f9c     3A 7B 02 F6 | 	mov	local08, local05
03fa0     FD 7C C2 FA | 	rdbyte	local09, objptr
03fa4     A6 FA 85 F1 | 	sub	objptr, #166
03fa8     3D 7D 02 F1 | 	add	local09, local08
03fac                 | LR__0137
03fac                 | '     samplesPtrLut[i-1] := tmpPtr
03fac     08 5E 05 F1 | 	add	fp, #8
03fb0     AF 7E 02 FB | 	rdlong	local10, fp
03fb4     01 7E 86 F1 | 	sub	local10, #1
03fb8     02 7E 66 F0 | 	shl	local10, #2
03fbc     12 FA 05 F1 | 	add	objptr, #18
03fc0     FD 7E 02 F1 | 	add	local10, objptr
03fc4     04 5E 05 F1 | 	add	fp, #4
03fc8     AF 80 02 FB | 	rdlong	local11, fp
03fcc     3F 81 62 FC | 	wrlong	local11, local10
03fd0                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03fd0     04 5E 85 F1 | 	sub	fp, #4
03fd4     AF 5E 02 FB | 	rdlong	arg01, fp
03fd8     1C 5E 05 F1 | 	add	fp, #28
03fdc     AF 60 02 F6 | 	mov	arg02, fp
03fe0     14 5E 85 F1 | 	sub	fp, #20
03fe4     AF 62 02 F6 | 	mov	arg03, fp
03fe8     04 5E 05 F1 | 	add	fp, #4
03fec     AF 64 02 F6 | 	mov	arg04, fp
03ff0     04 5E 05 F1 | 	add	fp, #4
03ff4     AF 66 02 F6 | 	mov	arg05, fp
03ff8     04 5E 05 F1 | 	add	fp, #4
03ffc     AF 68 02 F6 | 	mov	arg06, fp
04000     04 5E 05 F1 | 	add	fp, #4
04004     AF 6A 02 F6 | 	mov	arg07, fp
04008     20 5E 85 F1 | 	sub	fp, #32
0400c     12 FA 85 F1 | 	sub	objptr, #18
04010     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04014                 | '     tmpPtr += samLength
04014     0C 5E 05 F1 | 	add	fp, #12
04018     AF 78 02 FB | 	rdlong	local07, fp
0401c     04 5E 05 F1 | 	add	fp, #4
04020     AF 7E 02 FB | 	rdlong	local10, fp
04024     3F 79 02 F1 | 	add	local07, local10
04028     04 5E 85 F1 | 	sub	fp, #4
0402c     AF 78 62 FC | 	wrlong	local07, fp
04030     04 5E 85 F1 | 	sub	fp, #4
04034     AF 78 02 FB | 	rdlong	local07, fp
04038     3D 79 02 F1 | 	add	local07, local08
0403c     AF 78 62 FC | 	wrlong	local07, fp
04040     08 5E 85 F1 | 	sub	fp, #8
04044     3E 79 0A F2 | 	cmp	local07, local09 wz
04048     60 FF 9F 5D |  if_ne	jmp	#LR__0137
0404c                 | ' 
0404c                 | '   ' Below this point, all play routine variables are resest to their default values
0404c                 | '   tickCounter                 := 0
0404c     A1 FA 05 F1 | 	add	objptr, #161
04050     FD 00 48 FC | 	wrbyte	#0, objptr
04054                 | '   patternRow                  := 0
04054     01 FA 05 F1 | 	add	objptr, #1
04058     FD 00 48 FC | 	wrbyte	#0, objptr
0405c                 | '   songPosition                := startPattern
0405c     04 5E 05 F1 | 	add	fp, #4
04060     AF 6C 02 FB | 	rdlong	local01, fp
04064     04 5E 85 F1 | 	sub	fp, #4
04068     01 FA 05 F1 | 	add	objptr, #1
0406c     FD 6C 42 FC | 	wrbyte	local01, objptr
04070                 | '   currentSongSpeed            := 6
04070     01 FA 05 F1 | 	add	objptr, #1
04074     FD 0C 48 FC | 	wrbyte	#6, objptr
04078                 | '   patternDelay                := 0
04078     01 FA 05 F1 | 	add	objptr, #1
0407c     FD 00 48 FC | 	wrbyte	#0, objptr
04080                 | '   ticksPerMinute              := 50 * 60
04080     02 FB 05 F1 | 	add	objptr, #258
04084     05 00 80 FF 
04088     FD 70 6B FC | 	wrlong	##3000, objptr
0408c     A7 FB 85 F1 | 	sub	objptr, #423
04090                 | '   cyclesToWait                := systemClock / 50
04090     FD 98 02 FB | 	rdlong	muldiva_, objptr
04094     32 9A 06 F6 | 	mov	muldivb_, #50
04098     C6 00 A0 FD | 	call	#divide_
0409c     AB FB 05 F1 | 	add	objptr, #427
040a0     FD 9A 62 FC | 	wrlong	muldivb_, objptr
040a4                 | '   sampleNumber_memory         := 0
040a4     35 FA 05 F1 | 	add	objptr, #53
040a8     FD 00 48 FC | 	wrbyte	#0, objptr
040ac                 | '   lpFilter                    := 0
040ac     25 FA 85 F1 | 	sub	objptr, #37
040b0     FD 00 48 FC | 	wrbyte	#0, objptr
040b4                 | '   cmdD_memoryX                := 0
040b4     29 FA 05 F1 | 	add	objptr, #41
040b8     FD 00 48 FC | 	wrbyte	#0, objptr
040bc                 | '   cmdD_memoryY                := 0
040bc     01 FA 05 F1 | 	add	objptr, #1
040c0     FD 00 48 FC | 	wrbyte	#0, objptr
040c4                 | '   cmdD_updatePosition         := false
040c4     01 FA 05 F1 | 	add	objptr, #1
040c8     FD 00 48 FC | 	wrbyte	#0, objptr
040cc                 | '   cmdB_memoryZ                := 0
040cc     01 FA 05 F1 | 	add	objptr, #1
040d0     FD 00 48 FC | 	wrbyte	#0, objptr
040d4                 | '   cmdB_updatePosition         := false
040d4     01 FA 05 F1 | 	add	objptr, #1
040d8     FD 00 48 FC | 	wrbyte	#0, objptr
040dc                 | '   cmdE6_updatePositionCommon  := false
040dc     0D FA 05 F1 | 	add	objptr, #13
040e0     FD 00 48 FC | 	wrbyte	#0, objptr
040e4     F5 FB 85 F1 | 	sub	objptr, #501
040e8                 | ' 
040e8                 | '   repeat i from 0 to LAST_CHANNEL
040e8     08 5E 05 F1 | 	add	fp, #8
040ec     AF 00 68 FC | 	wrlong	#0, fp
040f0     08 5E 85 F1 | 	sub	fp, #8
040f4                 | LR__0138
040f4                 | ' 
040f4                 | '     currRepeatPoint[i]        := 0
040f4     08 5E 05 F1 | 	add	fp, #8
040f8     AF 70 02 FB | 	rdlong	local03, fp
040fc     01 70 66 F0 | 	shl	local03, #1
04100     D7 FA 05 F1 | 	add	objptr, #215
04104     FD 70 02 F1 | 	add	local03, objptr
04108     38 01 58 FC | 	wrword	#0, local03
0410c                 | '     currSampleLength[i]       := 4
0410c     AF 70 02 FB | 	rdlong	local03, fp
04110     01 70 66 F0 | 	shl	local03, #1
04114     1C FA 85 F1 | 	sub	objptr, #28
04118     FD 70 02 F1 | 	add	local03, objptr
0411c     38 09 58 FC | 	wrword	#4, local03
04120                 | '     currSamplePtr[i]          := @null
04120     AF 6E 02 FB | 	rdlong	local02, fp
04124     02 6E 66 F0 | 	shl	local02, #2
04128     14 FA 85 F1 | 	sub	objptr, #20
0412c     FD 6E 02 F1 | 	add	local02, objptr
04130     37 15 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04134                 | '     currSampleNr[i]           := 0
04134     AF 74 02 FB | 	rdlong	local05, fp
04138     10 FA 05 F1 | 	add	objptr, #16
0413c     FD 74 02 F1 | 	add	local05, objptr
04140     3A 01 48 FC | 	wrbyte	#0, local05
04144                 | '     currRepeatLength[i]       := 1
04144     AF 74 02 FB | 	rdlong	local05, fp
04148     02 74 66 F0 | 	shl	local05, #2
0414c     0C FA 05 F1 | 	add	objptr, #12
04150     FD 74 02 F1 | 	add	local05, objptr
04154     3A 03 68 FC | 	wrlong	#1, local05
04158                 | '     currPeriod[i]             := 400
04158     AF 74 02 FB | 	rdlong	local05, fp
0415c     02 74 66 F0 | 	shl	local05, #2
04160     1C FA 05 F1 | 	add	objptr, #28
04164     FD 74 02 F1 | 	add	local05, objptr
04168     3A 21 6B FC | 	wrlong	#400, local05
0416c                 | '     lastSetPeriod[i]          := 400
0416c     AF 74 02 FB | 	rdlong	local05, fp
04170     02 74 66 F0 | 	shl	local05, #2
04174     48 FA 05 F1 | 	add	objptr, #72
04178     FD 74 02 F1 | 	add	local05, objptr
0417c     3A 21 6B FC | 	wrlong	#400, local05
04180                 | '     lastSetSamplePtr[i]       := 0
04180     AF 74 02 FB | 	rdlong	local05, fp
04184     02 74 66 F0 | 	shl	local05, #2
04188     10 FA 05 F1 | 	add	objptr, #16
0418c     FD 74 02 F1 | 	add	local05, objptr
04190     3A 01 68 FC | 	wrlong	#0, local05
04194                 | '     lastSetSampleNr[i]        := 0
04194     AF 74 02 FB | 	rdlong	local05, fp
04198     02 74 66 F0 | 	shl	local05, #2
0419c     10 FA 05 F1 | 	add	objptr, #16
041a0     FD 74 02 F1 | 	add	local05, objptr
041a4     3A 01 68 FC | 	wrlong	#0, local05
041a8                 | '     lastSetSampleLength[i]    := 0
041a8     AF 74 02 FB | 	rdlong	local05, fp
041ac     02 74 66 F0 | 	shl	local05, #2
041b0     10 FA 05 F1 | 	add	objptr, #16
041b4     FD 74 02 F1 | 	add	local05, objptr
041b8     3A 01 68 FC | 	wrlong	#0, local05
041bc                 | '     lastSetRepeatLength[i]    := 0
041bc     AF 74 02 FB | 	rdlong	local05, fp
041c0     02 74 66 F0 | 	shl	local05, #2
041c4     10 FA 05 F1 | 	add	objptr, #16
041c8     FD 74 02 F1 | 	add	local05, objptr
041cc     3A 01 68 FC | 	wrlong	#0, local05
041d0                 | '     lastSetRepeatPoint[i]     := 0
041d0     AF 74 02 FB | 	rdlong	local05, fp
041d4     02 74 66 F0 | 	shl	local05, #2
041d8     10 FA 05 F1 | 	add	objptr, #16
041dc     FD 74 02 F1 | 	add	local05, objptr
041e0     3A 01 68 FC | 	wrlong	#0, local05
041e4                 | '     currVolume[i]             := 0
041e4     AF 74 02 FB | 	rdlong	local05, fp
041e8     02 74 66 F0 | 	shl	local05, #2
041ec     78 FA 85 F1 | 	sub	objptr, #120
041f0     FD 74 02 F1 | 	add	local05, objptr
041f4     3A 01 68 FC | 	wrlong	#0, local05
041f8                 | '     currPanning[i]            := 0
041f8     AF 70 02 FB | 	rdlong	local03, fp
041fc     01 70 66 F0 | 	shl	local03, #1
04200     20 FA 05 F1 | 	add	objptr, #32
04204     FD 70 02 F1 | 	add	local03, objptr
04208     38 01 58 FC | 	wrword	#0, local03
0420c                 | '     cmd3_memoryZ[i]           := 0
0420c     AF 74 02 FB | 	rdlong	local05, fp
04210     A9 FA 05 F1 | 	add	objptr, #169
04214     FD 74 02 F1 | 	add	local05, objptr
04218     3A 01 48 FC | 	wrbyte	#0, local05
0421c                 | '     cmd4_memoryY[i]           := 0
0421c     AF 74 02 FB | 	rdlong	local05, fp
04220     04 FA 05 F1 | 	add	objptr, #4
04224     FD 74 02 F1 | 	add	local05, objptr
04228     3A 01 48 FC | 	wrbyte	#0, local05
0422c                 | '     cmd4_memoryX[i]           := 0
0422c     AF 74 02 FB | 	rdlong	local05, fp
04230     04 FA 05 F1 | 	add	objptr, #4
04234     FD 74 02 F1 | 	add	local05, objptr
04238     3A 01 48 FC | 	wrbyte	#0, local05
0423c                 | '     cmd7_memoryY[i]           := 0
0423c     AF 74 02 FB | 	rdlong	local05, fp
04240     04 FA 05 F1 | 	add	objptr, #4
04244     FD 74 02 F1 | 	add	local05, objptr
04248     3A 01 48 FC | 	wrbyte	#0, local05
0424c                 | '     cmd7_memoryX[i]           := 0
0424c     AF 74 02 FB | 	rdlong	local05, fp
04250     04 FA 05 F1 | 	add	objptr, #4
04254     FD 74 02 F1 | 	add	local05, objptr
04258     3A 01 48 FC | 	wrbyte	#0, local05
0425c                 | '     cmd9_memoryZ[i]           := 0
0425c     AF 74 02 FB | 	rdlong	local05, fp
04260     04 FA 05 F1 | 	add	objptr, #4
04264     FD 74 02 F1 | 	add	local05, objptr
04268     3A 01 48 FC | 	wrbyte	#0, local05
0426c                 | '     cmdE6_memory[i]           := 0
0426c     AF 74 02 FB | 	rdlong	local05, fp
04270     0D FA 05 F1 | 	add	objptr, #13
04274     FD 74 02 F1 | 	add	local05, objptr
04278     3A 01 48 FC | 	wrbyte	#0, local05
0427c                 | '     cmdE6_counter[i]          := 0
0427c     AF 74 02 FB | 	rdlong	local05, fp
04280     04 FA 05 F1 | 	add	objptr, #4
04284     FD 74 02 F1 | 	add	local05, objptr
04288     3A 01 48 FC | 	wrbyte	#0, local05
0428c                 | '     cmdE6_updatePosition[i]   := false
0428c     AF 74 02 FB | 	rdlong	local05, fp
04290     04 FA 05 F1 | 	add	objptr, #4
04294     FD 74 02 F1 | 	add	local05, objptr
04298     3A 01 48 FC | 	wrbyte	#0, local05
0429c                 | '     sampleNumber_memory[i]    := 0
0429c     AF 74 02 FB | 	rdlong	local05, fp
042a0     11 FA 85 F1 | 	sub	objptr, #17
042a4     FD 74 02 F1 | 	add	local05, objptr
042a8     3A 01 48 FC | 	wrbyte	#0, local05
042ac                 | '     vibratoPos[i]             := 0
042ac     AF 74 02 FB | 	rdlong	local05, fp
042b0     59 FA 85 F1 | 	sub	objptr, #89
042b4     FD 74 02 F1 | 	add	local05, objptr
042b8     3A 01 48 FC | 	wrbyte	#0, local05
042bc                 | '     portamentoPeriodMemory[i] := 0
042bc     AF 74 02 FB | 	rdlong	local05, fp
042c0     02 74 66 F0 | 	shl	local05, #2
042c4     10 FA 05 F1 | 	add	objptr, #16
042c8     FD 74 02 F1 | 	add	local05, objptr
042cc     3A 01 68 FC | 	wrlong	#0, local05
042d0                 | '     portaGlissando[i]         := 0
042d0     AF 74 02 FB | 	rdlong	local05, fp
042d4     25 FA 05 F1 | 	add	objptr, #37
042d8     FD 74 02 F1 | 	add	local05, objptr
042dc     3A 01 48 FC | 	wrbyte	#0, local05
042e0                 | '     vibratoType[i]            := 0
042e0     AF 74 02 FB | 	rdlong	local05, fp
042e4     04 FA 05 F1 | 	add	objptr, #4
042e8     FD 74 02 F1 | 	add	local05, objptr
042ec     3A 01 48 FC | 	wrbyte	#0, local05
042f0                 | '     tremoloType[i]            := 0
042f0     AF 74 02 FB | 	rdlong	local05, fp
042f4     04 FA 05 F1 | 	add	objptr, #4
042f8     FD 74 02 F1 | 	add	local05, objptr
042fc     3A 01 48 FC | 	wrbyte	#0, local05
04300                 | '     tremoloPos[i]             := 0
04300     AF 74 02 FB | 	rdlong	local05, fp
04304     39 FA 85 F1 | 	sub	objptr, #57
04308     FD 74 02 F1 | 	add	local05, objptr
0430c     3A 01 48 FC | 	wrbyte	#0, local05
04310                 | '     deltaVolume[i]            := 0
04310     AF 74 02 FB | 	rdlong	local05, fp
04314     02 74 66 F0 | 	shl	local05, #2
04318     7C FA 85 F1 | 	sub	objptr, #124
0431c     FD 74 02 F1 | 	add	local05, objptr
04320     3A 01 68 FC | 	wrlong	#0, local05
04324                 | '     deltaPeriod[i]            := 0
04324     AF 74 02 FB | 	rdlong	local05, fp
04328     02 74 66 F0 | 	shl	local05, #2
0432c     20 FA 85 F1 | 	sub	objptr, #32
04330     FD 74 02 F1 | 	add	local05, objptr
04334     3A 01 68 FC | 	wrlong	#0, local05
04338                 | '     resetTremolo[i]           := 0
04338     AF 74 02 FB | 	rdlong	local05, fp
0433c     A0 FA 05 F1 | 	add	objptr, #160
04340     FD 74 02 F1 | 	add	local05, objptr
04344     3A 01 48 FC | 	wrbyte	#0, local05
04348                 | '     resetVibrato[i]           := 0
04348     AF 74 02 FB | 	rdlong	local05, fp
0434c     04 FA 05 F1 | 	add	objptr, #4
04350     FD 74 02 F1 | 	add	local05, objptr
04354     3A 01 48 FC | 	wrbyte	#0, local05
04358     AF 74 02 FB | 	rdlong	local05, fp
0435c     01 74 06 F1 | 	add	local05, #1
04360     AF 74 62 FC | 	wrlong	local05, fp
04364     08 5E 85 F1 | 	sub	fp, #8
04368     04 74 5E F2 | 	cmps	local05, #4 wcz
0436c     93 FB 85 F1 | 	sub	objptr, #403
04370     80 FD 9F CD |  if_b	jmp	#LR__0138
04374     AF F0 03 F6 | 	mov	ptra, fp
04378     BA 00 A0 FD | 	call	#popregs_
0437c                 | _trackerplayer_spin2_initModule_ret
0437c     2D 00 64 FD | 	ret
04380                 | 
04380                 | ' 
04380                 | ' 
04380                 | ' ' This routine needs to be ticked X number of times per second
04380                 | ' ' in order to advance the tracker play routine
04380                 | ' '
04380                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04380                 | _trackerplayer_spin2_tick
04380     05 5A 05 F6 | 	mov	COUNT_, #5
04384     B0 00 A0 FD | 	call	#pushregs_
04388     14 F0 07 F1 | 	add	ptra, #20
0438c                 | ' 
0438c                 | '   if currentSongSpeed == 0
0438c     A4 FA 05 F1 | 	add	objptr, #164
04390     FD 6C CA FA | 	rdbyte	local01, objptr wz
04394     A4 FA 85 F1 | 	sub	objptr, #164
04398                 | '     return
04398     88 02 90 AD |  if_e	jmp	#LR__0150
0439c                 | ' 
0439c                 | '   ' Iterate over the channels and process everything
0439c                 | '   repeat channel from 0 to LAST_CHANNEL
0439c     AF 00 68 FC | 	wrlong	#0, fp
043a0                 | LR__0139
043a0                 | ' 
043a0                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
043a0     AF 5E 02 FB | 	rdlong	arg01, fp
043a4     A3 FA 05 F1 | 	add	objptr, #163
043a8     FD 60 C2 FA | 	rdbyte	arg02, objptr
043ac     01 FA 85 F1 | 	sub	objptr, #1
043b0     FD 62 C2 FA | 	rdbyte	arg03, objptr
043b4     A2 FA 85 F1 | 	sub	objptr, #162
043b8     04 5E 05 F1 | 	add	fp, #4
043bc     AF 64 02 F6 | 	mov	arg04, fp
043c0     04 5E 05 F1 | 	add	fp, #4
043c4     AF 66 02 F6 | 	mov	arg05, fp
043c8     04 5E 05 F1 | 	add	fp, #4
043cc     AF 68 02 F6 | 	mov	arg06, fp
043d0     0C 5E 85 F1 | 	sub	fp, #12
043d4     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
043d8                 | '     processChannel(channel, sampleNumber, period, effect)
043d8     AF 5E 02 FB | 	rdlong	arg01, fp
043dc     04 5E 05 F1 | 	add	fp, #4
043e0     AF 60 02 FB | 	rdlong	arg02, fp
043e4     04 5E 05 F1 | 	add	fp, #4
043e8     AF 62 02 FB | 	rdlong	arg03, fp
043ec     04 5E 05 F1 | 	add	fp, #4
043f0     AF 64 02 FB | 	rdlong	arg04, fp
043f4     0C 5E 85 F1 | 	sub	fp, #12
043f8     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
043fc     AF 6E 02 FB | 	rdlong	local02, fp
04400     01 6E 06 F1 | 	add	local02, #1
04404     AF 6E 62 FC | 	wrlong	local02, fp
04408     04 6E 5E F2 | 	cmps	local02, #4 wcz
0440c     90 FF 9F CD |  if_b	jmp	#LR__0139
04410                 | ' 
04410                 | '   ' Incrementation the main counter that drives the whole play routine
04410                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04410     A1 FA 05 F1 | 	add	objptr, #161
04414     FD 6C C2 FA | 	rdbyte	local01, objptr
04418     01 6C 06 F1 | 	add	local01, #1
0441c     FD 6C 42 FC | 	wrbyte	local01, objptr
04420     03 FA 05 F1 | 	add	objptr, #3
04424     FD 70 C2 FA | 	rdbyte	local03, objptr
04428     01 FA 05 F1 | 	add	objptr, #1
0442c     FD 72 C2 FA | 	rdbyte	local04, objptr
04430     39 71 02 F1 | 	add	local03, local04
04434     04 FA 85 F1 | 	sub	objptr, #4
04438     FD 74 C2 FA | 	rdbyte	local05, objptr
0443c     A1 FA 85 F1 | 	sub	objptr, #161
04440     38 75 5A F2 | 	cmps	local05, local03 wcz
04444                 | '     tickCounter := 0
04444     A1 FA 05 31 |  if_ae	add	objptr, #161
04448     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
0444c     A1 FA 85 31 |  if_ae	sub	objptr, #161
04450                 | ' 
04450                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04450                 | '   if tickCounter == 0
04450     A1 FA 05 F1 | 	add	objptr, #161
04454     FD 6C CA FA | 	rdbyte	local01, objptr wz
04458     A1 FA 85 F1 | 	sub	objptr, #161
0445c     C4 01 90 5D |  if_ne	jmp	#LR__0149
04460                 | ' 
04460                 | '     ' Handle the "pattern repeat" command, "E6"
04460                 | '     if cmdE6_updatePositionCommon
04460     F5 FB 05 F1 | 	add	objptr, #501
04464     FD 6C CA FA | 	rdbyte	local01, objptr wz
04468     F5 FB 85 F1 | 	sub	objptr, #501
0446c     8C 00 90 AD |  if_e	jmp	#LR__0143
04470                 | '       repeat i from 0 to LAST_CHANNEL
04470     10 5E 05 F1 | 	add	fp, #16
04474     AF 00 68 FC | 	wrlong	#0, fp
04478     10 5E 85 F1 | 	sub	fp, #16
0447c     F4 BB 9F FE | 	loc	pa,	#(@LR__0142-@LR__0140)
04480     93 00 A0 FD | 	call	#FCACHE_LOAD_
04484                 | LR__0140
04484                 | '         if cmdE6_updatePosition[i]
04484     10 5E 05 F1 | 	add	fp, #16
04488     AF 6E 02 FB | 	rdlong	local02, fp
0448c     10 5E 85 F1 | 	sub	fp, #16
04490     F1 FB 05 F1 | 	add	objptr, #497
04494     FD 6E 02 F1 | 	add	local02, objptr
04498     37 73 CA FA | 	rdbyte	local04, local02 wz
0449c     F1 FB 85 F1 | 	sub	objptr, #497
044a0     24 00 90 AD |  if_e	jmp	#LR__0141
044a4                 | '           patternRow := cmdE6_memory[i]
044a4     10 5E 05 F1 | 	add	fp, #16
044a8     AF 6E 02 FB | 	rdlong	local02, fp
044ac     10 5E 85 F1 | 	sub	fp, #16
044b0     E9 FB 05 F1 | 	add	objptr, #489
044b4     FD 6E 02 F1 | 	add	local02, objptr
044b8     37 73 C2 FA | 	rdbyte	local04, local02
044bc     47 FB 85 F1 | 	sub	objptr, #327
044c0     FD 72 42 FC | 	wrbyte	local04, objptr
044c4     A2 FA 85 F1 | 	sub	objptr, #162
044c8                 | LR__0141
044c8                 | '         cmdE6_updatePosition[i] := false
044c8     10 5E 05 F1 | 	add	fp, #16
044cc     AF 6E 02 FB | 	rdlong	local02, fp
044d0     F1 FB 05 F1 | 	add	objptr, #497
044d4     FD 6E 02 F1 | 	add	local02, objptr
044d8     37 01 48 FC | 	wrbyte	#0, local02
044dc     AF 6E 02 FB | 	rdlong	local02, fp
044e0     01 6E 06 F1 | 	add	local02, #1
044e4     AF 6E 62 FC | 	wrlong	local02, fp
044e8     10 5E 85 F1 | 	sub	fp, #16
044ec     04 6E 5E F2 | 	cmps	local02, #4 wcz
044f0     F1 FB 85 F1 | 	sub	objptr, #497
044f4     8C FF 9F CD |  if_b	jmp	#LR__0140
044f8                 | LR__0142
044f8     CC 00 90 FD | 	jmp	#LR__0147
044fc                 | LR__0143
044fc                 | ' 
044fc                 | '     ' Handle the "skip to next pattern with offset command", "D"
044fc                 | '     elseif cmdD_updatePosition
044fc     E6 FB 05 F1 | 	add	objptr, #486
04500     FD 6C CA FA | 	rdbyte	local01, objptr wz
04504     E6 FB 85 F1 | 	sub	objptr, #486
04508     64 00 90 AD |  if_e	jmp	#LR__0144
0450c                 | '       if ++songPosition >= songLength
0450c     A3 FA 05 F1 | 	add	objptr, #163
04510     FD 6C C2 FA | 	rdbyte	local01, objptr
04514     01 6C 06 F1 | 	add	local01, #1
04518     FD 6C 42 FC | 	wrbyte	local01, objptr
0451c     FD 70 C2 FA | 	rdbyte	local03, objptr
04520     09 FA 85 F1 | 	sub	objptr, #9
04524     FD 72 C2 FA | 	rdbyte	local04, objptr
04528     9A FA 85 F1 | 	sub	objptr, #154
0452c     39 71 5A F2 | 	cmps	local03, local04 wcz
04530                 | '         songPosition := 0
04530     A3 FA 05 31 |  if_ae	add	objptr, #163
04534     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04538     A3 FA 85 31 |  if_ae	sub	objptr, #163
0453c                 | ' 
0453c                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
0453c     E4 FB 05 F1 | 	add	objptr, #484
04540     FD 70 C2 FA | 	rdbyte	local03, objptr
04544     38 6D 02 F6 | 	mov	local01, local03
04548     02 6C 66 F0 | 	shl	local01, #2
0454c     38 6D 02 F1 | 	add	local01, local03
04550     01 6C 66 F0 | 	shl	local01, #1
04554     01 FA 05 F1 | 	add	objptr, #1
04558     FD 72 C2 FA | 	rdbyte	local04, objptr
0455c     39 6D 02 F1 | 	add	local01, local04
04560     43 FB 85 F1 | 	sub	objptr, #323
04564     FD 6C 42 FC | 	wrbyte	local01, objptr
04568     A2 FA 85 F1 | 	sub	objptr, #162
0456c                 | ' 
0456c                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
0456c                 | '     else
0456c     58 00 90 FD | 	jmp	#LR__0146
04570                 | LR__0144
04570                 | '       if ++patternRow >= PATTERN_LENGTH
04570     A2 FA 05 F1 | 	add	objptr, #162
04574     FD 6C C2 FA | 	rdbyte	local01, objptr
04578     01 6C 06 F1 | 	add	local01, #1
0457c     FD 6C 42 FC | 	wrbyte	local01, objptr
04580     FD 70 C2 FA | 	rdbyte	local03, objptr
04584     A2 FA 85 F1 | 	sub	objptr, #162
04588     40 70 5E F2 | 	cmps	local03, #64 wcz
0458c     38 00 90 CD |  if_b	jmp	#LR__0145
04590                 | '         patternRow := 0
04590     A2 FA 05 F1 | 	add	objptr, #162
04594     FD 00 48 FC | 	wrbyte	#0, objptr
04598                 | ' 
04598                 | '         if ++songPosition >= songLength
04598     01 FA 05 F1 | 	add	objptr, #1
0459c     FD 6C C2 FA | 	rdbyte	local01, objptr
045a0     01 6C 06 F1 | 	add	local01, #1
045a4     FD 6C 42 FC | 	wrbyte	local01, objptr
045a8     FD 70 C2 FA | 	rdbyte	local03, objptr
045ac     09 FA 85 F1 | 	sub	objptr, #9
045b0     FD 72 C2 FA | 	rdbyte	local04, objptr
045b4     9A FA 85 F1 | 	sub	objptr, #154
045b8     39 71 5A F2 | 	cmps	local03, local04 wcz
045bc                 | '           songPosition := 0
045bc     A3 FA 05 31 |  if_ae	add	objptr, #163
045c0     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
045c4     A3 FA 85 31 |  if_ae	sub	objptr, #163
045c8                 | LR__0145
045c8                 | LR__0146
045c8                 | LR__0147
045c8                 | ' 
045c8                 | '     ' Handle "jump to song position" command, "B"
045c8                 | '     if cmdB_updatePosition
045c8     E8 FB 05 F1 | 	add	objptr, #488
045cc     FD 6C CA FA | 	rdbyte	local01, objptr wz
045d0     E8 FB 85 F1 | 	sub	objptr, #488
045d4     28 00 90 AD |  if_e	jmp	#LR__0148
045d8                 | ' 
045d8                 | '       songPosition := cmdB_memoryZ
045d8     E7 FB 05 F1 | 	add	objptr, #487
045dc     FD 6C C2 FA | 	rdbyte	local01, objptr
045e0     44 FB 85 F1 | 	sub	objptr, #324
045e4     FD 6C 42 FC | 	wrbyte	local01, objptr
045e8                 | ' 
045e8                 | '       ifnot cmdD_updatePosition
045e8     43 FB 05 F1 | 	add	objptr, #323
045ec     FD 6C CA FA | 	rdbyte	local01, objptr wz
045f0     E6 FB 85 F1 | 	sub	objptr, #486
045f4                 | '         patternRow := 0
045f4     A2 FA 05 A1 |  if_e	add	objptr, #162
045f8     FD 00 48 AC |  if_e	wrbyte	#0, objptr
045fc     A2 FA 85 A1 |  if_e	sub	objptr, #162
04600                 | LR__0148
04600                 | ' 
04600                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04600                 | '     cmdE6_updatePositionCommon := false
04600     F5 FB 05 F1 | 	add	objptr, #501
04604     FD 00 48 FC | 	wrbyte	#0, objptr
04608                 | '     cmdB_updatePosition := false
04608     0D FA 85 F1 | 	sub	objptr, #13
0460c     FD 00 48 FC | 	wrbyte	#0, objptr
04610                 | '     cmdD_updatePosition := false
04610     02 FA 85 F1 | 	sub	objptr, #2
04614     FD 00 48 FC | 	wrbyte	#0, objptr
04618                 | '     patternDelay := 0
04618     41 FB 85 F1 | 	sub	objptr, #321
0461c     FD 00 48 FC | 	wrbyte	#0, objptr
04620     A5 FA 85 F1 | 	sub	objptr, #165
04624                 | LR__0149
04624                 | LR__0150
04624     AF F0 03 F6 | 	mov	ptra, fp
04628     BA 00 A0 FD | 	call	#popregs_
0462c                 | _trackerplayer_spin2_tick_ret
0462c     2D 00 64 FD | 	ret
04630                 | 
04630                 | ' 
04630                 | ' 
04630                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04630                 | _trackerplayer_spin2_amigaPeriodToNote
04630                 | ' 
04630                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04630     00 1E 06 F6 | 	mov	_var01, #0
04634     14 BA 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
04638     93 00 A0 FD | 	call	#FCACHE_LOAD_
0463c                 | LR__0151
0463c                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
0463c     06 00 00 FF 
04640     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04644     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04648     30 23 02 F6 | 	mov	_var03, arg02
0464c     03 22 66 F0 | 	shl	_var03, #3
04650     30 23 02 F1 | 	add	_var03, arg02
04654     03 22 66 F0 | 	shl	_var03, #3
04658     11 21 02 F1 | 	add	_var02, _var03
0465c     0F 25 02 F6 | 	mov	_var04, _var01
04660     01 24 66 F0 | 	shl	_var04, #1
04664     10 25 02 F1 | 	add	_var04, _var02
04668     12 27 E2 FA | 	rdword	_var05, _var04
0466c     2F 27 5A F2 | 	cmps	_var05, arg01 wcz
04670                 | '       quit
04670     06 00 00 FF 
04674     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04678     0C 00 90 ED |  if_be	jmp	#LR__0153
0467c     01 1E 06 F1 | 	add	_var01, #1
04680     24 1E 5E F2 | 	cmps	_var01, #36 wcz
04684     B4 FF 9F CD |  if_b	jmp	#LR__0151
04688                 | LR__0152
04688                 | LR__0153
04688                 | ' 
04688                 | '   return i
04688     0F 19 02 F6 | 	mov	result1, _var01
0468c                 | _trackerplayer_spin2_amigaPeriodToNote_ret
0468c     2D 00 64 FD | 	ret
04690                 | 
04690                 | ' 
04690                 | ' 
04690                 | ' PRI retunePeriod(period, fTune) | noteNumber
04690                 | _trackerplayer_spin2_retunePeriod
04690     06 5A 05 F6 | 	mov	COUNT_, #6
04694     B0 00 A0 FD | 	call	#pushregs_
04698     2F 6D 02 F6 | 	mov	local01, arg01
0469c     30 6F 02 F6 | 	mov	local02, arg02
046a0                 | ' 
046a0                 | '   if period > 0 and fTune < 16
046a0     00 6C 5E F2 | 	cmps	local01, #0 wcz
046a4     50 00 90 ED |  if_be	jmp	#LR__0154
046a8     10 6E 5E F2 | 	cmps	local02, #16 wcz
046ac     48 00 90 3D |  if_ae	jmp	#LR__0154
046b0                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
046b0     36 5F E2 FA | 	rdword	arg01, local01
046b4     00 60 06 F6 | 	mov	arg02, #0
046b8     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
046bc     0C 71 02 F6 | 	mov	local03, result1
046c0                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
046c0     06 00 00 FF 
046c4     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
046c8     0A 73 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
046cc     37 75 02 F6 | 	mov	local05, local02
046d0     03 74 66 F0 | 	shl	local05, #3
046d4     37 75 02 F1 | 	add	local05, local02
046d8     03 74 66 F0 | 	shl	local05, #3
046dc     3A 73 02 F1 | 	add	local04, local05
046e0     01 70 66 F0 | 	shl	local03, #1
046e4     39 71 02 F1 | 	add	local03, local04
046e8     38 77 E2 FA | 	rdword	local06, local03
046ec     36 77 52 FC | 	wrword	local06, local01
046f0     06 00 00 FF 
046f4     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
046f8                 | LR__0154
046f8     AF F0 03 F6 | 	mov	ptra, fp
046fc     BA 00 A0 FD | 	call	#popregs_
04700                 | _trackerplayer_spin2_retunePeriod_ret
04700     2D 00 64 FD | 	ret
04704                 | 
04704                 | ' 
04704                 | ' 
04704                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04704                 | _trackerplayer_spin2_getSampleInfo
04704     2F 1F 0A F6 | 	mov	_var01, arg01 wz
04708                 | ' 
04708                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04708     08 00 90 AD |  if_e	jmp	#LR__0155
0470c     1F 1E 5E F2 | 	cmps	_var01, #31 wcz
04710     08 00 90 ED |  if_be	jmp	#LR__0156
04714                 | LR__0155
04714                 | '     long[samplePtr] := 0
04714     30 01 68 FC | 	wrlong	#0, arg02
04718                 | '     return
04718     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0471c                 | LR__0156
0471c                 | ' 
0471c                 | '   sampleNumber--
0471c     01 1E 86 F1 | 	sub	_var01, #1
04720                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04720     0A FA 05 F1 | 	add	objptr, #10
04724     FD 20 02 FB | 	rdlong	_var02, objptr
04728     0F 23 02 F6 | 	mov	_var03, _var01
0472c     04 22 66 F0 | 	shl	_var03, #4
04730     0F 23 82 F1 | 	sub	_var03, _var01
04734     01 22 66 F0 | 	shl	_var03, #1
04738     11 21 02 F1 | 	add	_var02, _var03
0473c                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
0473c     10 25 02 F6 | 	mov	_var04, _var02
04740     16 24 06 F1 | 	add	_var04, #22
04744     12 27 C2 FA | 	rdbyte	_var05, _var04
04748     08 26 66 F0 | 	shl	_var05, #8
0474c     10 23 02 F6 | 	mov	_var03, _var02
04750     17 22 06 F1 | 	add	_var03, #23
04754     11 29 C2 FA | 	rdbyte	_var06, _var03
04758     14 27 42 F5 | 	or	_var05, _var06
0475c     01 26 66 F0 | 	shl	_var05, #1
04760     31 27 62 FC | 	wrlong	_var05, arg03
04764                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04764     10 27 02 F6 | 	mov	_var05, _var02
04768     18 26 06 F1 | 	add	_var05, #24
0476c     13 25 C2 FA | 	rdbyte	_var04, _var05
04770     32 25 62 FC | 	wrlong	_var04, arg04
04774                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04774     10 27 02 F6 | 	mov	_var05, _var02
04778     19 26 06 F1 | 	add	_var05, #25
0477c     13 25 C2 FA | 	rdbyte	_var04, _var05
04780     33 25 62 FC | 	wrlong	_var04, arg05
04784                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04784     10 25 02 F6 | 	mov	_var04, _var02
04788     1A 24 06 F1 | 	add	_var04, #26
0478c     12 27 C2 FA | 	rdbyte	_var05, _var04
04790     08 26 66 F0 | 	shl	_var05, #8
04794     10 23 02 F6 | 	mov	_var03, _var02
04798     1B 22 06 F1 | 	add	_var03, #27
0479c     11 29 C2 FA | 	rdbyte	_var06, _var03
047a0     14 27 42 F5 | 	or	_var05, _var06
047a4     01 26 66 F0 | 	shl	_var05, #1
047a8     34 27 62 FC | 	wrlong	_var05, arg06
047ac                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
047ac     10 25 02 F6 | 	mov	_var04, _var02
047b0     1C 24 06 F1 | 	add	_var04, #28
047b4     12 27 C2 FA | 	rdbyte	_var05, _var04
047b8     08 26 66 F0 | 	shl	_var05, #8
047bc     1D 20 06 F1 | 	add	_var02, #29
047c0     10 29 C2 FA | 	rdbyte	_var06, _var02
047c4     14 27 42 F5 | 	or	_var05, _var06
047c8     01 26 66 F0 | 	shl	_var05, #1
047cc     35 27 62 FC | 	wrlong	_var05, arg07
047d0                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
047d0     02 1E 66 F0 | 	shl	_var01, #2
047d4     08 FA 05 F1 | 	add	objptr, #8
047d8     FD 1E 02 F1 | 	add	_var01, objptr
047dc     0F 23 02 FB | 	rdlong	_var03, _var01
047e0     30 23 62 FC | 	wrlong	_var03, arg02
047e4                 | ' 
047e4                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
047e4     35 27 02 FB | 	rdlong	_var05, arg07
047e8     02 26 0E F2 | 	cmp	_var05, #2 wz
047ec     12 FA 85 F1 | 	sub	objptr, #18
047f0     08 00 90 5D |  if_ne	jmp	#LR__0157
047f4     34 25 0A FB | 	rdlong	_var04, arg06 wz
047f8                 | '     long[repeatLength] := 1
047f8     35 03 68 AC |  if_e	wrlong	#1, arg07
047fc                 | LR__0157
047fc                 | _trackerplayer_spin2_getSampleInfo_ret
047fc     2D 00 64 FD | 	ret
04800                 | 
04800                 | ' 
04800                 | ' 
04800                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
04800                 | _trackerplayer_spin2_getNoteData
04800                 | ' 
04800                 | '   ' Get the note data for a specific channel/song position/pattern row
04800                 | '   patternNumber := byte[songPositionsLut][position & 127]
04800     96 FA 05 F1 | 	add	objptr, #150
04804     FD 1E 02 FB | 	rdlong	_var01, objptr
04808     7F 60 06 F5 | 	and	arg02, #127
0480c     0F 61 02 F1 | 	add	arg02, _var01
04810     30 21 C2 FA | 	rdbyte	_var02, arg02
04814                 | '   patternPtr    := patternsData + (patternNumber << 10)
04814     04 FA 85 F1 | 	sub	objptr, #4
04818     FD 22 02 FB | 	rdlong	_var03, objptr
0481c     92 FA 85 F1 | 	sub	objptr, #146
04820     0A 20 66 F0 | 	shl	_var02, #10
04824     10 23 02 F1 | 	add	_var03, _var02
04828                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04828     3F 62 06 F5 | 	and	arg03, #63
0482c     04 62 66 F0 | 	shl	arg03, #4
04830     31 23 02 F1 | 	add	_var03, arg03
04834     03 5E 06 F5 | 	and	arg01, #3
04838     02 5E 66 F0 | 	shl	arg01, #2
0483c     2F 23 02 F1 | 	add	_var03, arg01
04840                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04840     11 25 C2 FA | 	rdbyte	_var04, _var03
04844     18 24 66 F0 | 	shl	_var04, #24
04848     01 22 06 F1 | 	add	_var03, #1
0484c     11 27 C2 FA | 	rdbyte	_var05, _var03
04850     10 26 66 F0 | 	shl	_var05, #16
04854     13 25 42 F5 | 	or	_var04, _var05
04858     01 22 06 F1 | 	add	_var03, #1
0485c     11 29 C2 FA | 	rdbyte	_var06, _var03
04860     08 28 66 F0 | 	shl	_var06, #8
04864     14 25 42 F5 | 	or	_var04, _var06
04868     01 22 06 F1 | 	add	_var03, #1
0486c     11 2B C2 FA | 	rdbyte	_var07, _var03
04870     15 25 42 F5 | 	or	_var04, _var07
04874                 | ' 
04874                 | '   ' Extract the different sub parts from the data
04874                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04874     12 2D 02 F6 | 	mov	_var08, _var04
04878     0C 2C 46 F0 | 	shr	_var08, #12
0487c     0F 2C 06 F5 | 	and	_var08, #15
04880     12 27 02 F6 | 	mov	_var05, _var04
04884     18 26 46 F0 | 	shr	_var05, #24
04888     F0 26 06 F5 | 	and	_var05, #240
0488c     13 2D 42 F5 | 	or	_var08, _var05
04890     32 2D 62 FC | 	wrlong	_var08, arg04
04894                 | '   long[period]       :=  (data >> 16) & $FFF
04894     12 2D 02 F6 | 	mov	_var08, _var04
04898     10 2C 46 F0 | 	shr	_var08, #16
0489c     07 00 00 FF 
048a0     FF 2D 06 F5 | 	and	_var08, ##4095
048a4     33 2D 62 FC | 	wrlong	_var08, arg05
048a8                 | '   long[effect]       :=   data & $FFF
048a8     07 00 00 FF 
048ac     FF 25 06 F5 | 	and	_var04, ##4095
048b0     34 25 62 FC | 	wrlong	_var04, arg06
048b4                 | _trackerplayer_spin2_getNoteData_ret
048b4     2D 00 64 FD | 	ret
048b8                 | 
048b8                 | ' 
048b8                 | ' 
048b8                 | ' PRI triggerNote(channel)
048b8                 | _trackerplayer_spin2_triggerNote
048b8                 | ' 
048b8                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
048b8     2F 1F 02 F6 | 	mov	_var01, arg01
048bc     02 1E 66 F0 | 	shl	_var01, #2
048c0     47 FB 05 F1 | 	add	objptr, #327
048c4     FD 1E 02 F1 | 	add	_var01, objptr
048c8     2F 21 02 F6 | 	mov	_var02, arg01
048cc     90 FA 85 F1 | 	sub	objptr, #144
048d0     0F 23 02 FB | 	rdlong	_var03, _var01
048d4     FD 20 02 F1 | 	add	_var02, objptr
048d8     10 23 42 FC | 	wrbyte	_var03, _var02
048dc                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
048dc     2F 1F 02 F6 | 	mov	_var01, arg01
048e0     02 1E 66 F0 | 	shl	_var01, #2
048e4     80 FA 05 F1 | 	add	objptr, #128
048e8     FD 1E 02 F1 | 	add	_var01, objptr
048ec     2F 21 02 F6 | 	mov	_var02, arg01
048f0     02 20 66 F0 | 	shl	_var02, #2
048f4     90 FA 85 F1 | 	sub	objptr, #144
048f8     0F 23 02 FB | 	rdlong	_var03, _var01
048fc     FD 20 02 F1 | 	add	_var02, objptr
04900     10 23 62 FC | 	wrlong	_var03, _var02
04904                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04904     2F 1F 02 F6 | 	mov	_var01, arg01
04908     02 1E 66 F0 | 	shl	_var01, #2
0490c     80 FA 05 F1 | 	add	objptr, #128
04910     FD 1E 02 F1 | 	add	_var01, objptr
04914     2F 21 02 F6 | 	mov	_var02, arg01
04918     02 20 66 F0 | 	shl	_var02, #2
0491c     48 FA 85 F1 | 	sub	objptr, #72
04920     0F 23 02 FB | 	rdlong	_var03, _var01
04924     FD 20 02 F1 | 	add	_var02, objptr
04928     10 23 62 FC | 	wrlong	_var03, _var02
0492c                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
0492c     2F 1F 02 F6 | 	mov	_var01, arg01
04930     02 1E 66 F0 | 	shl	_var01, #2
04934     78 FA 05 F1 | 	add	objptr, #120
04938     FD 1E 02 F1 | 	add	_var01, objptr
0493c     2F 25 02 F6 | 	mov	_var04, arg01
04940     01 24 66 F0 | 	shl	_var04, #1
04944     9C FA 85 F1 | 	sub	objptr, #156
04948     0F 27 02 FB | 	rdlong	_var05, _var01
0494c     FD 24 02 F1 | 	add	_var04, objptr
04950     12 27 52 FC | 	wrword	_var05, _var04
04954                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04954     2F 1F 02 F6 | 	mov	_var01, arg01
04958     02 1E 66 F0 | 	shl	_var01, #2
0495c     AC FA 05 F1 | 	add	objptr, #172
04960     FD 1E 02 F1 | 	add	_var01, objptr
04964     2F 21 02 F6 | 	mov	_var02, arg01
04968     02 20 66 F0 | 	shl	_var02, #2
0496c     A4 FA 85 F1 | 	sub	objptr, #164
04970     0F 23 02 FB | 	rdlong	_var03, _var01
04974     FD 20 02 F1 | 	add	_var02, objptr
04978     10 23 62 FC | 	wrlong	_var03, _var02
0497c                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
0497c     2F 1F 02 F6 | 	mov	_var01, arg01
04980     02 1E 66 F0 | 	shl	_var01, #2
04984     B4 FA 05 F1 | 	add	objptr, #180
04988     FD 1E 02 F1 | 	add	_var01, objptr
0498c     2F 25 02 F6 | 	mov	_var04, arg01
04990     01 24 66 F0 | 	shl	_var04, #1
04994     A0 FA 85 F1 | 	sub	objptr, #160
04998     0F 27 02 FB | 	rdlong	_var05, _var01
0499c     FD 24 02 F1 | 	add	_var04, objptr
049a0     12 27 52 FC | 	wrword	_var05, _var04
049a4                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
049a4     2F 29 02 F6 | 	mov	_var06, arg01
049a8     1F FB 05 F1 | 	add	objptr, #287
049ac     FD 28 02 F1 | 	add	_var06, objptr
049b0     14 1F C2 FA | 	rdbyte	_var01, _var06
049b4     01 1E 06 F1 | 	add	_var01, #1
049b8     FD 5E 02 F1 | 	add	arg01, objptr
049bc     2F 1F 42 FC | 	wrbyte	_var01, arg01
049c0     F6 FB 85 F1 | 	sub	objptr, #502
049c4                 | _trackerplayer_spin2_triggerNote_ret
049c4     2D 00 64 FD | 	ret
049c8                 | 
049c8                 | ' 
049c8                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
049c8                 | _trackerplayer_spin2_processChannel
049c8     08 5A 05 F6 | 	mov	COUNT_, #8
049cc     B0 00 A0 FD | 	call	#pushregs_
049d0     24 F0 07 F1 | 	add	ptra, #36
049d4     AF 5E 62 FC | 	wrlong	arg01, fp
049d8     04 5E 05 F1 | 	add	fp, #4
049dc     AF 60 62 FC | 	wrlong	arg02, fp
049e0     04 5E 05 F1 | 	add	fp, #4
049e4     AF 62 62 FC | 	wrlong	arg03, fp
049e8     04 5E 05 F1 | 	add	fp, #4
049ec     AF 64 62 FC | 	wrlong	arg04, fp
049f0     0C 5E 85 F1 | 	sub	fp, #12
049f4                 | ' 
049f4                 | '   channel := channel & 3
049f4     AF 6C 02 FB | 	rdlong	local01, fp
049f8     03 6C 06 F5 | 	and	local01, #3
049fc     AF 6C 62 FC | 	wrlong	local01, fp
04a00                 | '   cmd     := (effect >> 8) & $F
04a00     0C 5E 05 F1 | 	add	fp, #12
04a04     AF 6C 02 FB | 	rdlong	local01, fp
04a08     08 6C 46 F0 | 	shr	local01, #8
04a0c     0F 6C 06 F5 | 	and	local01, #15
04a10     BA FB 05 F1 | 	add	objptr, #442
04a14     FD 6C 42 FC | 	wrbyte	local01, objptr
04a18                 | '   x       := (effect >> 4) & $F
04a18     AF 6C 02 FB | 	rdlong	local01, fp
04a1c     04 6C 46 F0 | 	shr	local01, #4
04a20     0F 6C 06 F5 | 	and	local01, #15
04a24     03 FA 85 F1 | 	sub	objptr, #3
04a28     FD 6C 42 FC | 	wrbyte	local01, objptr
04a2c                 | '   y       := (effect     ) & $F
04a2c     AF 6C 02 FB | 	rdlong	local01, fp
04a30     0F 6C 06 F5 | 	and	local01, #15
04a34     01 FA 05 F1 | 	add	objptr, #1
04a38     FD 6C 42 FC | 	wrbyte	local01, objptr
04a3c                 | '   z       := (effect     ) & $FF
04a3c     AF 6C 02 FB | 	rdlong	local01, fp
04a40     0C 5E 85 F1 | 	sub	fp, #12
04a44     FF 6C 06 F5 | 	and	local01, #255
04a48     01 FA 05 F1 | 	add	objptr, #1
04a4c     FD 6C 42 FC | 	wrbyte	local01, objptr
04a50                 | ' 
04a50                 | '   ' Handle everything that executes on "tick zero"
04a50                 | '   if tickCounter == 0
04a50     18 FB 85 F1 | 	sub	objptr, #280
04a54     FD 6C CA FA | 	rdbyte	local01, objptr wz
04a58     A1 FA 85 F1 | 	sub	objptr, #161
04a5c     DC 03 90 5D |  if_ne	jmp	#LR__0168
04a60                 | ' 
04a60                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04a60                 | '     deltaPeriod[channel] := 0
04a60     AF 6C 02 FB | 	rdlong	local01, fp
04a64     02 6C 66 F0 | 	shl	local01, #2
04a68     EF FA 05 F1 | 	add	objptr, #239
04a6c     FD 6C 02 F1 | 	add	local01, objptr
04a70     36 01 68 FC | 	wrlong	#0, local01
04a74                 | '     deltaVolume[channel] := 0
04a74     AF 6C 02 FB | 	rdlong	local01, fp
04a78     02 6C 66 F0 | 	shl	local01, #2
04a7c     20 FA 05 F1 | 	add	objptr, #32
04a80     FD 6C 02 F1 | 	add	local01, objptr
04a84     36 01 68 FC | 	wrlong	#0, local01
04a88                 | ' 
04a88                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04a88                 | '     if sampleNumber > 0
04a88     04 5E 05 F1 | 	add	fp, #4
04a8c     AF 6C 02 FB | 	rdlong	local01, fp
04a90     04 5E 85 F1 | 	sub	fp, #4
04a94     00 6C 5E F2 | 	cmps	local01, #0 wcz
04a98     0F FB 85 F1 | 	sub	objptr, #271
04a9c     20 00 90 ED |  if_be	jmp	#LR__0158
04aa0                 | '       sampleNumber_memory[channel] := sampleNumber
04aa0     AF 6C 02 FB | 	rdlong	local01, fp
04aa4     E0 FB 05 F1 | 	add	objptr, #480
04aa8     FD 6C 02 F1 | 	add	local01, objptr
04aac     04 5E 05 F1 | 	add	fp, #4
04ab0     AF 6E 02 FB | 	rdlong	local02, fp
04ab4     04 5E 85 F1 | 	sub	fp, #4
04ab8     36 6F 42 FC | 	wrbyte	local02, local01
04abc     E0 FB 85 F1 | 	sub	objptr, #480
04ac0                 | LR__0158
04ac0                 | ' 
04ac0                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04ac0                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04ac0     AF 70 02 FB | 	rdlong	local03, fp
04ac4     E0 FB 05 F1 | 	add	objptr, #480
04ac8     FD 70 02 F1 | 	add	local03, objptr
04acc     38 5F C2 FA | 	rdbyte	arg01, local03
04ad0     20 5E 05 F1 | 	add	fp, #32
04ad4     AF 60 02 F6 | 	mov	arg02, fp
04ad8     10 5E 85 F1 | 	sub	fp, #16
04adc     AF 62 02 F6 | 	mov	arg03, fp
04ae0     31 FA 85 F1 | 	sub	objptr, #49
04ae4     FD 64 02 F6 | 	mov	arg04, objptr
04ae8     AF FB 85 F1 | 	sub	objptr, #431
04aec     04 5E 05 F1 | 	add	fp, #4
04af0     AF 66 02 F6 | 	mov	arg05, fp
04af4     04 5E 05 F1 | 	add	fp, #4
04af8     AF 68 02 F6 | 	mov	arg06, fp
04afc     04 5E 05 F1 | 	add	fp, #4
04b00     AF 72 02 F6 | 	mov	local04, fp
04b04     39 75 02 F6 | 	mov	local05, local04
04b08     3A 6B 02 F6 | 	mov	arg07, local05
04b0c     1C 5E 85 F1 | 	sub	fp, #28
04b10     F0 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04b14                 | ' 
04b14                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04b14                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04b14                 | '     if sampleNumber > 0
04b14     04 5E 05 F1 | 	add	fp, #4
04b18     AF 6C 02 FB | 	rdlong	local01, fp
04b1c     04 5E 85 F1 | 	sub	fp, #4
04b20     00 6C 5E F2 | 	cmps	local01, #0 wcz
04b24     24 00 90 ED |  if_be	jmp	#LR__0159
04b28                 | '       currVolume[channel] := volume
04b28     AF 6C 02 FB | 	rdlong	local01, fp
04b2c     02 6C 66 F0 | 	shl	local01, #2
04b30     FF FA 05 F1 | 	add	objptr, #255
04b34     FD 6C 02 F1 | 	add	local01, objptr
04b38     14 5E 05 F1 | 	add	fp, #20
04b3c     AF 6E 02 FB | 	rdlong	local02, fp
04b40     14 5E 85 F1 | 	sub	fp, #20
04b44     36 6F 62 FC | 	wrlong	local02, local01
04b48     FF FA 85 F1 | 	sub	objptr, #255
04b4c                 | LR__0159
04b4c                 | ' 
04b4c                 | '     ' Handle all commands that executes on "zero tick"
04b4c                 | '     sampleOffset := 0
04b4c     B3 FB 05 F1 | 	add	objptr, #435
04b50     FD 00 68 FC | 	wrlong	#0, objptr
04b54     B3 FB 85 F1 | 	sub	objptr, #435
04b58                 | '     handleZeroTickCommands(channel)
04b58     AF 5E 02 FB | 	rdlong	arg01, fp
04b5c     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04b60                 | ' 
04b60                 | '     ' Prepare sample data for triggering (now or later)
04b60                 | '     if period > 0
04b60     08 5E 05 F1 | 	add	fp, #8
04b64     AF 6C 02 FB | 	rdlong	local01, fp
04b68     08 5E 85 F1 | 	sub	fp, #8
04b6c     00 6C 5E F2 | 	cmps	local01, #0 wcz
04b70     D0 02 90 ED |  if_be	jmp	#LR__0169
04b74                 | ' 
04b74                 | '       retunePeriod(@period, fineTune)
04b74     08 5E 05 F1 | 	add	fp, #8
04b78     AF 5E 02 F6 | 	mov	arg01, fp
04b7c     08 5E 85 F1 | 	sub	fp, #8
04b80     AF FB 05 F1 | 	add	objptr, #431
04b84     FD 60 02 FB | 	rdlong	arg02, objptr
04b88     AF FB 85 F1 | 	sub	objptr, #431
04b8c     00 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04b90                 | '       currFineTune[channel]        := fineTune
04b90     AF 6C 02 FB | 	rdlong	local01, fp
04b94     D3 FA 05 F1 | 	add	objptr, #211
04b98     FD 6C 02 F1 | 	add	local01, objptr
04b9c     DC FA 05 F1 | 	add	objptr, #220
04ba0     FD 6E 02 FB | 	rdlong	local02, objptr
04ba4     36 6F 42 FC | 	wrbyte	local02, local01
04ba8                 | '       lastSetPeriod[channel]       := period
04ba8     AF 6C 02 FB | 	rdlong	local01, fp
04bac     02 6C 66 F0 | 	shl	local01, #2
04bb0     88 FA 85 F1 | 	sub	objptr, #136
04bb4     FD 6C 02 F1 | 	add	local01, objptr
04bb8     08 5E 05 F1 | 	add	fp, #8
04bbc     AF 6E 02 FB | 	rdlong	local02, fp
04bc0     36 6F 62 FC | 	wrlong	local02, local01
04bc4     08 5E 85 F1 | 	sub	fp, #8
04bc8                 | '       lastSetRepeatLength[channel] := repeatLength
04bc8     AF 6C 02 FB | 	rdlong	local01, fp
04bcc     02 6C 66 F0 | 	shl	local01, #2
04bd0     40 FA 05 F1 | 	add	objptr, #64
04bd4     FD 6C 02 F1 | 	add	local01, objptr
04bd8     1C 5E 05 F1 | 	add	fp, #28
04bdc     AF 6E 02 FB | 	rdlong	local02, fp
04be0     36 6F 62 FC | 	wrlong	local02, local01
04be4     1C 5E 85 F1 | 	sub	fp, #28
04be8                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04be8     AF 6C 02 FB | 	rdlong	local01, fp
04bec     02 6C 66 F0 | 	shl	local01, #2
04bf0     10 FA 05 F1 | 	add	objptr, #16
04bf4     FD 6C 02 F1 | 	add	local01, objptr
04bf8     18 5E 05 F1 | 	add	fp, #24
04bfc     AF 6E 02 FB | 	rdlong	local02, fp
04c00     36 6F 62 FC | 	wrlong	local02, local01
04c04                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04c04     08 5E 05 F1 | 	add	fp, #8
04c08     AF 6C 02 FB | 	rdlong	local01, fp
04c0c     20 5E 85 F1 | 	sub	fp, #32
04c10     3C FA 05 F1 | 	add	objptr, #60
04c14     FD 6E 02 FB | 	rdlong	local02, objptr
04c18     37 6D 02 F1 | 	add	local01, local02
04c1c     AF 76 02 FB | 	rdlong	local06, fp
04c20     02 76 66 F0 | 	shl	local06, #2
04c24     7C FA 85 F1 | 	sub	objptr, #124
04c28     FD 78 02 F6 | 	mov	local07, objptr
04c2c     FD 76 02 F1 | 	add	local06, objptr
04c30     3B 6D 62 FC | 	wrlong	local01, local06
04c34                 | '       lastSetSampleNr[channel]     := sampleNumber
04c34     AF 6C 02 FB | 	rdlong	local01, fp
04c38     02 6C 66 F0 | 	shl	local01, #2
04c3c     10 FA 05 F1 | 	add	objptr, #16
04c40     FD 6C 02 F1 | 	add	local01, objptr
04c44     04 5E 05 F1 | 	add	fp, #4
04c48     AF 6E 02 FB | 	rdlong	local02, fp
04c4c     36 6F 62 FC | 	wrlong	local02, local01
04c50                 | ' 
04c50                 | '       ' This calculates the correct sample length in all situations
04c50                 | '       if repeatLength > 2
04c50     18 5E 05 F1 | 	add	fp, #24
04c54     AF 6C 02 FB | 	rdlong	local01, fp
04c58     1C 5E 85 F1 | 	sub	fp, #28
04c5c     02 6C 5E F2 | 	cmps	local01, #2 wcz
04c60     47 FB 85 F1 | 	sub	objptr, #327
04c64     20 00 90 ED |  if_be	jmp	#LR__0160
04c68                 | '         sampleLength := repeatPoint + repeatLength
04c68     18 5E 05 F1 | 	add	fp, #24
04c6c     AF 6C 02 FB | 	rdlong	local01, fp
04c70     04 5E 05 F1 | 	add	fp, #4
04c74     AF 6E 02 FB | 	rdlong	local02, fp
04c78     37 6D 02 F1 | 	add	local01, local02
04c7c     0C 5E 85 F1 | 	sub	fp, #12
04c80     AF 6C 62 FC | 	wrlong	local01, fp
04c84     10 5E 85 F1 | 	sub	fp, #16
04c88                 | LR__0160
04c88                 | ' 
04c88                 | '       if sampleLength - sampleOffset < 1
04c88     10 5E 05 F1 | 	add	fp, #16
04c8c     AF 6C 02 FB | 	rdlong	local01, fp
04c90     10 5E 85 F1 | 	sub	fp, #16
04c94     B3 FB 05 F1 | 	add	objptr, #435
04c98     FD 6E 02 FB | 	rdlong	local02, objptr
04c9c     B3 FB 85 F1 | 	sub	objptr, #435
04ca0     37 6D 82 F1 | 	sub	local01, local02
04ca4     01 6C 5E F2 | 	cmps	local01, #1 wcz
04ca8     1C 00 90 3D |  if_ae	jmp	#LR__0161
04cac                 | '         lastSetSampleLength[channel] := 1
04cac     AF 6C 02 FB | 	rdlong	local01, fp
04cb0     02 6C 66 F0 | 	shl	local01, #2
04cb4     57 FB 05 F1 | 	add	objptr, #343
04cb8     FD 6C 02 F1 | 	add	local01, objptr
04cbc     36 03 68 FC | 	wrlong	#1, local01
04cc0                 | '       else
04cc0     57 FB 85 F1 | 	sub	objptr, #343
04cc4     34 00 90 FD | 	jmp	#LR__0162
04cc8                 | LR__0161
04cc8                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04cc8     10 5E 05 F1 | 	add	fp, #16
04ccc     AF 6C 02 FB | 	rdlong	local01, fp
04cd0     10 5E 85 F1 | 	sub	fp, #16
04cd4     B3 FB 05 F1 | 	add	objptr, #435
04cd8     FD 6E 02 FB | 	rdlong	local02, objptr
04cdc     37 6D 82 F1 | 	sub	local01, local02
04ce0     AF 76 02 FB | 	rdlong	local06, fp
04ce4     02 76 66 F0 | 	shl	local06, #2
04ce8     5C FA 85 F1 | 	sub	objptr, #92
04cec     FD 78 02 F6 | 	mov	local07, objptr
04cf0     FD 76 02 F1 | 	add	local06, objptr
04cf4     3B 6D 62 FC | 	wrlong	local01, local06
04cf8     57 FB 85 F1 | 	sub	objptr, #343
04cfc                 | LR__0162
04cfc                 | ' 
04cfc                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04cfc                 | '       if sampleOffset > sampleLength
04cfc     B3 FB 05 F1 | 	add	objptr, #435
04d00     FD 6C 02 FB | 	rdlong	local01, objptr
04d04     B3 FB 85 F1 | 	sub	objptr, #435
04d08     10 5E 05 F1 | 	add	fp, #16
04d0c     AF 6E 02 FB | 	rdlong	local02, fp
04d10     10 5E 85 F1 | 	sub	fp, #16
04d14     37 6D 5A F2 | 	cmps	local01, local02 wcz
04d18     54 00 90 ED |  if_be	jmp	#LR__0163
04d1c                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04d1c     20 5E 05 F1 | 	add	fp, #32
04d20     AF 6C 02 FB | 	rdlong	local01, fp
04d24     08 5E 85 F1 | 	sub	fp, #8
04d28     AF 6E 02 FB | 	rdlong	local02, fp
04d2c     18 5E 85 F1 | 	sub	fp, #24
04d30     37 6D 02 F1 | 	add	local01, local02
04d34     AF 76 02 FB | 	rdlong	local06, fp
04d38     02 76 66 F0 | 	shl	local06, #2
04d3c     37 FB 05 F1 | 	add	objptr, #311
04d40     FD 78 02 F6 | 	mov	local07, objptr
04d44     FD 76 02 F1 | 	add	local06, objptr
04d48     3B 6D 62 FC | 	wrlong	local01, local06
04d4c                 | '         lastSetSampleLength[channel] := repeatLength
04d4c     AF 6C 02 FB | 	rdlong	local01, fp
04d50     02 6C 66 F0 | 	shl	local01, #2
04d54     20 FA 05 F1 | 	add	objptr, #32
04d58     FD 6C 02 F1 | 	add	local01, objptr
04d5c     1C 5E 05 F1 | 	add	fp, #28
04d60     AF 6E 02 FB | 	rdlong	local02, fp
04d64     1C 5E 85 F1 | 	sub	fp, #28
04d68     36 6F 62 FC | 	wrlong	local02, local01
04d6c     57 FB 85 F1 | 	sub	objptr, #343
04d70                 | LR__0163
04d70                 | ' 
04d70                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04d70                 | '       ifnot cmd == $3 || cmd == $5
04d70     BA FB 05 F1 | 	add	objptr, #442
04d74     FD 6C C2 FA | 	rdbyte	local01, objptr
04d78     BA FB 85 F1 | 	sub	objptr, #442
04d7c     03 6C 0E F2 | 	cmp	local01, #3 wz
04d80     54 00 90 AD |  if_e	jmp	#LR__0166
04d84     BA FB 05 F1 | 	add	objptr, #442
04d88     FD 7A C2 FA | 	rdbyte	local08, objptr
04d8c     BA FB 85 F1 | 	sub	objptr, #442
04d90     3D 6F 02 F6 | 	mov	local02, local08
04d94     05 6E 0E F2 | 	cmp	local02, #5 wz
04d98     3C 00 90 AD |  if_e	jmp	#LR__0166
04d9c                 | '         ifnot cmd == $E && x == $D
04d9c     BA FB 05 F1 | 	add	objptr, #442
04da0     FD 70 C2 FA | 	rdbyte	local03, objptr
04da4     BA FB 85 F1 | 	sub	objptr, #442
04da8     38 6D 02 F6 | 	mov	local01, local03
04dac     0E 6C 0E F2 | 	cmp	local01, #14 wz
04db0     18 00 90 5D |  if_ne	jmp	#LR__0164
04db4     B7 FB 05 F1 | 	add	objptr, #439
04db8     FD 7A C2 FA | 	rdbyte	local08, objptr
04dbc     B7 FB 85 F1 | 	sub	objptr, #439
04dc0     3D 6F 02 F6 | 	mov	local02, local08
04dc4     0D 6E 0E F2 | 	cmp	local02, #13 wz
04dc8     0C 00 90 AD |  if_e	jmp	#LR__0165
04dcc                 | LR__0164
04dcc                 | '           triggerNote(channel)
04dcc     AF 6C 02 FB | 	rdlong	local01, fp
04dd0     36 5F 02 F6 | 	mov	arg01, local01
04dd4     E0 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04dd8                 | LR__0165
04dd8                 | LR__0166
04dd8                 | ' 
04dd8                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04dd8                 | '       if resetTremolo[channel] > 0
04dd8     AF 6C 02 FB | 	rdlong	local01, fp
04ddc     8F FB 05 F1 | 	add	objptr, #399
04de0     FD 6C 02 F1 | 	add	local01, objptr
04de4     36 6F C2 FA | 	rdbyte	local02, local01
04de8     00 6E 5E F2 | 	cmps	local02, #0 wcz
04dec     8F FB 85 F1 | 	sub	objptr, #399
04df0     14 00 90 ED |  if_be	jmp	#LR__0167
04df4                 | '         tremoloPos[channel] := 0
04df4     AF 6C 02 FB | 	rdlong	local01, fp
04df8     8B FB 05 F1 | 	add	objptr, #395
04dfc     FD 6C 02 F1 | 	add	local01, objptr
04e00     36 01 48 FC | 	wrbyte	#0, local01
04e04     8B FB 85 F1 | 	sub	objptr, #395
04e08                 | LR__0167
04e08                 | ' 
04e08                 | '       if resetVibrato[channel] > 0
04e08     AF 6C 02 FB | 	rdlong	local01, fp
04e0c     93 FB 05 F1 | 	add	objptr, #403
04e10     FD 6C 02 F1 | 	add	local01, objptr
04e14     36 6F C2 FA | 	rdbyte	local02, local01
04e18     00 6E 5E F2 | 	cmps	local02, #0 wcz
04e1c     93 FB 85 F1 | 	sub	objptr, #403
04e20     20 00 90 ED |  if_be	jmp	#LR__0169
04e24                 | '         vibratoPos[channel] := 0
04e24     AF 6C 02 FB | 	rdlong	local01, fp
04e28     87 FB 05 F1 | 	add	objptr, #391
04e2c     FD 6C 02 F1 | 	add	local01, objptr
04e30     36 01 48 FC | 	wrbyte	#0, local01
04e34     87 FB 85 F1 | 	sub	objptr, #391
04e38                 | ' 
04e38                 | '   else
04e38     08 00 90 FD | 	jmp	#LR__0169
04e3c                 | LR__0168
04e3c                 | '     ' Handle commands that executes on all "non zero ticks"
04e3c                 | '     handleNonZeroTickCommands(channel)
04e3c     AF 5E 02 FB | 	rdlong	arg01, fp
04e40     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04e44                 | LR__0169
04e44                 | ' 
04e44                 | '   ' Handle commands that executes on every tick
04e44                 | '   handleEveryTickCommands(channel)
04e44     AF 5E 02 FB | 	rdlong	arg01, fp
04e48     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04e4c                 | ' 
04e4c                 | '   ' Handle boundaries that should be kept
04e4c                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04e4c     AF 70 02 FB | 	rdlong	local03, fp
04e50     02 70 66 F0 | 	shl	local03, #2
04e54     DF FA 05 F1 | 	add	objptr, #223
04e58     FD 70 02 F1 | 	add	local03, objptr
04e5c     38 6D 02 FB | 	rdlong	local01, local03
04e60     01 00 00 FF 
04e64     58 6D 66 F3 | 	fles	local01, ##856
04e68     AF 7A 02 FB | 	rdlong	local08, fp
04e6c     02 7A 66 F0 | 	shl	local08, #2
04e70     FD 7A 02 F1 | 	add	local08, objptr
04e74     3D 6D 62 FC | 	wrlong	local01, local08
04e78                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04e78     AF 70 02 FB | 	rdlong	local03, fp
04e7c     02 70 66 F0 | 	shl	local03, #2
04e80     FD 70 02 F1 | 	add	local03, objptr
04e84     38 6D 02 FB | 	rdlong	local01, local03
04e88     71 6C 46 F3 | 	fges	local01, #113
04e8c     AF 7A 02 FB | 	rdlong	local08, fp
04e90     02 7A 66 F0 | 	shl	local08, #2
04e94     FD 7A 02 F1 | 	add	local08, objptr
04e98     3D 6D 62 FC | 	wrlong	local01, local08
04e9c                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04e9c     AF 70 02 FB | 	rdlong	local03, fp
04ea0     02 70 66 F0 | 	shl	local03, #2
04ea4     20 FA 05 F1 | 	add	objptr, #32
04ea8     FD 70 02 F1 | 	add	local03, objptr
04eac     38 6D 02 FB | 	rdlong	local01, local03
04eb0     40 6C 66 F3 | 	fles	local01, #64
04eb4     AF 7A 02 FB | 	rdlong	local08, fp
04eb8     02 7A 66 F0 | 	shl	local08, #2
04ebc     FD 7A 02 F1 | 	add	local08, objptr
04ec0     3D 6D 62 FC | 	wrlong	local01, local08
04ec4                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04ec4     AF 70 02 FB | 	rdlong	local03, fp
04ec8     02 70 66 F0 | 	shl	local03, #2
04ecc     FD 70 02 F1 | 	add	local03, objptr
04ed0     38 6D 02 FB | 	rdlong	local01, local03
04ed4     00 6C 46 F3 | 	fges	local01, #0
04ed8     AF 7A 02 FB | 	rdlong	local08, fp
04edc     02 7A 66 F0 | 	shl	local08, #2
04ee0     FD 7A 02 F1 | 	add	local08, objptr
04ee4     3D 6D 62 FC | 	wrlong	local01, local08
04ee8     FF FA 85 F1 | 	sub	objptr, #255
04eec     AF F0 03 F6 | 	mov	ptra, fp
04ef0     BA 00 A0 FD | 	call	#popregs_
04ef4                 | _trackerplayer_spin2_processChannel_ret
04ef4     2D 00 64 FD | 	ret
04ef8                 | 
04ef8                 | ' 
04ef8                 | ' 
04ef8                 | ' ' Handle all commands that executes on tick zero
04ef8                 | ' '
04ef8                 | ' PRI handleZeroTickCommands(channel)
04ef8                 | _trackerplayer_spin2_handleZeroTickCommands
04ef8     2F 1F 02 F6 | 	mov	_var01, arg01
04efc                 | ' 
04efc                 | '   CASE_FAST cmd
04efc     BA FB 05 F1 | 	add	objptr, #442
04f00     FD 20 C2 FA | 	rdbyte	_var02, objptr
04f04     BA FB 85 F1 | 	sub	objptr, #442
04f08     10 23 02 F6 | 	mov	_var03, _var02
04f0c     09 22 86 F1 | 	sub	_var03, #9
04f10     07 22 26 F3 | 	fle	_var03, #7
04f14     11 25 02 F6 | 	mov	_var04, _var03
04f18     30 24 62 FD | 	jmprel	_var04
04f1c                 | LR__0170
04f1c     1C 00 90 FD | 	jmp	#LR__0171
04f20     30 04 90 FD | 	jmp	#LR__0194
04f24     64 00 90 FD | 	jmp	#LR__0173
04f28     84 00 90 FD | 	jmp	#LR__0174
04f2c     A0 00 90 FD | 	jmp	#LR__0175
04f30     D0 00 90 FD | 	jmp	#LR__0176
04f34     9C 03 90 FD | 	jmp	#LR__0191
04f38     18 04 90 FD | 	jmp	#LR__0194
04f3c                 | LR__0171
04f3c                 | ' 
04f3c                 | '     $9:                          ' Set sample offset
04f3c                 | '       if z > 0
04f3c     B9 FB 05 F1 | 	add	objptr, #441
04f40     FD 26 C2 FA | 	rdbyte	_var05, objptr
04f44     B9 FB 85 F1 | 	sub	objptr, #441
04f48     00 26 5E F2 | 	cmps	_var05, #0 wcz
04f4c     1C 00 90 ED |  if_be	jmp	#LR__0172
04f50                 | '         cmd9_memoryZ[channel] := z
04f50     0F 27 02 F6 | 	mov	_var05, _var01
04f54     DC FB 05 F1 | 	add	objptr, #476
04f58     FD 26 02 F1 | 	add	_var05, objptr
04f5c     23 FA 85 F1 | 	sub	objptr, #35
04f60     FD 28 C2 FA | 	rdbyte	_var06, objptr
04f64     B9 FB 85 F1 | 	sub	objptr, #441
04f68     13 29 42 FC | 	wrbyte	_var06, _var05
04f6c                 | LR__0172
04f6c                 | ' 
04f6c                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04f6c     DC FB 05 F1 | 	add	objptr, #476
04f70     FD 1E 02 F1 | 	add	_var01, objptr
04f74     0F 27 C2 FA | 	rdbyte	_var05, _var01
04f78     08 26 66 F0 | 	shl	_var05, #8
04f7c     29 FA 85 F1 | 	sub	objptr, #41
04f80     FD 26 62 FC | 	wrlong	_var05, objptr
04f84     B3 FB 85 F1 | 	sub	objptr, #435
04f88     C8 03 90 FD | 	jmp	#LR__0194
04f8c                 | LR__0173
04f8c                 | ' 
04f8c                 | '     $B:                          ' Jump position
04f8c                 | '       cmdB_memoryZ := z
04f8c     B9 FB 05 F1 | 	add	objptr, #441
04f90     FD 26 C2 FA | 	rdbyte	_var05, objptr
04f94     2E FA 05 F1 | 	add	objptr, #46
04f98     FD 26 42 FC | 	wrbyte	_var05, objptr
04f9c                 | '       cmdB_updatePosition := true
04f9c     01 FA 05 F1 | 	add	objptr, #1
04fa0     FF FF FF FF 
04fa4     FD FE 4B FC | 	wrbyte	##-1, objptr
04fa8     E8 FB 85 F1 | 	sub	objptr, #488
04fac     A4 03 90 FD | 	jmp	#LR__0194
04fb0                 | LR__0174
04fb0                 | ' 
04fb0                 | '     $C:                          ' Set volume
04fb0                 | '       currVolume[channel] := z
04fb0     02 1E 66 F0 | 	shl	_var01, #2
04fb4     FF FA 05 F1 | 	add	objptr, #255
04fb8     FD 1E 02 F1 | 	add	_var01, objptr
04fbc     BA FA 05 F1 | 	add	objptr, #186
04fc0     FD 28 C2 FA | 	rdbyte	_var06, objptr
04fc4     B9 FB 85 F1 | 	sub	objptr, #441
04fc8     0F 29 62 FC | 	wrlong	_var06, _var01
04fcc     84 03 90 FD | 	jmp	#LR__0194
04fd0                 | LR__0175
04fd0                 | ' 
04fd0                 | '     $D:                          ' Pattern break
04fd0                 | '       cmdD_memoryX := x
04fd0     B7 FB 05 F1 | 	add	objptr, #439
04fd4     FD 26 C2 FA | 	rdbyte	_var05, objptr
04fd8     2D FA 05 F1 | 	add	objptr, #45
04fdc     FD 26 42 FC | 	wrbyte	_var05, objptr
04fe0                 | '       cmdD_memoryY := y
04fe0     2C FA 85 F1 | 	sub	objptr, #44
04fe4     FD 26 C2 FA | 	rdbyte	_var05, objptr
04fe8     2D FA 05 F1 | 	add	objptr, #45
04fec     FD 26 42 FC | 	wrbyte	_var05, objptr
04ff0                 | '       cmdD_updatePosition := true
04ff0     01 FA 05 F1 | 	add	objptr, #1
04ff4     FF FF FF FF 
04ff8     FD FE 4B FC | 	wrbyte	##-1, objptr
04ffc     E6 FB 85 F1 | 	sub	objptr, #486
05000     50 03 90 FD | 	jmp	#LR__0194
05004                 | LR__0176
05004                 | ' 
05004                 | '     $E:                          ' Handle "E commands" that execute on tick zero
05004                 | ' 
05004                 | '       CASE_FAST x
05004     B7 FB 05 F1 | 	add	objptr, #439
05008     FD 2A C2 FA | 	rdbyte	_var07, objptr
0500c     B7 FB 85 F1 | 	sub	objptr, #439
05010     15 27 02 F6 | 	mov	_var05, _var07
05014     0F 26 26 F3 | 	fle	_var05, #15
05018     13 2D 02 F6 | 	mov	_var08, _var05
0501c     30 2C 62 FD | 	jmprel	_var08
05020                 | LR__0177
05020     3C 00 90 FD | 	jmp	#LR__0178
05024     58 00 90 FD | 	jmp	#LR__0179
05028     8C 00 90 FD | 	jmp	#LR__0180
0502c     C0 00 90 FD | 	jmp	#LR__0181
05030     DC 00 90 FD | 	jmp	#LR__0182
05034     14 01 90 FD | 	jmp	#LR__0183
05038     28 01 90 FD | 	jmp	#LR__0184
0503c     C0 01 90 FD | 	jmp	#LR__0187
05040     10 03 90 FD | 	jmp	#LR__0194
05044     0C 03 90 FD | 	jmp	#LR__0194
05048     F0 01 90 FD | 	jmp	#LR__0188
0504c     24 02 90 FD | 	jmp	#LR__0189
05050     00 03 90 FD | 	jmp	#LR__0194
05054     FC 02 90 FD | 	jmp	#LR__0194
05058     50 02 90 FD | 	jmp	#LR__0190
0505c     F4 02 90 FD | 	jmp	#LR__0194
05060                 | LR__0178
05060                 | ' 
05060                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
05060     B8 FB 05 F1 | 	add	objptr, #440
05064     FD 28 C2 FA | 	rdbyte	_var06, objptr
05068     14 29 22 F6 | 	not	_var06, _var06
0506c     01 28 06 F5 | 	and	_var06, #1
05070     03 FA 05 F1 | 	add	objptr, #3
05074     FD 28 42 FC | 	wrbyte	_var06, objptr
05078     BB FB 85 F1 | 	sub	objptr, #443
0507c     D4 02 90 FD | 	jmp	#LR__0194
05080                 | LR__0179
05080                 | ' 
05080                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
05080     0F 2F 02 F6 | 	mov	_var09, _var01
05084     02 2E 66 F0 | 	shl	_var09, #2
05088     DF FA 05 F1 | 	add	objptr, #223
0508c     FD 2E 02 F1 | 	add	_var09, objptr
05090     17 29 02 FB | 	rdlong	_var06, _var09
05094     D9 FA 05 F1 | 	add	objptr, #217
05098     FD 30 C2 FA | 	rdbyte	_var10, objptr
0509c     18 29 82 F1 | 	sub	_var06, _var10
050a0     02 1E 66 F0 | 	shl	_var01, #2
050a4     D9 FA 85 F1 | 	sub	objptr, #217
050a8     FD 1E 02 F1 | 	add	_var01, objptr
050ac     0F 29 62 FC | 	wrlong	_var06, _var01
050b0     DF FA 85 F1 | 	sub	objptr, #223
050b4     9C 02 90 FD | 	jmp	#LR__0194
050b8                 | LR__0180
050b8                 | ' 
050b8                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
050b8     0F 2F 02 F6 | 	mov	_var09, _var01
050bc     02 2E 66 F0 | 	shl	_var09, #2
050c0     DF FA 05 F1 | 	add	objptr, #223
050c4     FD 2E 02 F1 | 	add	_var09, objptr
050c8     17 29 02 FB | 	rdlong	_var06, _var09
050cc     D9 FA 05 F1 | 	add	objptr, #217
050d0     FD 30 C2 FA | 	rdbyte	_var10, objptr
050d4     18 29 02 F1 | 	add	_var06, _var10
050d8     02 1E 66 F0 | 	shl	_var01, #2
050dc     D9 FA 85 F1 | 	sub	objptr, #217
050e0     FD 1E 02 F1 | 	add	_var01, objptr
050e4     0F 29 62 FC | 	wrlong	_var06, _var01
050e8     DF FA 85 F1 | 	sub	objptr, #223
050ec     64 02 90 FD | 	jmp	#LR__0194
050f0                 | LR__0181
050f0                 | ' 
050f0                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
050f0     B8 FB 05 F1 | 	add	objptr, #440
050f4     FD 28 C2 FA | 	rdbyte	_var06, objptr
050f8     01 28 06 F5 | 	and	_var06, #1
050fc     04 FA 05 F1 | 	add	objptr, #4
05100     FD 1E 02 F1 | 	add	_var01, objptr
05104     0F 29 42 FC | 	wrbyte	_var06, _var01
05108     BC FB 85 F1 | 	sub	objptr, #444
0510c     44 02 90 FD | 	jmp	#LR__0194
05110                 | LR__0182
05110                 | ' 
05110                 | '         $4:                                      ' Set vibrato waveform type
05110                 | '           vibratoType[channel]  := y & 3
05110     B8 FB 05 F1 | 	add	objptr, #440
05114     FD 28 C2 FA | 	rdbyte	_var06, objptr
05118     03 28 06 F5 | 	and	_var06, #3
0511c     0F 33 02 F6 | 	mov	_var11, _var01
05120     08 FA 05 F1 | 	add	objptr, #8
05124     FD 32 02 F1 | 	add	_var11, objptr
05128     19 29 42 FC | 	wrbyte	_var06, _var11
0512c                 | '           resetVibrato[channel] := y & 4
0512c     08 FA 85 F1 | 	sub	objptr, #8
05130     FD 28 C2 FA | 	rdbyte	_var06, objptr
05134     04 28 06 F5 | 	and	_var06, #4
05138     25 FA 85 F1 | 	sub	objptr, #37
0513c     FD 1E 02 F1 | 	add	_var01, objptr
05140     0F 29 42 FC | 	wrbyte	_var06, _var01
05144     93 FB 85 F1 | 	sub	objptr, #403
05148     08 02 90 FD | 	jmp	#LR__0194
0514c                 | LR__0183
0514c                 | ' 
0514c                 | '         $5: fineTune := y                        ' Set finetune
0514c     B8 FB 05 F1 | 	add	objptr, #440
05150     FD 28 C2 FA | 	rdbyte	_var06, objptr
05154     09 FA 85 F1 | 	sub	objptr, #9
05158     FD 28 62 FC | 	wrlong	_var06, objptr
0515c     AF FB 85 F1 | 	sub	objptr, #431
05160     F0 01 90 FD | 	jmp	#LR__0194
05164                 | LR__0184
05164                 | ' 
05164                 | '         $6:                                      ' Pattern looping
05164                 | '           if y == 0
05164     B8 FB 05 F1 | 	add	objptr, #440
05168     FD 28 CA FA | 	rdbyte	_var06, objptr wz
0516c     B8 FB 85 F1 | 	sub	objptr, #440
05170     1C 00 90 5D |  if_ne	jmp	#LR__0185
05174                 | '             cmdE6_memory[channel] := patternRow
05174     E9 FB 05 F1 | 	add	objptr, #489
05178     FD 1E 02 F1 | 	add	_var01, objptr
0517c     47 FB 85 F1 | 	sub	objptr, #327
05180     FD 32 C2 FA | 	rdbyte	_var11, objptr
05184     A2 FA 85 F1 | 	sub	objptr, #162
05188     0F 33 42 FC | 	wrbyte	_var11, _var01
0518c                 | '           else
0518c     C4 01 90 FD | 	jmp	#LR__0194
05190                 | LR__0185
05190                 | '             if ++cmdE6_counter[channel] <= y
05190     0F 2F 02 F6 | 	mov	_var09, _var01
05194     ED FB 05 F1 | 	add	objptr, #493
05198     FD 2E 02 F1 | 	add	_var09, objptr
0519c     17 29 C2 FA | 	rdbyte	_var06, _var09
051a0     01 28 06 F1 | 	add	_var06, #1
051a4     0F 31 02 F6 | 	mov	_var10, _var01
051a8     FD 30 02 F1 | 	add	_var10, objptr
051ac     18 29 42 FC | 	wrbyte	_var06, _var10
051b0     18 35 C2 FA | 	rdbyte	_var12, _var10
051b4     35 FA 85 F1 | 	sub	objptr, #53
051b8     FD 36 C2 FA | 	rdbyte	_var13, objptr
051bc     B8 FB 85 F1 | 	sub	objptr, #440
051c0     1B 35 5A F2 | 	cmps	_var12, _var13 wcz
051c4     24 00 90 1D |  if_a	jmp	#LR__0186
051c8                 | '               cmdE6_updatePosition[channel] := true
051c8     F1 FB 05 F1 | 	add	objptr, #497
051cc     FD 1E 02 F1 | 	add	_var01, objptr
051d0     FF FF FF FF 
051d4     0F FF 4B FC | 	wrbyte	##-1, _var01
051d8                 | '               cmdE6_updatePositionCommon    := true
051d8     04 FA 05 F1 | 	add	objptr, #4
051dc     FF FF FF FF 
051e0     FD FE 4B FC | 	wrbyte	##-1, objptr
051e4     F5 FB 85 F1 | 	sub	objptr, #501
051e8                 | '             else
051e8     68 01 90 FD | 	jmp	#LR__0194
051ec                 | LR__0186
051ec                 | '               cmdE6_counter[channel] := 0
051ec     ED FB 05 F1 | 	add	objptr, #493
051f0     FD 1E 02 F1 | 	add	_var01, objptr
051f4     0F 01 48 FC | 	wrbyte	#0, _var01
051f8     ED FB 85 F1 | 	sub	objptr, #493
051fc     54 01 90 FD | 	jmp	#LR__0194
05200                 | LR__0187
05200                 | ' 
05200                 | '         $7:                                      ' Set tremolo waveform type
05200                 | '           tremoloType[channel] := y & 3
05200     B8 FB 05 F1 | 	add	objptr, #440
05204     FD 28 C2 FA | 	rdbyte	_var06, objptr
05208     03 28 06 F5 | 	and	_var06, #3
0520c     0F 33 02 F6 | 	mov	_var11, _var01
05210     0C FA 05 F1 | 	add	objptr, #12
05214     FD 32 02 F1 | 	add	_var11, objptr
05218     19 29 42 FC | 	wrbyte	_var06, _var11
0521c                 | '           resetTremolo[channel] := y & 4
0521c     0C FA 85 F1 | 	sub	objptr, #12
05220     FD 28 C2 FA | 	rdbyte	_var06, objptr
05224     04 28 06 F5 | 	and	_var06, #4
05228     29 FA 85 F1 | 	sub	objptr, #41
0522c     FD 1E 02 F1 | 	add	_var01, objptr
05230     0F 29 42 FC | 	wrbyte	_var06, _var01
05234     8F FB 85 F1 | 	sub	objptr, #399
05238     18 01 90 FD | 	jmp	#LR__0194
0523c                 | LR__0188
0523c                 | ' 
0523c                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
0523c     0F 2F 02 F6 | 	mov	_var09, _var01
05240     02 2E 66 F0 | 	shl	_var09, #2
05244     FF FA 05 F1 | 	add	objptr, #255
05248     FD 2E 02 F1 | 	add	_var09, objptr
0524c     17 29 02 FB | 	rdlong	_var06, _var09
05250     B9 FA 05 F1 | 	add	objptr, #185
05254     FD 30 C2 FA | 	rdbyte	_var10, objptr
05258     18 29 02 F1 | 	add	_var06, _var10
0525c     02 1E 66 F0 | 	shl	_var01, #2
05260     B9 FA 85 F1 | 	sub	objptr, #185
05264     FD 1E 02 F1 | 	add	_var01, objptr
05268     0F 29 62 FC | 	wrlong	_var06, _var01
0526c     FF FA 85 F1 | 	sub	objptr, #255
05270     E0 00 90 FD | 	jmp	#LR__0194
05274                 | LR__0189
05274                 | ' 
05274                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05274     0F 2F 02 F6 | 	mov	_var09, _var01
05278     02 2E 66 F0 | 	shl	_var09, #2
0527c     FF FA 05 F1 | 	add	objptr, #255
05280     FD 2E 02 F1 | 	add	_var09, objptr
05284     17 29 02 FB | 	rdlong	_var06, _var09
05288     B9 FA 05 F1 | 	add	objptr, #185
0528c     FD 30 C2 FA | 	rdbyte	_var10, objptr
05290     18 29 82 F1 | 	sub	_var06, _var10
05294     02 1E 66 F0 | 	shl	_var01, #2
05298     B9 FA 85 F1 | 	sub	objptr, #185
0529c     FD 1E 02 F1 | 	add	_var01, objptr
052a0     0F 29 62 FC | 	wrlong	_var06, _var01
052a4     FF FA 85 F1 | 	sub	objptr, #255
052a8     A8 00 90 FD | 	jmp	#LR__0194
052ac                 | LR__0190
052ac                 | ' 
052ac                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
052ac     B8 FB 05 F1 | 	add	objptr, #440
052b0     FD 2E C2 FA | 	rdbyte	_var09, objptr
052b4     14 FB 85 F1 | 	sub	objptr, #276
052b8     FD 30 C2 FA | 	rdbyte	_var10, objptr
052bc     18 2F 02 FD | 	qmul	_var09, _var10
052c0     18 28 62 FD | 	getqx	_var06
052c4     01 FA 05 F1 | 	add	objptr, #1
052c8     FD 28 42 FC | 	wrbyte	_var06, objptr
052cc     A5 FA 85 F1 | 	sub	objptr, #165
052d0     80 00 90 FD | 	jmp	#LR__0194
052d4                 | LR__0191
052d4                 | ' 
052d4                 | '     $F:                          ' Set speed
052d4                 | '       if z < 32
052d4     B9 FB 05 F1 | 	add	objptr, #441
052d8     FD 26 C2 FA | 	rdbyte	_var05, objptr
052dc     B9 FB 85 F1 | 	sub	objptr, #441
052e0     20 26 5E F2 | 	cmps	_var05, #32 wcz
052e4     18 00 90 3D |  if_ae	jmp	#LR__0192
052e8                 | '         currentSongSpeed := z
052e8     B9 FB 05 F1 | 	add	objptr, #441
052ec     FD 26 C2 FA | 	rdbyte	_var05, objptr
052f0     15 FB 85 F1 | 	sub	objptr, #277
052f4     FD 26 42 FC | 	wrbyte	_var05, objptr
052f8     A4 FA 85 F1 | 	sub	objptr, #164
052fc                 | '       else
052fc     54 00 90 FD | 	jmp	#LR__0193
05300                 | LR__0192
05300                 | '         ticksPerMinute := z * 24
05300     B9 FB 05 F1 | 	add	objptr, #441
05304     FD 2A C2 FA | 	rdbyte	_var07, objptr
05308     15 27 02 F6 | 	mov	_var05, _var07
0530c     01 26 66 F0 | 	shl	_var05, #1
05310     15 27 02 F1 | 	add	_var05, _var07
05314     03 26 66 F0 | 	shl	_var05, #3
05318     12 FA 85 F1 | 	sub	objptr, #18
0531c     FD 26 62 FC | 	wrlong	_var05, objptr
05320     A7 FB 85 F1 | 	sub	objptr, #423
05324                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05324     FD 98 02 FB | 	rdlong	muldiva_, objptr
05328     A7 FB 05 F1 | 	add	objptr, #423
0532c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
05330     A7 FB 85 F1 | 	sub	objptr, #423
05334     C6 00 A0 FD | 	call	#divide_
05338     4D 29 02 F6 | 	mov	_var06, muldivb_
0533c     04 28 66 F0 | 	shl	_var06, #4
05340     4D 29 82 F1 | 	sub	_var06, muldivb_
05344     02 28 66 F0 | 	shl	_var06, #2
05348     AB FB 05 F1 | 	add	objptr, #427
0534c     FD 28 62 FC | 	wrlong	_var06, objptr
05350     AB FB 85 F1 | 	sub	objptr, #427
05354                 | LR__0193
05354                 | LR__0194
05354                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05354     2D 00 64 FD | 	ret
05358                 | 
05358                 | ' 
05358                 | ' 
05358                 | ' ' Handle all commands that executes on "non zero ticks"
05358                 | ' '
05358                 | ' PRI handleNonZeroTickCommands(channel)
05358                 | _trackerplayer_spin2_handleNonZeroTickCommands
05358     0A 5A 05 F6 | 	mov	COUNT_, #10
0535c     B0 00 A0 FD | 	call	#pushregs_
05360     2F 6D 02 F6 | 	mov	local01, arg01
05364                 | ' 
05364                 | '   CASE_FAST cmd
05364     BA FB 05 F1 | 	add	objptr, #442
05368     FD 6E C2 FA | 	rdbyte	local02, objptr
0536c     BA FB 85 F1 | 	sub	objptr, #442
05370     37 71 02 F6 | 	mov	local03, local02
05374     01 70 86 F1 | 	sub	local03, #1
05378     0E 70 26 F3 | 	fle	local03, #14
0537c     38 73 02 F6 | 	mov	local04, local03
05380     30 72 62 FD | 	jmprel	local04
05384                 | LR__0195
05384     38 00 90 FD | 	jmp	#LR__0196
05388     A0 00 90 FD | 	jmp	#LR__0197
0538c     D4 00 90 FD | 	jmp	#LR__0198
05390     1C 02 90 FD | 	jmp	#LR__0208
05394     20 01 90 FD | 	jmp	#LR__0200
05398     48 01 90 FD | 	jmp	#LR__0201
0539c     50 01 90 FD | 	jmp	#LR__0202
053a0     0C 02 90 FD | 	jmp	#LR__0208
053a4     08 02 90 FD | 	jmp	#LR__0208
053a8     B0 01 90 FD | 	jmp	#LR__0205
053ac     00 02 90 FD | 	jmp	#LR__0208
053b0     FC 01 90 FD | 	jmp	#LR__0208
053b4     F8 01 90 FD | 	jmp	#LR__0208
053b8     AC 01 90 FD | 	jmp	#LR__0206
053bc     F0 01 90 FD | 	jmp	#LR__0208
053c0                 | LR__0196
053c0                 | ' 
053c0                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
053c0     36 75 02 F6 | 	mov	local05, local01
053c4     02 74 66 F0 | 	shl	local05, #2
053c8     DF FA 05 F1 | 	add	objptr, #223
053cc     FD 74 02 F1 | 	add	local05, objptr
053d0     3A 77 02 FB | 	rdlong	local06, local05
053d4     DA FA 05 F1 | 	add	objptr, #218
053d8     FD 78 C2 FA | 	rdbyte	local07, objptr
053dc     3C 77 82 F1 | 	sub	local06, local07
053e0     36 7B 02 F6 | 	mov	local08, local01
053e4     02 7A 66 F0 | 	shl	local08, #2
053e8     DA FA 85 F1 | 	sub	objptr, #218
053ec     FD 7A 02 F1 | 	add	local08, objptr
053f0     3D 77 62 FC | 	wrlong	local06, local08
053f4                 | ' 
053f4                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
053f4                 | '       if currPeriod[channel] < 0
053f4     36 77 02 F6 | 	mov	local06, local01
053f8     02 76 66 F0 | 	shl	local06, #2
053fc     FD 76 02 F1 | 	add	local06, objptr
05400     3B 7D 02 FB | 	rdlong	local09, local06
05404     00 7C 5E F2 | 	cmps	local09, #0 wcz
05408     DF FA 85 F1 | 	sub	objptr, #223
0540c     A0 01 90 3D |  if_ae	jmp	#LR__0208
05410                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05410     02 6C 66 F0 | 	shl	local01, #2
05414     DF FA 05 F1 | 	add	objptr, #223
05418     FD 6C 02 F1 | 	add	local01, objptr
0541c     01 00 80 FF 
05420     36 B1 6A FC | 	wrlong	##856, local01
05424     DF FA 85 F1 | 	sub	objptr, #223
05428     84 01 90 FD | 	jmp	#LR__0208
0542c                 | LR__0197
0542c                 | ' 
0542c                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
0542c     36 75 02 F6 | 	mov	local05, local01
05430     02 74 66 F0 | 	shl	local05, #2
05434     DF FA 05 F1 | 	add	objptr, #223
05438     FD 74 02 F1 | 	add	local05, objptr
0543c     3A 77 02 FB | 	rdlong	local06, local05
05440     DA FA 05 F1 | 	add	objptr, #218
05444     FD 78 C2 FA | 	rdbyte	local07, objptr
05448     3C 77 02 F1 | 	add	local06, local07
0544c     02 6C 66 F0 | 	shl	local01, #2
05450     DA FA 85 F1 | 	sub	objptr, #218
05454     FD 6C 02 F1 | 	add	local01, objptr
05458     36 77 62 FC | 	wrlong	local06, local01
0545c     DF FA 85 F1 | 	sub	objptr, #223
05460     4C 01 90 FD | 	jmp	#LR__0208
05464                 | LR__0198
05464                 | ' 
05464                 | '     $3:                                 ' Slide to note (portamento)
05464                 | '       if z > 0
05464     B9 FB 05 F1 | 	add	objptr, #441
05468     FD 76 C2 FA | 	rdbyte	local06, objptr
0546c     B9 FB 85 F1 | 	sub	objptr, #441
05470     00 76 5E F2 | 	cmps	local06, #0 wcz
05474     1C 00 90 ED |  if_be	jmp	#LR__0199
05478                 | '         cmd3_memoryZ[channel] := z
05478     36 77 02 F6 | 	mov	local06, local01
0547c     C8 FB 05 F1 | 	add	objptr, #456
05480     FD 76 02 F1 | 	add	local06, objptr
05484     0F FA 85 F1 | 	sub	objptr, #15
05488     FD 7C C2 FA | 	rdbyte	local09, objptr
0548c     B9 FB 85 F1 | 	sub	objptr, #441
05490     3B 7D 42 FC | 	wrbyte	local09, local06
05494                 | LR__0199
05494                 | ' 
05494                 | '       doPortamento(channel, lastSetPeriod[channel])
05494     36 7D 02 F6 | 	mov	local09, local01
05498     02 7C 66 F0 | 	shl	local09, #2
0549c     27 FB 05 F1 | 	add	objptr, #295
054a0     FD 7C 02 F1 | 	add	local09, objptr
054a4     3E 61 02 FB | 	rdlong	arg02, local09
054a8     36 5F 02 F6 | 	mov	arg01, local01
054ac     27 FB 85 F1 | 	sub	objptr, #295
054b0     5C 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
054b4     F8 00 90 FD | 	jmp	#LR__0208
054b8                 | LR__0200
054b8                 | ' 
054b8                 | '     $5:                                 ' Volume slide + portamento
054b8                 | '       doVolumeSlide(channel)
054b8     36 5F 02 F6 | 	mov	arg01, local01
054bc     7C 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
054c0                 | '       doPortamento(channel, lastSetPeriod[channel])
054c0     36 7D 02 F6 | 	mov	local09, local01
054c4     02 7C 66 F0 | 	shl	local09, #2
054c8     27 FB 05 F1 | 	add	objptr, #295
054cc     FD 7C 02 F1 | 	add	local09, objptr
054d0     3E 61 02 FB | 	rdlong	arg02, local09
054d4     36 5F 02 F6 | 	mov	arg01, local01
054d8     27 FB 85 F1 | 	sub	objptr, #295
054dc     30 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
054e0     CC 00 90 FD | 	jmp	#LR__0208
054e4                 | LR__0201
054e4                 | ' 
054e4                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
054e4     36 5F 02 F6 | 	mov	arg01, local01
054e8     50 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
054ec     C0 00 90 FD | 	jmp	#LR__0208
054f0                 | LR__0202
054f0                 | ' 
054f0                 | '     $7:                                 ' Tremolo
054f0                 | '       if x > 0
054f0     B7 FB 05 F1 | 	add	objptr, #439
054f4     FD 76 C2 FA | 	rdbyte	local06, objptr
054f8     B7 FB 85 F1 | 	sub	objptr, #439
054fc     00 76 5E F2 | 	cmps	local06, #0 wcz
05500     1C 00 90 ED |  if_be	jmp	#LR__0203
05504                 | '         cmd7_memoryX[channel] := x
05504     36 77 02 F6 | 	mov	local06, local01
05508     D8 FB 05 F1 | 	add	objptr, #472
0550c     FD 76 02 F1 | 	add	local06, objptr
05510     21 FA 85 F1 | 	sub	objptr, #33
05514     FD 7C C2 FA | 	rdbyte	local09, objptr
05518     B7 FB 85 F1 | 	sub	objptr, #439
0551c     3B 7D 42 FC | 	wrbyte	local09, local06
05520                 | LR__0203
05520                 | '       if y > 0
05520     B8 FB 05 F1 | 	add	objptr, #440
05524     FD 76 C2 FA | 	rdbyte	local06, objptr
05528     B8 FB 85 F1 | 	sub	objptr, #440
0552c     00 76 5E F2 | 	cmps	local06, #0 wcz
05530     1C 00 90 ED |  if_be	jmp	#LR__0204
05534                 | '         cmd7_memoryY[channel] := y
05534     36 77 02 F6 | 	mov	local06, local01
05538     D4 FB 05 F1 | 	add	objptr, #468
0553c     FD 76 02 F1 | 	add	local06, objptr
05540     1C FA 85 F1 | 	sub	objptr, #28
05544     FD 7C C2 FA | 	rdbyte	local09, objptr
05548     B8 FB 85 F1 | 	sub	objptr, #440
0554c     3B 7D 42 FC | 	wrbyte	local09, local06
05550                 | LR__0204
05550                 | ' 
05550                 | '       doTremolo(channel)
05550     36 5F 02 F6 | 	mov	arg01, local01
05554     F0 03 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05558     54 00 90 FD | 	jmp	#LR__0208
0555c                 | LR__0205
0555c                 | ' 
0555c                 | '     $A: doVolumeSlide(channel)          ' Volume slide
0555c     36 5F 02 F6 | 	mov	arg01, local01
05560     D8 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05564     48 00 90 FD | 	jmp	#LR__0208
05568                 | LR__0206
05568                 | ' 
05568                 | '     $E:                                 ' Retrig every Y ticks
05568                 | '       if (x == $9) && ((tickcounter // y) == 0)
05568     B7 FB 05 F1 | 	add	objptr, #439
0556c     FD 74 C2 FA | 	rdbyte	local05, objptr
05570     B7 FB 85 F1 | 	sub	objptr, #439
05574     09 74 0E F2 | 	cmp	local05, #9 wz
05578     34 00 90 5D |  if_ne	jmp	#LR__0207
0557c     A1 FA 05 F1 | 	add	objptr, #161
05580     FD 78 C2 FA | 	rdbyte	local07, objptr
05584     3C 99 02 F6 | 	mov	muldiva_, local07
05588     17 FB 05 F1 | 	add	objptr, #279
0558c     FD 7E C2 FA | 	rdbyte	local10, objptr
05590     B8 FB 85 F1 | 	sub	objptr, #440
05594     3F 9B 02 F6 | 	mov	muldivb_, local10
05598     C6 00 A0 FD | 	call	#divide_
0559c     4C 7D 0A F6 | 	mov	local09, muldiva_ wz
055a0     0C 00 90 5D |  if_ne	jmp	#LR__0207
055a4                 | '         triggerNote(channel)
055a4     36 77 02 F6 | 	mov	local06, local01
055a8     3B 5F 02 F6 | 	mov	arg01, local06
055ac     08 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
055b0                 | LR__0207
055b0                 | LR__0208
055b0     AF F0 03 F6 | 	mov	ptra, fp
055b4     BA 00 A0 FD | 	call	#popregs_
055b8                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
055b8     2D 00 64 FD | 	ret
055bc                 | 
055bc                 | ' 
055bc                 | ' 
055bc                 | ' ' Handle all commands that executes on every tick
055bc                 | ' '
055bc                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
055bc                 | _trackerplayer_spin2_handleEveryTickCommands
055bc     0F 5A 05 F6 | 	mov	COUNT_, #15
055c0     B0 00 A0 FD | 	call	#pushregs_
055c4     2F 6D 02 F6 | 	mov	local01, arg01
055c8                 | ' 
055c8                 | '   CASE_FAST cmd
055c8     BA FB 05 F1 | 	add	objptr, #442
055cc     FD 6E C2 FA | 	rdbyte	local02, objptr
055d0     BA FB 85 F1 | 	sub	objptr, #442
055d4     37 71 02 F6 | 	mov	local03, local02
055d8     0F 70 26 F3 | 	fle	local03, #15
055dc     38 73 02 F6 | 	mov	local04, local03
055e0     30 72 62 FD | 	jmprel	local04
055e4                 | LR__0209
055e4     3C 00 90 FD | 	jmp	#LR__0210
055e8     50 03 90 FD | 	jmp	#LR__0224
055ec     4C 03 90 FD | 	jmp	#LR__0224
055f0     48 03 90 FD | 	jmp	#LR__0224
055f4     D0 01 90 FD | 	jmp	#LR__0213
055f8     40 03 90 FD | 	jmp	#LR__0224
055fc     34 02 90 FD | 	jmp	#LR__0216
05600     38 03 90 FD | 	jmp	#LR__0224
05604     34 03 90 FD | 	jmp	#LR__0224
05608     30 03 90 FD | 	jmp	#LR__0224
0560c     2C 03 90 FD | 	jmp	#LR__0224
05610     28 03 90 FD | 	jmp	#LR__0224
05614     24 03 90 FD | 	jmp	#LR__0224
05618     20 03 90 FD | 	jmp	#LR__0224
0561c     20 02 90 FD | 	jmp	#LR__0217
05620     18 03 90 FD | 	jmp	#LR__0224
05624                 | LR__0210
05624                 | ' 
05624                 | '     $0:                                 ' Arpeggio
05624                 | '       arpCounter := tickCounter // 3
05624     A1 FA 05 F1 | 	add	objptr, #161
05628     FD 98 C2 FA | 	rdbyte	muldiva_, objptr
0562c     A1 FA 85 F1 | 	sub	objptr, #161
05630     03 9A 06 F6 | 	mov	muldivb_, #3
05634     C6 00 A0 FD | 	call	#divide_
05638     4C 75 02 F6 | 	mov	local05, muldiva_
0563c                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
0563c     36 77 02 F6 | 	mov	local06, local01
05640     02 76 66 F0 | 	shl	local06, #2
05644     DF FA 05 F1 | 	add	objptr, #223
05648     FD 76 02 F1 | 	add	local06, objptr
0564c     3B 5F 02 FB | 	rdlong	arg01, local06
05650     36 79 02 F6 | 	mov	local07, local01
05654     0C FA 85 F1 | 	sub	objptr, #12
05658     FD 78 02 F1 | 	add	local07, objptr
0565c     3C 61 C2 FA | 	rdbyte	arg02, local07
05660     D3 FA 85 F1 | 	sub	objptr, #211
05664     C8 EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05668     0C 7B 02 F6 | 	mov	local08, result1
0566c     3D 7D 02 F6 | 	mov	local09, local08
05670     24 7A 5E F2 | 	cmps	local08, #36 wcz
05674     C4 02 90 3D |  if_ae	jmp	#LR__0224
05678                 | '         if arpCounter == 1 and x > 0
05678     01 74 0E F2 | 	cmp	local05, #1 wz
0567c     80 00 90 5D |  if_ne	jmp	#LR__0211
05680     B7 FB 05 F1 | 	add	objptr, #439
05684     FD 7E C2 FA | 	rdbyte	local10, objptr
05688     B7 FB 85 F1 | 	sub	objptr, #439
0568c     00 7E 5E F2 | 	cmps	local10, #0 wcz
05690     6C 00 90 ED |  if_be	jmp	#LR__0211
05694                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
05694     3E 5F 02 F6 | 	mov	arg01, local09
05698     B7 FB 05 F1 | 	add	objptr, #439
0569c     FD 80 C2 FA | 	rdbyte	local11, objptr
056a0     40 5F 02 F1 | 	add	arg01, local11
056a4                 | ' 
056a4                 | '   return word[@periodTable][noteNumber]
056a4     06 00 00 FF 
056a8     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
056ac     01 5E 66 F0 | 	shl	arg01, #1
056b0     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
056b4     2F 19 E2 FA | 	rdword	result1, arg01
056b8     06 00 00 FF 
056bc     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
056c0     0C 77 02 F6 | 	mov	local06, result1
056c4     36 79 02 F6 | 	mov	local07, local01
056c8     02 78 66 F0 | 	shl	local07, #2
056cc     D8 FA 85 F1 | 	sub	objptr, #216
056d0     FD 80 02 F6 | 	mov	local11, objptr
056d4     FD 78 02 F1 | 	add	local07, objptr
056d8     3B 7F 02 F6 | 	mov	local10, local06
056dc     3C 83 02 FB | 	rdlong	local12, local07
056e0     41 7F 82 F1 | 	sub	local10, local12
056e4     36 85 02 F6 | 	mov	local13, local01
056e8     02 84 66 F0 | 	shl	local13, #2
056ec     10 FA 05 F1 | 	add	objptr, #16
056f0     FD 86 02 F6 | 	mov	local14, objptr
056f4     FD 84 02 F1 | 	add	local13, objptr
056f8     42 7F 62 FC | 	wrlong	local10, local13
056fc     EF FA 85 F1 | 	sub	objptr, #239
05700                 | LR__0211
05700                 | '         if arpCounter == 2 and y > 0
05700     02 74 0E F2 | 	cmp	local05, #2 wz
05704     80 00 90 5D |  if_ne	jmp	#LR__0212
05708     B8 FB 05 F1 | 	add	objptr, #440
0570c     FD 7E C2 FA | 	rdbyte	local10, objptr
05710     B8 FB 85 F1 | 	sub	objptr, #440
05714     00 7E 5E F2 | 	cmps	local10, #0 wcz
05718     6C 00 90 ED |  if_be	jmp	#LR__0212
0571c                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
0571c     3E 5F 02 F6 | 	mov	arg01, local09
05720     B8 FB 05 F1 | 	add	objptr, #440
05724     FD 80 C2 FA | 	rdbyte	local11, objptr
05728     40 5F 02 F1 | 	add	arg01, local11
0572c                 | ' 
0572c                 | '   return word[@periodTable][noteNumber]
0572c     06 00 00 FF 
05730     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05734     01 5E 66 F0 | 	shl	arg01, #1
05738     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0573c     2F 19 E2 FA | 	rdword	result1, arg01
05740     06 00 00 FF 
05744     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05748     0C 77 02 F6 | 	mov	local06, result1
0574c     36 79 02 F6 | 	mov	local07, local01
05750     02 78 66 F0 | 	shl	local07, #2
05754     D9 FA 85 F1 | 	sub	objptr, #217
05758     FD 80 02 F6 | 	mov	local11, objptr
0575c     FD 78 02 F1 | 	add	local07, objptr
05760     3B 7F 02 F6 | 	mov	local10, local06
05764     3C 83 02 FB | 	rdlong	local12, local07
05768     41 7F 82 F1 | 	sub	local10, local12
0576c     36 85 02 F6 | 	mov	local13, local01
05770     02 84 66 F0 | 	shl	local13, #2
05774     10 FA 05 F1 | 	add	objptr, #16
05778     FD 86 02 F6 | 	mov	local14, objptr
0577c     FD 84 02 F1 | 	add	local13, objptr
05780     42 7F 62 FC | 	wrlong	local10, local13
05784     EF FA 85 F1 | 	sub	objptr, #239
05788                 | LR__0212
05788                 | '         if arpCounter == 0 and (x + y) > 0
05788     00 74 0E F2 | 	cmp	local05, #0 wz
0578c     AC 01 90 5D |  if_ne	jmp	#LR__0224
05790     B7 FB 05 F1 | 	add	objptr, #439
05794     FD 7E C2 FA | 	rdbyte	local10, objptr
05798     01 FA 05 F1 | 	add	objptr, #1
0579c     FD 80 C2 FA | 	rdbyte	local11, objptr
057a0     B8 FB 85 F1 | 	sub	objptr, #440
057a4     40 7F 02 F1 | 	add	local10, local11
057a8     00 7E 5E F2 | 	cmps	local10, #0 wcz
057ac     8C 01 90 ED |  if_be	jmp	#LR__0224
057b0                 | '           deltaPeriod[channel] := 0
057b0     02 6C 66 F0 | 	shl	local01, #2
057b4     EF FA 05 F1 | 	add	objptr, #239
057b8     FD 6C 02 F1 | 	add	local01, objptr
057bc     36 01 68 FC | 	wrlong	#0, local01
057c0     EF FA 85 F1 | 	sub	objptr, #239
057c4     74 01 90 FD | 	jmp	#LR__0224
057c8                 | LR__0213
057c8                 | ' 
057c8                 | '     $4:                                 ' Vibrato
057c8                 | '       if x > 0
057c8     B7 FB 05 F1 | 	add	objptr, #439
057cc     FD 7E C2 FA | 	rdbyte	local10, objptr
057d0     B7 FB 85 F1 | 	sub	objptr, #439
057d4     00 7E 5E F2 | 	cmps	local10, #0 wcz
057d8     1C 00 90 ED |  if_be	jmp	#LR__0214
057dc                 | '         cmd4_memoryX[channel] := x
057dc     36 7F 02 F6 | 	mov	local10, local01
057e0     D0 FB 05 F1 | 	add	objptr, #464
057e4     FD 7E 02 F1 | 	add	local10, objptr
057e8     19 FA 85 F1 | 	sub	objptr, #25
057ec     FD 78 C2 FA | 	rdbyte	local07, objptr
057f0     B7 FB 85 F1 | 	sub	objptr, #439
057f4     3F 79 42 FC | 	wrbyte	local07, local10
057f8                 | LR__0214
057f8                 | '       if y > 0
057f8     B8 FB 05 F1 | 	add	objptr, #440
057fc     FD 7E C2 FA | 	rdbyte	local10, objptr
05800     B8 FB 85 F1 | 	sub	objptr, #440
05804     00 7E 5E F2 | 	cmps	local10, #0 wcz
05808     1C 00 90 ED |  if_be	jmp	#LR__0215
0580c                 | '         cmd4_memoryY[channel] := y
0580c     36 7F 02 F6 | 	mov	local10, local01
05810     CC FB 05 F1 | 	add	objptr, #460
05814     FD 7E 02 F1 | 	add	local10, objptr
05818     14 FA 85 F1 | 	sub	objptr, #20
0581c     FD 78 C2 FA | 	rdbyte	local07, objptr
05820     B8 FB 85 F1 | 	sub	objptr, #440
05824     3F 79 42 FC | 	wrbyte	local07, local10
05828                 | LR__0215
05828                 | ' 
05828                 | '       doVibrato(channel)
05828     36 5F 02 F6 | 	mov	arg01, local01
0582c     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05830     08 01 90 FD | 	jmp	#LR__0224
05834                 | LR__0216
05834                 | ' 
05834                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05834     36 5F 02 F6 | 	mov	arg01, local01
05838     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0583c     FC 00 90 FD | 	jmp	#LR__0224
05840                 | LR__0217
05840                 | ' 
05840                 | '     $E:
05840                 | '       if x == $C                        ' Cut note after Y ticks
05840     B7 FB 05 F1 | 	add	objptr, #439
05844     FD 7E C2 FA | 	rdbyte	local10, objptr
05848     B7 FB 85 F1 | 	sub	objptr, #439
0584c     0C 7E 0E F2 | 	cmp	local10, #12 wz
05850     34 00 90 5D |  if_ne	jmp	#LR__0218
05854                 | '         if tickcounter == y
05854     A1 FA 05 F1 | 	add	objptr, #161
05858     FD 7E C2 FA | 	rdbyte	local10, objptr
0585c     17 FB 05 F1 | 	add	objptr, #279
05860     FD 78 C2 FA | 	rdbyte	local07, objptr
05864     B8 FB 85 F1 | 	sub	objptr, #440
05868     3C 7F 0A F2 | 	cmp	local10, local07 wz
0586c     CC 00 90 5D |  if_ne	jmp	#LR__0223
05870                 | '           currVolume[channel] := 0
05870     02 6C 66 F0 | 	shl	local01, #2
05874     FF FA 05 F1 | 	add	objptr, #255
05878     FD 6C 02 F1 | 	add	local01, objptr
0587c     36 01 68 FC | 	wrlong	#0, local01
05880     FF FA 85 F1 | 	sub	objptr, #255
05884     B4 00 90 FD | 	jmp	#LR__0223
05888                 | LR__0218
05888                 | ' 
05888                 | '       elseif x == $D                    ' Delay note Y ticks
05888     B7 FB 05 F1 | 	add	objptr, #439
0588c     FD 7E C2 FA | 	rdbyte	local10, objptr
05890     B7 FB 85 F1 | 	sub	objptr, #439
05894     0D 7E 0E F2 | 	cmp	local10, #13 wz
05898     A0 00 90 5D |  if_ne	jmp	#LR__0222
0589c                 | '         if tickcounter == y
0589c     A1 FA 05 F1 | 	add	objptr, #161
058a0     FD 7E C2 FA | 	rdbyte	local10, objptr
058a4     17 FB 05 F1 | 	add	objptr, #279
058a8     FD 78 C2 FA | 	rdbyte	local07, objptr
058ac     B8 FB 85 F1 | 	sub	objptr, #440
058b0     3C 7F 0A F2 | 	cmp	local10, local07 wz
058b4     0C 00 90 5D |  if_ne	jmp	#LR__0219
058b8                 | '           triggerNote(channel)
058b8     36 5F 02 F6 | 	mov	arg01, local01
058bc     F8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
058c0     78 00 90 FD | 	jmp	#LR__0221
058c4                 | LR__0219
058c4                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
058c4                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
058c4     B8 FB 05 F1 | 	add	objptr, #440
058c8     FD 7E C2 FA | 	rdbyte	local10, objptr
058cc     14 FB 85 F1 | 	sub	objptr, #276
058d0     FD 78 C2 FA | 	rdbyte	local07, objptr
058d4     A4 FA 85 F1 | 	sub	objptr, #164
058d8     3C 7F 5A F2 | 	cmps	local10, local07 wcz
058dc     5C 00 90 CD |  if_b	jmp	#LR__0220
058e0     A4 FA 05 F1 | 	add	objptr, #164
058e4     FD 84 C2 FA | 	rdbyte	local13, objptr
058e8     42 83 02 F6 | 	mov	local12, local13
058ec     01 82 86 F1 | 	sub	local12, #1
058f0     03 FA 85 F1 | 	sub	objptr, #3
058f4     FD 88 C2 FA | 	rdbyte	local15, objptr
058f8     A1 FA 85 F1 | 	sub	objptr, #161
058fc     44 87 02 F6 | 	mov	local14, local15
05900     41 87 0A F2 | 	cmp	local14, local12 wz
05904     34 00 90 5D |  if_ne	jmp	#LR__0220
05908                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05908     36 7F 02 F6 | 	mov	local10, local01
0590c     02 7E 66 F0 | 	shl	local10, #2
05910     27 FB 05 F1 | 	add	objptr, #295
05914     FD 76 02 F6 | 	mov	local06, objptr
05918     FD 7E 02 F1 | 	add	local10, objptr
0591c     36 79 02 F6 | 	mov	local07, local01
05920     02 78 66 F0 | 	shl	local07, #2
05924     48 FA 85 F1 | 	sub	objptr, #72
05928     FD 80 02 F6 | 	mov	local11, objptr
0592c     3F 83 02 FB | 	rdlong	local12, local10
05930     40 79 02 F1 | 	add	local07, local11
05934     3C 83 62 FC | 	wrlong	local12, local07
05938     DF FA 85 F1 | 	sub	objptr, #223
0593c                 | LR__0220
0593c                 | LR__0221
0593c                 | LR__0222
0593c                 | LR__0223
0593c                 | LR__0224
0593c     AF F0 03 F6 | 	mov	ptra, fp
05940     BA 00 A0 FD | 	call	#popregs_
05944                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05944     2D 00 64 FD | 	ret
05948                 | 
05948                 | ' 
05948                 | ' 
05948                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05948                 | _trackerplayer_spin2_doTremolo
05948     2F 1F 02 F6 | 	mov	_var01, arg01
0594c                 | ' 
0594c                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
0594c     05 00 00 FF 
05950     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05954     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05958     0F 23 02 F6 | 	mov	_var03, _var01
0595c     8B FB 05 F1 | 	add	objptr, #395
05960     FD 22 02 F1 | 	add	_var03, objptr
05964     11 25 C2 FA | 	rdbyte	_var04, _var03
05968     02 24 66 F0 | 	shl	_var04, #2
0596c     10 25 02 F1 | 	add	_var04, _var02
05970     12 27 02 FB | 	rdlong	_var05, _var04
05974                 | '   depth    := cmd7_memoryY[channel]
05974     0F 29 02 F6 | 	mov	_var06, _var01
05978     49 FA 05 F1 | 	add	objptr, #73
0597c     FD 28 02 F1 | 	add	_var06, objptr
05980     14 2B C2 FA | 	rdbyte	_var07, _var06
05984                 | '   speed    := cmd7_memoryX[channel]
05984     0F 29 02 F6 | 	mov	_var06, _var01
05988     04 FA 05 F1 | 	add	objptr, #4
0598c     FD 28 02 F1 | 	add	_var06, objptr
05990     14 2D C2 FA | 	rdbyte	_var08, _var06
05994                 | ' 
05994                 | '   CASE_FAST vibratoType[channel]
05994     0F 23 02 F6 | 	mov	_var03, _var01
05998     18 FA 85 F1 | 	sub	objptr, #24
0599c     FD 2E 02 F6 | 	mov	_var09, objptr
059a0     FD 22 02 F1 | 	add	_var03, objptr
059a4     11 29 C2 FA | 	rdbyte	_var06, _var03
059a8     03 28 26 F3 | 	fle	_var06, #3
059ac     14 31 02 F6 | 	mov	_var10, _var06
059b0     05 00 00 FF 
059b4     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
059b8     C0 FB 85 F1 | 	sub	objptr, #448
059bc     30 30 62 FD | 	jmprel	_var10
059c0                 | LR__0225
059c0     0C 00 90 FD | 	jmp	#LR__0226
059c4     30 00 90 FD | 	jmp	#LR__0227
059c8     6C 00 90 FD | 	jmp	#LR__0228
059cc     B4 00 90 FD | 	jmp	#LR__0229
059d0                 | LR__0226
059d0                 | ' 
059d0                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
059d0     13 2B 02 FD | 	qmul	_var07, _var05
059d4     18 24 62 FD | 	getqx	_var04
059d8     06 24 C6 F0 | 	sar	_var04, #6
059dc     0F 33 02 F6 | 	mov	_var11, _var01
059e0     02 32 66 F0 | 	shl	_var11, #2
059e4     0F FB 05 F1 | 	add	objptr, #271
059e8     FD 32 02 F1 | 	add	_var11, objptr
059ec     19 25 62 FC | 	wrlong	_var04, _var11
059f0     0F FB 85 F1 | 	sub	objptr, #271
059f4     8C 00 90 FD | 	jmp	#LR__0229
059f8                 | LR__0227
059f8                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
059f8     0F 33 02 F6 | 	mov	_var11, _var01
059fc     8B FB 05 F1 | 	add	objptr, #395
05a00     FD 32 02 F1 | 	add	_var11, objptr
05a04     19 21 C2 FA | 	rdbyte	_var02, _var11
05a08     03 20 66 F0 | 	shl	_var02, #3
05a0c     10 2B 02 FD | 	qmul	_var07, _var02
05a10     18 24 62 FD | 	getqx	_var04
05a14     00 25 86 F1 | 	sub	_var04, #256
05a18     06 24 C6 F0 | 	sar	_var04, #6
05a1c     0F 35 02 F6 | 	mov	_var12, _var01
05a20     02 34 66 F0 | 	shl	_var12, #2
05a24     7C FA 85 F1 | 	sub	objptr, #124
05a28     FD 34 02 F1 | 	add	_var12, objptr
05a2c     1A 25 62 FC | 	wrlong	_var04, _var12
05a30     0F FB 85 F1 | 	sub	objptr, #271
05a34     4C 00 90 FD | 	jmp	#LR__0229
05a38                 | LR__0228
05a38                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05a38     0F 33 02 F6 | 	mov	_var11, _var01
05a3c     8B FB 05 F1 | 	add	objptr, #395
05a40     FD 36 02 F6 | 	mov	_var13, objptr
05a44     FD 32 02 F1 | 	add	_var11, objptr
05a48     19 21 C2 FA | 	rdbyte	_var02, _var11
05a4c     20 20 06 F5 | 	and	_var02, #32
05a50     04 20 66 F0 | 	shl	_var02, #4
05a54     10 2B 02 FD | 	qmul	_var07, _var02
05a58     18 38 62 FD | 	getqx	_var14
05a5c     1C 25 02 F6 | 	mov	_var04, _var14
05a60     00 25 86 F1 | 	sub	_var04, #256
05a64     06 24 C6 F0 | 	sar	_var04, #6
05a68     0F 35 02 F6 | 	mov	_var12, _var01
05a6c     02 34 66 F0 | 	shl	_var12, #2
05a70     7C FA 85 F1 | 	sub	objptr, #124
05a74     FD 3A 02 F6 | 	mov	_var15, objptr
05a78     FD 34 02 F1 | 	add	_var12, objptr
05a7c     1A 25 62 FC | 	wrlong	_var04, _var12
05a80     0F FB 85 F1 | 	sub	objptr, #271
05a84                 | LR__0229
05a84                 | ' 
05a84                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05a84     0F 23 02 F6 | 	mov	_var03, _var01
05a88     8B FB 05 F1 | 	add	objptr, #395
05a8c     FD 22 02 F1 | 	add	_var03, objptr
05a90     11 29 C2 FA | 	rdbyte	_var06, _var03
05a94     16 29 02 F1 | 	add	_var06, _var08
05a98     3F 28 06 F5 | 	and	_var06, #63
05a9c     FD 1E 02 F1 | 	add	_var01, objptr
05aa0     0F 29 42 FC | 	wrbyte	_var06, _var01
05aa4     8B FB 85 F1 | 	sub	objptr, #395
05aa8                 | _trackerplayer_spin2_doTremolo_ret
05aa8     2D 00 64 FD | 	ret
05aac                 | 
05aac                 | ' 
05aac                 | ' 
05aac                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05aac                 | _trackerplayer_spin2_doVibrato
05aac     2F 1F 02 F6 | 	mov	_var01, arg01
05ab0                 | ' 
05ab0                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05ab0     05 00 00 FF 
05ab4     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05ab8     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05abc     0F 23 02 F6 | 	mov	_var03, _var01
05ac0     87 FB 05 F1 | 	add	objptr, #391
05ac4     FD 22 02 F1 | 	add	_var03, objptr
05ac8     11 25 C2 FA | 	rdbyte	_var04, _var03
05acc     02 24 66 F0 | 	shl	_var04, #2
05ad0     10 25 02 F1 | 	add	_var04, _var02
05ad4     12 27 02 FB | 	rdlong	_var05, _var04
05ad8                 | '   depth    := cmd4_memoryY[channel]
05ad8     0F 29 02 F6 | 	mov	_var06, _var01
05adc     45 FA 05 F1 | 	add	objptr, #69
05ae0     FD 28 02 F1 | 	add	_var06, objptr
05ae4     14 2B C2 FA | 	rdbyte	_var07, _var06
05ae8                 | '   speed    := cmd4_memoryX[channel]
05ae8     0F 29 02 F6 | 	mov	_var06, _var01
05aec     04 FA 05 F1 | 	add	objptr, #4
05af0     FD 28 02 F1 | 	add	_var06, objptr
05af4     14 2D C2 FA | 	rdbyte	_var08, _var06
05af8                 | ' 
05af8                 | '   CASE_FAST vibratoType[channel]
05af8     0F 23 02 F6 | 	mov	_var03, _var01
05afc     10 FA 85 F1 | 	sub	objptr, #16
05b00     FD 2E 02 F6 | 	mov	_var09, objptr
05b04     FD 22 02 F1 | 	add	_var03, objptr
05b08     11 29 C2 FA | 	rdbyte	_var06, _var03
05b0c     03 28 26 F3 | 	fle	_var06, #3
05b10     14 31 02 F6 | 	mov	_var10, _var06
05b14     05 00 00 FF 
05b18     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05b1c     C0 FB 85 F1 | 	sub	objptr, #448
05b20     30 30 62 FD | 	jmprel	_var10
05b24                 | LR__0230
05b24     0C 00 90 FD | 	jmp	#LR__0231
05b28     30 00 90 FD | 	jmp	#LR__0232
05b2c     6C 00 90 FD | 	jmp	#LR__0233
05b30     B4 00 90 FD | 	jmp	#LR__0234
05b34                 | LR__0231
05b34                 | ' 
05b34                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05b34     13 2B 02 FD | 	qmul	_var07, _var05
05b38     18 24 62 FD | 	getqx	_var04
05b3c     07 24 C6 F0 | 	sar	_var04, #7
05b40     0F 33 02 F6 | 	mov	_var11, _var01
05b44     02 32 66 F0 | 	shl	_var11, #2
05b48     EF FA 05 F1 | 	add	objptr, #239
05b4c     FD 32 02 F1 | 	add	_var11, objptr
05b50     19 25 62 FC | 	wrlong	_var04, _var11
05b54     EF FA 85 F1 | 	sub	objptr, #239
05b58     8C 00 90 FD | 	jmp	#LR__0234
05b5c                 | LR__0232
05b5c                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05b5c     0F 33 02 F6 | 	mov	_var11, _var01
05b60     87 FB 05 F1 | 	add	objptr, #391
05b64     FD 32 02 F1 | 	add	_var11, objptr
05b68     19 21 C2 FA | 	rdbyte	_var02, _var11
05b6c     03 20 66 F0 | 	shl	_var02, #3
05b70     10 2B 02 FD | 	qmul	_var07, _var02
05b74     18 24 62 FD | 	getqx	_var04
05b78     00 25 86 F1 | 	sub	_var04, #256
05b7c     07 24 C6 F0 | 	sar	_var04, #7
05b80     0F 35 02 F6 | 	mov	_var12, _var01
05b84     02 34 66 F0 | 	shl	_var12, #2
05b88     98 FA 85 F1 | 	sub	objptr, #152
05b8c     FD 34 02 F1 | 	add	_var12, objptr
05b90     1A 25 62 FC | 	wrlong	_var04, _var12
05b94     EF FA 85 F1 | 	sub	objptr, #239
05b98     4C 00 90 FD | 	jmp	#LR__0234
05b9c                 | LR__0233
05b9c                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05b9c     0F 33 02 F6 | 	mov	_var11, _var01
05ba0     87 FB 05 F1 | 	add	objptr, #391
05ba4     FD 36 02 F6 | 	mov	_var13, objptr
05ba8     FD 32 02 F1 | 	add	_var11, objptr
05bac     19 21 C2 FA | 	rdbyte	_var02, _var11
05bb0     20 20 06 F5 | 	and	_var02, #32
05bb4     04 20 66 F0 | 	shl	_var02, #4
05bb8     10 2B 02 FD | 	qmul	_var07, _var02
05bbc     18 38 62 FD | 	getqx	_var14
05bc0     1C 25 02 F6 | 	mov	_var04, _var14
05bc4     00 25 86 F1 | 	sub	_var04, #256
05bc8     07 24 C6 F0 | 	sar	_var04, #7
05bcc     0F 35 02 F6 | 	mov	_var12, _var01
05bd0     02 34 66 F0 | 	shl	_var12, #2
05bd4     98 FA 85 F1 | 	sub	objptr, #152
05bd8     FD 3A 02 F6 | 	mov	_var15, objptr
05bdc     FD 34 02 F1 | 	add	_var12, objptr
05be0     1A 25 62 FC | 	wrlong	_var04, _var12
05be4     EF FA 85 F1 | 	sub	objptr, #239
05be8                 | LR__0234
05be8                 | ' 
05be8                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05be8     0F 23 02 F6 | 	mov	_var03, _var01
05bec     87 FB 05 F1 | 	add	objptr, #391
05bf0     FD 22 02 F1 | 	add	_var03, objptr
05bf4     11 29 C2 FA | 	rdbyte	_var06, _var03
05bf8     16 29 02 F1 | 	add	_var06, _var08
05bfc     3F 28 06 F5 | 	and	_var06, #63
05c00     FD 1E 02 F1 | 	add	_var01, objptr
05c04     0F 29 42 FC | 	wrbyte	_var06, _var01
05c08     87 FB 85 F1 | 	sub	objptr, #391
05c0c                 | _trackerplayer_spin2_doVibrato_ret
05c0c     2D 00 64 FD | 	ret
05c10                 | 
05c10                 | ' 
05c10                 | ' 
05c10                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05c10                 | _trackerplayer_spin2_doPortamento
05c10                 | ' 
05c10                 | '   if period == currPeriod[channel]
05c10     2F 1F 02 F6 | 	mov	_var01, arg01
05c14     02 1E 66 F0 | 	shl	_var01, #2
05c18     DF FA 05 F1 | 	add	objptr, #223
05c1c     FD 20 02 F6 | 	mov	_var02, objptr
05c20     FD 1E 02 F1 | 	add	_var01, objptr
05c24     0F 23 02 FB | 	rdlong	_var03, _var01
05c28     11 61 0A F2 | 	cmp	arg02, _var03 wz
05c2c                 | '     return
05c2c     DF FA 85 F1 | 	sub	objptr, #223
05c30     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05c34                 | ' 
05c34                 | '   if period > 0
05c34     00 60 5E F2 | 	cmps	arg02, #0 wcz
05c38     1C 00 90 ED |  if_be	jmp	#LR__0235
05c3c                 | '     portamentoPeriodMemory[channel] := period
05c3c     2F 1F 02 F6 | 	mov	_var01, arg01
05c40     02 1E 66 F0 | 	shl	_var01, #2
05c44     97 FB 05 F1 | 	add	objptr, #407
05c48     FD 1E 02 F1 | 	add	_var01, objptr
05c4c     0F 61 62 FC | 	wrlong	arg02, _var01
05c50                 | '   else
05c50     97 FB 85 F1 | 	sub	objptr, #407
05c54     18 00 90 FD | 	jmp	#LR__0236
05c58                 | LR__0235
05c58                 | '     period := portamentoPeriodMemory[channel]
05c58     2F 1F 02 F6 | 	mov	_var01, arg01
05c5c     02 1E 66 F0 | 	shl	_var01, #2
05c60     97 FB 05 F1 | 	add	objptr, #407
05c64     FD 1E 02 F1 | 	add	_var01, objptr
05c68     0F 61 02 FB | 	rdlong	arg02, _var01
05c6c     97 FB 85 F1 | 	sub	objptr, #407
05c70                 | LR__0236
05c70                 | ' 
05c70                 | '   if period > currPeriod[channel]
05c70     2F 1F 02 F6 | 	mov	_var01, arg01
05c74     02 1E 66 F0 | 	shl	_var01, #2
05c78     DF FA 05 F1 | 	add	objptr, #223
05c7c     FD 1E 02 F1 | 	add	_var01, objptr
05c80     0F 23 02 FB | 	rdlong	_var03, _var01
05c84     11 61 5A F2 | 	cmps	arg02, _var03 wcz
05c88     DF FA 85 F1 | 	sub	objptr, #223
05c8c     68 00 90 ED |  if_be	jmp	#LR__0237
05c90                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05c90     2F 21 02 F6 | 	mov	_var02, arg01
05c94     02 20 66 F0 | 	shl	_var02, #2
05c98     DF FA 05 F1 | 	add	objptr, #223
05c9c     FD 20 02 F1 | 	add	_var02, objptr
05ca0     2F 25 02 F6 | 	mov	_var04, arg01
05ca4     E9 FA 05 F1 | 	add	objptr, #233
05ca8     10 1F 02 FB | 	rdlong	_var01, _var02
05cac     FD 24 02 F1 | 	add	_var04, objptr
05cb0     12 27 C2 FA | 	rdbyte	_var05, _var04
05cb4     13 1F 02 F1 | 	add	_var01, _var05
05cb8     2F 29 02 F6 | 	mov	_var06, arg01
05cbc     02 28 66 F0 | 	shl	_var06, #2
05cc0     E9 FA 85 F1 | 	sub	objptr, #233
05cc4     FD 28 02 F1 | 	add	_var06, objptr
05cc8     14 1F 62 FC | 	wrlong	_var01, _var06
05ccc                 | '     currPeriod[channel] <#= period
05ccc     2F 21 02 F6 | 	mov	_var02, arg01
05cd0     02 20 66 F0 | 	shl	_var02, #2
05cd4     FD 20 02 F1 | 	add	_var02, objptr
05cd8     10 1F 02 FB | 	rdlong	_var01, _var02
05cdc     30 1F 62 F3 | 	fles	_var01, arg02
05ce0     2F 25 02 F6 | 	mov	_var04, arg01
05ce4     02 24 66 F0 | 	shl	_var04, #2
05ce8     FD 24 02 F1 | 	add	_var04, objptr
05cec     12 1F 62 FC | 	wrlong	_var01, _var04
05cf0     DF FA 85 F1 | 	sub	objptr, #223
05cf4     84 00 90 FD | 	jmp	#LR__0239
05cf8                 | LR__0237
05cf8                 | ' 
05cf8                 | '   elseif period < currPeriod[channel]
05cf8     2F 1F 02 F6 | 	mov	_var01, arg01
05cfc     02 1E 66 F0 | 	shl	_var01, #2
05d00     DF FA 05 F1 | 	add	objptr, #223
05d04     FD 1E 02 F1 | 	add	_var01, objptr
05d08     0F 23 02 FB | 	rdlong	_var03, _var01
05d0c     11 61 5A F2 | 	cmps	arg02, _var03 wcz
05d10     DF FA 85 F1 | 	sub	objptr, #223
05d14     64 00 90 3D |  if_ae	jmp	#LR__0238
05d18                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05d18     2F 21 02 F6 | 	mov	_var02, arg01
05d1c     02 20 66 F0 | 	shl	_var02, #2
05d20     DF FA 05 F1 | 	add	objptr, #223
05d24     FD 20 02 F1 | 	add	_var02, objptr
05d28     2F 25 02 F6 | 	mov	_var04, arg01
05d2c     E9 FA 05 F1 | 	add	objptr, #233
05d30     10 1F 02 FB | 	rdlong	_var01, _var02
05d34     FD 24 02 F1 | 	add	_var04, objptr
05d38     12 27 C2 FA | 	rdbyte	_var05, _var04
05d3c     13 1F 82 F1 | 	sub	_var01, _var05
05d40     2F 29 02 F6 | 	mov	_var06, arg01
05d44     02 28 66 F0 | 	shl	_var06, #2
05d48     E9 FA 85 F1 | 	sub	objptr, #233
05d4c     FD 28 02 F1 | 	add	_var06, objptr
05d50     14 1F 62 FC | 	wrlong	_var01, _var06
05d54                 | '     currPeriod[channel] #>= period
05d54     2F 21 02 F6 | 	mov	_var02, arg01
05d58     02 20 66 F0 | 	shl	_var02, #2
05d5c     FD 20 02 F1 | 	add	_var02, objptr
05d60     10 1F 02 FB | 	rdlong	_var01, _var02
05d64     30 1F 42 F3 | 	fges	_var01, arg02
05d68     2F 25 02 F6 | 	mov	_var04, arg01
05d6c     02 24 66 F0 | 	shl	_var04, #2
05d70     FD 24 02 F1 | 	add	_var04, objptr
05d74     12 1F 62 FC | 	wrlong	_var01, _var04
05d78     DF FA 85 F1 | 	sub	objptr, #223
05d7c                 | LR__0238
05d7c                 | LR__0239
05d7c                 | ' 
05d7c                 | '   ' Handle glissando if activated
05d7c                 | '   if portaGlissando[channel] > 0
05d7c     2F 1F 02 F6 | 	mov	_var01, arg01
05d80     BC FB 05 F1 | 	add	objptr, #444
05d84     FD 1E 02 F1 | 	add	_var01, objptr
05d88     0F 23 C2 FA | 	rdbyte	_var03, _var01
05d8c     00 22 5E F2 | 	cmps	_var03, #0 wcz
05d90     BC FB 85 F1 | 	sub	objptr, #444
05d94     A0 00 90 ED |  if_be	jmp	#LR__0242
05d98                 | ' 
05d98                 | '     tempPeriod := currPeriod[channel]
05d98     2F 1F 02 F6 | 	mov	_var01, arg01
05d9c     02 1E 66 F0 | 	shl	_var01, #2
05da0     DF FA 05 F1 | 	add	objptr, #223
05da4     FD 1E 02 F1 | 	add	_var01, objptr
05da8     0F 2B 02 FB | 	rdlong	_var07, _var01
05dac                 | ' 
05dac                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05dac     00 2C 06 F6 | 	mov	_var08, #0
05db0     DF FA 85 F1 | 	sub	objptr, #223
05db4     AC A2 9F FE | 	loc	pa,	#(@LR__0241-@LR__0240)
05db8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05dbc                 | LR__0240
05dbc                 | ' 
05dbc                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05dbc     06 00 00 FF 
05dc0     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05dc4     0A 2F 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05dc8     2F 23 02 F6 | 	mov	_var03, arg01
05dcc     D3 FA 05 F1 | 	add	objptr, #211
05dd0     FD 22 02 F1 | 	add	_var03, objptr
05dd4     11 27 C2 FA | 	rdbyte	_var05, _var03
05dd8     13 31 02 F6 | 	mov	_var10, _var05
05ddc     03 30 66 F0 | 	shl	_var10, #3
05de0     13 31 02 F1 | 	add	_var10, _var05
05de4     03 30 66 F0 | 	shl	_var10, #3
05de8     18 2F 02 F1 | 	add	_var09, _var10
05dec     16 33 02 F6 | 	mov	_var11, _var08
05df0     01 32 66 F0 | 	shl	_var11, #1
05df4     17 33 02 F1 | 	add	_var11, _var09
05df8     19 35 E2 FA | 	rdword	_var12, _var11
05dfc                 | '       if tempPeriod >= periodStep
05dfc     1A 2B 5A F2 | 	cmps	_var07, _var12 wcz
05e00                 | '         i += 1000
05e00     06 00 00 FF 
05e04     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05e08     D3 FA 85 F1 | 	sub	objptr, #211
05e0c     01 00 00 3F 
05e10     E8 2D 06 31 |  if_ae	add	_var08, ##1000
05e14     01 2C 06 F1 | 	add	_var08, #1
05e18     24 2C 5E F2 | 	cmps	_var08, #36 wcz
05e1c     9C FF 9F CD |  if_b	jmp	#LR__0240
05e20                 | LR__0241
05e20                 | ' 
05e20                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05e20     15 35 82 F1 | 	sub	_var12, _var07
05e24     02 5E 66 F0 | 	shl	arg01, #2
05e28     EF FA 05 F1 | 	add	objptr, #239
05e2c     FD 5E 02 F1 | 	add	arg01, objptr
05e30     2F 35 62 FC | 	wrlong	_var12, arg01
05e34     EF FA 85 F1 | 	sub	objptr, #239
05e38                 | LR__0242
05e38                 | _trackerplayer_spin2_doPortamento_ret
05e38     2D 00 64 FD | 	ret
05e3c                 | 
05e3c                 | ' 
05e3c                 | ' 
05e3c                 | ' PRI doVolumeSlide(channel)
05e3c                 | _trackerplayer_spin2_doVolumeSlide
05e3c                 | ' 
05e3c                 | '   if x > 0
05e3c     B7 FB 05 F1 | 	add	objptr, #439
05e40     FD 1E C2 FA | 	rdbyte	_var01, objptr
05e44     B7 FB 85 F1 | 	sub	objptr, #439
05e48     00 1E 5E F2 | 	cmps	_var01, #0 wcz
05e4c     38 00 90 ED |  if_be	jmp	#LR__0243
05e50                 | '     currVolume[channel] += x
05e50     2F 21 02 F6 | 	mov	_var02, arg01
05e54     02 20 66 F0 | 	shl	_var02, #2
05e58     FF FA 05 F1 | 	add	objptr, #255
05e5c     FD 20 02 F1 | 	add	_var02, objptr
05e60     10 1F 02 FB | 	rdlong	_var01, _var02
05e64     B8 FA 05 F1 | 	add	objptr, #184
05e68     FD 22 C2 FA | 	rdbyte	_var03, objptr
05e6c     11 1F 02 F1 | 	add	_var01, _var03
05e70     2F 25 02 F6 | 	mov	_var04, arg01
05e74     02 24 66 F0 | 	shl	_var04, #2
05e78     B8 FA 85 F1 | 	sub	objptr, #184
05e7c     FD 24 02 F1 | 	add	_var04, objptr
05e80     12 1F 62 FC | 	wrlong	_var01, _var04
05e84     FF FA 85 F1 | 	sub	objptr, #255
05e88                 | LR__0243
05e88                 | '   if y > 0
05e88     B8 FB 05 F1 | 	add	objptr, #440
05e8c     FD 1E C2 FA | 	rdbyte	_var01, objptr
05e90     B8 FB 85 F1 | 	sub	objptr, #440
05e94     00 1E 5E F2 | 	cmps	_var01, #0 wcz
05e98     34 00 90 ED |  if_be	jmp	#LR__0244
05e9c                 | '     currVolume[channel] -= y
05e9c     2F 21 02 F6 | 	mov	_var02, arg01
05ea0     02 20 66 F0 | 	shl	_var02, #2
05ea4     FF FA 05 F1 | 	add	objptr, #255
05ea8     FD 20 02 F1 | 	add	_var02, objptr
05eac     10 1F 02 FB | 	rdlong	_var01, _var02
05eb0     B9 FA 05 F1 | 	add	objptr, #185
05eb4     FD 22 C2 FA | 	rdbyte	_var03, objptr
05eb8     11 1F 82 F1 | 	sub	_var01, _var03
05ebc     02 5E 66 F0 | 	shl	arg01, #2
05ec0     B9 FA 85 F1 | 	sub	objptr, #185
05ec4     FD 5E 02 F1 | 	add	arg01, objptr
05ec8     2F 1F 62 FC | 	wrlong	_var01, arg01
05ecc     FF FA 85 F1 | 	sub	objptr, #255
05ed0                 | LR__0244
05ed0                 | _trackerplayer_spin2_doVolumeSlide_ret
05ed0     2D 00 64 FD | 	ret
05ed4                 | 
05ed4                 | ' 
05ed4                 | ' 
05ed4                 | ' '--------------------------------------------------------------
05ed4                 | ' '---------- Init the variables, start the cog. ----------------
05ed4                 | ' '--------------------------------------------------------------
05ed4                 | ' 
05ed4                 | ' pub start() :cog,base | iii
05ed4                 | _audio019_spin2_start
05ed4     07 5A 05 F6 | 	mov	COUNT_, #7
05ed8     B0 00 A0 FD | 	call	#pushregs_
05edc                 | ' 
05edc                 | ' base:=@channel1[0]
05edc     FD 6C 02 F6 | 	mov	local01, objptr
05ee0                 | ' 
05ee0                 | ' repeat iii from 0 to 7
05ee0     00 6E 06 F6 | 	mov	local02, #0
05ee4     24 A2 9F FE | 	loc	pa,	#(@LR__0246-@LR__0245)
05ee8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05eec                 | LR__0245
05eec                 | '   long [base+32*iii]:=0
05eec     36 71 02 F6 | 	mov	local03, local01
05ef0     37 73 02 F6 | 	mov	local04, local02
05ef4     05 72 66 F0 | 	shl	local04, #5
05ef8     39 71 02 F1 | 	add	local03, local04
05efc     38 01 68 FC | 	wrlong	#0, local03
05f00                 | '   long [base+32*iii+4]:=0
05f00     36 71 02 F6 | 	mov	local03, local01
05f04     37 73 02 F6 | 	mov	local04, local02
05f08     05 72 66 F0 | 	shl	local04, #5
05f0c     39 71 02 F1 | 	add	local03, local04
05f10     04 70 06 F1 | 	add	local03, #4
05f14     38 01 68 FC | 	wrlong	#0, local03
05f18                 | '   long[base+32*iii+12]:=0
05f18     36 71 02 F6 | 	mov	local03, local01
05f1c     37 73 02 F6 | 	mov	local04, local02
05f20     05 72 66 F0 | 	shl	local04, #5
05f24     39 71 02 F1 | 	add	local03, local04
05f28     0C 70 06 F1 | 	add	local03, #12
05f2c     38 01 68 FC | 	wrlong	#0, local03
05f30                 | '   long[base+32*iii+16]:=2 
05f30     36 71 02 F6 | 	mov	local03, local01
05f34     37 73 02 F6 | 	mov	local04, local02
05f38     05 72 66 F0 | 	shl	local04, #5
05f3c     39 71 02 F1 | 	add	local03, local04
05f40     10 70 06 F1 | 	add	local03, #16
05f44     38 05 68 FC | 	wrlong	#2, local03
05f48                 | '   word[base+32*iii+20]:=0
05f48     36 71 02 F6 | 	mov	local03, local01
05f4c     37 73 02 F6 | 	mov	local04, local02
05f50     05 72 66 F0 | 	shl	local04, #5
05f54     39 71 02 F1 | 	add	local03, local04
05f58     14 70 06 F1 | 	add	local03, #20
05f5c     38 01 58 FC | 	wrword	#0, local03
05f60                 | '   word[base+32*iii+22]:=8192
05f60     36 71 02 F6 | 	mov	local03, local01
05f64     37 73 02 F6 | 	mov	local04, local02
05f68     05 72 66 F0 | 	shl	local04, #5
05f6c     39 71 02 F1 | 	add	local03, local04
05f70     16 70 06 F1 | 	add	local03, #22
05f74     10 00 80 FF 
05f78     38 01 58 FC | 	wrword	##8192, local03
05f7c                 | '   word[base+32*iii+24]:=100+2*iii
05f7c     37 73 02 F6 | 	mov	local04, local02
05f80     01 72 66 F0 | 	shl	local04, #1
05f84     64 70 06 F6 | 	mov	local03, #100
05f88     39 71 02 F1 | 	add	local03, local04
05f8c     36 75 02 F6 | 	mov	local05, local01
05f90     37 77 02 F6 | 	mov	local06, local02
05f94     05 76 66 F0 | 	shl	local06, #5
05f98     3B 75 02 F1 | 	add	local05, local06
05f9c     18 74 06 F1 | 	add	local05, #24
05fa0     3A 71 52 FC | 	wrword	local03, local05
05fa4                 | '   word[base+32*iii+26]:=2
05fa4     36 71 02 F6 | 	mov	local03, local01
05fa8     37 73 02 F6 | 	mov	local04, local02
05fac     05 72 66 F0 | 	shl	local04, #5
05fb0     39 71 02 F1 | 	add	local03, local04
05fb4     1A 70 06 F1 | 	add	local03, #26
05fb8     38 05 58 FC | 	wrword	#2, local03
05fbc                 | '   long [base+32*iii+8]:=@null | $C0000000
05fbc     01 00 00 FF 
05fc0     F8 02 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
05fc4     01 71 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
05fc8     3E 70 26 F4 | 	bith	local03, #62
05fcc     36 75 02 F6 | 	mov	local05, local01
05fd0     37 77 02 F6 | 	mov	local06, local02
05fd4     05 76 66 F0 | 	shl	local06, #5
05fd8     3B 75 02 F1 | 	add	local05, local06
05fdc     08 74 06 F1 | 	add	local05, #8
05fe0     3A 71 62 FC | 	wrlong	local03, local05
05fe4     01 6E 06 F1 | 	add	local02, #1
05fe8     08 6E 5E F2 | 	cmps	local02, #8 wcz
05fec     01 00 00 FF 
05ff0     F8 02 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
05ff4     F4 FE 9F CD |  if_b	jmp	#LR__0245
05ff8                 | LR__0246
05ff8                 | '   
05ff8                 | ' cog:=coginit(16,@audio,@channel1)
05ff8     01 61 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
05ffc     FD 62 02 F6 | 	mov	arg03, objptr
06000     10 5E 06 F6 | 	mov	arg01, #16
06004     28 62 62 FD | 	setq	arg03
06008     30 5F F2 FC | 	coginit	arg01, arg02 wc
0600c     01 5E 66 C6 |  if_b	neg	arg01, #1
06010     2F 19 02 F6 | 	mov	result1, arg01
06014     0C 79 02 F6 | 	mov	local07, result1
06018                 | ' waitms(100)
06018     64 5E 06 F6 | 	mov	arg01, #100
0601c     CC 04 B0 FD | 	call	#__system___waitms
06020                 | ' return cog,base
06020     36 1B 02 F6 | 	mov	result2, local01
06024     3C 19 02 F6 | 	mov	result1, local07
06028     AF F0 03 F6 | 	mov	ptra, fp
0602c     BA 00 A0 FD | 	call	#popregs_
06030                 | _audio019_spin2_start_ret
06030     2D 00 64 FD | 	ret
06034                 | hubexit
06034     81 00 80 FD | 	jmp	#cogexit
06038                 | 
06038                 | __system___setbaud
06038     14 98 06 FB | 	rdlong	muldiva_, #20
0603c     2F 9B 02 F6 | 	mov	muldivb_, arg01
06040     C6 00 A0 FD | 	call	#divide_
06044     40 7C 64 FD | 	dirl	#62
06048     40 7E 64 FD | 	dirl	#63
0604c     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06050     10 9A 66 F0 | 	shl	muldivb_, #16
06054     07 60 06 F6 | 	mov	arg02, #7
06058     4D 61 02 F1 | 	add	arg02, muldivb_
0605c     3E F8 0C FC | 	wrpin	#124, #62
06060     3E 60 16 FC | 	wxpin	arg02, #62
06064     3F 7C 0C FC | 	wrpin	#62, #63
06068     14 60 06 F1 | 	add	arg02, #20
0606c     3F 60 16 FC | 	wxpin	arg02, #63
06070     41 7C 64 FD | 	dirh	#62
06074     41 7E 64 FD | 	dirh	#63
06078                 | __system___setbaud_ret
06078     2D 00 64 FD | 	ret
0607c                 | 
0607c                 | __system___txraw
0607c     02 5A 05 F6 | 	mov	COUNT_, #2
06080     B0 00 A0 FD | 	call	#pushregs_
06084     2F 6D 02 F6 | 	mov	local01, arg01
06088     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0608c     0C 00 90 5D |  if_ne	jmp	#LR__0247
06090     42 0F 00 FF 
06094     80 5E 06 F6 | 	mov	arg01, ##2000000
06098     9C FF BF FD | 	call	#__system___setbaud
0609c                 | LR__0247
0609c     3E 6C 26 FC | 	wypin	local01, #62
060a0     1F 02 64 FD | 	waitx	#1
060a4     60 9F 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
060a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
060ac                 | LR__0248
060ac     40 7C 74 FD | 	testp	#62 wc
060b0     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
060b4                 | LR__0249
060b4     01 18 06 F6 | 	mov	result1, #1
060b8     AF F0 03 F6 | 	mov	ptra, fp
060bc     BA 00 A0 FD | 	call	#popregs_
060c0                 | __system___txraw_ret
060c0     2D 00 64 FD | 	ret
060c4                 | 
060c4                 | __system___rxraw
060c4     0B 5A 05 F6 | 	mov	COUNT_, #11
060c8     B0 00 A0 FD | 	call	#pushregs_
060cc     2F 6D 02 F6 | 	mov	local01, arg01
060d0     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
060d4     0C 00 90 5D |  if_ne	jmp	#LR__0250
060d8     42 0F 00 FF 
060dc     80 5E 06 F6 | 	mov	arg01, ##2000000
060e0     54 FF BF FD | 	call	#__system___setbaud
060e4                 | LR__0250
060e4     00 6C 0E F2 | 	cmp	local01, #0 wz
060e8     18 00 90 AD |  if_e	jmp	#LR__0251
060ec     1A 70 62 FD | 	getct	local03
060f0     14 72 06 FB | 	rdlong	local04, #20
060f4     0A 72 46 F0 | 	shr	local04, #10
060f8     39 6D 02 FD | 	qmul	local01, local04
060fc     18 74 62 FD | 	getqx	local05
06100     3A 71 02 F1 | 	add	local03, local05
06104                 | LR__0251
06104     01 76 66 F6 | 	neg	local06, #1
06108     00 78 06 F6 | 	mov	local07, #0
0610c     04 00 06 F1 | 	add	ptr___system__dat__, #4
06110     00 7B 02 FB | 	rdlong	local08, ptr___system__dat__
06114     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06118                 | LR__0252
06118     08 7A 16 F4 | 	testb	local08, #8 wc
0611c     09 7A 76 F4 | 	testbn	local08, #9 andc
06120     0A 7A 46 F0 | 	shr	local08, #10
06124     01 78 06 C6 |  if_b	mov	local07, #1
06128     10 00 90 CD |  if_b	jmp	#LR__0253
0612c     40 7E 6C FD | 	testp	#63 wz
06130     01 78 06 A6 |  if_e	mov	local07, #1
06134     3F 7A 8E AA |  if_e	rdpin	local08, #63
06138     04 7A 46 A0 |  if_e	shr	local08, #4
0613c                 | LR__0253
0613c     00 6E 06 F6 | 	mov	local02, #0
06140     00 78 0E F2 | 	cmp	local07, #0 wz
06144     01 6E 66 56 |  if_ne	neg	local02, #1
06148     00 7C 06 F6 | 	mov	local09, #0
0614c     00 72 06 F6 | 	mov	local04, #0
06150     00 6C 0E F2 | 	cmp	local01, #0 wz
06154     01 72 66 56 |  if_ne	neg	local04, #1
06158     00 74 06 F6 | 	mov	local05, #0
0615c     00 7E 06 F6 | 	mov	local10, #0
06160     1A 80 62 FD | 	getct	local11
06164     38 81 82 F1 | 	sub	local11, local03
06168     00 80 5E F2 | 	cmps	local11, #0 wcz
0616c     01 7E 66 C6 |  if_b	neg	local10, #1
06170     00 7E 0E F2 | 	cmp	local10, #0 wz
06174     01 74 66 56 |  if_ne	neg	local05, #1
06178     3A 73 CA F7 | 	test	local04, local05 wz
0617c     01 7C 66 56 |  if_ne	neg	local09, #1
06180     3E 6F 4A F5 | 	or	local02, local09 wz
06184     90 FF 9F AD |  if_e	jmp	#LR__0252
06188     00 78 0E F2 | 	cmp	local07, #0 wz
0618c     3D 77 02 56 |  if_ne	mov	local06, local08
06190     FF 76 06 55 |  if_ne	and	local06, #255
06194     04 00 06 F1 | 	add	ptr___system__dat__, #4
06198     00 7B 62 FC | 	wrlong	local08, ptr___system__dat__
0619c     04 00 86 F1 | 	sub	ptr___system__dat__, #4
061a0     3B 19 02 F6 | 	mov	result1, local06
061a4     AF F0 03 F6 | 	mov	ptra, fp
061a8     BA 00 A0 FD | 	call	#popregs_
061ac                 | __system___rxraw_ret
061ac     2D 00 64 FD | 	ret
061b0                 | 
061b0                 | __system____builtin_memmove
061b0     2F 1F 02 F6 | 	mov	_var01, arg01
061b4     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
061b8     50 00 90 3D |  if_ae	jmp	#LR__0261
061bc     60 9E 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
061c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
061c4                 | LR__0254
061c4     03 62 5E F2 | 	cmps	arg03, #3 wcz
061c8     18 00 90 ED |  if_be	jmp	#LR__0256
061cc     30 21 02 FB | 	rdlong	_var02, arg02
061d0     2F 21 62 FC | 	wrlong	_var02, arg01
061d4     04 5E 06 F1 | 	add	arg01, #4
061d8     04 60 06 F1 | 	add	arg02, #4
061dc     04 62 86 F1 | 	sub	arg03, #4
061e0     E0 FF 9F FD | 	jmp	#LR__0254
061e4                 | LR__0255
061e4                 | LR__0256
061e4     31 23 0A F6 | 	mov	_var03, arg03 wz
061e8     4C 00 90 AD |  if_e	jmp	#LR__0267
061ec     24 9E 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
061f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
061f4                 | LR__0257
061f4     11 09 D8 FC | 	rep	@LR__0260, _var03
061f8                 | LR__0258
061f8     30 21 C2 FA | 	rdbyte	_var02, arg02
061fc     2F 21 42 FC | 	wrbyte	_var02, arg01
06200     01 5E 06 F1 | 	add	arg01, #1
06204     01 60 06 F1 | 	add	arg02, #1
06208                 | LR__0259
06208                 | LR__0260
06208     2C 00 90 FD | 	jmp	#LR__0267
0620c                 | LR__0261
0620c     31 5F 02 F1 | 	add	arg01, arg03
06210     31 61 02 F1 | 	add	arg02, arg03
06214     31 25 0A F6 | 	mov	_var04, arg03 wz
06218     1C 00 90 AD |  if_e	jmp	#LR__0266
0621c     F4 9D 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
06220     93 00 A0 FD | 	call	#FCACHE_LOAD_
06224                 | LR__0262
06224     12 09 D8 FC | 	rep	@LR__0265, _var04
06228                 | LR__0263
06228     01 5E 86 F1 | 	sub	arg01, #1
0622c     01 60 86 F1 | 	sub	arg02, #1
06230     30 21 C2 FA | 	rdbyte	_var02, arg02
06234     2F 21 42 FC | 	wrbyte	_var02, arg01
06238                 | LR__0264
06238                 | LR__0265
06238                 | LR__0266
06238                 | LR__0267
06238     0F 19 02 F6 | 	mov	result1, _var01
0623c                 | __system____builtin_memmove_ret
0623c     2D 00 64 FD | 	ret
06240                 | 
06240                 | __system__longmove
06240     2F 1F 02 F6 | 	mov	_var01, arg01
06244     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06248     28 00 90 3D |  if_ae	jmp	#LR__0272
0624c     31 21 0A F6 | 	mov	_var02, arg03 wz
06250     5C 00 90 AD |  if_e	jmp	#LR__0278
06254     BC 9D 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
06258     93 00 A0 FD | 	call	#FCACHE_LOAD_
0625c                 | LR__0268
0625c     10 09 D8 FC | 	rep	@LR__0271, _var02
06260                 | LR__0269
06260     30 23 02 FB | 	rdlong	_var03, arg02
06264     2F 23 62 FC | 	wrlong	_var03, arg01
06268     04 5E 06 F1 | 	add	arg01, #4
0626c     04 60 06 F1 | 	add	arg02, #4
06270                 | LR__0270
06270                 | LR__0271
06270     3C 00 90 FD | 	jmp	#LR__0278
06274                 | LR__0272
06274     31 25 02 F6 | 	mov	_var04, arg03
06278     02 24 66 F0 | 	shl	_var04, #2
0627c     12 5F 02 F1 | 	add	arg01, _var04
06280     31 25 02 F6 | 	mov	_var04, arg03
06284     02 24 66 F0 | 	shl	_var04, #2
06288     12 61 02 F1 | 	add	arg02, _var04
0628c     31 27 0A F6 | 	mov	_var05, arg03 wz
06290     1C 00 90 AD |  if_e	jmp	#LR__0277
06294     7C 9D 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
06298     93 00 A0 FD | 	call	#FCACHE_LOAD_
0629c                 | LR__0273
0629c     13 09 D8 FC | 	rep	@LR__0276, _var05
062a0                 | LR__0274
062a0     04 5E 86 F1 | 	sub	arg01, #4
062a4     04 60 86 F1 | 	sub	arg02, #4
062a8     30 23 02 FB | 	rdlong	_var03, arg02
062ac     2F 23 62 FC | 	wrlong	_var03, arg01
062b0                 | LR__0275
062b0                 | LR__0276
062b0                 | LR__0277
062b0                 | LR__0278
062b0     0F 19 02 F6 | 	mov	result1, _var01
062b4                 | __system__longmove_ret
062b4     2D 00 64 FD | 	ret
062b8                 | 
062b8                 | __system____topofstack
062b8     00 5A 05 F6 | 	mov	COUNT_, #0
062bc     B0 00 A0 FD | 	call	#pushregs_
062c0     08 F0 07 F1 | 	add	ptra, #8
062c4     04 5E 05 F1 | 	add	fp, #4
062c8     AF 5E 62 FC | 	wrlong	arg01, fp
062cc     AF 18 02 F6 | 	mov	result1, fp
062d0     04 5E 85 F1 | 	sub	fp, #4
062d4     AF F0 03 F6 | 	mov	ptra, fp
062d8     BA 00 A0 FD | 	call	#popregs_
062dc                 | __system____topofstack_ret
062dc     2D 00 64 FD | 	ret
062e0                 | 
062e0                 | __system___make_methodptr
062e0     04 5A 05 F6 | 	mov	COUNT_, #4
062e4     B0 00 A0 FD | 	call	#pushregs_
062e8     2F 6D 02 F6 | 	mov	local01, arg01
062ec     30 6F 02 F6 | 	mov	local02, arg02
062f0     08 5E 06 F6 | 	mov	arg01, #8
062f4     84 0D B0 FD | 	call	#__system___gc_alloc_managed
062f8     0C 71 0A F6 | 	mov	local03, result1 wz
062fc     10 00 90 AD |  if_e	jmp	#LR__0279
06300     38 6D 62 FC | 	wrlong	local01, local03
06304     38 73 02 F6 | 	mov	local04, local03
06308     04 72 06 F1 | 	add	local04, #4
0630c     39 6F 62 FC | 	wrlong	local02, local04
06310                 | LR__0279
06310     38 19 02 F6 | 	mov	result1, local03
06314     AF F0 03 F6 | 	mov	ptra, fp
06318     BA 00 A0 FD | 	call	#popregs_
0631c                 | __system___make_methodptr_ret
0631c     2D 00 64 FD | 	ret
06320                 | 
06320                 | __system___lockmem
06320     02 5A 05 F6 | 	mov	COUNT_, #2
06324     B0 00 A0 FD | 	call	#pushregs_
06328     00 18 06 F6 | 	mov	result1, #0
0632c     01 18 62 FD | 	cogid	result1
06330     0C 6D 02 F6 | 	mov	local01, result1
06334     00 6D 06 F1 | 	add	local01, #256
06338                 | LR__0280
06338     2F 6F 0A FB | 	rdlong	local02, arg01 wz
0633c     2F 6D 62 AC |  if_e	wrlong	local01, arg01
06340     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06344     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06348     36 6F 0A F2 | 	cmp	local02, local01 wz
0634c     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
06350     AF F0 03 F6 | 	mov	ptra, fp
06354     BA 00 A0 FD | 	call	#popregs_
06358                 | __system___lockmem_ret
06358     2D 00 64 FD | 	ret
0635c                 | 
0635c                 | __system___string_concat
0635c     07 5A 05 F6 | 	mov	COUNT_, #7
06360     B0 00 A0 FD | 	call	#pushregs_
06364     2F 6D 02 F6 | 	mov	local01, arg01
06368     30 6F 02 F6 | 	mov	local02, arg02
0636c     36 5F 02 F6 | 	mov	arg01, local01
06370     00 70 06 F6 | 	mov	local03, #0
06374     98 9C 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
06378     93 00 A0 FD | 	call	#FCACHE_LOAD_
0637c                 | LR__0281
0637c     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06380     01 70 06 51 |  if_ne	add	local03, #1
06384     01 5E 06 51 |  if_ne	add	arg01, #1
06388     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
0638c                 | LR__0282
0638c     38 75 02 F6 | 	mov	local05, local03
06390     37 5F 02 F6 | 	mov	arg01, local02
06394     00 70 06 F6 | 	mov	local03, #0
06398     74 9C 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
0639c     93 00 A0 FD | 	call	#FCACHE_LOAD_
063a0                 | LR__0283
063a0     2F 73 CA FA | 	rdbyte	local04, arg01 wz
063a4     01 70 06 51 |  if_ne	add	local03, #1
063a8     01 5E 06 51 |  if_ne	add	arg01, #1
063ac     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
063b0                 | LR__0284
063b0     38 19 02 F6 | 	mov	result1, local03
063b4     0C 77 02 F6 | 	mov	local06, result1
063b8     3A 5F 02 F6 | 	mov	arg01, local05
063bc     3B 5F 02 F1 | 	add	arg01, local06
063c0     01 5E 06 F1 | 	add	arg01, #1
063c4     B4 0C B0 FD | 	call	#__system___gc_alloc_managed
063c8     0C 79 0A F6 | 	mov	local07, result1 wz
063cc     28 00 90 AD |  if_e	jmp	#LR__0285
063d0     3C 5F 02 F6 | 	mov	arg01, local07
063d4     36 61 02 F6 | 	mov	arg02, local01
063d8     3A 63 02 F6 | 	mov	arg03, local05
063dc     D0 FD BF FD | 	call	#__system____builtin_memmove
063e0     3C 5F 02 F6 | 	mov	arg01, local07
063e4     3A 5F 02 F1 | 	add	arg01, local05
063e8     01 76 06 F1 | 	add	local06, #1
063ec     37 61 02 F6 | 	mov	arg02, local02
063f0     3B 63 02 F6 | 	mov	arg03, local06
063f4     B8 FD BF FD | 	call	#__system____builtin_memmove
063f8                 | LR__0285
063f8     3C 19 02 F6 | 	mov	result1, local07
063fc     AF F0 03 F6 | 	mov	ptra, fp
06400     BA 00 A0 FD | 	call	#popregs_
06404                 | __system___string_concat_ret
06404     2D 00 64 FD | 	ret
06408                 | 
06408                 | __system___tx
06408     03 5A 05 F6 | 	mov	COUNT_, #3
0640c     B0 00 A0 FD | 	call	#pushregs_
06410     2F 6D 02 F6 | 	mov	local01, arg01
06414     0A 6C 0E F2 | 	cmp	local01, #10 wz
06418     20 00 90 5D |  if_ne	jmp	#LR__0286
0641c     08 00 06 F1 | 	add	ptr___system__dat__, #8
06420     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06424     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06428     37 71 02 F6 | 	mov	local03, local02
0642c     02 70 0E F5 | 	and	local03, #2 wz
06430     08 00 90 AD |  if_e	jmp	#LR__0286
06434     0D 5E 06 F6 | 	mov	arg01, #13
06438     40 FC BF FD | 	call	#__system___txraw
0643c                 | LR__0286
0643c     36 5F 02 F6 | 	mov	arg01, local01
06440     38 FC BF FD | 	call	#__system___txraw
06444     AF F0 03 F6 | 	mov	ptra, fp
06448     BA 00 A0 FD | 	call	#popregs_
0644c                 | __system___tx_ret
0644c     2D 00 64 FD | 	ret
06450                 | 
06450                 | __system___rx
06450     02 5A 05 F6 | 	mov	COUNT_, #2
06454     B0 00 A0 FD | 	call	#pushregs_
06458                 | LR__0287
06458     00 5E 06 F6 | 	mov	arg01, #0
0645c     64 FC BF FD | 	call	#__system___rxraw
06460     0C 6D 02 F6 | 	mov	local01, result1
06464     FF FF 7F FF 
06468     FF 6D 0E F2 | 	cmp	local01, ##-1 wz
0646c     E8 FF 9F AD |  if_e	jmp	#LR__0287
06470     0D 6C 0E F2 | 	cmp	local01, #13 wz
06474     14 00 90 5D |  if_ne	jmp	#LR__0288
06478     08 00 06 F1 | 	add	ptr___system__dat__, #8
0647c     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06480     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06484     02 6E CE F7 | 	test	local02, #2 wz
06488     0A 6C 06 56 |  if_ne	mov	local01, #10
0648c                 | LR__0288
0648c     08 00 06 F1 | 	add	ptr___system__dat__, #8
06490     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06494     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06498     01 6E CE F7 | 	test	local02, #1 wz
0649c     1C 00 90 AD |  if_e	jmp	#LR__0291
064a0     7F 6C 0E F2 | 	cmp	local01, #127 wz
064a4     0C 00 90 5D |  if_ne	jmp	#LR__0289
064a8     08 5E 06 F6 | 	mov	arg01, #8
064ac     58 FF BF FD | 	call	#__system___tx
064b0     08 00 90 FD | 	jmp	#LR__0290
064b4                 | LR__0289
064b4     36 5F 02 F6 | 	mov	arg01, local01
064b8     4C FF BF FD | 	call	#__system___tx
064bc                 | LR__0290
064bc                 | LR__0291
064bc     36 19 02 F6 | 	mov	result1, local01
064c0     AF F0 03 F6 | 	mov	ptra, fp
064c4     BA 00 A0 FD | 	call	#popregs_
064c8                 | __system___rx_ret
064c8     2D 00 64 FD | 	ret
064cc                 | 
064cc                 | __system___pinread
064cc     20 5E CE F7 | 	test	arg01, #32 wz
064d0     FF 1F 02 56 |  if_ne	mov	_var01, inb
064d4     FE 1F 02 A6 |  if_e	mov	_var01, ina
064d8     2F 1F 42 F0 | 	shr	_var01, arg01
064dc     06 5E 46 F0 | 	shr	arg01, #6
064e0     2F 1F 42 F7 | 	zerox	_var01, arg01
064e4     0F 19 02 F6 | 	mov	result1, _var01
064e8                 | __system___pinread_ret
064e8     2D 00 64 FD | 	ret
064ec                 | 
064ec                 | __system___waitms
064ec     03 5A 05 F6 | 	mov	COUNT_, #3
064f0     B0 00 A0 FD | 	call	#pushregs_
064f4     2F 6D 02 F6 | 	mov	local01, arg01
064f8     14 6E 06 FB | 	rdlong	local02, #20
064fc     18 9B 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
06500     93 00 A0 FD | 	call	#FCACHE_LOAD_
06504                 | LR__0292
06504     01 00 00 FF 
06508     E8 6D 5E F2 | 	cmps	local01, ##1000 wcz
0650c     1F 6E 62 1D |  if_a	waitx	local02
06510     01 00 00 1F 
06514     E8 6D 86 11 |  if_a	sub	local01, ##1000
06518     E8 FF 9F 1D |  if_a	jmp	#LR__0292
0651c                 | LR__0293
0651c     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06520     00 71 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06524     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
06528     20 00 90 5D |  if_ne	jmp	#LR__0294
0652c     37 99 02 F6 | 	mov	muldiva_, local02
06530     01 00 00 FF 
06534     E8 9B 06 F6 | 	mov	muldivb_, ##1000
06538     C2 00 A0 FD | 	call	#unsdivide_
0653c     4D 71 02 F6 | 	mov	local03, muldivb_
06540     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06544     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06548     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
0654c                 | LR__0294
0654c     00 6C 5E F2 | 	cmps	local01, #0 wcz
06550     38 6D 02 1D |  if_a	qmul	local01, local03
06554     18 5E 62 1D |  if_a	getqx	arg01
06558     1F 5E 62 1D |  if_a	waitx	arg01
0655c     AF F0 03 F6 | 	mov	ptra, fp
06560     BA 00 A0 FD | 	call	#popregs_
06564                 | __system___waitms_ret
06564     2D 00 64 FD | 	ret
06568                 | 
06568                 | __system___waitus
06568     02 5A 05 F6 | 	mov	COUNT_, #2
0656c     B0 00 A0 FD | 	call	#pushregs_
06570     2F 6D 02 F6 | 	mov	local01, arg01
06574     10 00 06 F1 | 	add	ptr___system__dat__, #16
06578     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0657c     10 00 86 F1 | 	sub	ptr___system__dat__, #16
06580     20 00 90 5D |  if_ne	jmp	#LR__0295
06584     14 98 06 FB | 	rdlong	muldiva_, #20
06588     A1 07 00 FF 
0658c     40 9A 06 F6 | 	mov	muldivb_, ##1000000
06590     C2 00 A0 FD | 	call	#unsdivide_
06594     4D 6F 02 F6 | 	mov	local02, muldivb_
06598     10 00 06 F1 | 	add	ptr___system__dat__, #16
0659c     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
065a0     10 00 86 F1 | 	sub	ptr___system__dat__, #16
065a4                 | LR__0295
065a4     37 6D 02 FD | 	qmul	local01, local02
065a8     18 5E 62 FD | 	getqx	arg01
065ac     1F 5E 62 FD | 	waitx	arg01
065b0     AF F0 03 F6 | 	mov	ptra, fp
065b4     BA 00 A0 FD | 	call	#popregs_
065b8                 | __system___waitus_ret
065b8     2D 00 64 FD | 	ret
065bc                 | 
065bc                 | __system___basic_open
065bc     06 5A 05 F6 | 	mov	COUNT_, #6
065c0     B0 00 A0 FD | 	call	#pushregs_
065c4     30 6D 02 F6 | 	mov	local01, arg02
065c8     31 6F 02 F6 | 	mov	local02, arg03
065cc     32 71 02 F6 | 	mov	local03, arg04
065d0     9C 12 B0 FD | 	call	#__system____getftab
065d4     0C 73 0A F6 | 	mov	local04, result1 wz
065d8     18 00 90 5D |  if_ne	jmp	#LR__0296
065dc     F9 5E 02 F6 | 	mov	arg01, abortchain
065e0     0C 60 06 F6 | 	mov	arg02, #12
065e4     01 62 06 F6 | 	mov	arg03, #1
065e8     E6 00 A0 FD | 	call	#__longjmp
065ec     01 18 66 F6 | 	neg	result1, #1
065f0     90 00 90 FD | 	jmp	#LR__0301
065f4                 | LR__0296
065f4     08 72 06 F1 | 	add	local04, #8
065f8     39 75 0A FB | 	rdlong	local05, local04 wz
065fc     08 72 86 F1 | 	sub	local04, #8
06600     08 00 90 AD |  if_e	jmp	#LR__0297
06604     39 5F 02 F6 | 	mov	arg01, local04
06608     C0 14 B0 FD | 	call	#__system___closeraw
0660c                 | LR__0297
0660c     00 6C 0E F2 | 	cmp	local01, #0 wz
06610     48 00 90 AD |  if_e	jmp	#LR__0299
06614     04 5E 06 F6 | 	mov	arg01, #4
06618     60 0A B0 FD | 	call	#__system___gc_alloc_managed
0661c     0C 77 0A F6 | 	mov	local06, result1 wz
06620     18 00 90 5D |  if_ne	jmp	#LR__0298
06624     F9 5E 02 F6 | 	mov	arg01, abortchain
06628     07 60 06 F6 | 	mov	arg02, #7
0662c     01 62 06 F6 | 	mov	arg03, #1
06630     E6 00 A0 FD | 	call	#__longjmp
06634     01 18 66 F6 | 	neg	result1, #1
06638     48 00 90 FD | 	jmp	#LR__0301
0663c                 | LR__0298
0663c     3B 6D 62 FC | 	wrlong	local01, local06
06640     FE 60 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06644     3B 5F 02 F6 | 	mov	arg01, local06
06648     94 FC BF FD | 	call	#__system___make_methodptr
0664c     18 72 06 F1 | 	add	local04, #24
06650     39 19 62 FC | 	wrlong	result1, local04
06654     18 72 86 F1 | 	sub	local04, #24
06658     0C 00 90 FD | 	jmp	#LR__0300
0665c                 | LR__0299
0665c     18 72 06 F1 | 	add	local04, #24
06660     39 6D 62 FC | 	wrlong	local01, local04
06664     18 72 86 F1 | 	sub	local04, #24
06668                 | LR__0300
06668     08 72 06 F1 | 	add	local04, #8
0666c     39 0F 68 FC | 	wrlong	#7, local04
06670     14 72 06 F1 | 	add	local04, #20
06674     39 6F 62 FC | 	wrlong	local02, local04
06678     04 72 06 F1 | 	add	local04, #4
0667c     39 71 62 FC | 	wrlong	local03, local04
06680     00 18 06 F6 | 	mov	result1, #0
06684                 | LR__0301
06684     AF F0 03 F6 | 	mov	ptra, fp
06688     BA 00 A0 FD | 	call	#popregs_
0668c                 | __system___basic_open_ret
0668c     2D 00 64 FD | 	ret
06690                 | 
06690                 | __system___basic_print_char
06690     05 5A 05 F6 | 	mov	COUNT_, #5
06694     B0 00 A0 FD | 	call	#pushregs_
06698     30 6D 02 F6 | 	mov	local01, arg02
0669c     98 13 B0 FD | 	call	#__system___gettxfunc
066a0     0C 6F 0A F6 | 	mov	local02, result1 wz
066a4     00 18 06 A6 |  if_e	mov	result1, #0
066a8     24 00 90 AD |  if_e	jmp	#LR__0302
066ac     37 71 02 FB | 	rdlong	local03, local02
066b0     04 6E 06 F1 | 	add	local02, #4
066b4     37 73 02 FB | 	rdlong	local04, local02
066b8     36 5F 02 F6 | 	mov	arg01, local01
066bc     FD 74 02 F6 | 	mov	local05, objptr
066c0     38 FB 01 F6 | 	mov	objptr, local03
066c4     2D 72 62 FD | 	call	local04
066c8     3A FB 01 F6 | 	mov	objptr, local05
066cc     01 18 06 F6 | 	mov	result1, #1
066d0                 | LR__0302
066d0     AF F0 03 F6 | 	mov	ptra, fp
066d4     BA 00 A0 FD | 	call	#popregs_
066d8                 | __system___basic_print_char_ret
066d8     2D 00 64 FD | 	ret
066dc                 | 
066dc                 | __system___basic_print_string
066dc     03 5A 05 F6 | 	mov	COUNT_, #3
066e0     B0 00 A0 FD | 	call	#pushregs_
066e4     30 6D 02 F6 | 	mov	local01, arg02
066e8     31 6F 02 F6 | 	mov	local02, arg03
066ec     48 13 B0 FD | 	call	#__system___gettxfunc
066f0     0C 71 0A F6 | 	mov	local03, result1 wz
066f4     00 18 06 A6 |  if_e	mov	result1, #0
066f8     1C 00 90 AD |  if_e	jmp	#LR__0303
066fc     00 6C 0E F2 | 	cmp	local01, #0 wz
06700     00 18 06 A6 |  if_e	mov	result1, #0
06704     10 00 90 AD |  if_e	jmp	#LR__0303
06708     37 61 02 F6 | 	mov	arg02, local02
0670c     36 63 02 F6 | 	mov	arg03, local01
06710     38 5F 02 F6 | 	mov	arg01, local03
06714     B0 00 B0 FD | 	call	#__system___fmtstr
06718                 | LR__0303
06718     AF F0 03 F6 | 	mov	ptra, fp
0671c     BA 00 A0 FD | 	call	#popregs_
06720                 | __system___basic_print_string_ret
06720     2D 00 64 FD | 	ret
06724                 | 
06724                 | __system___basic_print_integer
06724     04 5A 05 F6 | 	mov	COUNT_, #4
06728     B0 00 A0 FD | 	call	#pushregs_
0672c     30 6D 02 F6 | 	mov	local01, arg02
06730     31 6F 02 F6 | 	mov	local02, arg03
06734     32 71 02 F6 | 	mov	local03, arg04
06738     FC 12 B0 FD | 	call	#__system___gettxfunc
0673c     0C 73 0A F6 | 	mov	local04, result1 wz
06740     00 18 06 A6 |  if_e	mov	result1, #0
06744     14 00 90 AD |  if_e	jmp	#LR__0304
06748     37 61 02 F6 | 	mov	arg02, local02
0674c     36 63 02 F6 | 	mov	arg03, local01
06750     38 65 02 F6 | 	mov	arg04, local03
06754     39 5F 02 F6 | 	mov	arg01, local04
06758     64 01 B0 FD | 	call	#__system___fmtnum
0675c                 | LR__0304
0675c     AF F0 03 F6 | 	mov	ptra, fp
06760     BA 00 A0 FD | 	call	#popregs_
06764                 | __system___basic_print_integer_ret
06764     2D 00 64 FD | 	ret
06768                 | 
06768                 | __system___fmtchar
06768     00 5A 05 F6 | 	mov	COUNT_, #0
0676c     B0 00 A0 FD | 	call	#pushregs_
06770     14 F0 07 F1 | 	add	ptra, #20
06774     04 5E 05 F1 | 	add	fp, #4
06778     AF 5E 62 FC | 	wrlong	arg01, fp
0677c     04 5E 05 F1 | 	add	fp, #4
06780     AF 60 62 FC | 	wrlong	arg02, fp
06784     04 5E 05 F1 | 	add	fp, #4
06788     AF 62 62 FC | 	wrlong	arg03, fp
0678c     04 5E 05 F1 | 	add	fp, #4
06790     AF 62 42 FC | 	wrbyte	arg03, fp
06794     01 5E 05 F1 | 	add	fp, #1
06798     AF 00 48 FC | 	wrbyte	#0, fp
0679c     0D 5E 85 F1 | 	sub	fp, #13
067a0     AF 5E 02 FB | 	rdlong	arg01, fp
067a4     04 5E 05 F1 | 	add	fp, #4
067a8     AF 60 02 FB | 	rdlong	arg02, fp
067ac     08 5E 05 F1 | 	add	fp, #8
067b0     AF 62 02 F6 | 	mov	arg03, fp
067b4     10 5E 85 F1 | 	sub	fp, #16
067b8     0C 00 B0 FD | 	call	#__system___fmtstr
067bc     AF F0 03 F6 | 	mov	ptra, fp
067c0     BA 00 A0 FD | 	call	#popregs_
067c4                 | __system___fmtchar_ret
067c4     2D 00 64 FD | 	ret
067c8                 | 
067c8                 | __system___fmtstr
067c8     0E 5A 05 F6 | 	mov	COUNT_, #14
067cc     B0 00 A0 FD | 	call	#pushregs_
067d0     2F 6D 02 F6 | 	mov	local01, arg01
067d4     30 6F 02 F6 | 	mov	local02, arg02
067d8     31 71 02 F6 | 	mov	local03, arg03
067dc     37 73 02 F6 | 	mov	local04, local02
067e0     FF 72 06 F5 | 	and	local04, #255
067e4     38 5F 02 F6 | 	mov	arg01, local03
067e8     00 74 06 F6 | 	mov	local05, #0
067ec     20 98 9F FE | 	loc	pa,	#(@LR__0306-@LR__0305)
067f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
067f4                 | LR__0305
067f4     2F 77 CA FA | 	rdbyte	local06, arg01 wz
067f8     01 74 06 51 |  if_ne	add	local05, #1
067fc     01 5E 06 51 |  if_ne	add	arg01, #1
06800     F0 FF 9F 5D |  if_ne	jmp	#LR__0305
06804                 | LR__0306
06804     3A 19 02 F6 | 	mov	result1, local05
06808     0C 79 02 F6 | 	mov	local07, result1
0680c     00 72 0E F2 | 	cmp	local04, #0 wz
06810     04 00 90 AD |  if_e	jmp	#LR__0307
06814     39 79 7A F3 | 	fles	local07, local04 wcz
06818                 | LR__0307
06818     37 61 02 F6 | 	mov	arg02, local02
0681c     3C 63 02 F6 | 	mov	arg03, local07
06820     36 5F 02 F6 | 	mov	arg01, local01
06824     02 64 06 F6 | 	mov	arg04, #2
06828     BC 10 B0 FD | 	call	#__system___fmtpad
0682c     0C 7B 02 F6 | 	mov	local08, result1
06830     00 7A 5E F2 | 	cmps	local08, #0 wcz
06834     3D 19 02 C6 |  if_b	mov	result1, local08
06838     78 00 90 CD |  if_b	jmp	#LR__0310
0683c     00 7C 06 F6 | 	mov	local09, #0
06840                 | LR__0308
06840     3C 7D 5A F2 | 	cmps	local09, local07 wcz
06844     44 00 90 3D |  if_ae	jmp	#LR__0309
06848     36 7F 02 F6 | 	mov	local10, local01
0684c     3F 81 02 FB | 	rdlong	local11, local10
06850     04 7E 06 F1 | 	add	local10, #4
06854     3F 83 02 FB | 	rdlong	local12, local10
06858     38 5F C2 FA | 	rdbyte	arg01, local03
0685c     FD 84 02 F6 | 	mov	local13, objptr
06860     40 FB 01 F6 | 	mov	objptr, local11
06864     01 70 06 F1 | 	add	local03, #1
06868     2D 82 62 FD | 	call	local12
0686c     42 FB 01 F6 | 	mov	objptr, local13
06870     0C 87 02 F6 | 	mov	local14, result1
06874     00 86 5E F2 | 	cmps	local14, #0 wcz
06878     43 19 02 C6 |  if_b	mov	result1, local14
0687c     34 00 90 CD |  if_b	jmp	#LR__0310
06880     43 7B 02 F1 | 	add	local08, local14
06884     01 7C 06 F1 | 	add	local09, #1
06888     B4 FF 9F FD | 	jmp	#LR__0308
0688c                 | LR__0309
0688c     37 61 02 F6 | 	mov	arg02, local02
06890     3C 63 02 F6 | 	mov	arg03, local07
06894     36 5F 02 F6 | 	mov	arg01, local01
06898     01 64 06 F6 | 	mov	arg04, #1
0689c     48 10 B0 FD | 	call	#__system___fmtpad
068a0     0C 87 02 F6 | 	mov	local14, result1
068a4     00 86 5E F2 | 	cmps	local14, #0 wcz
068a8     43 19 02 C6 |  if_b	mov	result1, local14
068ac     43 7B 02 31 |  if_ae	add	local08, local14
068b0     3D 19 02 36 |  if_ae	mov	result1, local08
068b4                 | LR__0310
068b4     AF F0 03 F6 | 	mov	ptra, fp
068b8     BA 00 A0 FD | 	call	#popregs_
068bc                 | __system___fmtstr_ret
068bc     2D 00 64 FD | 	ret
068c0                 | 
068c0                 | __system___fmtnum
068c0     06 5A 05 F6 | 	mov	COUNT_, #6
068c4     B0 00 A0 FD | 	call	#pushregs_
068c8     70 F0 07 F1 | 	add	ptra, #112
068cc     04 5E 05 F1 | 	add	fp, #4
068d0     AF 5E 62 FC | 	wrlong	arg01, fp
068d4     04 5E 05 F1 | 	add	fp, #4
068d8     AF 60 62 FC | 	wrlong	arg02, fp
068dc     04 5E 05 F1 | 	add	fp, #4
068e0     AF 62 62 FC | 	wrlong	arg03, fp
068e4     04 5E 05 F1 | 	add	fp, #4
068e8     AF 64 62 FC | 	wrlong	arg04, fp
068ec     04 5E 05 F1 | 	add	fp, #4
068f0     AF 6C 02 F6 | 	mov	local01, fp
068f4     44 5E 05 F1 | 	add	fp, #68
068f8     AF 6C 62 FC | 	wrlong	local01, fp
068fc     04 5E 05 F1 | 	add	fp, #4
06900     AF 00 68 FC | 	wrlong	#0, fp
06904     54 5E 85 F1 | 	sub	fp, #84
06908     AF 6C 02 FB | 	rdlong	local01, fp
0690c     10 6C 46 F0 | 	shr	local01, #16
06910     3F 6C 06 F5 | 	and	local01, #63
06914     58 5E 05 F1 | 	add	fp, #88
06918     AF 6C 62 FC | 	wrlong	local01, fp
0691c     58 5E 85 F1 | 	sub	fp, #88
06920     AF 6C 02 FB | 	rdlong	local01, fp
06924     FF 6C 06 F5 | 	and	local01, #255
06928     5C 5E 05 F1 | 	add	fp, #92
0692c     AF 6C 62 FC | 	wrlong	local01, fp
06930     5C 5E 85 F1 | 	sub	fp, #92
06934     AF 6C 02 FB | 	rdlong	local01, fp
06938     1A 6C 46 F0 | 	shr	local01, #26
0693c     03 6C 06 F5 | 	and	local01, #3
06940     60 5E 05 F1 | 	add	fp, #96
06944     AF 6C 62 FC | 	wrlong	local01, fp
06948     08 5E 85 F1 | 	sub	fp, #8
0694c     AF 6C 02 FB | 	rdlong	local01, fp
06950     60 5E 85 F1 | 	sub	fp, #96
06954     00 6C 5E F2 | 	cmps	local01, #0 wcz
06958     14 00 90 ED |  if_be	jmp	#LR__0311
0695c     60 5E 05 F1 | 	add	fp, #96
06960     AF 6C 02 FB | 	rdlong	local01, fp
06964     01 6C 86 F1 | 	sub	local01, #1
06968     AF 6C 62 FC | 	wrlong	local01, fp
0696c     60 5E 85 F1 | 	sub	fp, #96
06970                 | LR__0311
06970     64 5E 05 F1 | 	add	fp, #100
06974     AF 6C 02 FB | 	rdlong	local01, fp
06978     64 5E 85 F1 | 	sub	fp, #100
0697c     40 6C 5E F2 | 	cmps	local01, #64 wcz
06980     14 00 90 1D |  if_a	jmp	#LR__0312
06984     64 5E 05 F1 | 	add	fp, #100
06988     AF 6E 02 FB | 	rdlong	local02, fp
0698c     64 5E 85 F1 | 	sub	fp, #100
06990     37 71 0A F6 | 	mov	local03, local02 wz
06994     0C 00 90 5D |  if_ne	jmp	#LR__0313
06998                 | LR__0312
06998     64 5E 05 F1 | 	add	fp, #100
0699c     AF 80 68 FC | 	wrlong	#64, fp
069a0     64 5E 85 F1 | 	sub	fp, #100
069a4                 | LR__0313
069a4     68 5E 05 F1 | 	add	fp, #104
069a8     AF 6C 02 FB | 	rdlong	local01, fp
069ac     68 5E 85 F1 | 	sub	fp, #104
069b0     03 6C 0E F2 | 	cmp	local01, #3 wz
069b4     10 00 90 5D |  if_ne	jmp	#LR__0314
069b8     68 5E 05 F1 | 	add	fp, #104
069bc     AF 00 68 FC | 	wrlong	#0, fp
069c0     68 5E 85 F1 | 	sub	fp, #104
069c4     30 00 90 FD | 	jmp	#LR__0316
069c8                 | LR__0314
069c8     0C 5E 05 F1 | 	add	fp, #12
069cc     AF 6C 02 FB | 	rdlong	local01, fp
069d0     0C 5E 85 F1 | 	sub	fp, #12
069d4     00 6C 5E F2 | 	cmps	local01, #0 wcz
069d8     1C 00 90 3D |  if_ae	jmp	#LR__0315
069dc     68 5E 05 F1 | 	add	fp, #104
069e0     AF 08 68 FC | 	wrlong	#4, fp
069e4     5C 5E 85 F1 | 	sub	fp, #92
069e8     AF 6C 02 FB | 	rdlong	local01, fp
069ec     36 6D 62 F6 | 	neg	local01, local01
069f0     AF 6C 62 FC | 	wrlong	local01, fp
069f4     0C 5E 85 F1 | 	sub	fp, #12
069f8                 | LR__0315
069f8                 | LR__0316
069f8     68 5E 05 F1 | 	add	fp, #104
069fc     AF 6C 0A FB | 	rdlong	local01, fp wz
06a00     68 5E 85 F1 | 	sub	fp, #104
06a04     EC 00 90 AD |  if_e	jmp	#LR__0323
06a08     5C 5E 05 F1 | 	add	fp, #92
06a0c     AF 70 02 FB | 	rdlong	local03, fp
06a10     01 70 06 F1 | 	add	local03, #1
06a14     AF 70 62 FC | 	wrlong	local03, fp
06a18     04 5E 05 F1 | 	add	fp, #4
06a1c     AF 6C 02 FB | 	rdlong	local01, fp
06a20     04 5E 05 F1 | 	add	fp, #4
06a24     AF 70 02 FB | 	rdlong	local03, fp
06a28     64 5E 85 F1 | 	sub	fp, #100
06a2c     38 6D 0A F2 | 	cmp	local01, local03 wz
06a30     3C 00 90 5D |  if_ne	jmp	#LR__0318
06a34     60 5E 05 F1 | 	add	fp, #96
06a38     AF 70 02 FB | 	rdlong	local03, fp
06a3c     01 70 86 F1 | 	sub	local03, #1
06a40     AF 70 62 FC | 	wrlong	local03, fp
06a44     AF 6C 0A FB | 	rdlong	local01, fp wz
06a48     60 5E 85 F1 | 	sub	fp, #96
06a4c     20 00 90 5D |  if_ne	jmp	#LR__0317
06a50     04 5E 05 F1 | 	add	fp, #4
06a54     AF 5E 02 FB | 	rdlong	arg01, fp
06a58     04 5E 05 F1 | 	add	fp, #4
06a5c     AF 60 02 FB | 	rdlong	arg02, fp
06a60     08 5E 85 F1 | 	sub	fp, #8
06a64     23 62 06 F6 | 	mov	arg03, #35
06a68     FC FC BF FD | 	call	#__system___fmtchar
06a6c     70 01 90 FD | 	jmp	#LR__0328
06a70                 | LR__0317
06a70                 | LR__0318
06a70     68 5E 05 F1 | 	add	fp, #104
06a74     AF 6C 02 FB | 	rdlong	local01, fp
06a78     68 5E 85 F1 | 	sub	fp, #104
06a7c     02 6C 0E F2 | 	cmp	local01, #2 wz
06a80     20 00 90 5D |  if_ne	jmp	#LR__0319
06a84     58 5E 05 F1 | 	add	fp, #88
06a88     AF 6C 02 FB | 	rdlong	local01, fp
06a8c     36 71 02 F6 | 	mov	local03, local01
06a90     01 70 06 F1 | 	add	local03, #1
06a94     AF 70 62 FC | 	wrlong	local03, fp
06a98     58 5E 85 F1 | 	sub	fp, #88
06a9c     36 41 48 FC | 	wrbyte	#32, local01
06aa0     50 00 90 FD | 	jmp	#LR__0322
06aa4                 | LR__0319
06aa4     68 5E 05 F1 | 	add	fp, #104
06aa8     AF 6C 02 FB | 	rdlong	local01, fp
06aac     68 5E 85 F1 | 	sub	fp, #104
06ab0     04 6C 0E F2 | 	cmp	local01, #4 wz
06ab4     20 00 90 5D |  if_ne	jmp	#LR__0320
06ab8     58 5E 05 F1 | 	add	fp, #88
06abc     AF 6C 02 FB | 	rdlong	local01, fp
06ac0     36 71 02 F6 | 	mov	local03, local01
06ac4     01 70 06 F1 | 	add	local03, #1
06ac8     AF 70 62 FC | 	wrlong	local03, fp
06acc     58 5E 85 F1 | 	sub	fp, #88
06ad0     36 5B 48 FC | 	wrbyte	#45, local01
06ad4     1C 00 90 FD | 	jmp	#LR__0321
06ad8                 | LR__0320
06ad8     58 5E 05 F1 | 	add	fp, #88
06adc     AF 6C 02 FB | 	rdlong	local01, fp
06ae0     36 71 02 F6 | 	mov	local03, local01
06ae4     01 70 06 F1 | 	add	local03, #1
06ae8     AF 70 62 FC | 	wrlong	local03, fp
06aec     58 5E 85 F1 | 	sub	fp, #88
06af0     36 57 48 FC | 	wrbyte	#43, local01
06af4                 | LR__0321
06af4                 | LR__0322
06af4                 | LR__0323
06af4     58 5E 05 F1 | 	add	fp, #88
06af8     AF 5E 02 FB | 	rdlong	arg01, fp
06afc     4C 5E 85 F1 | 	sub	fp, #76
06b00     AF 60 02 FB | 	rdlong	arg02, fp
06b04     04 5E 05 F1 | 	add	fp, #4
06b08     AF 62 02 FB | 	rdlong	arg03, fp
06b0c     50 5E 05 F1 | 	add	fp, #80
06b10     AF 64 02 FB | 	rdlong	arg04, fp
06b14     00 72 06 F6 | 	mov	local04, #0
06b18     58 5E 85 F1 | 	sub	fp, #88
06b1c     AF 74 02 FB | 	rdlong	local05, fp
06b20     08 5E 85 F1 | 	sub	fp, #8
06b24     1D 74 2E F4 | 	testbn	local05, #29 wz
06b28     01 72 06 56 |  if_ne	mov	local04, #1
06b2c     39 67 02 F6 | 	mov	arg05, local04
06b30     78 0E B0 FD | 	call	#__system___uitoa
06b34     0C 77 02 F6 | 	mov	local06, result1
06b38     5C 5E 05 F1 | 	add	fp, #92
06b3c     AF 6C 02 FB | 	rdlong	local01, fp
06b40     3B 6D 02 F1 | 	add	local01, local06
06b44     AF 6C 62 FC | 	wrlong	local01, fp
06b48     08 5E 05 F1 | 	add	fp, #8
06b4c     AF 70 02 FB | 	rdlong	local03, fp
06b50     64 5E 85 F1 | 	sub	fp, #100
06b54     38 6D 5A F2 | 	cmps	local01, local03 wcz
06b58     64 00 90 ED |  if_be	jmp	#LR__0327
06b5c     E0 94 9F FE | 	loc	pa,	#(@LR__0325-@LR__0324)
06b60     93 00 A0 FD | 	call	#FCACHE_LOAD_
06b64                 | LR__0324
06b64     64 5E 05 F1 | 	add	fp, #100
06b68     AF 6C 02 FB | 	rdlong	local01, fp
06b6c     36 71 02 F6 | 	mov	local03, local01
06b70     01 70 86 F1 | 	sub	local03, #1
06b74     AF 70 62 FC | 	wrlong	local03, fp
06b78     64 5E 85 F1 | 	sub	fp, #100
06b7c     00 6C 5E F2 | 	cmps	local01, #0 wcz
06b80     20 00 90 ED |  if_be	jmp	#LR__0326
06b84     58 5E 05 F1 | 	add	fp, #88
06b88     AF 6C 02 FB | 	rdlong	local01, fp
06b8c     36 71 02 F6 | 	mov	local03, local01
06b90     01 70 06 F1 | 	add	local03, #1
06b94     AF 70 62 FC | 	wrlong	local03, fp
06b98     58 5E 85 F1 | 	sub	fp, #88
06b9c     36 47 48 FC | 	wrbyte	#35, local01
06ba0     C0 FF 9F FD | 	jmp	#LR__0324
06ba4                 | LR__0325
06ba4                 | LR__0326
06ba4     58 5E 05 F1 | 	add	fp, #88
06ba8     AF 6C 02 FB | 	rdlong	local01, fp
06bac     36 71 02 F6 | 	mov	local03, local01
06bb0     01 70 06 F1 | 	add	local03, #1
06bb4     AF 70 62 FC | 	wrlong	local03, fp
06bb8     58 5E 85 F1 | 	sub	fp, #88
06bbc     36 01 48 FC | 	wrbyte	#0, local01
06bc0                 | LR__0327
06bc0     04 5E 05 F1 | 	add	fp, #4
06bc4     AF 5E 02 FB | 	rdlong	arg01, fp
06bc8     04 5E 05 F1 | 	add	fp, #4
06bcc     AF 60 02 FB | 	rdlong	arg02, fp
06bd0     0C 5E 05 F1 | 	add	fp, #12
06bd4     AF 62 02 F6 | 	mov	arg03, fp
06bd8     14 5E 85 F1 | 	sub	fp, #20
06bdc     E8 FB BF FD | 	call	#__system___fmtstr
06be0                 | LR__0328
06be0     AF F0 03 F6 | 	mov	ptra, fp
06be4     BA 00 A0 FD | 	call	#popregs_
06be8                 | __system___fmtnum_ret
06be8     2D 00 64 FD | 	ret
06bec                 | 
06bec                 | __system__Chr_S
06bec     02 5A 05 F6 | 	mov	COUNT_, #2
06bf0     B0 00 A0 FD | 	call	#pushregs_
06bf4     2F 6D 02 F6 | 	mov	local01, arg01
06bf8     03 5E 06 F6 | 	mov	arg01, #3
06bfc     7C 04 B0 FD | 	call	#__system___gc_alloc_managed
06c00     0C 6F 0A F6 | 	mov	local02, result1 wz
06c04     10 00 90 AD |  if_e	jmp	#LR__0329
06c08     37 6D 42 FC | 	wrbyte	local01, local02
06c0c     01 6E 06 F1 | 	add	local02, #1
06c10     37 01 48 FC | 	wrbyte	#0, local02
06c14     01 6E 86 F1 | 	sub	local02, #1
06c18                 | LR__0329
06c18     37 19 02 F6 | 	mov	result1, local02
06c1c     AF F0 03 F6 | 	mov	ptra, fp
06c20     BA 00 A0 FD | 	call	#popregs_
06c24                 | __system__Chr_S_ret
06c24     2D 00 64 FD | 	ret
06c28                 | 
06c28                 | __system__Number_S
06c28     09 5A 05 F6 | 	mov	COUNT_, #9
06c2c     B0 00 A0 FD | 	call	#pushregs_
06c30     2F 6D 02 F6 | 	mov	local01, arg01
06c34     30 6F 0A F6 | 	mov	local02, arg02 wz
06c38     31 71 02 F6 | 	mov	local03, arg03
06c3c     40 00 90 5D |  if_ne	jmp	#LR__0332
06c40     01 6E 06 F6 | 	mov	local02, #1
06c44     38 73 02 F6 | 	mov	local04, local03
06c48     01 74 06 F6 | 	mov	local05, #1
06c4c                 | LR__0330
06c4c     00 76 06 F6 | 	mov	local06, #0
06c50     36 73 1A F2 | 	cmp	local04, local01 wcz
06c54     01 76 66 E6 |  if_be	neg	local06, #1
06c58     00 78 06 F6 | 	mov	local07, #0
06c5c     39 75 1A F2 | 	cmp	local05, local04 wcz
06c60     01 78 66 C6 |  if_b	neg	local07, #1
06c64     3C 77 CA F7 | 	test	local06, local07 wz
06c68     14 00 90 AD |  if_e	jmp	#LR__0331
06c6c     39 75 02 F6 | 	mov	local05, local04
06c70     38 73 02 FD | 	qmul	local04, local03
06c74     18 72 62 FD | 	getqx	local04
06c78     01 6E 06 F1 | 	add	local02, #1
06c7c     CC FF 9F FD | 	jmp	#LR__0330
06c80                 | LR__0331
06c80                 | LR__0332
06c80     20 6E 3E F3 | 	fle	local02, #32 wcz
06c84     37 5F 02 F6 | 	mov	arg01, local02
06c88     02 5E 06 F1 | 	add	arg01, #2
06c8c     EC 03 B0 FD | 	call	#__system___gc_alloc_managed
06c90     0C 7B 02 F6 | 	mov	local08, result1
06c94     37 79 02 F6 | 	mov	local07, local02
06c98     3D 79 02 F1 | 	add	local07, local08
06c9c     3C 01 48 FC | 	wrbyte	#0, local07
06ca0     98 93 9F FE | 	loc	pa,	#(@LR__0334-@LR__0333)
06ca4     93 00 A0 FD | 	call	#FCACHE_LOAD_
06ca8                 | LR__0333
06ca8     00 6E 1E F2 | 	cmp	local02, #0 wcz
06cac     34 00 90 ED |  if_be	jmp	#LR__0335
06cb0     01 6E 86 F1 | 	sub	local02, #1
06cb4     36 99 02 F6 | 	mov	muldiva_, local01
06cb8     38 9B 02 F6 | 	mov	muldivb_, local03
06cbc     C2 00 A0 FD | 	call	#unsdivide_
06cc0     4C 7D 02 F6 | 	mov	local09, muldiva_
06cc4     4D 6D 02 F6 | 	mov	local01, muldivb_
06cc8     0A 7C 1E F2 | 	cmp	local09, #10 wcz
06ccc     30 7C 06 C1 |  if_b	add	local09, #48
06cd0     37 7C 06 31 |  if_ae	add	local09, #55
06cd4     37 79 02 F6 | 	mov	local07, local02
06cd8     3D 79 02 F1 | 	add	local07, local08
06cdc     3C 7D 42 FC | 	wrbyte	local09, local07
06ce0     C4 FF 9F FD | 	jmp	#LR__0333
06ce4                 | LR__0334
06ce4                 | LR__0335
06ce4     3D 19 02 F6 | 	mov	result1, local08
06ce8     AF F0 03 F6 | 	mov	ptra, fp
06cec     BA 00 A0 FD | 	call	#popregs_
06cf0                 | __system__Number_S_ret
06cf0     2D 00 64 FD | 	ret
06cf4                 | 
06cf4                 | __system__String_S
06cf4     05 5A 05 F6 | 	mov	COUNT_, #5
06cf8     B0 00 A0 FD | 	call	#pushregs_
06cfc     2F 6D 02 F6 | 	mov	local01, arg01
06d00     30 6F 02 F6 | 	mov	local02, arg02
06d04     37 5F 02 F6 | 	mov	arg01, local02
06d08     00 70 06 F6 | 	mov	local03, #0
06d0c     00 93 9F FE | 	loc	pa,	#(@LR__0337-@LR__0336)
06d10     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d14                 | LR__0336
06d14     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06d18     01 70 06 51 |  if_ne	add	local03, #1
06d1c     01 5E 06 51 |  if_ne	add	arg01, #1
06d20     F0 FF 9F 5D |  if_ne	jmp	#LR__0336
06d24                 | LR__0337
06d24     38 19 0A F6 | 	mov	result1, local03 wz
06d28     42 00 00 AF 
06d2c     A6 19 06 A6 |  if_e	mov	result1, ##@LR__0454
06d30     4C 00 90 AD |  if_e	jmp	#LR__0339
06d34     00 6C 5E F2 | 	cmps	local01, #0 wcz
06d38     42 00 00 EF 
06d3c     A7 19 06 E6 |  if_be	mov	result1, ##@LR__0455
06d40     3C 00 90 ED |  if_be	jmp	#LR__0339
06d44     36 5F 02 F6 | 	mov	arg01, local01
06d48     02 5E 06 F1 | 	add	arg01, #2
06d4c     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06d50     0C 75 0A F6 | 	mov	local05, result1 wz
06d54     24 00 90 AD |  if_e	jmp	#LR__0338
06d58     37 61 C2 FA | 	rdbyte	arg02, local02
06d5c     3A 5F 02 F6 | 	mov	arg01, local05
06d60     36 63 02 F6 | 	mov	arg03, local01
06d64     A0 00 A0 FD | 	call	#\builtin_bytefill_
06d68     01 6C 06 F1 | 	add	local01, #1
06d6c     3A 6D 02 F1 | 	add	local01, local05
06d70     36 01 48 FC | 	wrbyte	#0, local01
06d74     3A 19 02 F6 | 	mov	result1, local05
06d78     04 00 90 FD | 	jmp	#LR__0339
06d7c                 | LR__0338
06d7c     3A 19 02 F6 | 	mov	result1, local05
06d80                 | LR__0339
06d80     AF F0 03 F6 | 	mov	ptra, fp
06d84     BA 00 A0 FD | 	call	#popregs_
06d88                 | __system__String_S_ret
06d88     2D 00 64 FD | 	ret
06d8c                 | 
06d8c                 | __system___gc_ptrs
06d8c     04 5A 05 F6 | 	mov	COUNT_, #4
06d90     B0 00 A0 FD | 	call	#pushregs_
06d94     F8 6C 02 F6 | 	mov	local01, __heap_ptr
06d98     36 6F 02 F6 | 	mov	local02, local01
06d9c     07 00 00 FF 
06da0     F8 6F 06 F1 | 	add	local02, ##4088
06da4     36 71 0A FB | 	rdlong	local03, local01 wz
06da8     74 00 90 5D |  if_ne	jmp	#LR__0340
06dac     37 73 02 F6 | 	mov	local04, local02
06db0     36 73 82 F1 | 	sub	local04, local01
06db4     36 03 58 FC | 	wrword	#1, local01
06db8     36 71 02 F6 | 	mov	local03, local01
06dbc     02 70 06 F1 | 	add	local03, #2
06dc0     36 00 80 FF 
06dc4     38 21 59 FC | 	wrword	##27792, local03
06dc8     36 71 02 F6 | 	mov	local03, local01
06dcc     04 70 06 F1 | 	add	local03, #4
06dd0     38 01 58 FC | 	wrword	#0, local03
06dd4     36 71 02 F6 | 	mov	local03, local01
06dd8     06 70 06 F1 | 	add	local03, #6
06ddc     38 03 58 FC | 	wrword	#1, local03
06de0     10 6C 06 F1 | 	add	local01, #16
06de4     39 71 52 F6 | 	abs	local03, local04 wc
06de8     04 70 46 F0 | 	shr	local03, #4
06dec     38 71 62 C6 |  if_b	neg	local03, local03
06df0     36 71 52 FC | 	wrword	local03, local01
06df4     36 71 02 F6 | 	mov	local03, local01
06df8     02 70 06 F1 | 	add	local03, #2
06dfc     36 00 80 FF 
06e00     38 1F 59 FC | 	wrword	##27791, local03
06e04     36 71 02 F6 | 	mov	local03, local01
06e08     04 70 06 F1 | 	add	local03, #4
06e0c     38 01 58 FC | 	wrword	#0, local03
06e10     36 71 02 F6 | 	mov	local03, local01
06e14     06 70 06 F1 | 	add	local03, #6
06e18     38 01 58 FC | 	wrword	#0, local03
06e1c     10 6C 86 F1 | 	sub	local01, #16
06e20                 | LR__0340
06e20     37 1B 02 F6 | 	mov	result2, local02
06e24     36 19 02 F6 | 	mov	result1, local01
06e28     AF F0 03 F6 | 	mov	ptra, fp
06e2c     BA 00 A0 FD | 	call	#popregs_
06e30                 | __system___gc_ptrs_ret
06e30     2D 00 64 FD | 	ret
06e34                 | 
06e34                 | __system___gc_nextBlockPtr
06e34     02 5A 05 F6 | 	mov	COUNT_, #2
06e38     B0 00 A0 FD | 	call	#pushregs_
06e3c     2F 6D 02 F6 | 	mov	local01, arg01
06e40     36 6F EA FA | 	rdword	local02, local01 wz
06e44     10 00 90 5D |  if_ne	jmp	#LR__0341
06e48     42 00 00 FF 
06e4c     A8 5F 06 F6 | 	mov	arg01, ##@LR__0456
06e50     F4 01 B0 FD | 	call	#__system___gc_errmsg
06e54     0C 00 90 FD | 	jmp	#LR__0342
06e58                 | LR__0341
06e58     36 19 02 F6 | 	mov	result1, local01
06e5c     04 6E 66 F0 | 	shl	local02, #4
06e60     37 19 02 F1 | 	add	result1, local02
06e64                 | LR__0342
06e64     AF F0 03 F6 | 	mov	ptra, fp
06e68     BA 00 A0 FD | 	call	#popregs_
06e6c                 | __system___gc_nextBlockPtr_ret
06e6c     2D 00 64 FD | 	ret
06e70                 | 
06e70                 | __system___gc_tryalloc
06e70     0D 5A 05 F6 | 	mov	COUNT_, #13
06e74     B0 00 A0 FD | 	call	#pushregs_
06e78     2F 6D 02 F6 | 	mov	local01, arg01
06e7c     30 6F 02 F6 | 	mov	local02, arg02
06e80     08 FF BF FD | 	call	#__system___gc_ptrs
06e84     0C 71 02 F6 | 	mov	local03, result1
06e88     0D 73 02 F6 | 	mov	local04, result2
06e8c     38 75 02 F6 | 	mov	local05, local03
06e90     00 76 06 F6 | 	mov	local06, #0
06e94     B8 91 9F FE | 	loc	pa,	#(@LR__0344-@LR__0343)
06e98     93 00 A0 FD | 	call	#FCACHE_LOAD_
06e9c                 | LR__0343
06e9c     3A 79 02 F6 | 	mov	local07, local05
06ea0     3A 7B 02 F6 | 	mov	local08, local05
06ea4     06 7A 06 F1 | 	add	local08, #6
06ea8     3D 7D E2 FA | 	rdword	local09, local08
06eac     38 5F 02 F6 | 	mov	arg01, local03
06eb0     3E 61 0A F6 | 	mov	arg02, local09 wz
06eb4     00 18 06 A6 |  if_e	mov	result1, #0
06eb8     04 60 66 50 |  if_ne	shl	arg02, #4
06ebc     30 5F 02 51 |  if_ne	add	arg01, arg02
06ec0     2F 19 02 56 |  if_ne	mov	result1, arg01
06ec4     0C 7F 02 F6 | 	mov	local10, result1
06ec8     3F 75 0A F6 | 	mov	local05, local10 wz
06ecc     3A 7F 02 56 |  if_ne	mov	local10, local05
06ed0     3F 77 E2 5A |  if_ne	rdword	local06, local10
06ed4     00 74 0E F2 | 	cmp	local05, #0 wz
06ed8     10 00 90 AD |  if_e	jmp	#LR__0345
06edc     39 75 5A F2 | 	cmps	local05, local04 wcz
06ee0     08 00 90 3D |  if_ae	jmp	#LR__0345
06ee4     3B 6D 5A F2 | 	cmps	local01, local06 wcz
06ee8     B0 FF 9F 1D |  if_a	jmp	#LR__0343
06eec                 | LR__0344
06eec                 | LR__0345
06eec     00 74 0E F2 | 	cmp	local05, #0 wz
06ef0     3A 19 02 A6 |  if_e	mov	result1, local05
06ef4     44 01 90 AD |  if_e	jmp	#LR__0348
06ef8     3A 7F 02 F6 | 	mov	local10, local05
06efc     06 7E 06 F1 | 	add	local10, #6
06f00     3F 81 E2 FA | 	rdword	local11, local10
06f04     3B 6D 5A F2 | 	cmps	local01, local06 wcz
06f08     C0 00 90 3D |  if_ae	jmp	#LR__0347
06f0c     3A 6D 52 FC | 	wrword	local01, local05
06f10     3A 5F 02 F6 | 	mov	arg01, local05
06f14     36 7D 02 F6 | 	mov	local09, local01
06f18     04 7C 66 F0 | 	shl	local09, #4
06f1c     3E 5F 02 F1 | 	add	arg01, local09
06f20     3B 7F 02 F6 | 	mov	local10, local06
06f24     36 7F 82 F1 | 	sub	local10, local01
06f28     2F 7F 52 FC | 	wrword	local10, arg01
06f2c     2F 7F 02 F6 | 	mov	local10, arg01
06f30     02 7E 06 F1 | 	add	local10, #2
06f34     36 00 80 FF 
06f38     3F 1F 59 FC | 	wrword	##27791, local10
06f3c     3A 61 0A F6 | 	mov	arg02, local05 wz
06f40     00 18 06 A6 |  if_e	mov	result1, #0
06f44     38 61 82 51 |  if_ne	sub	arg02, local03
06f48     04 60 46 50 |  if_ne	shr	arg02, #4
06f4c     30 19 02 56 |  if_ne	mov	result1, arg02
06f50     2F 7D 02 F6 | 	mov	local09, arg01
06f54     04 7C 06 F1 | 	add	local09, #4
06f58     3E 19 52 FC | 	wrword	result1, local09
06f5c     3A 7F 02 F6 | 	mov	local10, local05
06f60     06 7E 06 F1 | 	add	local10, #6
06f64     2F 7D 02 F6 | 	mov	local09, arg01
06f68     3F 7B E2 FA | 	rdword	local08, local10
06f6c     06 7C 06 F1 | 	add	local09, #6
06f70     3E 7B 52 FC | 	wrword	local08, local09
06f74     2F 83 02 F6 | 	mov	local12, arg01
06f78     41 61 0A F6 | 	mov	arg02, local12 wz
06f7c     00 18 06 A6 |  if_e	mov	result1, #0
06f80     38 61 82 51 |  if_ne	sub	arg02, local03
06f84     04 60 46 50 |  if_ne	shr	arg02, #4
06f88     30 19 02 56 |  if_ne	mov	result1, arg02
06f8c     0C 81 02 F6 | 	mov	local11, result1
06f90     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
06f94     0C 85 0A F6 | 	mov	local13, result1 wz
06f98     30 00 90 AD |  if_e	jmp	#LR__0346
06f9c     39 85 5A F2 | 	cmps	local13, local04 wcz
06fa0     28 00 90 3D |  if_ae	jmp	#LR__0346
06fa4     38 5F 02 F6 | 	mov	arg01, local03
06fa8     41 61 0A F6 | 	mov	arg02, local12 wz
06fac     00 18 06 A6 |  if_e	mov	result1, #0
06fb0     2F 61 82 51 |  if_ne	sub	arg02, arg01
06fb4     04 60 46 50 |  if_ne	shr	arg02, #4
06fb8     30 19 02 56 |  if_ne	mov	result1, arg02
06fbc     0C 7F 02 F6 | 	mov	local10, result1
06fc0     42 7D 02 F6 | 	mov	local09, local13
06fc4     04 7C 06 F1 | 	add	local09, #4
06fc8     3E 7F 52 FC | 	wrword	local10, local09
06fcc                 | LR__0346
06fcc                 | LR__0347
06fcc     06 78 06 F1 | 	add	local07, #6
06fd0     3C 81 52 FC | 	wrword	local11, local07
06fd4     36 00 00 FF 
06fd8     80 7E 06 F6 | 	mov	local10, ##27776
06fdc     37 7F 42 F5 | 	or	local10, local02
06fe0     00 18 06 F6 | 	mov	result1, #0
06fe4     01 18 62 FD | 	cogid	result1
06fe8     0C 7F 42 F5 | 	or	local10, result1
06fec     3A 7B 02 F6 | 	mov	local08, local05
06ff0     02 7A 06 F1 | 	add	local08, #2
06ff4     3D 7F 52 FC | 	wrword	local10, local08
06ff8     38 7F 02 F6 | 	mov	local10, local03
06ffc     08 7E 06 F1 | 	add	local10, #8
07000     3A 7D 02 F6 | 	mov	local09, local05
07004     3F 7B E2 FA | 	rdword	local08, local10
07008     06 7C 06 F1 | 	add	local09, #6
0700c     3E 7B 52 FC | 	wrword	local08, local09
07010     3A 61 0A F6 | 	mov	arg02, local05 wz
07014     00 18 06 A6 |  if_e	mov	result1, #0
07018     38 61 82 51 |  if_ne	sub	arg02, local03
0701c     04 60 46 50 |  if_ne	shr	arg02, #4
07020     30 19 02 56 |  if_ne	mov	result1, arg02
07024     08 70 06 F1 | 	add	local03, #8
07028     38 19 52 FC | 	wrword	result1, local03
0702c     3A 19 02 F6 | 	mov	result1, local05
07030     08 18 06 F1 | 	add	result1, #8
07034     00 C0 31 FF 
07038     00 18 46 F5 | 	or	result1, ##1669332992
0703c                 | LR__0348
0703c     AF F0 03 F6 | 	mov	ptra, fp
07040     BA 00 A0 FD | 	call	#popregs_
07044                 | __system___gc_tryalloc_ret
07044     2D 00 64 FD | 	ret
07048                 | 
07048                 | __system___gc_errmsg
07048     02 5A 05 F6 | 	mov	COUNT_, #2
0704c     B0 00 A0 FD | 	call	#pushregs_
07050     2F 6D 02 F6 | 	mov	local01, arg01
07054                 | LR__0349
07054     36 6F CA FA | 	rdbyte	local02, local01 wz
07058     01 6C 06 F1 | 	add	local01, #1
0705c     0C 00 90 AD |  if_e	jmp	#LR__0350
07060     37 5F 02 F6 | 	mov	arg01, local02
07064     A0 F3 BF FD | 	call	#__system___tx
07068     E8 FF 9F FD | 	jmp	#LR__0349
0706c                 | LR__0350
0706c     00 18 06 F6 | 	mov	result1, #0
07070     AF F0 03 F6 | 	mov	ptra, fp
07074     BA 00 A0 FD | 	call	#popregs_
07078                 | __system___gc_errmsg_ret
07078     2D 00 64 FD | 	ret
0707c                 | 
0707c                 | __system___gc_alloc_managed
0707c     02 5A 05 F6 | 	mov	COUNT_, #2
07080     B0 00 A0 FD | 	call	#pushregs_
07084     2F 6D 02 F6 | 	mov	local01, arg01
07088     00 60 06 F6 | 	mov	arg02, #0
0708c     30 00 B0 FD | 	call	#__system___gc_doalloc
07090     0C 6F 0A F6 | 	mov	local02, result1 wz
07094     18 00 90 5D |  if_ne	jmp	#LR__0351
07098     00 6C 5E F2 | 	cmps	local01, #0 wcz
0709c     10 00 90 ED |  if_be	jmp	#LR__0351
070a0     42 00 00 FF 
070a4     C4 5F 06 F6 | 	mov	arg01, ##@LR__0457
070a8     9C FF BF FD | 	call	#__system___gc_errmsg
070ac     04 00 90 FD | 	jmp	#LR__0352
070b0                 | LR__0351
070b0     37 19 02 F6 | 	mov	result1, local02
070b4                 | LR__0352
070b4     AF F0 03 F6 | 	mov	ptra, fp
070b8     BA 00 A0 FD | 	call	#popregs_
070bc                 | __system___gc_alloc_managed_ret
070bc     2D 00 64 FD | 	ret
070c0                 | 
070c0                 | __system___gc_doalloc
070c0     06 5A 05 F6 | 	mov	COUNT_, #6
070c4     B0 00 A0 FD | 	call	#pushregs_
070c8     2F 6D 0A F6 | 	mov	local01, arg01 wz
070cc     30 6F 02 F6 | 	mov	local02, arg02
070d0     00 18 06 A6 |  if_e	mov	result1, #0
070d4     94 00 90 AD |  if_e	jmp	#LR__0360
070d8     17 6C 06 F1 | 	add	local01, #23
070dc     0F 6C 26 F5 | 	andn	local01, #15
070e0     04 6C 46 F0 | 	shr	local01, #4
070e4     14 00 06 F1 | 	add	ptr___system__dat__, #20
070e8     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
070ec     14 00 86 F1 | 	sub	ptr___system__dat__, #20
070f0     2C F2 BF FD | 	call	#__system___lockmem
070f4     36 5F 02 F6 | 	mov	arg01, local01
070f8     37 61 02 F6 | 	mov	arg02, local02
070fc     70 FD BF FD | 	call	#__system___gc_tryalloc
07100     0C 71 0A F6 | 	mov	local03, result1 wz
07104     14 00 90 5D |  if_ne	jmp	#LR__0353
07108     24 03 B0 FD | 	call	#__system___gc_docollect
0710c     36 5F 02 F6 | 	mov	arg01, local01
07110     37 61 02 F6 | 	mov	arg02, local02
07114     58 FD BF FD | 	call	#__system___gc_tryalloc
07118     0C 71 02 F6 | 	mov	local03, result1
0711c                 | LR__0353
0711c     14 00 06 F1 | 	add	ptr___system__dat__, #20
07120     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07124     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07128     2F 01 68 FC | 	wrlong	#0, arg01
0712c     00 70 0E F2 | 	cmp	local03, #0 wz
07130     34 00 90 AD |  if_e	jmp	#LR__0359
07134     04 6C 66 F0 | 	shl	local01, #4
07138     08 6C 86 F1 | 	sub	local01, #8
0713c     36 73 52 F6 | 	abs	local04, local01 wc
07140     02 72 46 F0 | 	shr	local04, #2
07144     39 73 62 C6 |  if_b	neg	local04, local04
07148     39 75 0A F6 | 	mov	local05, local04 wz
0714c     38 77 02 F6 | 	mov	local06, local03
07150     14 00 90 AD |  if_e	jmp	#LR__0358
07154     B4 8E 9F FE | 	loc	pa,	#(@LR__0356-@LR__0354)
07158     93 00 A0 FD | 	call	#FCACHE_LOAD_
0715c                 | LR__0354
0715c     3A 05 D8 FC | 	rep	@LR__0357, local05
07160                 | LR__0355
07160     3B 01 68 FC | 	wrlong	#0, local06
07164     04 76 06 F1 | 	add	local06, #4
07168                 | LR__0356
07168                 | LR__0357
07168                 | LR__0358
07168                 | LR__0359
07168     38 19 02 F6 | 	mov	result1, local03
0716c                 | LR__0360
0716c     AF F0 03 F6 | 	mov	ptra, fp
07170     BA 00 A0 FD | 	call	#popregs_
07174                 | __system___gc_doalloc_ret
07174     2D 00 64 FD | 	ret
07178                 | 
07178                 | __system___gc_isvalidptr
07178     31 1F 02 F6 | 	mov	_var01, arg03
0717c     0F 21 02 F6 | 	mov	_var02, _var01
07180     00 F8 7F FF 
07184     00 20 06 F5 | 	and	_var02, ##-1048576
07188     00 C0 31 FF 
0718c     00 20 0E F2 | 	cmp	_var02, ##1669332992 wz
07190     00 18 06 56 |  if_ne	mov	result1, #0
07194     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07198     08 1E 86 F1 | 	sub	_var01, #8
0719c     00 F8 7F FF 
071a0     00 1E 26 F5 | 	andn	_var01, ##-1048576
071a4     2F 1F 5A F2 | 	cmps	_var01, arg01 wcz
071a8     08 00 90 CD |  if_b	jmp	#LR__0361
071ac     30 1F 5A F2 | 	cmps	_var01, arg02 wcz
071b0     08 00 90 CD |  if_b	jmp	#LR__0362
071b4                 | LR__0361
071b4     00 18 06 F6 | 	mov	result1, #0
071b8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
071bc                 | LR__0362
071bc     0F 21 02 F6 | 	mov	_var02, _var01
071c0     2F 21 62 F5 | 	xor	_var02, arg01
071c4     0F 20 0E F5 | 	and	_var02, #15 wz
071c8     00 18 06 56 |  if_ne	mov	result1, #0
071cc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
071d0     0F 21 02 F6 | 	mov	_var02, _var01
071d4     02 20 06 F1 | 	add	_var02, #2
071d8     10 21 E2 FA | 	rdword	_var02, _var02
071dc     7F 00 00 FF 
071e0     C0 21 06 F5 | 	and	_var02, ##65472
071e4     36 00 00 FF 
071e8     80 20 0E F2 | 	cmp	_var02, ##27776 wz
071ec     00 18 06 56 |  if_ne	mov	result1, #0
071f0     0F 19 02 A6 |  if_e	mov	result1, _var01
071f4                 | __system___gc_isvalidptr_ret
071f4     2D 00 64 FD | 	ret
071f8                 | 
071f8                 | __system___gc_dofree
071f8     0D 5A 05 F6 | 	mov	COUNT_, #13
071fc     B0 00 A0 FD | 	call	#pushregs_
07200     2F 6D 02 F6 | 	mov	local01, arg01
07204     84 FB BF FD | 	call	#__system___gc_ptrs
07208     0C 6F 02 F6 | 	mov	local02, result1
0720c     0D 71 02 F6 | 	mov	local03, result2
07210     36 73 02 F6 | 	mov	local04, local01
07214     02 72 06 F1 | 	add	local04, #2
07218     36 00 80 FF 
0721c     39 1F 59 FC | 	wrword	##27791, local04
07220     36 75 02 F6 | 	mov	local05, local01
07224     36 5F 02 F6 | 	mov	arg01, local01
07228     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
0722c     0C 77 02 F6 | 	mov	local06, result1
07230     18 8E 9F FE | 	loc	pa,	#(@LR__0364-@LR__0363)
07234     93 00 A0 FD | 	call	#FCACHE_LOAD_
07238                 | LR__0363
07238     04 74 06 F1 | 	add	local05, #4
0723c     3A 61 EA FA | 	rdword	arg02, local05 wz
07240     37 5F 02 F6 | 	mov	arg01, local02
07244     00 18 06 A6 |  if_e	mov	result1, #0
07248     04 60 66 50 |  if_ne	shl	arg02, #4
0724c     30 5F 02 51 |  if_ne	add	arg01, arg02
07250     2F 19 02 56 |  if_ne	mov	result1, arg01
07254     0C 75 0A F6 | 	mov	local05, result1 wz
07258     28 00 90 AD |  if_e	jmp	#LR__0365
0725c     3A 5F 02 F6 | 	mov	arg01, local05
07260     00 78 06 F6 | 	mov	local07, #0
07264     02 5E 06 F1 | 	add	arg01, #2
07268     2F 7B E2 FA | 	rdword	local08, arg01
0726c     36 00 00 FF 
07270     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07274     01 78 66 A6 |  if_e	neg	local07, #1
07278     3C 19 02 F6 | 	mov	result1, local07
0727c     0C 73 0A F6 | 	mov	local04, result1 wz
07280     B4 FF 9F AD |  if_e	jmp	#LR__0363
07284                 | LR__0364
07284                 | LR__0365
07284     00 74 0E F2 | 	cmp	local05, #0 wz
07288     37 75 02 A6 |  if_e	mov	local05, local02
0728c     3A 73 02 F6 | 	mov	local04, local05
07290     06 72 06 F1 | 	add	local04, #6
07294     36 7D 02 F6 | 	mov	local09, local01
07298     39 7F E2 FA | 	rdword	local10, local04
0729c     06 7C 06 F1 | 	add	local09, #6
072a0     3E 7F 52 FC | 	wrword	local10, local09
072a4     36 61 0A F6 | 	mov	arg02, local01 wz
072a8     00 18 06 A6 |  if_e	mov	result1, #0
072ac     37 61 82 51 |  if_ne	sub	arg02, local02
072b0     04 60 46 50 |  if_ne	shr	arg02, #4
072b4     30 19 02 56 |  if_ne	mov	result1, arg02
072b8     3A 7D 02 F6 | 	mov	local09, local05
072bc     06 7C 06 F1 | 	add	local09, #6
072c0     3E 19 52 FC | 	wrword	result1, local09
072c4     37 75 0A F2 | 	cmp	local05, local02 wz
072c8     84 00 90 AD |  if_e	jmp	#LR__0368
072cc     3A 5F 02 F6 | 	mov	arg01, local05
072d0     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
072d4     36 19 0A F2 | 	cmp	result1, local01 wz
072d8     74 00 90 5D |  if_ne	jmp	#LR__0367
072dc     3A 73 E2 FA | 	rdword	local04, local05
072e0     36 81 E2 FA | 	rdword	local11, local01
072e4     40 73 02 F1 | 	add	local04, local11
072e8     3A 73 52 FC | 	wrword	local04, local05
072ec     36 73 02 F6 | 	mov	local04, local01
072f0     02 72 06 F1 | 	add	local04, #2
072f4     39 01 58 FC | 	wrword	#0, local04
072f8     36 5F 02 F6 | 	mov	arg01, local01
072fc     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
07300     0C 77 02 F6 | 	mov	local06, result1
07304     38 77 5A F2 | 	cmps	local06, local03 wcz
07308     20 00 90 3D |  if_ae	jmp	#LR__0366
0730c     3A 61 0A F6 | 	mov	arg02, local05 wz
07310     00 18 06 A6 |  if_e	mov	result1, #0
07314     37 61 82 51 |  if_ne	sub	arg02, local02
07318     04 60 46 50 |  if_ne	shr	arg02, #4
0731c     30 19 02 56 |  if_ne	mov	result1, arg02
07320     3B 7D 02 F6 | 	mov	local09, local06
07324     04 7C 06 F1 | 	add	local09, #4
07328     3E 19 52 FC | 	wrword	result1, local09
0732c                 | LR__0366
0732c     36 73 02 F6 | 	mov	local04, local01
07330     06 72 06 F1 | 	add	local04, #6
07334     3A 7D 02 F6 | 	mov	local09, local05
07338     39 7F E2 FA | 	rdword	local10, local04
0733c     06 7C 06 F1 | 	add	local09, #6
07340     3E 7F 52 FC | 	wrword	local10, local09
07344     06 6C 06 F1 | 	add	local01, #6
07348     36 01 58 FC | 	wrword	#0, local01
0734c     3A 6D 02 F6 | 	mov	local01, local05
07350                 | LR__0367
07350                 | LR__0368
07350     36 5F 02 F6 | 	mov	arg01, local01
07354     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
07358     0C 83 0A F6 | 	mov	local12, result1 wz
0735c     C0 00 90 AD |  if_e	jmp	#LR__0370
07360     38 83 5A F2 | 	cmps	local12, local03 wcz
07364     B8 00 90 3D |  if_ae	jmp	#LR__0370
07368     41 5F 02 F6 | 	mov	arg01, local12
0736c     00 78 06 F6 | 	mov	local07, #0
07370     02 5E 06 F1 | 	add	arg01, #2
07374     2F 7B E2 FA | 	rdword	local08, arg01
07378     36 00 00 FF 
0737c     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07380     01 78 66 A6 |  if_e	neg	local07, #1
07384     3C 19 0A F6 | 	mov	result1, local07 wz
07388     94 00 90 AD |  if_e	jmp	#LR__0370
0738c     36 75 02 F6 | 	mov	local05, local01
07390     3A 73 E2 FA | 	rdword	local04, local05
07394     41 6D 02 F6 | 	mov	local01, local12
07398     36 81 E2 FA | 	rdword	local11, local01
0739c     40 73 02 F1 | 	add	local04, local11
073a0     3A 85 02 F6 | 	mov	local13, local05
073a4     42 73 52 FC | 	wrword	local04, local13
073a8     36 73 02 F6 | 	mov	local04, local01
073ac     06 72 06 F1 | 	add	local04, #6
073b0     3A 7D 02 F6 | 	mov	local09, local05
073b4     39 7F E2 FA | 	rdword	local10, local04
073b8     06 7C 06 F1 | 	add	local09, #6
073bc     3E 7F 52 FC | 	wrword	local10, local09
073c0     36 73 02 F6 | 	mov	local04, local01
073c4     02 72 06 F1 | 	add	local04, #2
073c8     39 55 59 FC | 	wrword	#170, local04
073cc     36 73 02 F6 | 	mov	local04, local01
073d0     06 72 06 F1 | 	add	local04, #6
073d4     00 7C 06 F6 | 	mov	local09, #0
073d8     39 01 58 FC | 	wrword	#0, local04
073dc     36 5F 02 F6 | 	mov	arg01, local01
073e0     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
073e4     0C 73 02 F6 | 	mov	local04, result1
073e8     39 77 0A F6 | 	mov	local06, local04 wz
073ec     30 00 90 AD |  if_e	jmp	#LR__0369
073f0     38 77 5A F2 | 	cmps	local06, local03 wcz
073f4     28 00 90 3D |  if_ae	jmp	#LR__0369
073f8     37 5F 02 F6 | 	mov	arg01, local02
073fc     3A 61 0A F6 | 	mov	arg02, local05 wz
07400     00 18 06 A6 |  if_e	mov	result1, #0
07404     2F 61 82 51 |  if_ne	sub	arg02, arg01
07408     04 60 46 50 |  if_ne	shr	arg02, #4
0740c     30 19 02 56 |  if_ne	mov	result1, arg02
07410     0C 73 02 F6 | 	mov	local04, result1
07414     3B 7D 02 F6 | 	mov	local09, local06
07418     04 7C 06 F1 | 	add	local09, #4
0741c     3E 73 52 FC | 	wrword	local04, local09
07420                 | LR__0369
07420                 | LR__0370
07420     3B 19 02 F6 | 	mov	result1, local06
07424     AF F0 03 F6 | 	mov	ptra, fp
07428     BA 00 A0 FD | 	call	#popregs_
0742c                 | __system___gc_dofree_ret
0742c     2D 00 64 FD | 	ret
07430                 | 
07430                 | __system___gc_docollect
07430     09 5A 05 F6 | 	mov	COUNT_, #9
07434     B0 00 A0 FD | 	call	#pushregs_
07438     50 F9 BF FD | 	call	#__system___gc_ptrs
0743c     0D 6D 02 F6 | 	mov	local01, result2
07440     0C 6F 02 F6 | 	mov	local02, result1
07444     37 5F 02 F6 | 	mov	arg01, local02
07448     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0744c     0C 71 0A F6 | 	mov	local03, result1 wz
07450     00 18 06 F6 | 	mov	result1, #0
07454     01 18 62 FD | 	cogid	result1
07458     0C 73 02 F6 | 	mov	local04, result1
0745c     34 00 90 AD |  if_e	jmp	#LR__0372
07460                 | LR__0371
07460     36 71 5A F2 | 	cmps	local03, local01 wcz
07464     2C 00 90 3D |  if_ae	jmp	#LR__0372
07468     38 75 02 F6 | 	mov	local05, local03
0746c     02 74 06 F1 | 	add	local05, #2
07470     3A 77 E2 FA | 	rdword	local06, local05
07474     20 76 26 F5 | 	andn	local06, #32
07478     38 79 02 F6 | 	mov	local07, local03
0747c     02 78 06 F1 | 	add	local07, #2
07480     3C 77 52 FC | 	wrword	local06, local07
07484     38 5F 02 F6 | 	mov	arg01, local03
07488     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0748c     0C 71 0A F6 | 	mov	local03, result1 wz
07490     CC FF 9F 5D |  if_ne	jmp	#LR__0371
07494                 | LR__0372
07494     00 76 06 F6 | 	mov	local06, #0
07498     00 5E 06 F6 | 	mov	arg01, #0
0749c     18 EE BF FD | 	call	#__system____topofstack
074a0     0C 61 02 F6 | 	mov	arg02, result1
074a4     3B 5F 02 F6 | 	mov	arg01, local06
074a8     9C 00 B0 FD | 	call	#__system___gc_markhub
074ac     2C 01 B0 FD | 	call	#__system___gc_markcog
074b0     37 5F 02 F6 | 	mov	arg01, local02
074b4     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
074b8     0C 7B 0A F6 | 	mov	local08, result1 wz
074bc     10 00 90 5D |  if_ne	jmp	#LR__0373
074c0     42 00 00 FF 
074c4     E1 5F 06 F6 | 	mov	arg01, ##@LR__0458
074c8     7C FB BF FD | 	call	#__system___gc_errmsg
074cc     6C 00 90 FD | 	jmp	#LR__0379
074d0                 | LR__0373
074d0                 | LR__0374
074d0     3D 71 02 F6 | 	mov	local03, local08
074d4     38 5F 02 F6 | 	mov	arg01, local03
074d8     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
074dc     0C 7B 02 F6 | 	mov	local08, result1
074e0     38 77 02 F6 | 	mov	local06, local03
074e4     02 76 06 F1 | 	add	local06, #2
074e8     3B 7D E2 FA | 	rdword	local09, local06
074ec     20 7C CE F7 | 	test	local09, #32 wz
074f0     38 00 90 5D |  if_ne	jmp	#LR__0377
074f4     3E 75 02 F6 | 	mov	local05, local09
074f8     10 74 0E F5 | 	and	local05, #16 wz
074fc     2C 00 90 5D |  if_ne	jmp	#LR__0377
07500     3E 77 02 F6 | 	mov	local06, local09
07504     0F 76 06 F5 | 	and	local06, #15
07508     3B 7D 02 F6 | 	mov	local09, local06
0750c     39 7D 0A F2 | 	cmp	local09, local04 wz
07510     08 00 90 AD |  if_e	jmp	#LR__0375
07514     0E 7C 0E F2 | 	cmp	local09, #14 wz
07518     10 00 90 5D |  if_ne	jmp	#LR__0376
0751c                 | LR__0375
0751c     38 5F 02 F6 | 	mov	arg01, local03
07520     D4 FC BF FD | 	call	#__system___gc_dofree
07524     0C 77 02 F6 | 	mov	local06, result1
07528     3B 7B 02 F6 | 	mov	local08, local06
0752c                 | LR__0376
0752c                 | LR__0377
0752c     00 7A 0E F2 | 	cmp	local08, #0 wz
07530     08 00 90 AD |  if_e	jmp	#LR__0378
07534     36 7B 5A F2 | 	cmps	local08, local01 wcz
07538     94 FF 9F CD |  if_b	jmp	#LR__0374
0753c                 | LR__0378
0753c                 | LR__0379
0753c     AF F0 03 F6 | 	mov	ptra, fp
07540     BA 00 A0 FD | 	call	#popregs_
07544                 | __system___gc_docollect_ret
07544     2D 00 64 FD | 	ret
07548                 | 
07548                 | __system___gc_markhub
07548     09 5A 05 F6 | 	mov	COUNT_, #9
0754c     B0 00 A0 FD | 	call	#pushregs_
07550     2F 6D 02 F6 | 	mov	local01, arg01
07554     30 6F 02 F6 | 	mov	local02, arg02
07558     30 F8 BF FD | 	call	#__system___gc_ptrs
0755c     0C 71 02 F6 | 	mov	local03, result1
07560     0D 73 02 F6 | 	mov	local04, result2
07564                 | LR__0380
07564     37 6D 5A F2 | 	cmps	local01, local02 wcz
07568     64 00 90 3D |  if_ae	jmp	#LR__0381
0756c     36 63 02 FB | 	rdlong	arg03, local01
07570     04 6C 06 F1 | 	add	local01, #4
07574     39 61 02 F6 | 	mov	arg02, local04
07578     38 5F 02 F6 | 	mov	arg01, local03
0757c     F8 FB BF FD | 	call	#__system___gc_isvalidptr
07580     0C 75 0A F6 | 	mov	local05, result1 wz
07584     DC FF 9F AD |  if_e	jmp	#LR__0380
07588     3A 5F 02 F6 | 	mov	arg01, local05
0758c     00 76 06 F6 | 	mov	local06, #0
07590     02 5E 06 F1 | 	add	arg01, #2
07594     2F 79 E2 FA | 	rdword	local07, arg01
07598     36 00 00 FF 
0759c     8F 78 0E F2 | 	cmp	local07, ##27791 wz
075a0     01 76 66 A6 |  if_e	neg	local06, #1
075a4     3B 19 0A F6 | 	mov	result1, local06 wz
075a8     B8 FF 9F 5D |  if_ne	jmp	#LR__0380
075ac     3A 7B 02 F6 | 	mov	local08, local05
075b0     02 7A 06 F1 | 	add	local08, #2
075b4     3D 7D E2 FA | 	rdword	local09, local08
075b8     0F 7C 26 F5 | 	andn	local09, #15
075bc     2E 7C 46 F5 | 	or	local09, #46
075c0     3A 7B 02 F6 | 	mov	local08, local05
075c4     02 7A 06 F1 | 	add	local08, #2
075c8     3D 7D 52 FC | 	wrword	local09, local08
075cc     94 FF 9F FD | 	jmp	#LR__0380
075d0                 | LR__0381
075d0     AF F0 03 F6 | 	mov	ptra, fp
075d4     BA 00 A0 FD | 	call	#popregs_
075d8                 | __system___gc_markhub_ret
075d8     2D 00 64 FD | 	ret
075dc                 | 
075dc                 | __system___gc_markcog
075dc     06 5A 05 F6 | 	mov	COUNT_, #6
075e0     B0 00 A0 FD | 	call	#pushregs_
075e4     A4 F7 BF FD | 	call	#__system___gc_ptrs
075e8     0C 6D 02 F6 | 	mov	local01, result1
075ec     0D 6F 02 F6 | 	mov	local02, result2
075f0     00 70 06 F6 | 	mov	local03, #0
075f4                 | LR__0382
075f4     F0 73 06 F6 | 	mov	local04, #496
075f8     38 73 82 F1 | 	sub	local04, local03
075fc     F0 73 06 F1 | 	add	local04, #496
07600                 | 	'.live	local04
07600     00 72 96 F9 | 	alts	local04, #0
07604     39 75 02 F6 | 	mov	local05, local04
07608     36 5F 02 F6 | 	mov	arg01, local01
0760c     37 61 02 F6 | 	mov	arg02, local02
07610     3A 63 02 F6 | 	mov	arg03, local05
07614     60 FB BF FD | 	call	#__system___gc_isvalidptr
07618     0C 75 0A F6 | 	mov	local05, result1 wz
0761c     18 00 90 AD |  if_e	jmp	#LR__0383
07620     3A 77 02 F6 | 	mov	local06, local05
07624     02 76 06 F1 | 	add	local06, #2
07628     3B 73 E2 FA | 	rdword	local04, local06
0762c     20 72 46 F5 | 	or	local04, #32
07630     02 74 06 F1 | 	add	local05, #2
07634     3A 73 52 FC | 	wrword	local04, local05
07638                 | LR__0383
07638     01 70 06 F1 | 	add	local03, #1
0763c     F0 71 5E F2 | 	cmps	local03, #496 wcz
07640     B0 FF 9F CD |  if_b	jmp	#LR__0382
07644     AF F0 03 F6 | 	mov	ptra, fp
07648     BA 00 A0 FD | 	call	#popregs_
0764c                 | __system___gc_markcog_ret
0764c     2D 00 64 FD | 	ret
07650                 | 
07650                 | __system__write
07650     03 5A 05 F6 | 	mov	COUNT_, #3
07654     B0 00 A0 FD | 	call	#pushregs_
07658     2F 6D 02 F6 | 	mov	local01, arg01
0765c     30 6F 02 F6 | 	mov	local02, arg02
07660     31 71 02 F6 | 	mov	local03, arg03
07664     0A 6C 1E F2 | 	cmp	local01, #10 wcz
07668     14 00 90 CD |  if_b	jmp	#LR__0384
0766c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07670     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07674     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07678     01 18 66 F6 | 	neg	result1, #1
0767c     28 00 90 FD | 	jmp	#LR__0385
07680                 | LR__0384
07680     36 5F 02 F6 | 	mov	arg01, local01
07684     01 5E 66 F0 | 	shl	arg01, #1
07688     36 5F 02 F1 | 	add	arg01, local01
0768c     04 5E 66 F0 | 	shl	arg01, #4
07690     24 00 06 F1 | 	add	ptr___system__dat__, #36
07694     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
07698     37 61 02 F6 | 	mov	arg02, local02
0769c     38 63 02 F6 | 	mov	arg03, local03
076a0     24 00 86 F1 | 	sub	ptr___system__dat__, #36
076a4     9C 08 B0 FD | 	call	#__system___vfswrite
076a8                 | LR__0385
076a8     AF F0 03 F6 | 	mov	ptra, fp
076ac     BA 00 A0 FD | 	call	#popregs_
076b0                 | __system__write_ret
076b0     2D 00 64 FD | 	ret
076b4                 | 
076b4                 | __system__read
076b4     03 5A 05 F6 | 	mov	COUNT_, #3
076b8     B0 00 A0 FD | 	call	#pushregs_
076bc     2F 6D 02 F6 | 	mov	local01, arg01
076c0     30 6F 02 F6 | 	mov	local02, arg02
076c4     31 71 02 F6 | 	mov	local03, arg03
076c8     0A 6C 1E F2 | 	cmp	local01, #10 wcz
076cc     14 00 90 CD |  if_b	jmp	#LR__0386
076d0     1C 00 06 F1 | 	add	ptr___system__dat__, #28
076d4     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
076d8     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
076dc     01 18 66 F6 | 	neg	result1, #1
076e0     28 00 90 FD | 	jmp	#LR__0387
076e4                 | LR__0386
076e4     36 5F 02 F6 | 	mov	arg01, local01
076e8     01 5E 66 F0 | 	shl	arg01, #1
076ec     36 5F 02 F1 | 	add	arg01, local01
076f0     04 5E 66 F0 | 	shl	arg01, #4
076f4     24 00 06 F1 | 	add	ptr___system__dat__, #36
076f8     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
076fc     37 61 02 F6 | 	mov	arg02, local02
07700     38 63 02 F6 | 	mov	arg03, local03
07704     24 00 86 F1 | 	sub	ptr___system__dat__, #36
07708     E4 09 B0 FD | 	call	#__system___vfsread
0770c                 | LR__0387
0770c     AF F0 03 F6 | 	mov	ptra, fp
07710     BA 00 A0 FD | 	call	#popregs_
07714                 | __system__read_ret
07714     2D 00 64 FD | 	ret
07718                 | 
07718                 | __system__close
07718     01 5A 05 F6 | 	mov	COUNT_, #1
0771c     B0 00 A0 FD | 	call	#pushregs_
07720     2F 6D 02 F6 | 	mov	local01, arg01
07724     0A 6C 1E F2 | 	cmp	local01, #10 wcz
07728     14 00 90 CD |  if_b	jmp	#LR__0388
0772c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07730     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07734     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07738     01 18 66 F6 | 	neg	result1, #1
0773c     20 00 90 FD | 	jmp	#LR__0389
07740                 | LR__0388
07740     36 5F 02 F6 | 	mov	arg01, local01
07744     01 5E 66 F0 | 	shl	arg01, #1
07748     36 5F 02 F1 | 	add	arg01, local01
0774c     04 5E 66 F0 | 	shl	arg01, #4
07750     24 00 06 F1 | 	add	ptr___system__dat__, #36
07754     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
07758     24 00 86 F1 | 	sub	ptr___system__dat__, #36
0775c     6C 03 B0 FD | 	call	#__system___closeraw
07760                 | LR__0389
07760     AF F0 03 F6 | 	mov	ptra, fp
07764     BA 00 A0 FD | 	call	#popregs_
07768                 | __system__close_ret
07768     2D 00 64 FD | 	ret
0776c                 | 
0776c                 | __system__lseek
0776c     09 5A 05 F6 | 	mov	COUNT_, #9
07770     B0 00 A0 FD | 	call	#pushregs_
07774     2F 6D 02 F6 | 	mov	local01, arg01
07778     30 6F 02 F6 | 	mov	local02, arg02
0777c     31 71 02 F6 | 	mov	local03, arg03
07780     0A 6C 1E F2 | 	cmp	local01, #10 wcz
07784     14 00 90 CD |  if_b	jmp	#LR__0390
07788     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0778c     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07790     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07794     01 18 66 F6 | 	neg	result1, #1
07798     C8 00 90 FD | 	jmp	#LR__0394
0779c                 | LR__0390
0779c     36 73 02 F6 | 	mov	local04, local01
077a0     01 72 66 F0 | 	shl	local04, #1
077a4     36 73 02 F1 | 	add	local04, local01
077a8     04 72 66 F0 | 	shl	local04, #4
077ac     24 00 06 F1 | 	add	ptr___system__dat__, #36
077b0     00 73 02 F1 | 	add	local04, ptr___system__dat__
077b4     2C 72 06 F1 | 	add	local04, #44
077b8     39 75 0A FB | 	rdlong	local05, local04 wz
077bc     2C 72 86 F1 | 	sub	local04, #44
077c0     24 00 86 F1 | 	sub	ptr___system__dat__, #36
077c4     14 00 90 5D |  if_ne	jmp	#LR__0391
077c8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
077cc     00 21 68 FC | 	wrlong	#16, ptr___system__dat__
077d0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
077d4     01 18 66 F6 | 	neg	result1, #1
077d8     88 00 90 FD | 	jmp	#LR__0394
077dc                 | LR__0391
077dc     08 72 06 F1 | 	add	local04, #8
077e0     39 75 02 FB | 	rdlong	local05, local04
077e4     08 72 86 F1 | 	sub	local04, #8
077e8     40 74 CE F7 | 	test	local05, #64 wz
077ec     14 00 90 AD |  if_e	jmp	#LR__0392
077f0     08 72 06 F1 | 	add	local04, #8
077f4     39 75 02 FB | 	rdlong	local05, local04
077f8     80 74 46 F5 | 	or	local05, #128
077fc     39 75 62 FC | 	wrlong	local05, local04
07800     08 72 86 F1 | 	sub	local04, #8
07804                 | LR__0392
07804     2C 72 06 F1 | 	add	local04, #44
07808     39 75 02 FB | 	rdlong	local05, local04
0780c     2C 72 86 F1 | 	sub	local04, #44
07810     3A 77 02 FB | 	rdlong	local06, local05
07814     04 74 06 F1 | 	add	local05, #4
07818     3A 79 02 FB | 	rdlong	local07, local05
0781c     39 5F 02 F6 | 	mov	arg01, local04
07820     37 61 02 F6 | 	mov	arg02, local02
07824     38 63 02 F6 | 	mov	arg03, local03
07828     FD 7A 02 F6 | 	mov	local08, objptr
0782c     3B FB 01 F6 | 	mov	objptr, local06
07830     2D 78 62 FD | 	call	local07
07834     3D FB 01 F6 | 	mov	objptr, local08
07838     0C 7D 02 F6 | 	mov	local09, result1
0783c     00 7C 5E F2 | 	cmps	local09, #0 wcz
07840     1C 00 90 3D |  if_ae	jmp	#LR__0393
07844     3E 5F 6A F6 | 	neg	arg01, local09 wz
07848     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0784c     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
07850     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07854     01 18 66 56 |  if_ne	neg	result1, #1
07858     00 18 06 A6 |  if_e	mov	result1, #0
0785c     04 00 90 FD | 	jmp	#LR__0394
07860                 | LR__0393
07860     3E 19 02 F6 | 	mov	result1, local09
07864                 | LR__0394
07864     AF F0 03 F6 | 	mov	ptra, fp
07868     BA 00 A0 FD | 	call	#popregs_
0786c                 | __system__lseek_ret
0786c     2D 00 64 FD | 	ret
07870                 | 
07870                 | __system____getftab
07870     0A 5E 1E F2 | 	cmp	arg01, #10 wcz
07874     00 18 06 36 |  if_ae	mov	result1, #0
07878     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
0787c     2F 19 02 F6 | 	mov	result1, arg01
07880     01 18 66 F0 | 	shl	result1, #1
07884     2F 19 02 F1 | 	add	result1, arg01
07888     04 18 66 F0 | 	shl	result1, #4
0788c     24 00 06 F1 | 	add	ptr___system__dat__, #36
07890     00 19 02 F1 | 	add	result1, ptr___system__dat__
07894     24 00 86 F1 | 	sub	ptr___system__dat__, #36
07898                 | __system____getftab_ret
07898     2D 00 64 FD | 	ret
0789c                 | 
0789c                 | __system___strrev
0789c     2F 1F CA FA | 	rdbyte	_var01, arg01 wz
078a0     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
078a4     2F 21 02 F6 | 	mov	_var02, arg01
078a8     60 87 9F FE | 	loc	pa,	#(@LR__0396-@LR__0395)
078ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
078b0                 | LR__0395
078b0     10 1F CA FA | 	rdbyte	_var01, _var02 wz
078b4     01 20 06 51 |  if_ne	add	_var02, #1
078b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0395
078bc                 | LR__0396
078bc     01 20 86 F1 | 	sub	_var02, #1
078c0                 | LR__0397
078c0     2F 21 5A F2 | 	cmps	_var02, arg01 wcz
078c4     1C 00 90 ED |  if_be	jmp	#LR__0398
078c8     2F 23 C2 FA | 	rdbyte	_var03, arg01
078cc     10 25 C2 FA | 	rdbyte	_var04, _var02
078d0     2F 25 42 FC | 	wrbyte	_var04, arg01
078d4     10 23 42 FC | 	wrbyte	_var03, _var02
078d8     01 5E 06 F1 | 	add	arg01, #1
078dc     01 20 86 F1 | 	sub	_var02, #1
078e0     DC FF 9F FD | 	jmp	#LR__0397
078e4                 | LR__0398
078e4                 | __system___strrev_ret
078e4     2D 00 64 FD | 	ret
078e8                 | 
078e8                 | __system___fmtpad
078e8     0C 5A 05 F6 | 	mov	COUNT_, #12
078ec     B0 00 A0 FD | 	call	#pushregs_
078f0     2F 6D 02 F6 | 	mov	local01, arg01
078f4     30 6F 02 F6 | 	mov	local02, arg02
078f8     32 71 02 F6 | 	mov	local03, arg04
078fc     37 73 EA F8 | 	getbyte	local04, local02, #1
07900     16 6E 46 F0 | 	shr	local02, #22
07904     03 6E 0E F5 | 	and	local02, #3 wz
07908     00 74 06 F6 | 	mov	local05, #0
0790c     01 6E 06 A6 |  if_e	mov	local02, #1
07910     38 6F CA F7 | 	test	local02, local03 wz
07914     00 18 06 A6 |  if_e	mov	result1, #0
07918     84 00 90 AD |  if_e	jmp	#LR__0402
0791c     31 73 82 F1 | 	sub	local04, arg03
07920     39 77 02 F6 | 	mov	local06, local04
07924     00 76 5E F2 | 	cmps	local06, #0 wcz
07928     00 18 06 E6 |  if_be	mov	result1, #0
0792c     70 00 90 ED |  if_be	jmp	#LR__0402
07930     03 6E 0E F2 | 	cmp	local02, #3 wz
07934     18 00 90 5D |  if_ne	jmp	#LR__0399
07938     01 70 0E F2 | 	cmp	local03, #1 wz
0793c     6E 78 62 FD | 	wrz	local07
07940     3C 77 02 F1 | 	add	local06, local07
07944     3B 77 52 F6 | 	abs	local06, local06 wc
07948     01 76 46 F0 | 	shr	local06, #1
0794c     3B 77 62 C6 |  if_b	neg	local06, local06
07950                 | LR__0399
07950     00 7A 06 F6 | 	mov	local08, #0
07954                 | LR__0400
07954     3B 7B 5A F2 | 	cmps	local08, local06 wcz
07958     40 00 90 3D |  if_ae	jmp	#LR__0401
0795c     36 7D 02 F6 | 	mov	local09, local01
07960     3E 79 02 FB | 	rdlong	local07, local09
07964     04 7C 06 F1 | 	add	local09, #4
07968     3E 7F 02 FB | 	rdlong	local10, local09
0796c     20 5E 06 F6 | 	mov	arg01, #32
07970     FD 80 02 F6 | 	mov	local11, objptr
07974     3C FB 01 F6 | 	mov	objptr, local07
07978     2D 7E 62 FD | 	call	local10
0797c     40 FB 01 F6 | 	mov	objptr, local11
07980     0C 83 02 F6 | 	mov	local12, result1
07984     00 82 5E F2 | 	cmps	local12, #0 wcz
07988     41 19 02 C6 |  if_b	mov	result1, local12
0798c     10 00 90 CD |  if_b	jmp	#LR__0402
07990     41 75 02 F1 | 	add	local05, local12
07994     01 7A 06 F1 | 	add	local08, #1
07998     B8 FF 9F FD | 	jmp	#LR__0400
0799c                 | LR__0401
0799c     3A 19 02 F6 | 	mov	result1, local05
079a0                 | LR__0402
079a0     AF F0 03 F6 | 	mov	ptra, fp
079a4     BA 00 A0 FD | 	call	#popregs_
079a8                 | __system___fmtpad_ret
079a8     2D 00 64 FD | 	ret
079ac                 | 
079ac                 | __system___uitoa
079ac     09 5A 05 F6 | 	mov	COUNT_, #9
079b0     B0 00 A0 FD | 	call	#pushregs_
079b4     2F 6D 02 F6 | 	mov	local01, arg01
079b8     30 6F 02 F6 | 	mov	local02, arg02
079bc     31 71 02 F6 | 	mov	local03, arg03
079c0     32 73 02 F6 | 	mov	local04, arg04
079c4     33 75 0A F6 | 	mov	local05, arg05 wz
079c8     36 77 02 F6 | 	mov	local06, local01
079cc     00 78 06 F6 | 	mov	local07, #0
079d0     37 7A 06 56 |  if_ne	mov	local08, #55
079d4     57 7A 06 A6 |  if_e	mov	local08, #87
079d8                 | LR__0403
079d8     37 99 02 F6 | 	mov	muldiva_, local02
079dc     38 9B 02 F6 | 	mov	muldivb_, local03
079e0     C2 00 A0 FD | 	call	#unsdivide_
079e4     4C 7D 02 F6 | 	mov	local09, muldiva_
079e8     0A 7C 1E F2 | 	cmp	local09, #10 wcz
079ec     30 7C 06 C1 |  if_b	add	local09, #48
079f0     3D 7D 02 31 |  if_ae	add	local09, local08
079f4     3B 7D 42 FC | 	wrbyte	local09, local06
079f8     37 99 02 F6 | 	mov	muldiva_, local02
079fc     38 9B 02 F6 | 	mov	muldivb_, local03
07a00     01 76 06 F1 | 	add	local06, #1
07a04     C2 00 A0 FD | 	call	#unsdivide_
07a08     4D 6F 0A F6 | 	mov	local02, muldivb_ wz
07a0c     01 78 06 F1 | 	add	local07, #1
07a10     C4 FF 9F 5D |  if_ne	jmp	#LR__0403
07a14     39 79 1A F2 | 	cmp	local07, local04 wcz
07a18     BC FF 9F CD |  if_b	jmp	#LR__0403
07a1c     3B 01 48 FC | 	wrbyte	#0, local06
07a20     36 5F 02 F6 | 	mov	arg01, local01
07a24     74 FE BF FD | 	call	#__system___strrev
07a28     3C 19 02 F6 | 	mov	result1, local07
07a2c     AF F0 03 F6 | 	mov	ptra, fp
07a30     BA 00 A0 FD | 	call	#popregs_
07a34                 | __system___uitoa_ret
07a34     2D 00 64 FD | 	ret
07a38                 | 
07a38                 | __system___gettxfunc
07a38     03 5A 05 F6 | 	mov	COUNT_, #3
07a3c     B0 00 A0 FD | 	call	#pushregs_
07a40     2C FE BF FD | 	call	#__system____getftab
07a44     0C 6D 0A F6 | 	mov	local01, result1 wz
07a48     14 00 90 AD |  if_e	jmp	#LR__0404
07a4c     08 6C 06 F1 | 	add	local01, #8
07a50     36 6F 02 FB | 	rdlong	local02, local01
07a54     08 6C 86 F1 | 	sub	local01, #8
07a58     37 71 0A F6 | 	mov	local03, local02 wz
07a5c     08 00 90 5D |  if_ne	jmp	#LR__0405
07a60                 | LR__0404
07a60     00 18 06 F6 | 	mov	result1, #0
07a64     0C 00 90 FD | 	jmp	#LR__0406
07a68                 | LR__0405
07a68     FF 60 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07a6c     36 5F 02 F6 | 	mov	arg01, local01
07a70     6C E8 BF FD | 	call	#__system___make_methodptr
07a74                 | LR__0406
07a74     AF F0 03 F6 | 	mov	ptra, fp
07a78     BA 00 A0 FD | 	call	#popregs_
07a7c                 | __system___gettxfunc_ret
07a7c     2D 00 64 FD | 	ret
07a80                 | 
07a80                 | __system___getiolock_0150
07a80     03 5A 05 F6 | 	mov	COUNT_, #3
07a84     B0 00 A0 FD | 	call	#pushregs_
07a88     E4 FD BF FD | 	call	#__system____getftab
07a8c     0C 6D 0A F6 | 	mov	local01, result1 wz
07a90     14 00 90 AD |  if_e	jmp	#LR__0407
07a94     08 6C 06 F1 | 	add	local01, #8
07a98     36 6F 02 FB | 	rdlong	local02, local01
07a9c     08 6C 86 F1 | 	sub	local01, #8
07aa0     37 71 0A F6 | 	mov	local03, local02 wz
07aa4     10 00 90 5D |  if_ne	jmp	#LR__0408
07aa8                 | LR__0407
07aa8     20 00 06 F1 | 	add	ptr___system__dat__, #32
07aac     00 19 02 F6 | 	mov	result1, ptr___system__dat__
07ab0     20 00 86 F1 | 	sub	ptr___system__dat__, #32
07ab4     08 00 90 FD | 	jmp	#LR__0409
07ab8                 | LR__0408
07ab8     0C 6C 06 F1 | 	add	local01, #12
07abc     36 19 02 F6 | 	mov	result1, local01
07ac0                 | LR__0409
07ac0     AF F0 03 F6 | 	mov	ptra, fp
07ac4     BA 00 A0 FD | 	call	#popregs_
07ac8                 | __system___getiolock_0150_ret
07ac8     2D 00 64 FD | 	ret
07acc                 | 
07acc                 | __system___closeraw
07acc     06 5A 05 F6 | 	mov	COUNT_, #6
07ad0     B0 00 A0 FD | 	call	#pushregs_
07ad4     2F 6D 02 F6 | 	mov	local01, arg01
07ad8     00 6E 06 F6 | 	mov	local02, #0
07adc     08 6C 06 F1 | 	add	local01, #8
07ae0     36 71 0A FB | 	rdlong	local03, local01 wz
07ae4     08 6C 86 F1 | 	sub	local01, #8
07ae8     14 00 90 5D |  if_ne	jmp	#LR__0410
07aec     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07af0     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07af4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07af8     01 18 66 F6 | 	neg	result1, #1
07afc     90 00 90 FD | 	jmp	#LR__0413
07b00                 | LR__0410
07b00     28 6C 06 F1 | 	add	local01, #40
07b04     36 71 0A FB | 	rdlong	local03, local01 wz
07b08     28 6C 86 F1 | 	sub	local01, #40
07b0c     2C 00 90 AD |  if_e	jmp	#LR__0411
07b10     28 6C 06 F1 | 	add	local01, #40
07b14     36 71 02 FB | 	rdlong	local03, local01
07b18     28 6C 86 F1 | 	sub	local01, #40
07b1c     38 73 02 FB | 	rdlong	local04, local03
07b20     04 70 06 F1 | 	add	local03, #4
07b24     38 75 02 FB | 	rdlong	local05, local03
07b28     36 5F 02 F6 | 	mov	arg01, local01
07b2c     FD 76 02 F6 | 	mov	local06, objptr
07b30     39 FB 01 F6 | 	mov	objptr, local04
07b34     2D 74 62 FD | 	call	local05
07b38     3B FB 01 F6 | 	mov	objptr, local06
07b3c                 | LR__0411
07b3c     20 6C 06 F1 | 	add	local01, #32
07b40     36 71 0A FB | 	rdlong	local03, local01 wz
07b44     20 6C 86 F1 | 	sub	local01, #32
07b48     30 00 90 AD |  if_e	jmp	#LR__0412
07b4c     20 6C 06 F1 | 	add	local01, #32
07b50     36 71 02 FB | 	rdlong	local03, local01
07b54     20 6C 86 F1 | 	sub	local01, #32
07b58     38 73 02 FB | 	rdlong	local04, local03
07b5c     04 70 06 F1 | 	add	local03, #4
07b60     38 75 02 FB | 	rdlong	local05, local03
07b64     36 5F 02 F6 | 	mov	arg01, local01
07b68     FD 76 02 F6 | 	mov	local06, objptr
07b6c     39 FB 01 F6 | 	mov	objptr, local04
07b70     2D 74 62 FD | 	call	local05
07b74     3B FB 01 F6 | 	mov	objptr, local06
07b78     0C 6F 02 F6 | 	mov	local02, result1
07b7c                 | LR__0412
07b7c     36 5F 02 F6 | 	mov	arg01, local01
07b80     00 60 06 F6 | 	mov	arg02, #0
07b84     30 62 06 F6 | 	mov	arg03, #48
07b88     A0 00 A0 FD | 	call	#\builtin_bytefill_
07b8c     37 19 02 F6 | 	mov	result1, local02
07b90                 | LR__0413
07b90     AF F0 03 F6 | 	mov	ptra, fp
07b94     BA 00 A0 FD | 	call	#popregs_
07b98                 | __system___closeraw_ret
07b98     2D 00 64 FD | 	ret
07b9c                 | 
07b9c                 | __system____default_getc
07b9c     05 5A 05 F6 | 	mov	COUNT_, #5
07ba0     B0 00 A0 FD | 	call	#pushregs_
07ba4     2F 6D 02 F6 | 	mov	local01, arg01
07ba8     36 6F 02 FB | 	rdlong	local02, local01
07bac     08 6E 06 F1 | 	add	local02, #8
07bb0     37 71 02 FB | 	rdlong	local03, local02
07bb4     08 6E 86 F1 | 	sub	local02, #8
07bb8     02 70 CE F7 | 	test	local03, #2 wz
07bbc     08 00 90 AD |  if_e	jmp	#LR__0414
07bc0     36 5F 02 F6 | 	mov	arg01, local01
07bc4     8C 01 B0 FD | 	call	#__system____default_flush
07bc8                 | LR__0414
07bc8     08 6E 06 F1 | 	add	local02, #8
07bcc     37 71 02 FB | 	rdlong	local03, local02
07bd0     01 70 46 F5 | 	or	local03, #1
07bd4     37 71 62 FC | 	wrlong	local03, local02
07bd8     08 6E 86 F1 | 	sub	local02, #8
07bdc     37 73 0A FB | 	rdlong	local04, local02 wz
07be0     0C 00 90 5D |  if_ne	jmp	#LR__0415
07be4     36 5F 02 F6 | 	mov	arg01, local01
07be8     F8 07 B0 FD | 	call	#__system____default_filbuf
07bec     0C 73 02 F6 | 	mov	local04, result1
07bf0                 | LR__0415
07bf0     00 72 5E F2 | 	cmps	local04, #0 wcz
07bf4     01 18 66 E6 |  if_be	neg	result1, #1
07bf8     1C 00 90 ED |  if_be	jmp	#LR__0416
07bfc     01 72 86 F1 | 	sub	local04, #1
07c00     37 73 62 FC | 	wrlong	local04, local02
07c04     04 6E 06 F1 | 	add	local02, #4
07c08     37 75 02 FB | 	rdlong	local05, local02
07c0c     3A 19 C2 FA | 	rdbyte	result1, local05
07c10     01 74 06 F1 | 	add	local05, #1
07c14     37 75 62 FC | 	wrlong	local05, local02
07c18                 | LR__0416
07c18     AF F0 03 F6 | 	mov	ptra, fp
07c1c     BA 00 A0 FD | 	call	#popregs_
07c20                 | __system____default_getc_ret
07c20     2D 00 64 FD | 	ret
07c24                 | 
07c24                 | __system____default_putc
07c24     06 5A 05 F6 | 	mov	COUNT_, #6
07c28     B0 00 A0 FD | 	call	#pushregs_
07c2c     2F 6D 02 F6 | 	mov	local01, arg01
07c30     30 6F 02 F6 | 	mov	local02, arg02
07c34     37 71 02 FB | 	rdlong	local03, local02
07c38     08 70 06 F1 | 	add	local03, #8
07c3c     38 73 02 FB | 	rdlong	local04, local03
07c40     08 70 86 F1 | 	sub	local03, #8
07c44     01 72 CE F7 | 	test	local04, #1 wz
07c48     08 00 90 AD |  if_e	jmp	#LR__0417
07c4c     37 5F 02 F6 | 	mov	arg01, local02
07c50     00 01 B0 FD | 	call	#__system____default_flush
07c54                 | LR__0417
07c54     08 70 06 F1 | 	add	local03, #8
07c58     38 73 02 FB | 	rdlong	local04, local03
07c5c     02 72 46 F5 | 	or	local04, #2
07c60     38 73 62 FC | 	wrlong	local04, local03
07c64     08 70 86 F1 | 	sub	local03, #8
07c68     38 75 02 FB | 	rdlong	local05, local03
07c6c     3A 77 02 F6 | 	mov	local06, local05
07c70     0C 70 06 F1 | 	add	local03, #12
07c74     38 77 02 F1 | 	add	local06, local03
07c78     3B 6D 42 FC | 	wrbyte	local01, local06
07c7c     FF 6C 06 F5 | 	and	local01, #255
07c80     01 74 06 F1 | 	add	local05, #1
07c84     0C 70 86 F1 | 	sub	local03, #12
07c88     38 75 62 FC | 	wrlong	local05, local03
07c8c     02 00 00 FF 
07c90     00 74 0E F2 | 	cmp	local05, ##1024 wz
07c94     10 00 90 5D |  if_ne	jmp	#LR__0418
07c98     37 5F 02 F6 | 	mov	arg01, local02
07c9c     B4 00 B0 FD | 	call	#__system____default_flush
07ca0     00 18 0E F2 | 	cmp	result1, #0 wz
07ca4     01 6C 66 56 |  if_ne	neg	local01, #1
07ca8                 | LR__0418
07ca8     36 19 02 F6 | 	mov	result1, local01
07cac     AF F0 03 F6 | 	mov	ptra, fp
07cb0     BA 00 A0 FD | 	call	#popregs_
07cb4                 | __system____default_putc_ret
07cb4     2D 00 64 FD | 	ret
07cb8                 | 
07cb8                 | __system____default_putc_terminal
07cb8     06 5A 05 F6 | 	mov	COUNT_, #6
07cbc     B0 00 A0 FD | 	call	#pushregs_
07cc0     2F 6D 02 F6 | 	mov	local01, arg01
07cc4     30 6F 02 F6 | 	mov	local02, arg02
07cc8     37 71 02 FB | 	rdlong	local03, local02
07ccc     08 70 06 F1 | 	add	local03, #8
07cd0     38 73 02 FB | 	rdlong	local04, local03
07cd4     08 70 86 F1 | 	sub	local03, #8
07cd8     01 72 CE F7 | 	test	local04, #1 wz
07cdc     08 00 90 AD |  if_e	jmp	#LR__0419
07ce0     37 5F 02 F6 | 	mov	arg01, local02
07ce4     6C 00 B0 FD | 	call	#__system____default_flush
07ce8                 | LR__0419
07ce8     08 70 06 F1 | 	add	local03, #8
07cec     38 73 02 FB | 	rdlong	local04, local03
07cf0     02 72 46 F5 | 	or	local04, #2
07cf4     38 73 62 FC | 	wrlong	local04, local03
07cf8     08 70 86 F1 | 	sub	local03, #8
07cfc     38 75 02 FB | 	rdlong	local05, local03
07d00     3A 77 02 F6 | 	mov	local06, local05
07d04     0C 70 06 F1 | 	add	local03, #12
07d08     38 77 02 F1 | 	add	local06, local03
07d0c     3B 6D 42 FC | 	wrbyte	local01, local06
07d10     FF 6C 06 F5 | 	and	local01, #255
07d14     0C 70 86 F1 | 	sub	local03, #12
07d18     01 74 06 F1 | 	add	local05, #1
07d1c     38 75 62 FC | 	wrlong	local05, local03
07d20     0A 6C 0E F2 | 	cmp	local01, #10 wz
07d24     0C 00 90 AD |  if_e	jmp	#LR__0420
07d28     02 00 00 FF 
07d2c     00 74 0E F2 | 	cmp	local05, ##1024 wz
07d30     10 00 90 5D |  if_ne	jmp	#LR__0421
07d34                 | LR__0420
07d34     37 5F 02 F6 | 	mov	arg01, local02
07d38     18 00 B0 FD | 	call	#__system____default_flush
07d3c     00 18 0E F2 | 	cmp	result1, #0 wz
07d40     01 6C 66 56 |  if_ne	neg	local01, #1
07d44                 | LR__0421
07d44     36 19 02 F6 | 	mov	result1, local01
07d48     AF F0 03 F6 | 	mov	ptra, fp
07d4c     BA 00 A0 FD | 	call	#popregs_
07d50                 | __system____default_putc_terminal_ret
07d50     2D 00 64 FD | 	ret
07d54                 | 
07d54                 | __system____default_flush
07d54     0D 5A 05 F6 | 	mov	COUNT_, #13
07d58     B0 00 A0 FD | 	call	#pushregs_
07d5c     2F 6D 02 F6 | 	mov	local01, arg01
07d60     36 6F 02 FB | 	rdlong	local02, local01
07d64     37 71 02 FB | 	rdlong	local03, local02
07d68     08 6E 06 F1 | 	add	local02, #8
07d6c     37 73 02 FB | 	rdlong	local04, local02
07d70     08 6E 86 F1 | 	sub	local02, #8
07d74     02 72 CE F7 | 	test	local04, #2 wz
07d78     B8 00 90 AD |  if_e	jmp	#LR__0424
07d7c     00 70 5E F2 | 	cmps	local03, #0 wcz
07d80     24 01 90 ED |  if_be	jmp	#LR__0426
07d84     08 6C 06 F1 | 	add	local01, #8
07d88     36 73 02 FB | 	rdlong	local04, local01
07d8c     08 6C 86 F1 | 	sub	local01, #8
07d90     40 72 CE F7 | 	test	local04, #64 wz
07d94     5C 00 90 AD |  if_e	jmp	#LR__0423
07d98     08 6C 06 F1 | 	add	local01, #8
07d9c     36 73 02 FB | 	rdlong	local04, local01
07da0     08 6C 86 F1 | 	sub	local01, #8
07da4     80 72 CE F7 | 	test	local04, #128 wz
07da8     48 00 90 AD |  if_e	jmp	#LR__0422
07dac     2C 6C 06 F1 | 	add	local01, #44
07db0     36 73 02 FB | 	rdlong	local04, local01
07db4     2C 6C 86 F1 | 	sub	local01, #44
07db8     39 75 02 FB | 	rdlong	local05, local04
07dbc     04 72 06 F1 | 	add	local04, #4
07dc0     39 77 02 FB | 	rdlong	local06, local04
07dc4     36 5F 02 F6 | 	mov	arg01, local01
07dc8     00 60 06 F6 | 	mov	arg02, #0
07dcc     02 62 06 F6 | 	mov	arg03, #2
07dd0     FD 78 02 F6 | 	mov	local07, objptr
07dd4     3A FB 01 F6 | 	mov	objptr, local05
07dd8     2D 76 62 FD | 	call	local06
07ddc     3C FB 01 F6 | 	mov	objptr, local07
07de0     08 6C 06 F1 | 	add	local01, #8
07de4     36 73 02 FB | 	rdlong	local04, local01
07de8     80 72 26 F5 | 	andn	local04, #128
07dec     36 73 62 FC | 	wrlong	local04, local01
07df0     08 6C 86 F1 | 	sub	local01, #8
07df4                 | LR__0422
07df4                 | LR__0423
07df4     14 6C 06 F1 | 	add	local01, #20
07df8     36 73 02 FB | 	rdlong	local04, local01
07dfc     14 6C 86 F1 | 	sub	local01, #20
07e00     39 75 02 FB | 	rdlong	local05, local04
07e04     04 72 06 F1 | 	add	local04, #4
07e08     39 77 02 FB | 	rdlong	local06, local04
07e0c     0C 6E 06 F1 | 	add	local02, #12
07e10     37 61 02 F6 | 	mov	arg02, local02
07e14     0C 6E 86 F1 | 	sub	local02, #12
07e18     36 5F 02 F6 | 	mov	arg01, local01
07e1c     38 63 02 F6 | 	mov	arg03, local03
07e20     FD 78 02 F6 | 	mov	local07, objptr
07e24     3A FB 01 F6 | 	mov	objptr, local05
07e28     2D 76 62 FD | 	call	local06
07e2c     3C FB 01 F6 | 	mov	objptr, local07
07e30     74 00 90 FD | 	jmp	#LR__0426
07e34                 | LR__0424
07e34     08 6E 06 F1 | 	add	local02, #8
07e38     37 73 02 FB | 	rdlong	local04, local02
07e3c     08 6E 86 F1 | 	sub	local02, #8
07e40     01 72 CE F7 | 	test	local04, #1 wz
07e44     60 00 90 AD |  if_e	jmp	#LR__0425
07e48     00 70 0E F2 | 	cmp	local03, #0 wz
07e4c     58 00 90 AD |  if_e	jmp	#LR__0425
07e50     2C 6C 06 F1 | 	add	local01, #44
07e54     36 7B 02 FB | 	rdlong	local08, local01
07e58     2C 6C 86 F1 | 	sub	local01, #44
07e5c     3D 73 02 F6 | 	mov	local04, local08
07e60     39 75 02 FB | 	rdlong	local05, local04
07e64     04 72 06 F1 | 	add	local04, #4
07e68     39 7D 02 FB | 	rdlong	local09, local04
07e6c     3E 77 02 F6 | 	mov	local06, local09
07e70     36 7F 02 F6 | 	mov	local10, local01
07e74     38 81 62 F6 | 	neg	local11, local03
07e78     01 82 06 F6 | 	mov	local12, #1
07e7c     3F 5F 02 F6 | 	mov	arg01, local10
07e80     40 61 02 F6 | 	mov	arg02, local11
07e84     01 62 06 F6 | 	mov	arg03, #1
07e88     FD 78 02 F6 | 	mov	local07, objptr
07e8c     3A FB 01 F6 | 	mov	objptr, local05
07e90     2D 76 62 FD | 	call	local06
07e94     3C FB 01 F6 | 	mov	objptr, local07
07e98     0C 73 02 F6 | 	mov	local04, result1
07e9c     39 85 02 F6 | 	mov	local13, local04
07ea0     00 84 5E F2 | 	cmps	local13, #0 wcz
07ea4     38 85 02 36 |  if_ae	mov	local13, local03
07ea8                 | LR__0425
07ea8                 | LR__0426
07ea8     37 01 68 FC | 	wrlong	#0, local02
07eac     04 6E 06 F1 | 	add	local02, #4
07eb0     37 01 68 FC | 	wrlong	#0, local02
07eb4     04 6E 06 F1 | 	add	local02, #4
07eb8     37 01 68 FC | 	wrlong	#0, local02
07ebc     00 18 06 F6 | 	mov	result1, #0
07ec0     AF F0 03 F6 | 	mov	ptra, fp
07ec4     BA 00 A0 FD | 	call	#popregs_
07ec8                 | __system____default_flush_ret
07ec8     2D 00 64 FD | 	ret
07ecc                 | 
07ecc                 | __system___rxtxioctl_0179
07ecc     02 5A 05 F6 | 	mov	COUNT_, #2
07ed0     B0 00 A0 FD | 	call	#pushregs_
07ed4     30 6D 02 F6 | 	mov	local01, arg02
07ed8     31 6F 02 F6 | 	mov	local02, arg03
07edc     00 6D 0E F2 | 	cmp	local01, #256 wz
07ee0     0C 00 90 AD |  if_e	jmp	#LR__0427
07ee4     01 6D 0E F2 | 	cmp	local01, #257 wz
07ee8     1C 00 90 AD |  if_e	jmp	#LR__0428
07eec     30 00 90 FD | 	jmp	#LR__0429
07ef0                 | LR__0427
07ef0     08 00 06 F1 | 	add	ptr___system__dat__, #8
07ef4     00 19 02 FB | 	rdlong	result1, ptr___system__dat__
07ef8     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07efc     37 19 62 FC | 	wrlong	result1, local02
07f00     00 18 06 F6 | 	mov	result1, #0
07f04     28 00 90 FD | 	jmp	#LR__0430
07f08                 | LR__0428
07f08     37 5F 02 FB | 	rdlong	arg01, local02
07f0c     08 00 06 F1 | 	add	ptr___system__dat__, #8
07f10     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
07f14     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07f18     00 18 06 F6 | 	mov	result1, #0
07f1c     10 00 90 FD | 	jmp	#LR__0430
07f20                 | LR__0429
07f20     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07f24     00 15 68 FC | 	wrlong	#10, ptr___system__dat__
07f28     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07f2c     01 18 66 F6 | 	neg	result1, #1
07f30                 | LR__0430
07f30     AF F0 03 F6 | 	mov	ptra, fp
07f34     BA 00 A0 FD | 	call	#popregs_
07f38                 | __system___rxtxioctl_0179_ret
07f38     2D 00 64 FD | 	ret
07f3c                 | 
07f3c                 | __system____dummy_flush_0180
07f3c     00 18 06 F6 | 	mov	result1, #0
07f40                 | __system____dummy_flush_0180_ret
07f40     2D 00 64 FD | 	ret
07f44                 | 
07f44                 | __system___vfswrite
07f44     0B 5A 05 F6 | 	mov	COUNT_, #11
07f48     B0 00 A0 FD | 	call	#pushregs_
07f4c     2F 6D 02 F6 | 	mov	local01, arg01
07f50     30 6F 02 F6 | 	mov	local02, arg02
07f54     31 71 02 F6 | 	mov	local03, arg03
07f58     37 73 02 F6 | 	mov	local04, local02
07f5c     08 6C 06 F1 | 	add	local01, #8
07f60     36 75 02 FB | 	rdlong	local05, local01
07f64     08 6C 86 F1 | 	sub	local01, #8
07f68     02 74 CE F7 | 	test	local05, #2 wz
07f6c     14 00 90 5D |  if_ne	jmp	#LR__0431
07f70     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07f74     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07f78     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07f7c     01 18 66 F6 | 	neg	result1, #1
07f80     60 01 90 FD | 	jmp	#LR__0439
07f84                 | LR__0431
07f84     08 6C 06 F1 | 	add	local01, #8
07f88     36 75 02 FB | 	rdlong	local05, local01
07f8c     08 6C 86 F1 | 	sub	local01, #8
07f90     40 74 CE F7 | 	test	local05, #64 wz
07f94     5C 00 90 AD |  if_e	jmp	#LR__0433
07f98     08 6C 06 F1 | 	add	local01, #8
07f9c     36 75 02 FB | 	rdlong	local05, local01
07fa0     08 6C 86 F1 | 	sub	local01, #8
07fa4     80 74 CE F7 | 	test	local05, #128 wz
07fa8     48 00 90 AD |  if_e	jmp	#LR__0432
07fac     2C 6C 06 F1 | 	add	local01, #44
07fb0     36 75 02 FB | 	rdlong	local05, local01
07fb4     2C 6C 86 F1 | 	sub	local01, #44
07fb8     3A 77 02 FB | 	rdlong	local06, local05
07fbc     04 74 06 F1 | 	add	local05, #4
07fc0     3A 79 02 FB | 	rdlong	local07, local05
07fc4     36 5F 02 F6 | 	mov	arg01, local01
07fc8     00 60 06 F6 | 	mov	arg02, #0
07fcc     02 62 06 F6 | 	mov	arg03, #2
07fd0     FD 7A 02 F6 | 	mov	local08, objptr
07fd4     3B FB 01 F6 | 	mov	objptr, local06
07fd8     2D 78 62 FD | 	call	local07
07fdc     3D FB 01 F6 | 	mov	objptr, local08
07fe0     08 6C 06 F1 | 	add	local01, #8
07fe4     36 75 02 FB | 	rdlong	local05, local01
07fe8     80 74 26 F5 | 	andn	local05, #128
07fec     36 75 62 FC | 	wrlong	local05, local01
07ff0     08 6C 86 F1 | 	sub	local01, #8
07ff4                 | LR__0432
07ff4                 | LR__0433
07ff4     14 6C 06 F1 | 	add	local01, #20
07ff8     36 75 0A FB | 	rdlong	local05, local01 wz
07ffc     14 6C 86 F1 | 	sub	local01, #20
08000     74 00 90 AD |  if_e	jmp	#LR__0435
08004     14 6C 06 F1 | 	add	local01, #20
08008     36 75 02 FB | 	rdlong	local05, local01
0800c     14 6C 86 F1 | 	sub	local01, #20
08010     3A 77 02 FB | 	rdlong	local06, local05
08014     04 74 06 F1 | 	add	local05, #4
08018     3A 79 02 FB | 	rdlong	local07, local05
0801c     37 61 02 F6 | 	mov	arg02, local02
08020     38 63 02 F6 | 	mov	arg03, local03
08024     36 5F 02 F6 | 	mov	arg01, local01
08028     FD 7A 02 F6 | 	mov	local08, objptr
0802c     3B FB 01 F6 | 	mov	objptr, local06
08030     2D 78 62 FD | 	call	local07
08034     3D FB 01 F6 | 	mov	objptr, local08
08038     0C 7D 02 F6 | 	mov	local09, result1
0803c     00 7C 5E F2 | 	cmps	local09, #0 wcz
08040     2C 00 90 3D |  if_ae	jmp	#LR__0434
08044     08 6C 06 F1 | 	add	local01, #8
08048     36 75 02 FB | 	rdlong	local05, local01
0804c     20 74 46 F5 | 	or	local05, #32
08050     36 75 62 FC | 	wrlong	local05, local01
08054     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08058     00 7D 62 FC | 	wrlong	local09, ptr___system__dat__
0805c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08060     00 7C 0E F2 | 	cmp	local09, #0 wz
08064     01 18 66 56 |  if_ne	neg	result1, #1
08068     00 18 06 A6 |  if_e	mov	result1, #0
0806c     74 00 90 FD | 	jmp	#LR__0439
08070                 | LR__0434
08070     3E 19 02 F6 | 	mov	result1, local09
08074     6C 00 90 FD | 	jmp	#LR__0439
08078                 | LR__0435
08078     18 6C 06 F1 | 	add	local01, #24
0807c     36 7F 0A FB | 	rdlong	local10, local01 wz
08080     18 6C 86 F1 | 	sub	local01, #24
08084     14 00 90 5D |  if_ne	jmp	#LR__0436
08088     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0808c     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08090     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08094     01 18 66 F6 | 	neg	result1, #1
08098     48 00 90 FD | 	jmp	#LR__0439
0809c                 | LR__0436
0809c     00 7C 06 F6 | 	mov	local09, #0
080a0                 | LR__0437
080a0     00 70 1E F2 | 	cmp	local03, #0 wcz
080a4     38 00 90 ED |  if_be	jmp	#LR__0438
080a8     3F 75 02 F6 | 	mov	local05, local10
080ac     3A 77 02 FB | 	rdlong	local06, local05
080b0     04 74 06 F1 | 	add	local05, #4
080b4     3A 79 02 FB | 	rdlong	local07, local05
080b8     39 5F C2 FA | 	rdbyte	arg01, local04
080bc     36 61 02 F6 | 	mov	arg02, local01
080c0     FD 80 02 F6 | 	mov	local11, objptr
080c4     3B FB 01 F6 | 	mov	objptr, local06
080c8     01 72 06 F1 | 	add	local04, #1
080cc     2D 78 62 FD | 	call	local07
080d0     40 FB 01 F6 | 	mov	objptr, local11
080d4     0C 7D 02 F1 | 	add	local09, result1
080d8     01 70 86 F1 | 	sub	local03, #1
080dc     C0 FF 9F FD | 	jmp	#LR__0437
080e0                 | LR__0438
080e0     3E 19 02 F6 | 	mov	result1, local09
080e4                 | LR__0439
080e4     AF F0 03 F6 | 	mov	ptra, fp
080e8     BA 00 A0 FD | 	call	#popregs_
080ec                 | __system___vfswrite_ret
080ec     2D 00 64 FD | 	ret
080f0                 | 
080f0                 | __system___vfsread
080f0     0B 5A 05 F6 | 	mov	COUNT_, #11
080f4     B0 00 A0 FD | 	call	#pushregs_
080f8     28 F0 07 F1 | 	add	ptra, #40
080fc     04 5E 05 F1 | 	add	fp, #4
08100     AF 5E 62 FC | 	wrlong	arg01, fp
08104     04 5E 05 F1 | 	add	fp, #4
08108     AF 60 62 FC | 	wrlong	arg02, fp
0810c     04 5E 05 F1 | 	add	fp, #4
08110     AF 62 62 FC | 	wrlong	arg03, fp
08114     04 5E 85 F1 | 	sub	fp, #4
08118     AF 6C 02 FB | 	rdlong	local01, fp
0811c     14 5E 05 F1 | 	add	fp, #20
08120     AF 6C 62 FC | 	wrlong	local01, fp
08124     04 5E 05 F1 | 	add	fp, #4
08128     AF 00 68 FC | 	wrlong	#0, fp
0812c     1C 5E 85 F1 | 	sub	fp, #28
08130     AF 6E 02 FB | 	rdlong	local02, fp
08134     04 5E 85 F1 | 	sub	fp, #4
08138     08 6E 06 F1 | 	add	local02, #8
0813c     37 6D 02 FB | 	rdlong	local01, local02
08140     01 6C CE F7 | 	test	local01, #1 wz
08144     14 00 90 5D |  if_ne	jmp	#LR__0440
08148     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0814c     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08150     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08154     01 18 66 F6 | 	neg	result1, #1
08158     7C 02 90 FD | 	jmp	#LR__0448
0815c                 | LR__0440
0815c     04 5E 05 F1 | 	add	fp, #4
08160     AF 6C 02 FB | 	rdlong	local01, fp
08164     04 5E 85 F1 | 	sub	fp, #4
08168     10 6C 06 F1 | 	add	local01, #16
0816c     36 71 0A FB | 	rdlong	local03, local01 wz
08170     AC 00 90 AD |  if_e	jmp	#LR__0442
08174     04 5E 05 F1 | 	add	fp, #4
08178     AF 72 02 FB | 	rdlong	local04, fp
0817c     10 72 06 F1 | 	add	local04, #16
08180     39 6D 02 FB | 	rdlong	local01, local04
08184     36 6F 02 FB | 	rdlong	local02, local01
08188     04 6C 06 F1 | 	add	local01, #4
0818c     36 71 02 FB | 	rdlong	local03, local01
08190     AF 5E 02 FB | 	rdlong	arg01, fp
08194     04 5E 05 F1 | 	add	fp, #4
08198     AF 60 02 FB | 	rdlong	arg02, fp
0819c     04 5E 05 F1 | 	add	fp, #4
081a0     AF 62 02 FB | 	rdlong	arg03, fp
081a4     0C 5E 85 F1 | 	sub	fp, #12
081a8     FD 74 02 F6 | 	mov	local05, objptr
081ac     37 FB 01 F6 | 	mov	objptr, local02
081b0     2D 70 62 FD | 	call	local03
081b4     3A FB 01 F6 | 	mov	objptr, local05
081b8     10 5E 05 F1 | 	add	fp, #16
081bc     AF 18 62 FC | 	wrlong	result1, fp
081c0     10 5E 85 F1 | 	sub	fp, #16
081c4     00 18 5E F2 | 	cmps	result1, #0 wcz
081c8     44 00 90 3D |  if_ae	jmp	#LR__0441
081cc     04 5E 05 F1 | 	add	fp, #4
081d0     AF 6C 02 FB | 	rdlong	local01, fp
081d4     36 73 02 F6 | 	mov	local04, local01
081d8     08 72 06 F1 | 	add	local04, #8
081dc     39 71 02 FB | 	rdlong	local03, local04
081e0     20 70 46 F5 | 	or	local03, #32
081e4     08 6C 06 F1 | 	add	local01, #8
081e8     36 71 62 FC | 	wrlong	local03, local01
081ec     0C 5E 05 F1 | 	add	fp, #12
081f0     AF 5E 0A FB | 	rdlong	arg01, fp wz
081f4     10 5E 85 F1 | 	sub	fp, #16
081f8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
081fc     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08200     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08204     01 18 66 56 |  if_ne	neg	result1, #1
08208     00 18 06 A6 |  if_e	mov	result1, #0
0820c     C8 01 90 FD | 	jmp	#LR__0448
08210                 | LR__0441
08210     10 5E 05 F1 | 	add	fp, #16
08214     AF 18 02 FB | 	rdlong	result1, fp
08218     10 5E 85 F1 | 	sub	fp, #16
0821c     B8 01 90 FD | 	jmp	#LR__0448
08220                 | LR__0442
08220     04 5E 05 F1 | 	add	fp, #4
08224     AF 6C 02 FB | 	rdlong	local01, fp
08228     1C 6C 06 F1 | 	add	local01, #28
0822c     36 71 02 FB | 	rdlong	local03, local01
08230     14 5E 05 F1 | 	add	fp, #20
08234     AF 70 62 FC | 	wrlong	local03, fp
08238     AF 6C 0A FB | 	rdlong	local01, fp wz
0823c     18 5E 85 F1 | 	sub	fp, #24
08240     14 00 90 5D |  if_ne	jmp	#LR__0443
08244     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08248     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0824c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08250     01 18 66 F6 | 	neg	result1, #1
08254     80 01 90 FD | 	jmp	#LR__0448
08258                 | LR__0443
08258     04 5E 05 F1 | 	add	fp, #4
0825c     AF 6C 02 FB | 	rdlong	local01, fp
08260     04 5E 85 F1 | 	sub	fp, #4
08264     24 6C 06 F1 | 	add	local01, #36
08268     36 71 0A FB | 	rdlong	local03, local01 wz
0826c     94 00 90 AD |  if_e	jmp	#LR__0445
08270     04 5E 05 F1 | 	add	fp, #4
08274     AF 76 02 FB | 	rdlong	local06, fp
08278     3B 73 02 F6 | 	mov	local04, local06
0827c     24 72 06 F1 | 	add	local04, #36
08280     39 79 02 FB | 	rdlong	local07, local04
08284     3C 6D 02 F6 | 	mov	local01, local07
08288     36 6F 02 FB | 	rdlong	local02, local01
0828c     04 6C 06 F1 | 	add	local01, #4
08290     36 7B 02 FB | 	rdlong	local08, local01
08294     3D 71 02 F6 | 	mov	local03, local08
08298     3B 7D 02 F6 | 	mov	local09, local06
0829c     00 7F 06 F6 | 	mov	local10, #256
082a0     20 5E 05 F1 | 	add	fp, #32
082a4     AF 80 02 F6 | 	mov	local11, fp
082a8     3E 5F 02 F6 | 	mov	arg01, local09
082ac     00 61 06 F6 | 	mov	arg02, #256
082b0     40 63 02 F6 | 	mov	arg03, local11
082b4     FD 74 02 F6 | 	mov	local05, objptr
082b8     37 FB 01 F6 | 	mov	objptr, local02
082bc     24 5E 85 F1 | 	sub	fp, #36
082c0     2D 70 62 FD | 	call	local03
082c4     3A FB 01 F6 | 	mov	objptr, local05
082c8     10 5E 05 F1 | 	add	fp, #16
082cc     AF 18 62 FC | 	wrlong	result1, fp
082d0     AF 6E 0A FB | 	rdlong	local02, fp wz
082d4     10 5E 85 F1 | 	sub	fp, #16
082d8     28 00 90 5D |  if_ne	jmp	#LR__0444
082dc     24 5E 05 F1 | 	add	fp, #36
082e0     AF 72 02 FB | 	rdlong	local04, fp
082e4     24 5E 85 F1 | 	sub	fp, #36
082e8     39 71 02 F6 | 	mov	local03, local04
082ec     02 70 0E F5 | 	and	local03, #2 wz
082f0     10 00 90 AD |  if_e	jmp	#LR__0444
082f4     01 6C 06 F6 | 	mov	local01, #1
082f8     20 5E 05 F1 | 	add	fp, #32
082fc     AF 02 68 FC | 	wrlong	#1, fp
08300     20 5E 85 F1 | 	sub	fp, #32
08304                 | LR__0444
08304                 | LR__0445
08304     10 5E 05 F1 | 	add	fp, #16
08308     AF 00 68 FC | 	wrlong	#0, fp
0830c     10 5E 85 F1 | 	sub	fp, #16
08310                 | LR__0446
08310     0C 5E 05 F1 | 	add	fp, #12
08314     AF 6C 02 FB | 	rdlong	local01, fp
08318     0C 5E 85 F1 | 	sub	fp, #12
0831c     00 6C 1E F2 | 	cmp	local01, #0 wcz
08320     A8 00 90 ED |  if_be	jmp	#LR__0447
08324     18 5E 05 F1 | 	add	fp, #24
08328     AF 6C 02 FB | 	rdlong	local01, fp
0832c     36 6F 02 FB | 	rdlong	local02, local01
08330     04 6C 06 F1 | 	add	local01, #4
08334     36 71 02 FB | 	rdlong	local03, local01
08338     14 5E 85 F1 | 	sub	fp, #20
0833c     AF 5E 02 FB | 	rdlong	arg01, fp
08340     04 5E 85 F1 | 	sub	fp, #4
08344     FD 7A 02 F6 | 	mov	local08, objptr
08348     37 FB 01 F6 | 	mov	objptr, local02
0834c     2D 70 62 FD | 	call	local03
08350     3D FB 01 F6 | 	mov	objptr, local08
08354     14 5E 05 F1 | 	add	fp, #20
08358     AF 18 62 FC | 	wrlong	result1, fp
0835c     14 5E 85 F1 | 	sub	fp, #20
08360     00 18 5E F2 | 	cmps	result1, #0 wcz
08364     64 00 90 CD |  if_b	jmp	#LR__0447
08368     1C 5E 05 F1 | 	add	fp, #28
0836c     AF 6C 02 FB | 	rdlong	local01, fp
08370     36 71 02 F6 | 	mov	local03, local01
08374     01 70 06 F1 | 	add	local03, #1
08378     AF 70 62 FC | 	wrlong	local03, fp
0837c     08 5E 85 F1 | 	sub	fp, #8
08380     AF 76 02 FB | 	rdlong	local06, fp
08384     36 77 42 FC | 	wrbyte	local06, local01
08388     04 5E 85 F1 | 	sub	fp, #4
0838c     AF 6C 02 FB | 	rdlong	local01, fp
08390     01 6C 06 F1 | 	add	local01, #1
08394     AF 6C 62 FC | 	wrlong	local01, fp
08398     04 5E 85 F1 | 	sub	fp, #4
0839c     AF 6C 02 FB | 	rdlong	local01, fp
083a0     01 6C 86 F1 | 	sub	local01, #1
083a4     AF 6C 62 FC | 	wrlong	local01, fp
083a8     14 5E 05 F1 | 	add	fp, #20
083ac     AF 6C 0A FB | 	rdlong	local01, fp wz
083b0     20 5E 85 F1 | 	sub	fp, #32
083b4     58 FF 9F AD |  if_e	jmp	#LR__0446
083b8     14 5E 05 F1 | 	add	fp, #20
083bc     AF 70 02 FB | 	rdlong	local03, fp
083c0     14 5E 85 F1 | 	sub	fp, #20
083c4     0A 70 0E F2 | 	cmp	local03, #10 wz
083c8     44 FF 9F 5D |  if_ne	jmp	#LR__0446
083cc                 | LR__0447
083cc     10 5E 05 F1 | 	add	fp, #16
083d0     AF 18 02 FB | 	rdlong	result1, fp
083d4     10 5E 85 F1 | 	sub	fp, #16
083d8                 | LR__0448
083d8     AF F0 03 F6 | 	mov	ptra, fp
083dc     BA 00 A0 FD | 	call	#popregs_
083e0                 | __system___vfsread_ret
083e0     2D 00 64 FD | 	ret
083e4                 | 
083e4                 | __system____default_filbuf
083e4     06 5A 05 F6 | 	mov	COUNT_, #6
083e8     B0 00 A0 FD | 	call	#pushregs_
083ec     2F 6D 02 FB | 	rdlong	local01, arg01
083f0     10 5E 06 F1 | 	add	arg01, #16
083f4     2F 6F 02 FB | 	rdlong	local02, arg01
083f8     10 5E 86 F1 | 	sub	arg01, #16
083fc     37 71 02 FB | 	rdlong	local03, local02
08400     04 6E 06 F1 | 	add	local02, #4
08404     37 73 02 FB | 	rdlong	local04, local02
08408     0C 6C 06 F1 | 	add	local01, #12
0840c     36 61 02 F6 | 	mov	arg02, local01
08410     0C 6C 86 F1 | 	sub	local01, #12
08414     0A 62 C6 F9 | 	decod	arg03, #10
08418     FD 74 02 F6 | 	mov	local05, objptr
0841c     38 FB 01 F6 | 	mov	objptr, local03
08420     2D 72 62 FD | 	call	local04
08424     3A FB 01 F6 | 	mov	objptr, local05
08428     0C 77 02 F6 | 	mov	local06, result1
0842c     00 76 5E F2 | 	cmps	local06, #0 wcz
08430     01 18 66 C6 |  if_b	neg	result1, #1
08434     28 00 90 CD |  if_b	jmp	#LR__0449
08438     36 77 62 FC | 	wrlong	local06, local01
0843c     0C 6C 06 F1 | 	add	local01, #12
08440     36 6F 02 F6 | 	mov	local02, local01
08444     08 6C 86 F1 | 	sub	local01, #8
08448     36 6F 62 FC | 	wrlong	local02, local01
0844c     04 6C 06 F1 | 	add	local01, #4
08450     36 6F 02 FB | 	rdlong	local02, local01
08454     01 6E 46 F5 | 	or	local02, #1
08458     36 6F 62 FC | 	wrlong	local02, local01
0845c     3B 19 02 F6 | 	mov	result1, local06
08460                 | LR__0449
08460     AF F0 03 F6 | 	mov	ptra, fp
08464     BA 00 A0 FD | 	call	#popregs_
08468                 | __system____default_filbuf_ret
08468     2D 00 64 FD | 	ret
0846c                 | 
0846c                 | ' 	
0846c                 | ' 	FUNCTION pfunc(c as integer) as integer
0846c                 | ___strs_cl_pfunc
0846c                 | ' 		if (i < 16) then
0846c     04 FA 05 F1 | 	add	objptr, #4
08470     FD 1E 02 FB | 	rdlong	_var01, objptr
08474     04 FA 85 F1 | 	sub	objptr, #4
08478     10 1E 5E F2 | 	cmps	_var01, #16 wcz
0847c     2C 00 90 3D |  if_ae	jmp	#LR__0450
08480     FD 20 02 FB | 	rdlong	_var02, objptr
08484     04 FA 05 F1 | 	add	objptr, #4
08488     FD 22 02 FB | 	rdlong	_var03, objptr
0848c     10 23 02 F1 | 	add	_var03, _var02
08490     11 5F 42 FC | 	wrbyte	arg01, _var03
08494     FD 1E 02 FB | 	rdlong	_var01, objptr
08498     01 1E 06 F1 | 	add	_var01, #1
0849c     FD 1E 62 FC | 	wrlong	_var01, objptr
084a0     04 FA 85 F1 | 	sub	objptr, #4
084a4                 | ' 			p(i) = c
084a4                 | ' 			i = i+1
084a4                 | ' 			return 1
084a4     01 18 06 F6 | 	mov	result1, #1
084a8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
084ac                 | LR__0450
084ac                 | ' 			return -1
084ac     01 18 66 F6 | 	neg	result1, #1
084b0                 | ___strs_cl_pfunc_ret
084b0     2D 00 64 FD | 	ret
084b4                 | 
084b4                 | __struct__s_vfs_file_t_putchar
084b4     04 5A 05 F6 | 	mov	COUNT_, #4
084b8     B0 00 A0 FD | 	call	#pushregs_
084bc     18 FA 05 F1 | 	add	objptr, #24
084c0     FD 6C 0A FB | 	rdlong	local01, objptr wz
084c4     18 FA 85 F1 | 	sub	objptr, #24
084c8     00 18 06 A6 |  if_e	mov	result1, #0
084cc     3C 00 90 AD |  if_e	jmp	#LR__0451
084d0     18 FA 05 F1 | 	add	objptr, #24
084d4     FD 6C 02 FB | 	rdlong	local01, objptr
084d8     18 FA 85 F1 | 	sub	objptr, #24
084dc     36 6F 02 FB | 	rdlong	local02, local01
084e0     04 6C 06 F1 | 	add	local01, #4
084e4     36 71 02 FB | 	rdlong	local03, local01
084e8     FD 60 02 F6 | 	mov	arg02, objptr
084ec     FD 72 02 F6 | 	mov	local04, objptr
084f0     37 FB 01 F6 | 	mov	objptr, local02
084f4     2D 70 62 FD | 	call	local03
084f8     39 FB 01 F6 | 	mov	objptr, local04
084fc     00 18 5E F2 | 	cmps	result1, #0 wcz
08500     00 6C 06 C6 |  if_b	mov	local01, #0
08504     01 6C 06 36 |  if_ae	mov	local01, #1
08508     36 19 02 F6 | 	mov	result1, local01
0850c                 | LR__0451
0850c     AF F0 03 F6 | 	mov	ptra, fp
08510     BA 00 A0 FD | 	call	#popregs_
08514                 | __struct__s_vfs_file_t_putchar_ret
08514     2D 00 64 FD | 	ret
08518                 | 
08518                 | __struct__s_vfs_file_t_getchar
08518     04 5A 05 F6 | 	mov	COUNT_, #4
0851c     B0 00 A0 FD | 	call	#pushregs_
08520     1C FA 05 F1 | 	add	objptr, #28
08524     FD 6C 0A FB | 	rdlong	local01, objptr wz
08528     1C FA 85 F1 | 	sub	objptr, #28
0852c     01 18 66 A6 |  if_e	neg	result1, #1
08530     2C 00 90 AD |  if_e	jmp	#LR__0452
08534                 | '         return getcf(__this);
08534     1C FA 05 F1 | 	add	objptr, #28
08538     FD 6C 02 FB | 	rdlong	local01, objptr
0853c     1C FA 85 F1 | 	sub	objptr, #28
08540     36 6F 02 FB | 	rdlong	local02, local01
08544     04 6C 06 F1 | 	add	local01, #4
08548     36 71 02 FB | 	rdlong	local03, local01
0854c     FD 5E 02 F6 | 	mov	arg01, objptr
08550     FD 72 02 F6 | 	mov	local04, objptr
08554     37 FB 01 F6 | 	mov	objptr, local02
08558     2D 70 62 FD | 	call	local03
0855c     39 FB 01 F6 | 	mov	objptr, local04
08560                 | LR__0452
08560     AF F0 03 F6 | 	mov	ptra, fp
08564     BA 00 A0 FD | 	call	#popregs_
08568                 | __struct__s_vfs_file_t_getchar_ret
08568     2D 00 64 FD | 	ret
0856c                 | 
0856c                 | __struct___bas_wrap_sender_tx
0856c     04 5A 05 F6 | 	mov	COUNT_, #4
08570     B0 00 A0 FD | 	call	#pushregs_
08574     FD 6C 02 FB | 	rdlong	local01, objptr
08578     36 6F 02 FB | 	rdlong	local02, local01
0857c     04 6C 06 F1 | 	add	local01, #4
08580     36 71 02 FB | 	rdlong	local03, local01
08584     FD 72 02 F6 | 	mov	local04, objptr
08588     37 FB 01 F6 | 	mov	objptr, local02
0858c     2D 70 62 FD | 	call	local03
08590     39 FB 01 F6 | 	mov	objptr, local04
08594     01 18 06 F6 | 	mov	result1, #1
08598     AF F0 03 F6 | 	mov	ptra, fp
0859c     BA 00 A0 FD | 	call	#popregs_
085a0                 | __struct___bas_wrap_sender_tx_ret
085a0     2D 00 64 FD | 	ret
085a4                 | 
085a4                 | LR__0453
085a4     20          | 	byte	" "
085a5     00          | 	byte	0
085a6                 | LR__0454
085a6                 | 	byte	
085a6     00          | 	byte	0
085a7                 | LR__0455
085a7                 | 	byte	
085a7     00          | 	byte	0
085a8                 | LR__0456
085a8     20 21 21 21 
085ac     20 63 6F 72 
085b0     72 75 70 74 
085b4     65 64 20 68 
085b8     65 61 70 3F 
085bc     3F 3F 20 21 
085c0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
085c3     00          | 	byte	0
085c4                 | LR__0457
085c4     20 21 21 21 
085c8     20 6F 75 74 
085cc     20 6F 66 20 
085d0     68 65 61 70 
085d4     20 6D 65 6D 
085d8     6F 72 79 20 
085dc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
085e0     00          | 	byte	0
085e1                 | LR__0458
085e1     20 21 21 21 
085e5     20 63 6F 72 
085e9     72 75 70 74 
085ed     65 64 20 68 
085f1     65 61 70 20 
085f5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
085f9     00          | 	byte	0
085fa                 | LR__0459
085fa     4E 61 6D 65 
085fe     20 20 20 20 
08602     20 20 20 20 
08606     20 20 20 20 
0860a     20 20 20 20 
0860e     20 20 20 6C 
08612     65 6E 20 20 
08616     20 66 74 20 
0861a     76 6F 6C 20 
0861e     72 65 70 20 
08622     20 20 72 2E 
08626     6C 65 6E 20 
0862a     20 20 20 20 
0862e     20 20 20 20 
08632     4E 61 6D 65 
08636     20 20 20 20 
0863a     20 20 20 20 
0863e     20 20 20 20 
08642     20 20 20 20 
08646     20 20 20 6C 
0864a     65 6E 20 20 
0864e     20 66 74 20 
08652     76 6F 6C 20 
08656     72 65 70 20 
0865a     20 20 72 2E 
0865e     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
08662     00          | 	byte	0
08663                 | LR__0460
08663     53          | 	byte	"S"
08664     00          | 	byte	0
08665                 | LR__0461
08665     20 20 20 20 
08669     20 20 20 20 
0866d     20 20 20 20 
08671     20 20 20 20 
08675     20 20 20 20 
08679     20 20       | 	byte	"                      "
0867b     00          | 	byte	0
0867c                 | LR__0462
0867c                 | 	byte	
0867c     00          | 	byte	0
0867d                 | LR__0463
0867d     20          | 	byte	" "
0867e     00          | 	byte	0
0867f                 | LR__0464
0867f     73 61 6D 70 
08683     6C 65 73 20 
08687     6D 6F 64 75 
0868b     6C 65       | 	byte	"samples module"
0868d     00          | 	byte	0
0868e                 | LR__0465
0868e     31 32 33 34 
08692     35 36 37 38 
08696     39 30 31 32 
0869a     33 34 35 36 
0869e     37 38 39 30 
086a2     31 32 33 34 
086a6     35 36 37 38 
086aa     39 30       | 	byte	"123456789012345678901234567890"
086ac     00          | 	byte	0
086ad     00 00 00    | 	alignl
086b0                 | _dat_
086b0     23 23 20 62 
086b4     61 6C 6C 61 
086b8     64 61 20 23 
086bc     23 00 00 00 | module file "/home/pik33/mod/ballada.mod"
086c0     00 00 00 00 
086c4     78 74 64 20 
086c8     2F 20 75 6E 
086cc     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
086d0     28 63 69 61 
086d4     29 00 00 00 
086d8     00 00 0A ED 
086dc     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
086e0     00 87 2A 2A 
086e4     20 31 38 2E 
086e8     30 31 2E 31 
086ec     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
086f0     2A 2A 00 00 
086f4     00 00 00 00 
086f8     09 FE 00 40 
086fc     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
08700     00 00 00 00 
08704     00 00 00 00 
08708     00 00 00 00 
0870c     00 00 00 00 
08710     00 00 00 00 
08714     00 00       | 	byte	$00[22]
08716     05 07 00 40 
0871a     00 00 00 01 
0871e     00 00 00 00 
08722     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08726     00 00 00 00 
0872a     00 00 00 00 
0872e     00 00 00 00 
08732     00 00       | 	byte	$00[14]
08734     03 2A 00 40 
08738     02 C5 00 65 
0873c     00 00 00 00 
08740     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
08744     00 00 00 00 
08748     00 00 00 00 
0874c     00 00 00 00 
08750     00 00       | 	byte	$00[14]
08752     0A 01 00 30 
08756     03 55 06 AC 
0875a     00 00 00 00 
0875e     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
08762     00 00 00 00 
08766     00 00 00 00 
0876a     00 00 00 00 
0876e     00 00       | 	byte	$00[14]
08770     09 AA 00 30 
08774     03 F4 05 B6 
08778     00 00 00 00 
0877c     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
08780     00 00 00 00 
08784     00 00 00 00 
08788     00 00 00 00 
0878c     00 00       | 	byte	$00[14]
0878e     01 E6 00 40 
08792     01 97 00 4F 
08796     00 00 00 00 
0879a     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
0879e     00 00 00 00 
087a2     00 00 00 00 
087a6     00 00 00 00 
087aa     00 00 00 00 
087ae     00 00 00 00 
087b2     00          | 	byte	$00[21]
087b3     01 00 00 00 
087b7     00 00 00 00 
087bb     00 00 00 00 
087bf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087c3     00 00 00 00 
087c7     00 00 00    | 	byte	$00[7]
087ca     08 FB 00 40 
087ce     01 EA 07 11 
087d2     00 00 00 00 
087d6     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
087da     00 00 00 00 
087de     00 00 00 00 
087e2     00 00 00 00 
087e6     00 00       | 	byte	$00[14]
087e8     04 5E 00 40 
087ec     00 00 00 01 
087f0     00 00 00 00 
087f4     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
087f8     00 00 00 00 
087fc     00 00 00 00 
08800     00 00 00 00 
08804     00 00       | 	byte	$00[14]
08806     08 EC 00 40 
0880a     03 5C 05 90 
0880e     00 00 00 00 
08812     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
08816     00 00 00 00 
0881a     00 00 00 00 
0881e     00 00 00 00 
08822     00 00 00 00 
08826     00 00 00 00 
0882a     00          | 	byte	$00[21]
0882b     01 00 00 00 
0882f     00 00 00 00 
08833     00 00 00 00 
08837     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0883b     00 00 00 00 
0883f     00 00 00    | 	byte	$00[7]
08842     07 0E 00 30 
08846     00 00 00 01 
0884a     00 00 00 00 
0884e     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08852     00 00 00 00 
08856     00 00 00 00 
0885a     00 00 00 00 
0885e     00 00 00 00 
08862     00 00 00 00 
08866     00          | 	byte	$00[21]
08867     01 00 00 00 
0886b     00 00 00 00 
0886f     00 00 00 00 
08873     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08877     00 00 00 00 
0887b     00 00 00 00 
0887f     00 00 00 00 
08883     00 00       | 	byte	$00[14]
08885     01 00 00 00 
08889     00 00 00 00 
0888d     00 00 00 00 
08891     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08895     00 00 00 00 
08899     00 00 00 00 
0889d     00 00 00 00 
088a1     00 00       | 	byte	$00[14]
088a3     01 00 00 00 
088a7     00 00 00 00 
088ab     00 00 00 00 
088af     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088b3     00 00 00 00 
088b7     00 00 00 00 
088bb     00 00 00 00 
088bf     00 00       | 	byte	$00[14]
088c1     01 00 00 00 
088c5     00 00 00 00 
088c9     00 00 00 00 
088cd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088d1     00 00 00 00 
088d5     00 00 00 00 
088d9     00 00 00 00 
088dd     00 00       | 	byte	$00[14]
088df     01 00 00 00 
088e3     00 00 00 00 
088e7     00 00 00 00 
088eb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088ef     00 00 00 00 
088f3     00 00 00 00 
088f7     00 00 00 00 
088fb     00 00       | 	byte	$00[14]
088fd     01 00 00 00 
08901     00 00 00 00 
08905     00 00 00 00 
08909     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0890d     00 00 00 00 
08911     00 00 00 00 
08915     00 00 00 00 
08919     00 00       | 	byte	$00[14]
0891b     01 00 00 00 
0891f     00 00 00 00 
08923     00 00 00 00 
08927     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0892b     00 00 00 00 
0892f     00 00 00 00 
08933     00 00 00 00 
08937     00 00       | 	byte	$00[14]
08939     01 00 00 00 
0893d     00 00 00 00 
08941     00 00 00 00 
08945     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08949     00 00 00 00 
0894d     00 00 00 00 
08951     00 00 00 00 
08955     00 00       | 	byte	$00[14]
08957     01 00 00 00 
0895b     00 00 00 00 
0895f     00 00 00 00 
08963     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08967     00 00 00 00 
0896b     00 00 00 00 
0896f     00 00 00 00 
08973     00 00       | 	byte	$00[14]
08975     01 00 00 00 
08979     00 00 00 00 
0897d     00 00 00 00 
08981     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08985     00 00 00 00 
08989     00 00 00 00 
0898d     00 00 00 00 
08991     00 00       | 	byte	$00[14]
08993     01 00 00 00 
08997     00 00 00 00 
0899b     00 00 00 00 
0899f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089a3     00 00 00 00 
089a7     00 00 00 00 
089ab     00 00 00 00 
089af     00 00       | 	byte	$00[14]
089b1     01 00 00 00 
089b5     00 00 00 00 
089b9     00 00 00 00 
089bd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089c1     00 00 00 00 
089c5     00 00 00 00 
089c9     00 00 00 00 
089cd     00 00       | 	byte	$00[14]
089cf     01 00 00 00 
089d3     00 00 00 00 
089d7     00 00 00 00 
089db     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089df     00 00 00 00 
089e3     00 00 00 00 
089e7     00 00 00 00 
089eb     00 00       | 	byte	$00[14]
089ed     01 00 00 00 
089f1     00 00 00 00 
089f5     00 00 00 00 
089f9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089fd     00 00 00 00 
08a01     00 00 00 00 
08a05     00 00 00 00 
08a09     00 00       | 	byte	$00[14]
08a0b     01 00 00 00 
08a0f     00 00 00 00 
08a13     00 00 00 00 
08a17     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a1b     00 00 00 00 
08a1f     00 00 00 00 
08a23     00 00 00 00 
08a27     00 00       | 	byte	$00[14]
08a29     01 00 00 00 
08a2d     00 00 00 00 
08a31     00 00 00 00 
08a35     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a39     00 00 00 00 
08a3d     00 00 00 00 
08a41     00 00 00 00 
08a45     00 00       | 	byte	$00[14]
08a47     01 00 00 00 
08a4b     00 00 00 00 
08a4f     00 00 00 00 
08a53     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a57     00 00 00 00 
08a5b     00 00 00 00 
08a5f     00 00 00 00 
08a63     00 00       | 	byte	$00[14]
08a65     01 19 7F 00 
08a69     01 02 04 03 
08a6d     05 06 07 03 
08a71     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
08a75     0C 0D 0E 0F 
08a79     0C 0D 10 11 
08a7d     12 14 12 13 
08a81     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
08a85     00 00 00 00 
      ...             
08ae1     00 00 00 00 
08ae5     00 00 00    | 	byte	$00[99]
08ae8     4D 2E 4B 2E 
08aec     01 7D 1C 10 
08af0     00 00 0F 05 
08af4     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
08af8     00 00 0C 00 
08afc     00 00 00 00 
08b00     00 00 0C 00 
08b04     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
08b08     00 00 00 00 
      ...             
08b30     00 00 00 00 
08b34     00 00 00 00 | 	byte	$00[48]
08b38     01 7D 1C 10 
08b3c     01 53 1C 18 
08b40     00 00 00 00 
08b44     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
08b48     00 00 00 00 
08b4c     00 00       | 	byte	$00[6]
08b4e     0C 10 00 00 
08b52     00 00 00 00 
08b56     00 00 01 40 
08b5a     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
08b5e     00 00 00 00 
08b62     00 00 00 00 
08b66     00 00 00 00 
08b6a     00 00 00    | 	byte	$00[15]
08b6d     FE 1C 30 00 
08b71     00 00 00 00 
08b75     00 00 00 00 
08b79     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
08b7d     00 00 00 00 
08b81     00 00 00 00 
08b85     00 00 00 00 
08b89     00 00 00 00 
08b8d     00          | 	byte	$00[17]
08b8e     0C 20 00 00 
08b92     00 00 00 00 
08b96     00 00 01 1D 
08b9a     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
08b9e     00 00 00 00 
08ba2     00 00 00 00 
08ba6     00 00 00 00 
08baa     00 00 00    | 	byte	$00[15]
08bad     BE 10 00 00 
08bb1     00 00 00 00 
08bb5     00 00 00 01 
08bb9     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
08bbd     00 00 00 00 
08bc1     00 00 00 00 
08bc5     00 00 00 00 
08bc9     00 00 00 00 | 	byte	$00[16]
08bcd     BE 1A 06 00 
08bd1     00 00 00 00 
08bd5     00 00 00 00 
08bd9     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bdd     A0 0E 93 00 
08be1     00 00 00 00 
08be5     00 00 00 00 
08be9     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bed     7F 10 00 00 
08bf1     00 00 00 00 
08bf5     00 00 00 00 
08bf9     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bfd     00 00 00 00 
08c01     00 00 00 00 
08c05     00 00 00 00 | 	byte	$00[12]
08c09     BE 1C 20 00 
08c0d     8F 10 00 00 
08c11     00 00 00 00 
08c15     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c19     AC 1C 30 00 
08c1d     00 00 00 00 
08c21     00 00 00 00 
08c25     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c29     00 00 00 00 
08c2d     A0 0E 93 00 
08c31     00 00 00 00 
08c35     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c39     00 00 00 00 
08c3d     A0 10 00 00 
08c41     00 00 00 00 
08c45     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c49     00 00 00 00 
08c4d     AA 10 00 00 
08c51     00 00 00 00 
08c55     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c59     00 00 00 00 
08c5d     00          | 	byte	$00[5]
08c5e     0A 06 00 00 
08c62     00 00 00 00 
08c66     00 00 00 00 
08c6a     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08c6e     10 00 00 00 
08c72     00 00 00 00 
08c76     00 00 01 7D 
08c7a     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08c7e     00 00 00 00 
08c82     00 00 00 00 
08c86     00 00 00 00 
08c8a     00 00 00    | 	byte	$00[15]
08c8d     FE 10 00 00 
08c91     00 00 00 00 
08c95     00 00 00 00 
08c99     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c9d     00 00 00 00 
08ca1     00 00 00 00 
08ca5     00 00 00 00 
08ca9     00 00 00 00 
08cad     00 00 00 00 
08cb1     00 00 00 00 
08cb5     00 00 00 00 | 	byte	$00[28]
08cb9     BE 10 00 00 
08cbd     FE 1C 20 00 
08cc1     00 00 00 00 
08cc5     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cc9     00 00 00 00 
08ccd     AA 10 00 00 
08cd1     00 00 00 00 
08cd5     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08cd9     AC 10 00 00 
08cdd     00 00 00 00 
08ce1     00 00 00 00 
08ce5     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ce9     00 00 00 00 
08ced     D6 10 00 00 
08cf1     00 00 00 00 
08cf5     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cf9     00 00 00 00 
      ...             
08d11     00 00 00 00 
08d15     00 00 00 00 | 	byte	$00[32]
08d19     AA 10 00 00 
08d1d     00 00 00 00 
08d21     00 00 00 00 
08d25     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d29     00 00 00 00 
08d2d     A0 10 00 00 
08d31     00 00 00 00 
08d35     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08d39     E0 1C 30 00 
08d3d     00 00 00 00 
08d41     00 00 00 00 
08d45     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d49     00 00 00 00 
08d4d     AA 10 00 00 
08d51     00 00 00 00 
08d55     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d59     00 00 00 00 
08d5d     00 00 00 00 
08d61     00 00 00 00 
08d65     00 00 00 00 | 	byte	$00[16]
08d69     BE 10 00 00 
08d6d     AA 10 00 00 
08d71     00 00 00 00 
08d75     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08d79     AC 10 00 00 
08d7d     00 00 00 00 
08d81     00 00 00 00 
08d85     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08d89     00 00 00 00 
08d8d     BE 14 C1 00 
08d91     00 00 00 00 
08d95     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
08d99     7D 10 00 00 
08d9d     00 06 02 00 
08da1     00 00 00 00 
08da5     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08da9     00 0A 02 00 
08dad     00 06 02 00 
08db1     00 00 00 00 
08db5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08db9     00 0A 02 00 
08dbd     00 06 02 00 
08dc1     00 00 00 00 
08dc5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dc9     00 0A 02 00 
08dcd     A0 10 00 00 
08dd1     00 00 00 00 
08dd5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08dd9     00 0A 02 00 
08ddd     8F 1D 01 00 
08de1     00 00 00 00 
08de5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
08de9     00 0A 02 00 
08ded     00 00 00 00 
08df1     00 00 00 00 
08df5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08df9     00 00 00 00 
      ...             
08ee9     00 00 00 00 
08eed     00          | 	byte	$00[245]
08eee     0B 01 00 00 
08ef2     00 00 00 00 
08ef6     00 00 00 00 
08efa     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08efe     1F 05 00 BE 
08f02     2A 02 00 00 
08f06     00 00 01 7D 
08f0a     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08f0e     00 00 00 00 
08f12     0A 02 00 00 
08f16     00 00 00 00 
08f1a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08f1e     10 00 00 00 
08f22     0A 02 00 00 
08f26     00 00 00 00 
08f2a     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08f2e     1C 20 00 00 
08f32     0A 02 00 00 
08f36     00 00 00 00 
08f3a     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08f3e     10 00 00 BE 
08f42     0A 02 00 00 
08f46     00 00 00 00 
08f4a     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08f4e     00 00 00 00 
08f52     0A 02 00 00 
08f56     00 00 00 00 
08f5a     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
08f5e     40 00 00 F0 
08f62     2A 02 00 00 
08f66     00 00 01 E0 
08f6a     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
08f6e     00 00 00 00 
08f72     0A 02 00 00 
08f76     00 00 00 00 
08f7a     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
08f7e     4A 06 00 00 
08f82     0A 02 00 00 
08f86     00 00 00 00 
08f8a     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08f8e     0E 93 00 00 
08f92     0A 02 00 00 
08f96     00 00 00 00 
08f9a     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08f9e     40 00 00 00 
08fa2     0A 02 00 00 
08fa6     00 00 00 00 
08faa     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08fae     00 00 00 00 
08fb2     0A 02 00 00 
08fb6     00 00 00 F0 
08fba     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
08fbe     10 00 00 BE 
08fc2     2A 02 00 00 
08fc6     00 00 01 7D 
08fca     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08fce     00 00 00 00 
08fd2     0A 02 00 00 
08fd6     00 00 00 00 
08fda     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08fde     10 00 00 00 
08fe2     0A 02 00 00 
08fe6     00 00 00 00 
08fea     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08fee     1C 20 00 00 
08ff2     0A 02 00 00 
08ff6     00 00 00 00 
08ffa     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08ffe     10 00 00 BE 
09002     00 00 00 00 
09006     00 00 01 7D 
0900a     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
0900e     1C 30 00 BE 
09012     0E 93 00 00 
09016     00 00 00 00 
0901a     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0901e     10 00 00 D6 
09022     2A 02 00 00 
09026     00 00 01 AC 
0902a     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
0902e     1C 30 00 00 
09032     0A 02 00 00 
09036     00 00 00 00 
0903a     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0903e     10 00 00 00 
09042     0A 02 00 00 
09046     00 00 00 00 
0904a     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0904e     10 00 00 D6 
09052     2C 20 00 00 
09056     00 00 00 00 
0905a     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0905e     10 00 00 D6 
09062     2A 04 00 00 
09066     00 00 00 00 
0906a     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0906e     00 00 00 00 
09072     0A 04 00 00 
09076     00 00 00 00 
0907a     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
0907e     10 00 00 F0 
09082     2A 02 00 00 
09086     00 00 01 E0 
0908a     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
0908e     0C 20 00 00 
09092     0A 02 00 00 
09096     00 00 00 00 
0909a     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0909e     0E 93 00 00 
090a2     0A 02 00 00 
090a6     00 00 00 00 
090aa     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
090ae     1C 20 00 00 
090b2     0A 02 00 00 
090b6     00 00 00 F0 
090ba     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
090be     10 00 00 F0 
090c2     2A 02 00 00 
090c6     00 00 00 00 
090ca     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090ce     00 00 00 00 
090d2     0A 02 00 00 
090d6     00 00 00 00 
090da     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
090de     10 00 00 D6 
090e2     2A 01 00 00 
090e6     00 00 01 AC 
090ea     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
090ee     0C 20 00 00 
090f2     0A 01 00 00 
090f6     00 00 00 00 
090fa     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
090fe     0E 93 00 00 
09102     0A 01 00 00 
09106     00 00 00 00 
0910a     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0910e     10 00 00 00 
09112     0A 01 00 00 
09116     00 00 00 00 
0911a     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0911e     10 00 00 00 
09122     0A 01 00 00 
09126     00 00 01 AC 
0912a     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0912e     1C 20 00 00 
09132     0A 01 00 00 
09136     00 00 00 00 
0913a     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0913e     10 00 00 BE 
09142     2A 01 00 00 
09146     00 00 01 7D 
0914a     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0914e     00 00 00 00 
09152     0A 01 00 00 
09156     00 00 00 00 
0915a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0915e     10 00 01 7D 
09162     2A 01 00 00 
09166     00 00 00 00 
0916a     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0916e     00 00 00 D6 
09172     2C 38 00 00 
09176     00 00 01 AC 
0917a     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0917e     10 00 00 00 
09182     0A 06 00 00 
09186     00 00 00 00 
0918a     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0918e     00 00 00 D6 
09192     0E 93 00 00 
09196     00 00 00 00 
0919a     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0919e     10 00 00 BE 
091a2     2C 30 00 00 
091a6     00 00 01 7D 
091aa     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
091ae     00 00 00 00 
091b2     0A 02 00 00 
091b6     00 00 00 00 
091ba     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091be     00 00 00 00 
091c2     0A 02 00 00 
091c6     00 00 00 00 
091ca     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091ce     00 00 00 00 
091d2     0A 02 00 00 
091d6     00 00 00 00 
091da     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
091de     10 00 00 00 
091e2     0A 02 00 00 
091e6     00 00 00 00 
091ea     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
091ee     1D 00 00 00 
091f2     0A 02 00 00 
091f6     00 00 00 00 
091fa     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091fe     00 00 00 00 
      ...             
092e6     00 00 00 00 
092ea     00 00 00    | 	byte	$00[239]
092ed     7F 1F 05 00 
092f1     BE 2A 02 00 
092f5     00 00 00 01 
092f9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
092fd     00 00 00 00 
09301     00          | 	byte	$00[5]
09302     0A 02 00 00 
09306     00 00 00 00 
0930a     00 00 00 A0 
0930e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09312     0A 02 00 00 
09316     00 00 00 00 
0931a     00 00 00 7F 
0931e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09322     0A 02 00 00 
09326     00 00 00 00 
0932a     00 00 00 BE 
0932e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09332     0A 02 00 00 
09336     00 00 00 00 
0933a     0A 02 00 00 
0933e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09342     0A 02 00 00 
09346     00 00 00 00 
0934a     0A 02 00 F0 
0934e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09352     2A 02 00 00 
09356     00 00 01 E0 
0935a     10 00 00 00 
0935e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09362     0A 02 00 00 
09366     00 00 00 00 
0936a     00 00 00 D6 
0936e     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09372     0A 02 00 00 
09376     00 00 00 00 
0937a     00 00 00 F0 
0937e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09382     0A 02 00 00 
09386     00 00 00 00 
0938a     00 00 00 F0 
0938e     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09392     0A 02 00 00 
09396     00 00 00 00 
0939a     0A 02 00 00 
0939e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
093a2     0A 02 00 00 
093a6     00 00 00 F0 
093aa     1A 02 00 7F 
093ae     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
093b2     2A 02 00 00 
093b6     00 00 01 7D 
093ba     10 00 00 00 
093be     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
093c2     0A 02 00 00 
093c6     00 00 00 00 
093ca     00 00 00 A0 
093ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
093d2     0A 02 00 00 
093d6     00 00 00 00 
093da     00 00 00 7F 
093de     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
093e2     0A 02 00 00 
093e6     00 00 00 00 
093ea     00 00 00 BE 
093ee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
093f2     00 00 00 00 
093f6     00 00       | 	byte	$00[6]
093f8     01 7D 10 00 
093fc     00 AA 1C 30 
09400     00 BE 0E 93 
09404     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09408     00 00 00 00 
0940c     00          | 	byte	$00[5]
0940d     A0 10 00 00 
09411     D6 2A 02 00 
09415     00 00 00 01 
09419     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
0941d     A0 1C 30 00 
09421     00 0A 02 00 
09425     00 00 00 00 
09429     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0942d     AA 10 00 00 
09431     00 0A 02 00 
09435     00 00 00 00 
09439     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0943d     BE 10 00 00 
09441     D6 2C 20 00 
09445     00 00 00 00 
09449     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0944d     AA 10 00 00 
09451     D6 2A 04 00 
09455     00 00 00 00 
09459     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0945d     00 00 00 00 
09461     00          | 	byte	$00[5]
09462     0A 04 00 00 
09466     00 00 00 00 
0946a     0A 02 00 A0 
0946e     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09472     2A 02 00 00 
09476     00 00 01 E0 
0947a     10 00 00 00 
0947e     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09482     0A 02 00 00 
09486     00 00 00 00 
0948a     00 00 00 A0 
0948e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09492     0A 02 00 00 
09496     00 00 00 00 
0949a     00 00 00 A0 
0949e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
094a2     0A 02 00 00 
094a6     00 00 00 F0 
094aa     10 00 00 A0 
094ae     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
094b2     2A 02 00 00 
094b6     00 00 00 00 
094ba     00 00 00 00 
094be     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094c2     0A 02 00 00 
094c6     00 00 00 00 
094ca     00 00 00 8F 
094ce     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
094d2     2A 01 00 00 
094d6     00 00 01 AC 
094da     10 00 00 00 
094de     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
094e2     0A 01 00 00 
094e6     00 00 00 00 
094ea     00 00 00 8F 
094ee     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
094f2     0A 01 00 00 
094f6     00 00 00 00 
094fa     00 00 00 A0 
094fe     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09502     0A 01 00 00 
09506     00 00 00 00 
0950a     00 00 00 8F 
0950e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09512     0A 01 00 00 
09516     00 00 01 AC 
0951a     10 00 00 00 
0951e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09522     0A 01 00 00 
09526     00 00 00 00 
0952a     00 00 00 BE 
0952e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09532     2A 01 00 00 
09536     00 00 01 7D 
0953a     10 00 00 00 
0953e     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09542     0A 01 00 00 
09546     00 00 00 00 
0954a     00 00 00 A0 
0954e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09552     2A 01 00 00 
09556     00 00 00 00 
0955a     00 00 00 00 
0955e     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09562     2C 38 00 00 
09566     00 00 01 AC 
0956a     10 00 00 AA 
0956e     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
09572     0A 06 00 00 
09576     00 00 00 00 
0957a     00 00 00 00 
0957e     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09582     0E 93 00 00 
09586     00 00 00 00 
0958a     00 00 00 BE 
0958e     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09592     2C 30 01 7D 
09596     2A 02 01 7D 
0959a     10 00 00 00 
0959e     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
095a2     0A 02 00 00 
095a6     0A 02 00 00 
095aa     00 00 00 00 
095ae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095b2     0A 02 00 00 
095b6     0A 02 00 00 
095ba     00 00 00 BE 
095be     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
095c2     0A 02 00 00 
095c6     0A 02 00 00 
095ca     00 00 00 A0 
095ce     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
095d2     0A 02 00 00 
095d6     0A 02 00 00 
095da     00 00 00 8F 
095de     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
095e2     0A 02 00 00 
095e6     0A 02 00 00 
095ea     0D 00 00 00 
095ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
095f2     00 00 00 00 
      ...             
096e6     00 00 00 00 
096ea     00 00 00    | 	byte	$00[251]
096ed     7F 1F 05 00 
096f1     BE 2A 02 00 
096f5     CA 50 00 01 
096f9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
096fd     7F 1C 30 00 
09701     00 0A 02 00 
09705     00 00 00 00 
09709     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0970d     A0 10 00 00 
09711     00 0A 02 00 
09715     00 00 00 00 
09719     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0971d     7F 1C 30 00 
09721     00 0A 02 00 
09725     00 00 00 00 
09729     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0972d     BE 10 00 00 
09731     BE 0A 02 00 
09735     00 00 00 00 
09739     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0973d     A0 1C 30 00 
09741     00 0A 02 00 
09745     00 00 00 00 
09749     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0974d     F0 40 00 00 
09751     F0 2A 02 00 
09755     FE 60 00 01 
09759     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0975d     00 00 00 00 
09761     00          | 	byte	$00[5]
09762     0A 02 00 00 
09766     00 00 00 00 
0976a     00 00 00 D6 
0976e     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09772     0A 02 00 00 
09776     00 00 00 00 
0977a     00 00 00 D6 
0977e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
09782     0A 02 00 00 
09786     00 00 00 00 
0978a     00 00 00 F0 
0978e     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09792     0A 02 00 00 
09796     00 00 00 00 
0979a     0A 02 00 00 
0979e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
097a2     0A 02 00 00 
097a6     00 00 00 F0 
097aa     1A 02 00 7F 
097ae     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
097b2     2A 02 00 CA 
097b6     50 00 01 7D 
097ba     10 00 00 00 
097be     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
097c2     0A 02 00 00 
097c6     00 00 00 00 
097ca     00 00 00 A0 
097ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
097d2     0A 02 00 00 
097d6     00 00 00 00 
097da     00 00 00 7F 
097de     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
097e2     0A 02 00 00 
097e6     00 00 00 00 
097ea     00 00 00 BE 
097ee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
097f2     00 00 00 00 
097f6     00 00       | 	byte	$00[6]
097f8     01 7D 10 00 
097fc     00 AA 1C 30 
09800     00 BE 0E 93 
09804     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09808     00 00 00 00 
0980c     00          | 	byte	$00[5]
0980d     A0 10 00 00 
09811     D6 2A 02 00 
09815     E2 60 00 01 
09819     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0981d     A0 1C 30 00 
09821     00 0A 02 00 
09825     00 00 00 00 
09829     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0982d     AA 10 00 00 
09831     00 0A 02 00 
09835     00 00 00 00 
09839     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0983d     BE 10 00 00 
09841     D6 2C 20 00 
09845     00 00 00 00 
09849     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0984d     AA 10 00 00 
09851     D6 2A 04 00 
09855     00 00 00 00 
09859     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0985d     00 00 00 00 
09861     00          | 	byte	$00[5]
09862     0A 04 00 00 
09866     00 00 00 00 
0986a     0A 02 00 A0 
0986e     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09872     2A 02 00 FE 
09876     60 00 01 E0 
0987a     10 00 00 00 
0987e     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09882     0A 02 00 00 
09886     00 00 00 00 
0988a     00 00 00 A0 
0988e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09892     0A 02 00 00 
09896     00 00 00 00 
0989a     00 00 00 A0 
0989e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
098a2     0A 02 00 00 
098a6     00 00 00 F0 
098aa     10 00 00 A0 
098ae     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
098b2     2A 02 00 00 
098b6     00 00 00 00 
098ba     00 00 00 00 
098be     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098c2     0A 02 00 00 
098c6     00 00 00 00 
098ca     00 00 00 AA 
098ce     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
098d2     2A 01 00 E2 
098d6     60 00 01 AC 
098da     10 00 00 00 
098de     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
098e2     0A 01 00 00 
098e6     00 00 00 00 
098ea     00 00 00 AA 
098ee     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
098f2     0A 01 00 00 
098f6     00 00 00 00 
098fa     00 00 00 BE 
098fe     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
09902     0A 01 00 00 
09906     00 00 00 00 
0990a     00 00 00 AA 
0990e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
09912     0A 01 00 00 
09916     00 00 01 AC 
0991a     10 00 00 00 
0991e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09922     0A 01 00 00 
09926     00 00 00 00 
0992a     00 00 00 BE 
0992e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09932     2A 01 00 CA 
09936     50 00 01 7D 
0993a     10 00 00 00 
0993e     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09942     0A 01 00 00 
09946     00 00 00 00 
0994a     00 00 00 A0 
0994e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09952     2A 01 00 00 
09956     00 00 00 00 
0995a     00 00 00 00 
0995e     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09962     2C 38 00 00 
09966     00 00 01 AC 
0996a     10 00 00 AA 
0996e     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
09972     0A 06 00 00 
09976     00 00 00 00 
0997a     00 00 00 AA 
0997e     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
09982     0E 93 00 00 
09986     00 00 00 00 
0998a     00 00 00 BE 
0998e     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09992     2C 30 00 00 
09996     00 00 01 7D 
0999a     10 00 00 00 
0999e     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
099a2     0A 02 00 00 
099a6     00 00 00 00 
099aa     00 00 00 00 
099ae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099b2     0A 02 00 00 
099b6     00 00 00 00 
099ba     00 00 00 00 
099be     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099c2     0A 02 00 00 
099c6     00 00 00 00 
099ca     00 00 00 00 
099ce     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099d2     0A 02 00 00 
099d6     00 00 00 00 
099da     00 00 00 00 
099de     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
099e2     0A 02 00 00 
099e6     00 00 00 00 
099ea     0D 00 00 00 
099ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
099f2     00 00 00 00 
      ...             
09ae6     00 00 00 00 
09aea     00 00 00    | 	byte	$00[251]
09aed     7F 1F 05 00 
09af1     BE 2A 02 00 
09af5     CA 5C 10 01 
09af9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
09afd     00 00 00 00 
09b01     00          | 	byte	$00[5]
09b02     0A 02 00 00 
09b06     0A 10 00 00 
09b0a     00 00 00 A0 
09b0e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09b12     0A 02 00 00 
09b16     0A 10 00 00 
09b1a     00 00 00 7F 
09b1e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09b22     0A 02 00 00 
09b26     0A 10 00 00 
09b2a     00 00 00 BE 
09b2e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09b32     0A 02 00 00 
09b36     0A 10 00 00 
09b3a     0A 02 00 00 
09b3e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09b42     0A 02 00 00 
09b46     0A 10 00 00 
09b4a     0A 02 00 F0 
09b4e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09b52     2A 02 00 FE 
09b56     6C 20 01 E0 
09b5a     10 00 00 00 
09b5e     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09b62     0A 02 00 00 
09b66     0A 10 00 00 
09b6a     00 00 00 D6 
09b6e     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09b72     0A 02 00 00 
09b76     0A 10 00 00 
09b7a     00 00 00 F0 
09b7e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09b82     0A 02 00 00 
09b86     0A 10 00 00 
09b8a     00 00 00 F0 
09b8e     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09b92     0A 02 00 00 
09b96     0A 10 00 00 
09b9a     0A 02 00 00 
09b9e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09ba2     0A 02 00 00 
09ba6     0A 10 00 F0 
09baa     1A 02 00 7F 
09bae     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
09bb2     2A 02 00 CA 
09bb6     50 00 01 7D 
09bba     10 00 00 00 
09bbe     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09bc2     0A 02 00 00 
09bc6     00 00 00 00 
09bca     00 00 00 A0 
09bce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09bd2     0A 02 00 00 
09bd6     00 00 00 00 
09bda     00 00 00 7F 
09bde     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09be2     0A 02 00 00 
09be6     00 00 00 00 
09bea     00 00 00 BE 
09bee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09bf2     00 00 00 00 
09bf6     00 00       | 	byte	$00[6]
09bf8     01 7D 10 00 
09bfc     00 AA 1C 30 
09c00     00 BE 0E 93 
09c04     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09c08     00 00 00 00 
09c0c     00          | 	byte	$00[5]
09c0d     A0 10 00 00 
09c11     D6 2A 02 00 
09c15     E2 60 00 01 
09c19     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09c1d     A0 1C 30 00 
09c21     00 0A 02 00 
09c25     00 00 00 00 
09c29     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c2d     AA 10 00 00 
09c31     00 0A 02 00 
09c35     00 00 00 00 
09c39     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c3d     BE 10 00 00 
09c41     D6 2C 20 00 
09c45     00 00 00 00 
09c49     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c4d     AA 10 00 00 
09c51     D6 2A 04 00 
09c55     00 00 00 00 
09c59     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09c5d     00 00 00 00 
09c61     00          | 	byte	$00[5]
09c62     0A 04 00 00 
09c66     00 00 00 00 
09c6a     0A 02 00 A0 
09c6e     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09c72     2A 02 00 FE 
09c76     60 00 01 E0 
09c7a     10 00 00 00 
09c7e     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09c82     0A 02 00 00 
09c86     00 00 00 00 
09c8a     00 00 00 A0 
09c8e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09c92     0A 02 00 00 
09c96     00 00 00 00 
09c9a     00 00 00 A0 
09c9e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09ca2     0A 02 00 00 
09ca6     00 00 00 F0 
09caa     10 00 00 A0 
09cae     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
09cb2     2A 02 00 00 
09cb6     00 00 00 00 
09cba     00 00 00 00 
09cbe     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cc2     0A 02 00 00 
09cc6     00 00 00 00 
09cca     00 00 00 8F 
09cce     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
09cd2     2A 01 00 E2 
09cd6     60 00 01 AC 
09cda     10 00 00 00 
09cde     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
09ce2     0A 01 00 00 
09ce6     00 00 00 00 
09cea     00 00 00 8F 
09cee     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
09cf2     0A 01 00 00 
09cf6     00 00 00 00 
09cfa     00 00 00 A0 
09cfe     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09d02     0A 01 00 00 
09d06     00 00 00 00 
09d0a     00 00 00 8F 
09d0e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09d12     0A 01 00 00 
09d16     00 00 01 AC 
09d1a     10 00 00 00 
09d1e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09d22     0A 01 00 00 
09d26     00 00 00 00 
09d2a     00 00 00 BE 
09d2e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09d32     2A 01 00 CA 
09d36     50 00 01 7D 
09d3a     10 00 00 00 
09d3e     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09d42     0A 01 00 00 
09d46     00 00 00 00 
09d4a     00 00 00 A0 
09d4e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09d52     2A 01 00 00 
09d56     00 00 00 00 
09d5a     00 00 00 00 
09d5e     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09d62     2C 38 00 00 
09d66     00 00 01 AC 
09d6a     10 00 00 8F 
09d6e     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
09d72     0A 06 00 00 
09d76     00 00 00 00 
09d7a     00 00 00 00 
09d7e     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09d82     0E 93 00 00 
09d86     00 00 00 00 
09d8a     00 00 00 7F 
09d8e     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
09d92     2C 30 00 00 
09d96     00 00 01 7D 
09d9a     10 00 00 00 
09d9e     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09da2     0A 02 00 00 
09da6     00 00 00 00 
09daa     00 00 00 00 
09dae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09db2     0A 02 00 00 
09db6     00 00 00 00 
09dba     00 00 00 00 
09dbe     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dc2     0A 02 00 00 
09dc6     00 00 00 00 
09dca     00 00 00 A0 
09dce     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09dd2     0A 02 00 00 
09dd6     00 00 00 00 
09dda     00 00 00 8F 
09dde     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
09de2     0A 02 00 00 
09de6     00 00 00 00 
09dea     0D 00 00 00 
09dee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
09df2     00 00 00 00 
      ...             
09ee6     00 00 00 00 
09eea     00 00 00    | 	byte	$00[251]
09eed     7F 1F 05 00 
09ef1     BE 2A 02 00 
09ef5     CA 50 00 01 
09ef9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
09efd     00 0A 06 00 
09f01     00 0A 02 00 
09f05     00 00 00 00 
09f09     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f0d     7F 0E 93 00 
09f11     00 0A 02 00 
09f15     00 00 00 00 
09f19     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f1d     8F 1C 30 00 
09f21     00 0A 02 00 
09f25     00 00 00 00 
09f29     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f2d     BE 10 00 00 
09f31     BE 2A 02 00 
09f35     00 00 00 00 
09f39     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f3d     00 00 00 00 
09f41     00          | 	byte	$00[5]
09f42     0A 02 00 00 
09f46     00 00 00 00 
09f4a     00 00 00 7F 
09f4e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
09f52     0A 02 00 00 
09f56     00 00 01 40 
09f5a     10 00 00 00 
09f5e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
09f62     0A 02 00 00 
09f66     00 00 00 00 
09f6a     00 00 00 F0 
09f6e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
09f72     2A 02 00 00 
09f76     00 00 00 00 
09f7a     00 00 00 F0 
09f7e     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
09f82     2C 20 00 00 
09f86     00 00 01 40 
09f8a     1A 08 00 FE 
09f8e     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
09f92     2A 02 00 00 
09f96     00 00 01 40 
09f9a     10 00 00 FE 
09f9e     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
09fa2     0A 02 00 00 
09fa6     00 00 01 1D 
09faa     1C 20 00 8F 
09fae     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
09fb2     2A 02 00 E2 
09fb6     60 00 01 1D 
09fba     10 00 00 8F 
09fbe     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
09fc2     0A 02 00 00 
09fc6     00 00 00 00 
09fca     0A 06 00 A0 
09fce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
09fd2     0A 02 00 00 
09fd6     00 00 01 1D 
09fda     0E 93 00 8F 
09fde     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
09fe2     0A 02 00 00 
09fe6     00 00 01 1D 
09fea     10 00 00 AA 
09fee     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
09ff2     2A 08 00 00 
09ff6     00 00 01 40 
09ffa     1A 08 00 A0 
09ffe     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0a002     2C 30 00 00 
0a006     00 00 00 00 
0a00a     0A 08 00 BE 
0a00e     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0a012     2A 02 00 CA 
0a016     50 00 01 7D 
0a01a     10 00 00 BE 
0a01e     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0a022     0A 02 00 00 
0a026     00 00 00 00 
0a02a     00 00 00 A0 
0a02e     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0a032     0A 02 00 00 
0a036     00 00 00 00 
0a03a     00 00 00 A0 
0a03e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a042     0A 02 00 00 
0a046     00 00 00 00 
0a04a     00 00 00 8F 
0a04e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a052     0A 02 00 00 
0a056     00 00 00 00 
0a05a     00 00 00 A0 
0a05e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a062     0A 02 00 00 
0a066     00 00 00 00 
0a06a     00 00 00 7F 
0a06e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a072     2A 02 00 00 
0a076     00 00 01 7D 
0a07a     10 00 00 7F 
0a07e     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
0a082     0A 02 00 00 
0a086     00 00 00 00 
0a08a     00 00 00 8F 
0a08e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a092     0A 02 00 00 
0a096     00 00 00 00 
0a09a     00 00 00 8F 
0a09e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a0a2     0A 02 00 00 
0a0a6     00 00 00 00 
0a0aa     00 00 00 A0 
0a0ae     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a0b2     2A 02 00 00 
0a0b6     00 00 00 00 
0a0ba     00 00 00 A0 
0a0be     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a0c2     0A 02 00 00 
0a0c6     00 00 00 00 
0a0ca     00 00 00 F0 
0a0ce     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
0a0d2     2A 02 00 FE 
0a0d6     60 00 01 E0 
0a0da     10 00 00 F0 
0a0de     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0a0e2     0A 02 00 00 
0a0e6     00 00 00 00 
0a0ea     00 00 00 7F 
0a0ee     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a0f2     0A 02 00 00 
0a0f6     00 00 00 00 
0a0fa     00 00 00 7F 
0a0fe     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0a102     0A 02 00 00 
0a106     00 00 00 00 
0a10a     00 00 00 8F 
0a10e     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
0a112     2A 02 00 00 
0a116     00 00 00 00 
0a11a     00 00 00 7F 
0a11e     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0a122     0A 02 00 00 
0a126     00 00 00 00 
0a12a     00 00 00 7F 
0a12e     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
0a132     2A 02 00 CA 
0a136     50 00 01 7D 
0a13a     10 00 00 00 
0a13e     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
0a142     0A 02 00 00 
0a146     00 00 00 00 
0a14a     00 00 00 00 
0a14e     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
0a152     0A 02 00 00 
0a156     00 00 01 40 
0a15a     10 00 00 00 
0a15e     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
0a162     0A 02 00 00 
0a166     00 00 00 00 
0a16a     00 00 00 00 
0a16e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a172     0A 02 00 00 
0a176     00 00 01 53 
0a17a     19 02 00 00 
0a17e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
0a182     0A 02 00 00 
0a186     00 00 00 00 
0a18a     00 00 00 7F 
0a18e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a192     2A 02 00 00 
0a196     00 00 01 7D 
0a19a     10 00 00 00 
0a19e     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a1a2     0A 02 00 00 
0a1a6     00 00 00 00 
0a1aa     00 00 00 A0 
0a1ae     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a1b2     0A 02 00 00 
0a1b6     00 00 00 00 
0a1ba     00 00 00 A0 
0a1be     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a1c2     0A 02 00 00 
0a1c6     00 00 00 00 
0a1ca     00 00 00 8F 
0a1ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a1d2     0A 02 00 00 
0a1d6     00 00 00 00 
0a1da     00 00 00 A0 
0a1de     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a1e2     0A 02 00 00 
0a1e6     00 00 00 00 
0a1ea     0D 00 00 00 
0a1ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a1f2     00 00 00 00 
      ...             
0a2e6     00 00 00 00 
0a2ea     00 00 00    | 	byte	$00[251]
0a2ed     7F 1F 05 00 
0a2f1     BE 2A 02 00 
0a2f5     CA 50 00 01 
0a2f9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a2fd     00 0A 06 00 
0a301     00 0A 02 00 
0a305     00 00 00 00 
0a309     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a30d     7F 0E 93 00 
0a311     00 0A 02 00 
0a315     00 00 00 00 
0a319     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a31d     8F 1C 30 00 
0a321     00 0A 02 00 
0a325     00 00 00 00 
0a329     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a32d     BE 10 00 00 
0a331     BE 2A 02 00 
0a335     00 00 00 00 
0a339     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a33d     00 00 00 00 
0a341     00          | 	byte	$00[5]
0a342     0A 02 00 00 
0a346     00 00 00 00 
0a34a     00 00 00 7F 
0a34e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a352     0A 02 00 00 
0a356     00 00 01 40 
0a35a     10 00 00 00 
0a35e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0a362     0A 02 00 00 
0a366     00 00 00 00 
0a36a     00 00 00 F0 
0a36e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
0a372     2A 02 00 00 
0a376     00 00 00 00 
0a37a     00 00 00 F0 
0a37e     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
0a382     2C 20 00 00 
0a386     00 00 01 40 
0a38a     1A 08 00 FE 
0a38e     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
0a392     2A 02 00 00 
0a396     00 00 01 40 
0a39a     10 00 00 FE 
0a39e     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0a3a2     0A 02 00 00 
0a3a6     00 00 01 1D 
0a3aa     1C 20 00 8F 
0a3ae     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
0a3b2     2A 02 00 E2 
0a3b6     60 00 01 1D 
0a3ba     10 00 00 8F 
0a3be     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0a3c2     0A 02 00 00 
0a3c6     00 00 00 00 
0a3ca     0A 06 00 A0 
0a3ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0a3d2     0A 02 00 00 
0a3d6     00 00 01 1D 
0a3da     0E 93 00 8F 
0a3de     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
0a3e2     0A 02 00 00 
0a3e6     00 00 01 1D 
0a3ea     10 00 00 AA 
0a3ee     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
0a3f2     2A 08 00 00 
0a3f6     00 00 01 40 
0a3fa     1A 08 00 A0 
0a3fe     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0a402     2C 30 00 00 
0a406     00 00 00 00 
0a40a     0A 08 00 BE 
0a40e     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0a412     2A 02 00 CA 
0a416     50 00 01 7D 
0a41a     10 00 00 BE 
0a41e     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0a422     0A 02 00 00 
0a426     00 00 00 00 
0a42a     00 00 00 7F 
0a42e     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
0a432     0A 02 00 00 
0a436     00 00 00 00 
0a43a     00 00 00 7F 
0a43e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a442     0A 02 00 00 
0a446     00 00 00 00 
0a44a     00 00 00 8F 
0a44e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a452     0A 02 00 00 
0a456     00 00 00 00 
0a45a     00 00 00 7F 
0a45e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a462     0A 02 00 00 
0a466     00 00 00 00 
0a46a     00 00 00 A0 
0a46e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a472     2A 02 00 00 
0a476     00 00 01 7D 
0a47a     10 00 00 A0 
0a47e     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0a482     0A 02 00 00 
0a486     00 00 00 00 
0a48a     00 00 00 AA 
0a48e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0a492     0A 02 00 00 
0a496     00 00 00 00 
0a49a     00 00 00 AA 
0a49e     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
0a4a2     0A 02 00 00 
0a4a6     00 00 00 00 
0a4aa     00 00 00 BE 
0a4ae     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a4b2     2A 02 00 00 
0a4b6     00 00 00 00 
0a4ba     00 00 00 BE 
0a4be     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
0a4c2     0A 02 00 00 
0a4c6     00 00 00 00 
0a4ca     00 00 00 D6 
0a4ce     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
0a4d2     2A 02 00 E2 
0a4d6     60 00 01 AC 
0a4da     10 00 00 D6 
0a4de     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
0a4e2     0A 02 00 00 
0a4e6     00 00 00 00 
0a4ea     00 00 00 FE 
0a4ee     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
0a4f2     0A 02 00 00 
0a4f6     00 00 00 00 
0a4fa     00 00 00 FE 
0a4fe     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
0a502     0A 02 00 00 
0a506     00 00 00 00 
0a50a     00 00 00 A0 
0a50e     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
0a512     2A 02 00 00 
0a516     00 00 01 AC 
0a51a     1C 30 00 A0 
0a51e     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
0a522     0A 02 00 00 
0a526     00 00 00 00 
0a52a     00 00 00 BE 
0a52e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a532     2A 02 00 CA 
0a536     50 00 01 7D 
0a53a     10 00 00 00 
0a53e     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a542     0A 02 00 00 
0a546     00 00 00 00 
0a54a     00 00 00 00 
0a54e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a552     0A 02 00 00 
0a556     00 00 00 00 
0a55a     00 00 00 00 
0a55e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a562     0A 02 00 00 
0a566     00 00 00 00 
0a56a     00 00 00 BE 
0a56e     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
0a572     0A 02 00 00 
0a576     00 00 01 AC 
0a57a     19 02 00 00 
0a57e     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
0a582     0A 02 00 00 
0a586     00 00 00 00 
0a58a     00 00 00 00 
0a58e     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
0a592     2A 02 00 00 
0a596     00 00 01 7D 
0a59a     10 00 00 00 
0a59e     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
0a5a2     0A 02 00 00 
0a5a6     00 00 00 00 
0a5aa     00 00 00 00 
0a5ae     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a5b2     0A 02 00 00 
0a5b6     00 00 00 00 
0a5ba     00 00 00 00 
0a5be     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a5c2     0A 02 00 00 
0a5c6     00 00 00 00 
0a5ca     00 00 00 A0 
0a5ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a5d2     0A 02 00 00 
0a5d6     00 00 00 00 
0a5da     00 00 00 8F 
0a5de     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a5e2     0A 02 00 00 
0a5e6     00 00 00 00 
0a5ea     0D 00 00 00 
0a5ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a5f2     00 00 00 00 
      ...             
0a6e6     00 00 00 00 
0a6ea     00 00 00    | 	byte	$00[251]
0a6ed     7F 1F 05 00 
0a6f1     BE 2A 02 00 
0a6f5     CA 50 00 01 
0a6f9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a6fd     00 00 00 00 
0a701     00          | 	byte	$00[5]
0a702     0A 02 00 00 
0a706     00 00 00 00 
0a70a     00 00 00 A0 
0a70e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a712     0A 02 00 00 
0a716     00 00 00 00 
0a71a     00 00 00 7F 
0a71e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a722     0A 02 00 00 
0a726     00 00 00 00 
0a72a     00 00 00 BE 
0a72e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a732     0A 02 00 00 
0a736     00 00 00 00 
0a73a     0A 02 00 00 
0a73e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a742     0A 02 00 00 
0a746     00 00 00 00 
0a74a     0A 02 00 F0 
0a74e     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0a752     2A 02 00 FE 
0a756     60 00 01 E0 
0a75a     10 00 00 00 
0a75e     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0a762     0A 02 00 00 
0a766     00 00 00 00 
0a76a     00 00 00 D6 
0a76e     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0a772     0A 02 00 00 
0a776     00 00 00 00 
0a77a     00 00 00 F0 
0a77e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0a782     0A 02 00 00 
0a786     00 00 00 00 
0a78a     00 00 00 F0 
0a78e     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0a792     0A 02 00 00 
0a796     00 00 00 00 
0a79a     0A 02 00 00 
0a79e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a7a2     0A 02 00 00 
0a7a6     00 00 00 F0 
0a7aa     1A 02 00 7F 
0a7ae     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0a7b2     2A 02 00 CA 
0a7b6     50 00 01 7D 
0a7ba     10 00 00 00 
0a7be     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a7c2     0A 02 00 00 
0a7c6     00 00 00 00 
0a7ca     00 00 00 A0 
0a7ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a7d2     0A 02 00 00 
0a7d6     00 00 00 00 
0a7da     00 00 00 7F 
0a7de     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a7e2     0A 02 00 00 
0a7e6     00 00 00 00 
0a7ea     00 00 00 BE 
0a7ee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a7f2     00 00 00 00 
0a7f6     00 00       | 	byte	$00[6]
0a7f8     01 7D 10 00 
0a7fc     00 AA 1C 30 
0a800     00 BE 0E 93 
0a804     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0a808     00 00 00 00 
0a80c     00          | 	byte	$00[5]
0a80d     A0 10 00 00 
0a811     D6 2A 02 00 
0a815     E2 60 00 01 
0a819     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0a81d     A0 1C 30 00 
0a821     00 0A 02 00 
0a825     00 00 00 00 
0a829     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a82d     AA 10 00 00 
0a831     00 0A 02 00 
0a835     00 00 00 00 
0a839     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a83d     BE 10 00 00 
0a841     D6 2C 20 00 
0a845     00 00 00 00 
0a849     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a84d     AA 10 00 00 
0a851     D6 2A 04 00 
0a855     00 00 00 00 
0a859     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a85d     00 00 00 00 
0a861     00          | 	byte	$00[5]
0a862     0A 04 00 00 
0a866     00 00 00 00 
0a86a     0A 02 00 A0 
0a86e     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0a872     2A 02 00 FE 
0a876     60 00 01 E0 
0a87a     10 00 00 00 
0a87e     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0a882     0A 02 00 00 
0a886     00 00 00 00 
0a88a     00 00 00 A0 
0a88e     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0a892     0A 02 00 00 
0a896     00 00 00 00 
0a89a     00 00 00 A0 
0a89e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a8a2     0A 02 00 00 
0a8a6     00 00 00 F0 
0a8aa     10 00 00 A0 
0a8ae     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0a8b2     2A 02 00 00 
0a8b6     00 00 00 00 
0a8ba     00 00 00 00 
0a8be     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8c2     0A 02 00 00 
0a8c6     00 00 00 00 
0a8ca     00 00 00 8F 
0a8ce     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0a8d2     2A 01 00 E2 
0a8d6     60 00 01 AC 
0a8da     10 00 00 00 
0a8de     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0a8e2     0A 01 00 00 
0a8e6     00 00 00 00 
0a8ea     00 00 00 8F 
0a8ee     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0a8f2     0A 01 00 00 
0a8f6     00 00 00 00 
0a8fa     00 00 00 A0 
0a8fe     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a902     0A 01 00 00 
0a906     00 00 00 00 
0a90a     00 00 00 8F 
0a90e     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a912     0A 01 00 00 
0a916     00 00 01 AC 
0a91a     10 00 00 00 
0a91e     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0a922     0A 01 00 00 
0a926     00 00 00 00 
0a92a     00 00 00 BE 
0a92e     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a932     2A 01 00 CA 
0a936     50 00 01 7D 
0a93a     10 00 00 00 
0a93e     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a942     0A 01 00 00 
0a946     00 00 00 00 
0a94a     00 00 00 A0 
0a94e     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0a952     2A 01 00 00 
0a956     00 00 00 00 
0a95a     00 00 00 00 
0a95e     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a962     2C 38 00 00 
0a966     00 00 01 AC 
0a96a     10 00 00 8F 
0a96e     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
0a972     0A 06 00 00 
0a976     00 00 00 00 
0a97a     00 00 00 00 
0a97e     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a982     0E 93 00 00 
0a986     00 00 00 00 
0a98a     00 00 00 7F 
0a98e     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a992     2C 30 00 00 
0a996     00 00 01 7D 
0a99a     10 00 00 00 
0a99e     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a9a2     0A 02 00 00 
0a9a6     00 00 00 00 
0a9aa     00 00 00 00 
0a9ae     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9b2     0A 02 00 00 
0a9b6     00 00 00 00 
0a9ba     00 00 00 00 
0a9be     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9c2     0A 02 00 00 
0a9c6     00 00 00 00 
0a9ca     00 00 00 A0 
0a9ce     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a9d2     0A 02 00 00 
0a9d6     00 00 00 00 
0a9da     00 00 00 8F 
0a9de     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a9e2     0A 02 00 00 
0a9e6     00 00 00 00 
0a9ea     0D 00 00 00 
0a9ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a9f2     00 00 00 00 
      ...             
0aae6     00 00 00 00 
0aaea     00 00 00    | 	byte	$00[251]
0aaed     7F 1F 05 01 
0aaf1     1D 71 08 00 
0aaf5     CA 50 00 01 
0aaf9     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0aafd     00 0A 06 01 
0ab01     0D 73 F0 00 
0ab05     00 00 00 00 
0ab09     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab0d     7F 0E 93 00 
0ab11     00 04 A1 00 
0ab15     00 00 00 00 
0ab19     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab1d     8F 1C 30 00 
0ab21     00 04 A1 00 
0ab25     00 00 00 00 
0ab29     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab2d     BE 10 00 00 
0ab31     00 04 B2 00 
0ab35     00 00 00 00 
0ab39     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab3d     00 00 00 00 
0ab41     00          | 	byte	$00[5]
0ab42     04 B2 00 00 
0ab46     00 00 00 00 
0ab4a     00 00 00 7F 
0ab4e     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0ab52     04 C2 00 00 
0ab56     00 00 01 40 
0ab5a     10 00 00 00 
0ab5e     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0ab62     04 C2 00 00 
0ab66     00 00 00 00 
0ab6a     00 00 00 F0 
0ab6e     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
0ab72     70 00 00 00 
0ab76     00 00 00 00 
0ab7a     00 00 00 F0 
0ab7e     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
0ab82     0C 18 00 00 
0ab86     00 00 01 40 
0ab8a     1A 08 00 FE 
0ab8e     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
0ab92     70 00 00 00 
0ab96     00 00 01 40 
0ab9a     10 00 00 FE 
0ab9e     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0aba2     0C 18 00 00 
0aba6     00 00 01 1D 
0abaa     1C 20 00 8F 
0abae     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
0abb2     71 08 00 E2 
0abb6     60 00 01 1D 
0abba     10 00 00 8F 
0abbe     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
0abc2     73 F0 00 00 
0abc6     00 00 00 00 
0abca     0A 06 00 A0 
0abce     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0abd2     04 C2 00 00 
0abd6     00 00 01 1D 
0abda     0E 93 00 8F 
0abde     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
0abe2     74 C4 00 00 
0abe6     00 00 01 1D 
0abea     10 00 00 AA 
0abee     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
0abf2     73 F0 00 00 
0abf6     00 00 01 40 
0abfa     1A 08 00 A0 
0abfe     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
0ac02     7C 18 00 00 
0ac06     00 00 00 00 
0ac0a     0A 08 00 BE 
0ac0e     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0ac12     71 04 00 CA 
0ac16     50 00 01 7D 
0ac1a     10 00 00 BE 
0ac1e     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0ac22     73 F0 00 00 
0ac26     00 00 00 00 
0ac2a     00 00 00 A0 
0ac2e     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
0ac32     74 C1 00 00 
0ac36     00 00 00 00 
0ac3a     00 00 00 A0 
0ac3e     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0ac42     04 C1 00 00 
0ac46     00 00 00 00 
0ac4a     00 00 00 8F 
0ac4e     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
0ac52     71 04 00 00 
0ac56     00 00 00 00 
0ac5a     00 00 00 A0 
0ac5e     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
0ac62     73 F0 00 00 
0ac66     00 00 00 00 
0ac6a     00 00 00 7F 
0ac6e     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0ac72     71 02 00 00 
0ac76     00 00 01 7D 
0ac7a     10 00 00 7F 
0ac7e     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
0ac82     73 F0 00 00 
0ac86     00 00 00 00 
0ac8a     00 00 00 8F 
0ac8e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0ac92     04 C1 00 00 
0ac96     00 00 00 00 
0ac9a     00 00 00 8F 
0ac9e     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0aca2     04 C1 00 00 
0aca6     00 00 00 00 
0acaa     00 00 00 A0 
0acae     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0acb2     70 00 00 00 
0acb6     00 00 00 00 
0acba     00 00 00 A0 
0acbe     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
0acc2     73 F0 00 00 
0acc6     00 00 00 00 
0acca     00 00 00 F0 
0acce     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
0acd2     73 F0 00 FE 
0acd6     60 00 01 E0 
0acda     10 00 00 F0 
0acde     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0ace2     04 C1 00 00 
0ace6     00 00 00 00 
0acea     00 00 00 7F 
0acee     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0acf2     73 F0 00 00 
0acf6     00 00 00 00 
0acfa     00 00 00 7F 
0acfe     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0ad02     04 C1 00 00 
0ad06     00 00 00 00 
0ad0a     00 00 00 8F 
0ad0e     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
0ad12     73 F0 00 00 
0ad16     00 00 00 00 
0ad1a     00 00 00 7F 
0ad1e     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0ad22     04 C1 00 00 
0ad26     00 00 00 00 
0ad2a     00 00 00 7F 
0ad2e     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
0ad32     71 04 00 CA 
0ad36     50 00 01 7D 
0ad3a     10 00 00 00 
0ad3e     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
0ad42     73 F0 00 00 
0ad46     00 00 00 00 
0ad4a     00 00 00 00 
0ad4e     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
0ad52     73 F0 00 00 
0ad56     00 00 01 40 
0ad5a     10 00 00 00 
0ad5e     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
0ad62     7C 18 00 00 
0ad66     00 00 00 00 
0ad6a     00 00 00 00 
0ad6e     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
0ad72     70 00 00 00 
0ad76     00 00 01 53 
0ad7a     19 02 00 00 
0ad7e     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
0ad82     7C 18 00 00 
0ad86     00 00 00 00 
0ad8a     00 00 00 7F 
0ad8e     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0ad92     71 04 00 00 
0ad96     00 00 01 7D 
0ad9a     10 00 00 00 
0ad9e     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0ada2     73 F0 00 00 
0ada6     00 00 00 00 
0adaa     00 00 00 A0 
0adae     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0adb2     04 C2 00 00 
0adb6     00 00 00 00 
0adba     00 00 00 A0 
0adbe     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0adc2     06 01 00 00 
0adc6     00 00 00 00 
0adca     00 00 00 8F 
0adce     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0add2     06 01 00 00 
0add6     00 00 00 00 
0adda     00 00 00 A0 
0adde     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0ade2     06 01 00 00 
0ade6     00 00 00 00 
0adea     0D 00 00 00 
0adee     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0adf2     00 00 00 00 
      ...             
0aee6     00 00 00 00 
0aeea     00 00 00    | 	byte	$00[251]
0aeed     7F 1F 05 00 
0aef1     B4 71 03 00 
0aef5     CA 50 00 01 
0aef9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0aefd     00 0A 06 00 
0af01     AA 73 F0 00 
0af05     00 00 00 00 
0af09     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af0d     7F 0E 93 00 
0af11     00 04 C2 00 
0af15     00 00 00 00 
0af19     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af1d     8F 1C 30 00 
0af21     00 04 C2 00 
0af25     00 00 00 00 
0af29     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af2d     BE 10 00 00 
0af31     00 04 C2 00 
0af35     00 00 00 00 
0af39     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af3d     00 00 00 00 
0af41     00          | 	byte	$00[5]
0af42     04 C2 00 00 
0af46     00 00 00 00 
0af4a     00 00 00 7F 
0af4e     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
0af52     74 C1 00 00 
0af56     00 00 01 40 
0af5a     10 00 00 00 
0af5e     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0af62     04 C2 00 00 
0af66     00 00 00 00 
0af6a     00 00 00 F0 
0af6e     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0af72     04 C2 00 00 
0af76     00 00 00 00 
0af7a     00 00 00 F0 
0af7e     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
0af82     73 F0 00 00 
0af86     00 00 01 40 
0af8a     1A 08 00 FE 
0af8e     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
0af92     73 F0 00 00 
0af96     00 00 01 40 
0af9a     10 00 00 FE 
0af9e     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
0afa2     73 F0 00 00 
0afa6     00 00 01 1D 
0afaa     1C 20 00 8F 
0afae     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
0afb2     73 F0 00 E2 
0afb6     60 00 01 1D 
0afba     10 00 00 8F 
0afbe     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0afc2     04 C1 00 00 
0afc6     00 00 00 00 
0afca     0A 06 00 A0 
0afce     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0afd2     02 06 00 00 
0afd6     00 00 01 1D 
0afda     0E 93 00 8F 
0afde     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
0afe2     73 F0 00 00 
0afe6     00 00 01 1D 
0afea     10 00 00 AA 
0afee     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
0aff2     70 00 00 00 
0aff6     00 00 01 40 
0affa     1A 08 00 A0 
0affe     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
0b002     7C 20 00 00 
0b006     00 00 00 00 
0b00a     0A 08 00 BE 
0b00e     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0b012     71 06 00 CA 
0b016     50 00 01 7D 
0b01a     10 00 00 BE 
0b01e     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0b022     73 F0 00 00 
0b026     00 00 00 00 
0b02a     00 00 00 7F 
0b02e     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
0b032     70 00 00 00 
0b036     00 00 00 00 
0b03a     00 00 00 7F 
0b03e     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0b042     7C 20 00 00 
0b046     00 00 00 00 
0b04a     00 00 00 8F 
0b04e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0b052     70 00 00 00 
0b056     00 00 00 00 
0b05a     00 00 00 7F 
0b05e     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
0b062     7C 20 00 00 
0b066     00 00 00 00 
0b06a     00 00 00 A0 
0b06e     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
0b072     70 00 00 00 
0b076     00 00 01 7D 
0b07a     10 00 00 A0 
0b07e     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0b082     00 00 00 00 
0b086     00 00 00 00 
0b08a     00 00 00    | 	byte	$00[11]
0b08d     AA 10 00 00 
0b091     B4 70 00 00 
0b095     00 00 00 00 
0b099     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b09d     AA 1C 30 00 
0b0a1     AA 7C 20 00 
0b0a5     00 00 00 00 
0b0a9     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0ad     BE 10 00 00 
0b0b1     AA 70 00 00 
0b0b5     00 00 00 00 
0b0b9     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0bd     BE 1C 30 00 
0b0c1     B4 7C 20 00 
0b0c5     00 00 00 00 
0b0c9     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0cd     D6 10 00 00 
0b0d1     97 70 00 00 
0b0d5     E2 60 00 01 
0b0d9     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0b0dd     D6 1C 30 00 
0b0e1     AA 7C 20 00 
0b0e5     00 00 00 00 
0b0e9     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0ed     FE 1A 04 00 
0b0f1     AA 70 00 00 
0b0f5     00 00 00 00 
0b0f9     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0fd     FE 0E 93 00 
0b101     97 7C 20 00 
0b105     00 00 00 00 
0b109     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b10d     A0 10 00 00 
0b111     B4 70 00 00 
0b115     00 00 00 01 
0b119     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
0b11d     A0 1C 30 00 
0b121     AA 7C 20 00 
0b125     00 00 00 00 
0b129     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b12d     BE 10 00 00 
0b131     AA 70 00 00 
0b135     CA 50 00 01 
0b139     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b13d     00 00 00 00 
0b141     B4 73 F0 00 
0b145     00 00 00 00 
0b149     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b14d     00 00 00 00 
0b151     CA 73 F0 00 
0b155     00 00 00 00 
0b159     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b15d     00 00 00 00 
0b161     00 00 00 00 
0b165     00 00 00 00 
0b169     00 00 00 00 | 	byte	$00[16]
0b16d     BE 1A 02 00 
0b171     F0 71 0A 00 
0b175     00 0F 03 01 
0b179     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
0b17d     00 0A 02 00 
0b181     E2 73 F0 00 
0b185     00 0F 02 00 
0b189     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b18d     00 0A 02 00 
0b191     00 0C 10 00 
0b195     00 0F 03 00 
0b199     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b19d     00 0A 02 00 
0b1a1     00 00 00 00 
0b1a5     00 0F 02 00 
0b1a9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1ad     00 0A 02 00 
0b1b1     D6 71 0A 00 
0b1b5     00 0F 03 01 
0b1b9     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
0b1bd     00 0A 02 00 
0b1c1     CA 73 F0 00 
0b1c5     00 0F 02 00 
0b1c9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1cd     00 0A 02 00 
0b1d1     00 04 C2 00 
0b1d5     00 0F 03 00 
0b1d9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b1dd     00 0A 02 00 
0b1e1     00 06 02 00 
0b1e5     00 0F 02 00 
0b1e9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b1ed     00 0A 02 00 
0b1f1     00 06 02 00 
0b1f5     00 0F 03 00 
0b1f9     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b1fd     00 0A 02 00 
0b201     00 06 02 00 
0b205     00 0F 02 00 
0b209     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b20d     00 0A 02 00 
0b211     00 06 02 00 
0b215     00 0F 03 00 
0b219     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b21d     00 0A 02 00 
0b221     00 06 02 00 
0b225     00 0F 02 00 
0b229     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b22d     A0 10 00 00 
0b231     AA 70 00 00 
0b235     00 0F 03 00 
0b239     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b23d     A0 1C 30 00 
0b241     00 00 00 00 
0b245     00 0F 02 00 
0b249     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b24d     8F 10 00 00 
0b251     97 70 00 00 
0b255     00 0F 03 00 
0b259     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b25d     00 00 00 00 
0b261     00 00 00 00 
0b265     00          | 	byte	$00[9]
0b266     0F 02 00 00 
0b26a     0D 00 00 00 
0b26e     00 00 00 00 
0b272     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b276     00 00 00 00 
      ...             
0b2e6     00 00 00 00 
0b2ea     00 00 00    | 	byte	$00[119]
0b2ed     7F 1F 05 00 
0b2f1     8F 71 02 00 
0b2f5     CA 50 00 01 
0b2f9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b2fd     00 00 00 00 
0b301     87 73 F0 00 
0b305     00 00 00 00 
0b309     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b30d     A0 10 00 00 
0b311     00 04 C1 00 
0b315     00 00 00 00 
0b319     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b31d     7F 1C 20 00 
0b321     00 04 C1 00 
0b325     00 00 00 00 
0b329     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b32d     BE 10 00 00 
0b331     00 04 C1 00 
0b335     00 00 00 00 
0b339     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b33d     00 00 00 00 
0b341     00          | 	byte	$00[5]
0b342     04 C1 00 00 
0b346     00 00 00 00 
0b34a     0A 02 00 F0 
0b34e     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
0b352     70 00 00 FE 
0b356     60 00 01 E0 
0b35a     10 00 00 00 
0b35e     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
0b362     73 F0 00 00 
0b366     00 00 00 00 
0b36a     00 00 00 D6 
0b36e     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
0b372     73 F0 00 00 
0b376     00 00 00 00 
0b37a     00 00 00 F0 
0b37e     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0b382     0C 10 00 00 
0b386     00 00 00 00 
0b38a     00 00 00 F0 
0b38e     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
0b392     73 F0 00 00 
0b396     00 00 00 00 
0b39a     0A 02 00 00 
0b39e     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0b3a2     0C 10 00 00 
0b3a6     00 00 00 F0 
0b3aa     1A 02 00 7F 
0b3ae     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b3b2     71 06 00 CA 
0b3b6     50 00 01 7D 
0b3ba     10 00 00 00 
0b3be     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b3c2     73 F0 00 00 
0b3c6     00 00 00 00 
0b3ca     00 00 00 A0 
0b3ce     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b3d2     70 00 00 00 
0b3d6     00 00 00 00 
0b3da     00 00 00 7F 
0b3de     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b3e2     7C 20 00 00 
0b3e6     00 00 00 00 
0b3ea     00 00 00 BE 
0b3ee     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b3f2     70 00 00 00 
0b3f6     00 00 01 7D 
0b3fa     10 00 00 AA 
0b3fe     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b402     7C 20 00 00 
0b406     00 00 00 00 
0b40a     00 00 00 A0 
0b40e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b412     70 00 00 E2 
0b416     60 00 01 AC 
0b41a     10 00 00 A0 
0b41e     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b422     0C 10 00 00 
0b426     00 00 00 00 
0b42a     00 00 00 AA 
0b42e     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b432     73 F0 00 00 
0b436     00 00 00 00 
0b43a     00 00 00 BE 
0b43e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b442     0C 10 00 00 
0b446     00 00 00 00 
0b44a     00 00 00 AA 
0b44e     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b452     70 00 00 00 
0b456     00 00 00 00 
0b45a     0A 02 00 00 
0b45e     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b462     7C 20 00 00 
0b466     00 00 00 00 
0b46a     0A 02 00 A0 
0b46e     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b472     74 C1 00 FE 
0b476     60 00 01 E0 
0b47a     10 00 00 00 
0b47e     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b482     04 C1 00 00 
0b486     00 00 00 00 
0b48a     00 00 00 A0 
0b48e     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b492     04 C2 00 00 
0b496     00 00 00 00 
0b49a     00 00 00 A0 
0b49e     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b4a2     04 C2 00 00 
0b4a6     00 00 00 F0 
0b4aa     10 00 00 A0 
0b4ae     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b4b2     73 F0 00 00 
0b4b6     00 00 00 00 
0b4ba     00 00 00 00 
0b4be     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b4c2     70 00 00 00 
0b4c6     00 00 00 00 
0b4ca     00 00 00 8F 
0b4ce     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
0b4d2     71 04 00 E2 
0b4d6     60 00 01 AC 
0b4da     10 00 00 00 
0b4de     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b4e2     73 F0 00 00 
0b4e6     00 00 00 00 
0b4ea     00 00 00 8F 
0b4ee     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0b4f2     73 F0 00 00 
0b4f6     00 00 00 00 
0b4fa     00 00 00 A0 
0b4fe     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
0b502     7C 20 00 00 
0b506     00 00 00 00 
0b50a     00 00 00 8F 
0b50e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0b512     70 00 00 00 
0b516     00 00 01 AC 
0b51a     10 00 00 00 
0b51e     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b522     7C 20 00 00 
0b526     00 00 00 00 
0b52a     00 00 00 BE 
0b52e     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b532     70 00 00 CA 
0b536     50 00 01 7D 
0b53a     10 00 00 00 
0b53e     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b542     7C 20 00 00 
0b546     00 00 00 00 
0b54a     00 00 00 A0 
0b54e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b552     70 00 00 00 
0b556     00 00 00 00 
0b55a     00 00 00 00 
0b55e     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b562     70 00 00 00 
0b566     00 00 01 AC 
0b56a     10 00 00 8F 
0b56e     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
0b572     71 08 00 00 
0b576     00 00 00 00 
0b57a     00 00 00 00 
0b57e     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
0b582     73 F0 00 00 
0b586     00 00 00 00 
0b58a     00 00 00 00 
0b58e     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
0b592     0C 10 00 00 
0b596     00 00 00 00 
0b59a     00 00 00 7F 
0b59e     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0b5a2     71 06 00 00 
0b5a6     00 00 01 7D 
0b5aa     10 00 00 00 
0b5ae     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0b5b2     73 F0 00 00 
0b5b6     00 00 00 00 
0b5ba     00 00 00 00 
0b5be     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b5c2     04 C1 00 00 
0b5c6     00 00 00 00 
0b5ca     00 00 00 00 
0b5ce     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b5d2     06 02 00 00 
0b5d6     00 00 00 00 
0b5da     00 00 00 A0 
0b5de     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b5e2     06 02 00 00 
0b5e6     00 00 00 00 
0b5ea     00 00 00 8F 
0b5ee     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0b5f2     06 02 00 00 
0b5f6     00 00 00 00 
0b5fa     0D 00 00 00 
0b5fe     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b602     00 00 00 00 
      ...             
0b6e6     00 00 00 00 
0b6ea     00 00 00    | 	byte	$00[235]
0b6ed     7F 1F 05 00 
0b6f1     8F 71 04 00 
0b6f5     CA 50 00 01 
0b6f9     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b6fd     7F 1C 30 00 
0b701     87 73 F0 00 
0b705     00 00 00 00 
0b709     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b70d     A0 10 00 00 
0b711     00 04 C1 00 
0b715     00 00 00 00 
0b719     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b71d     7F 1C 30 00 
0b721     00 04 C1 00 
0b725     00 00 00 00 
0b729     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b72d     BE 10 00 00 
0b731     AA 70 00 00 
0b735     00 00 00 00 
0b739     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b73d     A0 1C 30 00 
0b741     87 7C 20 00 
0b745     00 00 00 00 
0b749     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b74d     F0 40 00 00 
0b751     97 70 00 00 
0b755     FE 60 00 01 
0b759     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0b75d     00 00 00 00 
0b761     AA 73 F0 00 
0b765     00 00 00 00 
0b769     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b76d     D6 4A 06 00 
0b771     97 73 F0 00 
0b775     00 00 00 00 
0b779     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b77d     D6 0E 93 00 
0b781     00 0C 10 00 
0b785     00 00 00 00 
0b789     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b78d     F0 40 00 00 
0b791     AA 73 F0 00 
0b795     00 00 00 00 
0b799     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b79d     00 00 00 00 
0b7a1     00          | 	byte	$00[5]
0b7a2     0C 10 00 00 
0b7a6     00 00 00 F0 
0b7aa     1A 02 00 7F 
0b7ae     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b7b2     71 06 00 CA 
0b7b6     50 00 01 7D 
0b7ba     10 00 00 00 
0b7be     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b7c2     73 F0 00 00 
0b7c6     00 00 00 00 
0b7ca     00 00 00 A0 
0b7ce     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b7d2     70 00 00 00 
0b7d6     00 00 00 00 
0b7da     00 00 00 7F 
0b7de     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b7e2     7C 20 00 00 
0b7e6     00 00 00 00 
0b7ea     00 00 00 BE 
0b7ee     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b7f2     70 00 00 00 
0b7f6     00 00 01 7D 
0b7fa     10 00 00 AA 
0b7fe     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b802     7C 20 00 00 
0b806     00 00 00 00 
0b80a     00 00 00 A0 
0b80e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b812     70 00 00 E2 
0b816     60 00 01 AC 
0b81a     10 00 00 A0 
0b81e     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b822     0C 10 00 00 
0b826     00 00 00 00 
0b82a     00 00 00 AA 
0b82e     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b832     73 F0 00 00 
0b836     00 00 00 00 
0b83a     00 00 00 BE 
0b83e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b842     0C 10 00 00 
0b846     00 00 00 00 
0b84a     00 00 00 AA 
0b84e     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b852     70 00 00 00 
0b856     00 00 00 00 
0b85a     0A 02 00 00 
0b85e     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b862     7C 20 00 00 
0b866     00 00 00 00 
0b86a     0A 02 00 A0 
0b86e     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b872     74 C1 00 FE 
0b876     60 00 01 E0 
0b87a     10 00 00 00 
0b87e     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b882     04 C1 00 00 
0b886     00 00 00 00 
0b88a     00 00 00 A0 
0b88e     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b892     04 C2 00 00 
0b896     00 00 00 00 
0b89a     00 00 00 A0 
0b89e     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b8a2     04 C2 00 00 
0b8a6     00 00 00 F0 
0b8aa     10 00 00 A0 
0b8ae     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b8b2     73 F0 00 00 
0b8b6     00 00 00 00 
0b8ba     00 00 00 00 
0b8be     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b8c2     70 00 00 00 
0b8c6     00 00 00 00 
0b8ca     00 00 00 AA 
0b8ce     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
0b8d2     71 04 00 E2 
0b8d6     60 00 01 AC 
0b8da     10 00 00 00 
0b8de     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b8e2     73 F0 00 00 
0b8e6     00 00 00 00 
0b8ea     00 00 00 AA 
0b8ee     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
0b8f2     73 F0 00 00 
0b8f6     00 00 00 00 
0b8fa     00 00 00 BE 
0b8fe     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0b902     7C 20 00 00 
0b906     00 00 00 00 
0b90a     00 00 00 AA 
0b90e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0b912     70 00 00 00 
0b916     00 00 01 AC 
0b91a     10 00 00 00 
0b91e     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b922     7C 20 00 00 
0b926     00 00 00 00 
0b92a     00 00 00 BE 
0b92e     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b932     70 00 00 CA 
0b936     50 00 01 7D 
0b93a     10 00 00 00 
0b93e     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b942     7C 20 00 00 
0b946     00 00 00 00 
0b94a     0F 06 00 A0 
0b94e     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
0b952     70 00 00 00 
0b956     00 00 00 00 
0b95a     00 00 00 00 
0b95e     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b962     70 00 00 00 
0b966     00 00 00 00 
0b96a     00 00 00 00 
0b96e     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
0b972     74 C2 00 00 
0b976     00 00 01 AC 
0b97a     10 00 00 AA 
0b97e     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0b982     04 C2 00 00 
0b986     00 00 00 00 
0b98a     0F 07 00 AA 
0b98e     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
0b992     0C 10 00 00 
0b996     00 00 00 00 
0b99a     0F 08 00 BE 
0b99e     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
0b9a2     71 02 00 00 
0b9a6     00 00 01 7D 
0b9aa     1F 0A 00 00 
0b9ae     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
0b9b2     73 F0 00 00 
0b9b6     00 00 00 00 
0b9ba     04 A2 00 00 
0b9be     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
0b9c2     04 C1 00 00 
0b9c6     0F 02 00 00 
0b9ca     06 02 00 00 
0b9ce     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b9d2     06 02 00 00 
0b9d6     0E 60 00 00 
0b9da     06 02 00 00 
0b9de     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b9e2     06 02 00 00 
0b9e6     0A 02 00 00 
0b9ea     06 02 00 00 
0b9ee     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b9f2     06 02 00 00 
0b9f6     0E 6F 00 00 
0b9fa     06 02 00 BE 
0b9fe     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
0ba02     7F 05 00 00 
0ba06     00 00 00 00 
0ba0a     06 02 00 BE 
0ba0e     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
0ba12     73 F0 00 00 
0ba16     0D 00 00 00 
0ba1a     06 02 00 00 
0ba1e     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
0ba22     00 00 00 00 
      ...             
0bae6     00 00 00 00 
0baea     00 00 00    | 	byte	$00[203]
0baed     7F 1F 05 00 
0baf1     8F 71 04 00 
0baf5     CA 90 00 00 
0baf9     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bafd     00 00 00 00 
0bb01     87 73 F0 00 
0bb05     00 00 00 00 
0bb09     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb0d     A0 10 00 00 
0bb11     00 04 C2 00 
0bb15     00 00 00 00 
0bb19     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb1d     7F 1C 20 00 
0bb21     00 04 C2 00 
0bb25     00 00 00 00 
0bb29     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb2d     BE 10 00 00 
0bb31     97 73 F0 00 
0bb35     00 00 00 00 
0bb39     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bb3d     00 00 00 00 
0bb41     AA 73 F0 00 
0bb45     00 00 00 00 
0bb49     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb4d     F0 40 00 00 
0bb51     97 70 00 00 
0bb55     FE B0 00 00 
0bb59     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0bb5d     00 00 00 00 
0bb61     AA 7C 20 00 
0bb65     00 00 00 00 
0bb69     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb6d     D6 4A 06 00 
0bb71     AA 70 00 00 
0bb75     00 00 00 00 
0bb79     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bb7d     F0 0E 93 00 
0bb81     97 7C 20 00 
0bb85     00 00 00 00 
0bb89     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb8d     F0 40 00 00 
0bb91     B4 70 00 00 
0bb95     00 00 00 00 
0bb99     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bb9d     00 00 00 00 
0bba1     AA 7C 20 00 
0bba5     00 00 00 00 
0bba9     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bbad     7F 10 00 00 
0bbb1     CA 74 C1 00 
0bbb5     CA 90 00 00 
0bbb9     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bbbd     00 00 00 00 
0bbc1     00          | 	byte	$00[5]
0bbc2     06 01 00 00 
0bbc6     00 00 00 00 
0bbca     00 00 00 A0 
0bbce     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0bbd2     06 01 00 00 
0bbd6     00 00 00 BE 
0bbda     A0 00 00 7F 
0bbde     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0bbe2     06 01 00 00 
0bbe6     00 00 00 BE 
0bbea     A0 00 00 BE 
0bbee     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bbf2     06 01 00 00 
0bbf6     00 00 00 BE 
0bbfa     3C 20 00 AA 
0bbfe     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
0bc02     06 01 00 00 
0bc06     00 00 00 BE 
0bc0a     A0 00 00 A0 
0bc0e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bc12     06 01 00 E2 
0bc16     B0 00 00 BE 
0bc1a     D0 00 00 A0 
0bc1e     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0bc22     06 01 00 00 
0bc26     00 00 00 00 
0bc2a     00 00 00 AA 
0bc2e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0bc32     06 01 00 00 
0bc36     00 00 00 BE 
0bc3a     A0 00 00 BE 
0bc3e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bc42     06 01 00 00 
0bc46     00 00 00 00 
0bc4a     00 00 00 AA 
0bc4e     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0bc52     70 00 00 00 
0bc56     00 00 00 BE 
0bc5a     30 00 00 00 
0bc5e     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
0bc62     7C 20 00 00 
0bc66     00 00 00 BE 
0bc6a     A0 00 00 A0 
0bc6e     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bc72     71 04 00 FE 
0bc76     B0 00 00 BE 
0bc7a     30 00 00 00 
0bc7e     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
0bc82     73 F0 00 00 
0bc86     00 00 00 00 
0bc8a     00 00 00 A0 
0bc8e     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0bc92     04 C1 00 00 
0bc96     00 00 00 BE 
0bc9a     A0 00 00 A0 
0bc9e     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
0bca2     04 C1 00 00 
0bca6     00 00 00 BE 
0bcaa     A0 00 00 A0 
0bcae     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bcb2     70 00 00 00 
0bcb6     00 00 00 BE 
0bcba     3C 20 00 00 
0bcbe     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
0bcc2     73 F0 00 00 
0bcc6     00 00 00 BE 
0bcca     A0 00 00 8F 
0bcce     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
0bcd2     73 F0 00 E2 
0bcd6     B0 00 00 BE 
0bcda     D0 00 00 00 
0bcde     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
0bce2     0C 10 00 00 
0bce6     00 00 00 00 
0bcea     00 00 00 8F 
0bcee     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0bcf2     73 F0 00 00 
0bcf6     00 00 00 BE 
0bcfa     A0 00 00 A0 
0bcfe     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bd02     0C 10 00 00 
0bd06     00 00 00 00 
0bd0a     00 00 00 8F 
0bd0e     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0bd12     74 C1 00 00 
0bd16     00 00 00 BE 
0bd1a     30 00 00 00 
0bd1e     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0bd22     04 C1 00 00 
0bd26     00 00 00 BE 
0bd2a     A0 00 00 BE 
0bd2e     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
0bd32     70 00 00 CA 
0bd36     90 00 00 BE 
0bd3a     30 00 00 00 
0bd3e     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
0bd42     73 F0 00 00 
0bd46     00 00 00 00 
0bd4a     00 00 00 A0 
0bd4e     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
0bd52     73 F0 00 00 
0bd56     00 00 00 BE 
0bd5a     A0 00 00 00 
0bd5e     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bd62     04 C1 00 00 
0bd66     00 00 00 BE 
0bd6a     A0 00 00 8F 
0bd6e     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0bd72     06 01 00 00 
0bd76     00 00 00 BE 
0bd7a     3C 20 00 00 
0bd7e     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0bd82     06 01 00 00 
0bd86     00 00 00 BE 
0bd8a     A0 00 00 7F 
0bd8e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
0bd92     06 01 00 00 
0bd96     00 00 00 BE 
0bd9a     D0 00 00 00 
0bd9e     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0bda2     04 C2 00 00 
0bda6     00 00 00 00 
0bdaa     00 00 00 00 
0bdae     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdb2     06 01 00 00 
0bdb6     00 00 00 BE 
0bdba     A0 00 00 00 
0bdbe     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bdc2     06 01 00 00 
0bdc6     00 00 00 00 
0bdca     00 00 00 A0 
0bdce     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
0bdd2     70 00 00 00 
0bdd6     00 00 00 BE 
0bdda     30 00 00 8F 
0bdde     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
0bde2     73 F0 00 00 
0bde6     0D 00 00 BE 
0bdea     A0 00 00 00 
0bdee     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bdf2     00 00 00 00 
      ...             
0bee6     00 00 00 00 
0beea     00 00 00    | 	byte	$00[251]
0beed     7F 1F 05 00 
0bef1     87 74 C2 00 
0bef5     CA 90 00 00 
0bef9     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0befd     7F 1C 30 00 
0bf01     00 04 C2 00 
0bf05     00 00 00 00 
0bf09     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf0d     A0 10 00 00 
0bf11     00 04 C2 00 
0bf15     00 00 00 00 
0bf19     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf1d     7F 1C 30 00 
0bf21     00 04 C2 00 
0bf25     00 00 00 00 
0bf29     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf2d     BE 10 00 00 
0bf31     97 73 F0 00 
0bf35     00 00 00 00 
0bf39     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bf3d     A0 1C 30 00 
0bf41     87 73 F0 00 
0bf45     00 00 00 00 
0bf49     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf4d     F0 40 00 00 
0bf51     7F 70 00 00 
0bf55     FE B0 00 00 
0bf59     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0bf5d     00 00 00 00 
0bf61     87 7C 20 00 
0bf65     00 00 00 00 
0bf69     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf6d     D6 4A 06 00 
0bf71     87 70 00 00 
0bf75     00 00 00 00 
0bf79     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf7d     D6 0E 93 00 
0bf81     7F 7C 20 00 
0bf85     00 00 00 00 
0bf89     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf8d     F0 40 00 00 
0bf91     97 70 00 00 
0bf95     00 00 00 00 
0bf99     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bf9d     00 00 00 00 
0bfa1     87 7C 20 00 
0bfa5     00 00 00 00 
0bfa9     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bfad     7F 10 00 00 
0bfb1     8F 71 04 00 
0bfb5     CA 90 00 00 
0bfb9     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bfbd     00 00 00 00 
0bfc1     87 73 F0 00 
0bfc5     00 00 00 00 
0bfc9     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bfcd     A0 10 00 00 
0bfd1     00 04 C2 00 
0bfd5     00 00 00 00 
0bfd9     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bfdd     7F 1C 20 00 
0bfe1     00 06 01 00 
0bfe5     00 00 00 00 
0bfe9     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bfed     BE 10 00 00 
0bff1     00 06 01 00 
0bff5     00 00 00 00 
0bff9     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bffd     AA 1C 30 00 
0c001     00 06 01 00 
0c005     00 00 00 00 
0c009     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c00d     A0 10 00 00 
0c011     00 06 01 00 
0c015     E2 B0 00 00 
0c019     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
0c01d     A0 1C 30 00 
0c021     00 06 01 00 
0c025     00 00 00 00 
0c029     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c02d     AA 10 00 00 
0c031     B4 71 03 00 
0c035     00 00 00 00 
0c039     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c03d     BE 10 00 00 
0c041     AA 73 F0 00 
0c045     00 00 00 00 
0c049     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c04d     AA 10 00 00 
0c051     B4 73 F0 00 
0c055     00 00 00 00 
0c059     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c05d     00 00 00 00 
0c061     00 00 00 00 
0c065     00 00 00 00 | 	byte	$00[12]
0c069     BE A0 00 00 
0c06d     A0 10 00 00 
0c071     D6 71 06 00 
0c075     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
0c079     BE 30 00 00 
0c07d     00 0C 20 00 
0c081     CA 73 F0 00 
0c085     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c089     00 00 00 00 
0c08d     A0 0E 93 00 
0c091     00 04 C2 00 
0c095     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c099     BE A0 00 00 
0c09d     A0 1C 20 00 
0c0a1     00 04 C2 00 
0c0a5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c0a9     BE A0 00 00 
0c0ad     A0 10 00 00 
0c0b1     B4 73 F0 00 
0c0b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
0c0b9     BE 3C 20 00 
0c0bd     00 00 00 00 
0c0c1     CA 73 F0 00 
0c0c5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c0c9     BE A0 00 00 
0c0cd     AA 10 00 00 
0c0d1     E2 74 C2 00 
0c0d5     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
0c0d9     BE D0 00 00 
0c0dd     00 0C 20 00 
0c0e1     00 06 01 00 
0c0e5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0e9     00 00 00 00 
0c0ed     AA 1E 93 01 
0c0f1     0D 74 C2 00 
0c0f5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
0c0f9     BE A0 00 00 
0c0fd     BE 10 00 00 
0c101     00 0C 10 00 
0c105     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c109     00 00 00 00 
0c10d     AA 10 00 00 
0c111     E2 74 C2 00 
0c115     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
0c119     BE 30 00 00 
0c11d     00 00 00 00 
0c121     00 0C 10 00 
0c125     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c129     BE A0 00 00 
0c12d     BE 10 00 00 
0c131     D6 71 08 00 
0c135     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
0c139     BE 30 00 00 
0c13d     00 00 00 00 
0c141     CA 73 F0 00 
0c145     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c149     00 00 00 00 
0c14d     A0 10 00 00 
0c151     00 04 C2 00 
0c155     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c159     BE A0 00 00 
0c15d     00 00 00 00 
0c161     00 06 01 00 
0c165     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c169     BE A0 00 00 
0c16d     AA 10 00 00 
0c171     00 06 01 00 
0c175     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c179     BE 3C 20 00 
0c17d     AA 1E 93 00 
0c181     00 06 01 00 
0c185     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c189     BE A0 00 00 
0c18d     BE 10 00 00 
0c191     00 06 01 00 
0c195     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c199     BE D0 00 00 
0c19d     00 04 A1 00 
0c1a1     00 06 01 00 
0c1a5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1a9     BE A0 00 00 
0c1ad     00 06 01 00 
0c1b1     00 06 01 00 
0c1b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1b9     BE AC 20 00 
0c1bd     00 06 01 00 
0c1c1     00 06 01 00 
0c1c5     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1c9     BE 3C 20 00 
0c1cd     00 06 01 00 
0c1d1     00 06 01 00 
0c1d5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c1d9     BE D0 00 00 
0c1dd     00 06 01 00 
0c1e1     00 06 01 00 
0c1e5     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
0c1e9     00 00 00 00 
      ...             
0c2e5     00 00 00 00 
0c2e9     00 00 00 00 | 	byte	$00[260]
0c2ed     BE 10 00 00 
0c2f1     00 06 01 00 
0c2f5     CA 90 00 00 
0c2f9     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c2fd     00 00 00 00 
0c301     00          | 	byte	$00[5]
0c302     06 01 00 00 
0c306     00 00 00 00 
0c30a     00 00 00 A0 
0c30e     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0c312     06 01 00 00 
0c316     00 00 00 BE 
0c31a     A0 00 00 8F 
0c31e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0c322     06 01 00 00 
0c326     00 00 00 BE 
0c32a     A0 00 00 A0 
0c32e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c332     06 01 00 00 
0c336     00 00 00 BE 
0c33a     3C 20 00 AA 
0c33e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0c342     06 01 00 00 
0c346     00 00 00 BE 
0c34a     A0 00 00 A0 
0c34e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c352     06 01 00 00 
0c356     00 00 00 BE 
0c35a     D0 00 00 A0 
0c35e     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0c362     06 01 00 00 
0c366     00 00 00 00 
0c36a     00 00 00 AA 
0c36e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0c372     06 01 00 00 
0c376     00 00 00 BE 
0c37a     A0 00 00 AA 
0c37e     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0c382     06 01 00 00 
0c386     00 00 00 00 
0c38a     00 00 00 BE 
0c38e     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0c392     06 01 00 00 
0c396     00 00 00 BE 
0c39a     30 00 00 BE 
0c39e     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0c3a2     0C 00 00 00 
0c3a6     00 00 00 BE 
0c3aa     A0 00 00 AA 
0c3ae     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0c3b2     00 00 01 0D 
0c3b6     B0 00 00 BE 
0c3ba     30 00 00 00 
0c3be     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0c3c2     00 00 00 00 
0c3c6     00 00 00 00 
0c3ca     00 00 00    | 	byte	$00[11]
0c3cd     AA 1E 93 00 
0c3d1     00 00 00 00 
0c3d5     00 00 00 00 
0c3d9     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3dd     A0 10 00 00 
0c3e1     00 00 00 00 
0c3e5     00 00 00 00 
0c3e9     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3ed     AA 10 00 00 
0c3f1     00 00 00 00 
0c3f5     00 00 00 00 
0c3f9     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c3fd     BE 10 00 00 
0c401     00 00 00 00 
0c405     00 00 00 00 
0c409     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c40d     AA 10 00 00 
0c411     00 00 00 00 
0c415     00 00 00 00 
0c419     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c41d     00 04 82 00 
0c421     00 00 00 00 
0c425     00 00 00 00 
0c429     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c42d     00 06 01 00 
0c431     00 00 00 00 
0c435     00 00 00 00 
0c439     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c43d     00 06 01 00 
0c441     00 00 00 00 
0c445     00 00 00 00 
0c449     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c44d     00 06 01 00 
0c451     00 00 00 00 
0c455     00 00 00 00 
0c459     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c45d     00 06 01 00 
0c461     00 00 00 00 
0c465     00 00 00 00 
0c469     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c46d     A0 10 00 00 
0c471     00 00 00 00 
0c475     CA 90 00 00 
0c479     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c47d     00 00 00 00 
0c481     00 00 00 00 
0c485     00 00 00 00 
0c489     00 00 00 00 | 	byte	$00[16]
0c48d     BE 1E 93 00 
0c491     00 00 00 00 
0c495     00 00 00 00 
0c499     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c49d     A0 10 00 00 
0c4a1     00 00 00 00 
0c4a5     00 00 00 00 
0c4a9     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4ad     8F 10 00 00 
0c4b1     00 00 00 00 
0c4b5     00 00 00 00 
0c4b9     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c4bd     A0 10 00 00 
0c4c1     00 00 00 00 
0c4c5     00 00 00 00 
0c4c9     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4cd     7F 10 00 00 
0c4d1     00 00 00 00 
0c4d5     00 00 00 00 
0c4d9     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c4dd     7F 1C 30 00 
0c4e1     00 00 00 00 
0c4e5     00 00 00 00 
0c4e9     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4ed     BE 40 00 00 
0c4f1     00 00 00 00 
0c4f5     00 00 00 00 
0c4f9     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4fd     BE 4A 08 00 
0c501     00 00 00 00 
0c505     00 00 00 00 
0c509     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c50d     D6 40 00 00 
0c511     00 00 00 00 
0c515     00 00 00 00 
0c519     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c51d     BE 40 00 00 
0c521     00 00 00 00 
0c525     00 00 00 00 
0c529     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c52d     7F 10 00 00 
0c531     00 00 00 01 
0c535     0D B0 00 00 
0c539     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c53d     7F 1C 30 00 
0c541     00 00 00 00 
0c545     00 00 00 00 
0c549     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c54d     7F 1E 93 00 
0c551     00 00 00 00 
0c555     00 00 00 00 
0c559     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c55d     F0 40 00 00 
0c561     00 00 00 00 
0c565     00 00 00 00 
0c569     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c56d     7F 10 00 00 
0c571     00 00 00 00 
0c575     00 00 00 00 
0c579     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c57d     8F 10 00 00 
0c581     00 00 00 00 
0c585     00 00 00 00 
0c589     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c58d     7F 10 00 00 
0c591     00 00 00 00 
0c595     00 00 00 00 
0c599     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c59d     00 04 81 00 
0c5a1     00 00 00 00 
0c5a5     00 00 00 00 
0c5a9     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5ad     00 06 01 00 
0c5b1     00 00 00 00 
0c5b5     00 00 00 00 
0c5b9     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c5bd     00 06 01 00 
0c5c1     00 00 00 00 
0c5c5     00 00 00 00 
0c5c9     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5cd     00 06 01 00 
0c5d1     00 00 00 00 
0c5d5     00 00 00 00 
0c5d9     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c5dd     00 06 01 00 
0c5e1     00 0D 00 00 
0c5e5     00 00 00 00 
0c5e9     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c5ed     00 00 00 00 
      ...             
0c6e5     00 00 00 00 
0c6e9     00 00 00 00 | 	byte	$00[256]
0c6ed     BE 10 00 00 
0c6f1     00 00 00 00 
0c6f5     CA 90 00 00 
0c6f9     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c6fd     00 00 00 00 
0c701     00 00 00 00 
0c705     00 00 00 00 
0c709     00 00 00 00 | 	byte	$00[16]
0c70d     A0 1E 93 00 
0c711     00 00 00 00 
0c715     00 00 00 00 
0c719     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c71d     8F 10 00 00 
0c721     00 00 00 00 
0c725     00 00 00 00 
0c729     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c72d     A0 10 00 00 
0c731     00 00 00 00 
0c735     00 00 00 00 
0c739     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c73d     AA 10 00 00 
0c741     00 00 00 00 
0c745     00 00 00 00 
0c749     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c74d     A0 10 00 00 
0c751     00 00 00 00 
0c755     00 00 00 00 
0c759     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c75d     A0 1C 30 00 
0c761     00 00 00 00 
0c765     00 00 00 00 
0c769     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c76d     AA 10 00 00 
0c771     00 00 00 00 
0c775     00 00 00 00 
0c779     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c77d     AA 1C 30 00 
0c781     00 00 00 00 
0c785     00 00 00 00 
0c789     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c78d     BE 10 00 00 
0c791     00 00 00 00 
0c795     00 00 00 00 
0c799     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c79d     BE 1C 30 00 
0c7a1     00 00 00 00 
0c7a5     00 00 00 00 
0c7a9     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7ad     AA 10 00 00 
0c7b1     00 00 00 01 
0c7b5     0D B0 00 00 
0c7b9     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c7bd     00 00 00 00 
0c7c1     00 00 00 00 
0c7c5     00 00 00 00 
0c7c9     00 00 00 00 | 	byte	$00[16]
0c7cd     AA 1E 93 00 
0c7d1     00 00 00 00 
0c7d5     00 00 00 00 
0c7d9     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7dd     A0 10 00 00 
0c7e1     00 00 00 00 
0c7e5     00 00 00 00 
0c7e9     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7ed     AA 10 00 00 
0c7f1     00 00 00 00 
0c7f5     00 00 00 00 
0c7f9     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c7fd     BE 10 00 00 
0c801     00 00 00 00 
0c805     00 00 00 00 
0c809     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c80d     AA 10 00 00 
0c811     00 00 00 00 
0c815     00 00 00 00 
0c819     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c81d     00 04 82 00 
0c821     00 00 00 00 
0c825     00 00 00 00 
0c829     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c82d     00 06 01 00 
0c831     00 00 00 00 
0c835     00 00 00 00 
0c839     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c83d     00 06 01 00 
0c841     00 00 00 00 
0c845     00 00 00 00 
0c849     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c84d     00 06 01 00 
0c851     00 00 00 00 
0c855     00 00 00 00 
0c859     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c85d     00 06 01 00 
0c861     00 00 00 00 
0c865     00 00 00 00 
0c869     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c86d     A0 10 00 00 
0c871     00 00 00 00 
0c875     FE B0 00 00 
0c879     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0c87d     00 0C 20 00 
0c881     00 00 00 00 
0c885     00 00 00 00 
0c889     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c88d     A0 0E 93 00 
0c891     00 00 00 00 
0c895     00 00 00 00 
0c899     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c89d     A0 1C 20 00 
0c8a1     00 00 00 00 
0c8a5     00 00 00 00 
0c8a9     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c8ad     A0 10 00 00 
0c8b1     00 00 00 00 
0c8b5     00 00 00 00 
0c8b9     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c8bd     00 00 00 00 
0c8c1     00 00 00 00 
0c8c5     00 00 00 00 | 	byte	$00[12]
0c8c9     BE A0 00 00 
0c8cd     AA 10 00 00 
0c8d1     00 00 00 00 
0c8d5     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
0c8d9     BE D0 00 00 
0c8dd     00 0C 20 00 
0c8e1     00 00 00 00 
0c8e5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8e9     00 00 00 00 
0c8ed     AA 1E 93 00 
0c8f1     00 00 00 00 
0c8f5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8f9     BE A0 00 00 
0c8fd     BE 10 00 00 
0c901     00 00 00 00 
0c905     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c909     00 00 00 00 
0c90d     AA 10 00 00 
0c911     00 00 00 00 
0c915     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c919     BE 30 00 00 
0c91d     00 00 00 00 
0c921     00 00 00 00 
0c925     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c929     BE A0 00 00 
0c92d     BE 10 00 00 
0c931     00 00 00 00 
0c935     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
0c939     BE 30 00 00 
0c93d     00 00 00 00 
0c941     00 00 00 00 
0c945     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c949     00 00 00 00 
0c94d     A0 10 00 00 
0c951     00 00 00 00 
0c955     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c959     BE A0 00 00 
0c95d     00 00 00 00 
0c961     00 00 00 00 
0c965     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c969     BE A0 00 00 
0c96d     AA 10 00 00 
0c971     00 00 00 00 
0c975     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c979     BE 3C 20 00 
0c97d     AA 1E 93 00 
0c981     00 00 00 00 
0c985     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c989     BE A0 00 00 
0c98d     BE 10 00 00 
0c991     00 00 00 00 
0c995     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c999     BE D0 00 00 
0c99d     00 04 A1 00 
0c9a1     00 00 00 00 
0c9a5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9a9     BE A0 00 00 
0c9ad     00 06 01 00 
0c9b1     00 00 00 00 
0c9b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9b9     BE AC 20 00 
0c9bd     00 06 01 00 
0c9c1     00 00 00 00 
0c9c5     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9c9     BE 3C 20 00 
0c9cd     00 06 01 00 
0c9d1     AA 70 00 00 
0c9d5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
0c9d9     BE D0 00 00 
0c9dd     00 06 01 00 
0c9e1     97 73 F0 00 
0c9e5     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
0c9e9     00 00 00 00 
      ...             
0cae5     00 00 00 00 
0cae9     00 00 00 00 | 	byte	$00[260]
0caed     BE 10 00 00 
0caf1     CA 70 00 00 
0caf5     CA 90 00 00 
0caf9     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0cafd     00 00 00 00 
0cb01     00          | 	byte	$00[5]
0cb02     04 C2 00 00 
0cb06     00 00 00 00 
0cb0a     00 00 00 A0 
0cb0e     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0cb12     04 C2 00 00 
0cb16     00 00 00 BE 
0cb1a     A0 00 00 8F 
0cb1e     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
0cb22     70 00 00 00 
0cb26     00 00 00 BE 
0cb2a     A0 00 00 A0 
0cb2e     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0cb32     73 F0 00 00 
0cb36     00 00 00 BE 
0cb3a     3C 20 00 AA 
0cb3e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0cb42     0C 10 00 00 
0cb46     00 00 00 BE 
0cb4a     A0 00 00 A0 
0cb4e     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
0cb52     71 04 00 00 
0cb56     00 00 00 BE 
0cb5a     D0 00 00 A0 
0cb5e     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
0cb62     73 F0 00 00 
0cb66     00 00 00 00 
0cb6a     00 00 00 AA 
0cb6e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0cb72     04 C2 00 00 
0cb76     00 00 00 BE 
0cb7a     A0 00 00 AA 
0cb7e     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0cb82     04 C2 00 00 
0cb86     00 00 00 00 
0cb8a     00 00 00 BE 
0cb8e     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0cb92     70 00 00 00 
0cb96     00 00 00 BE 
0cb9a     30 00 00 BE 
0cb9e     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cba2     00 00 00 00 
0cba6     00 00 00    | 	byte	$00[7]
0cba9     BE A0 00 00 
0cbad     AA 10 00 00 
0cbb1     8F 71 03 01 
0cbb5     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
0cbb9     BE 30 00 00 
0cbbd     00 00 00 00 
0cbc1     87 73 F0 00 
0cbc5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
0cbc9     00 00 00 00 
0cbcd     AA 1E 93 00 
0cbd1     00 04 C1 00 
0cbd5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
0cbd9     BE A0 00 00 
0cbdd     A0 10 00 00 
0cbe1     00 06 01 00 
0cbe5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbe9     BE A0 00 00 
0cbed     AA 10 00 00 
0cbf1     00 06 01 00 
0cbf5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbf9     BE 3C 20 00 
0cbfd     BE 10 00 00 
0cc01     00 06 01 00 
0cc05     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cc09     BE A0 00 00 
0cc0d     AA 10 00 00 
0cc11     00 04 A2 00 
0cc15     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
0cc19     BE D0 00 00 
0cc1d     00 04 82 00 
0cc21     00 06 01 00 
0cc25     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cc29     00 00 00 00 
0cc2d     00          | 	byte	$00[5]
0cc2e     06 01 00 00 
0cc32     06 01 00 00 
0cc36     00 00 00 BE 
0cc3a     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cc3e     06 01 00 00 
0cc42     06 01 00 00 
0cc46     00 00 00 00 
0cc4a     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc4e     06 01 00 00 
0cc52     06 01 00 00 
0cc56     00 00 00 BE 
0cc5a     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cc5e     06 01 00 00 
0cc62     06 01 00 00 
0cc66     00 00 00 BE 
0cc6a     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cc6e     10 00 00 AA 
0cc72     70 00 00 CA 
0cc76     90 00 00 BE 
0cc7a     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0cc7e     00 00 00 00 
0cc82     04 C2 00 00 
0cc86     00 00 00 00 
0cc8a     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cc8e     1E 93 00 00 
0cc92     04 C2 00 00 
0cc96     00 00 00 BE 
0cc9a     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cc9e     10 00 00 B4 
0cca2     73 F0 00 00 
0cca6     00 00 00 BE 
0ccaa     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
0ccae     10 00 00 CA 
0ccb2     73 F0 00 00 
0ccb6     00 00 00 BE 
0ccba     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
0ccbe     10 00 00 00 
0ccc2     0C 10 00 00 
0ccc6     00 00 00 BE 
0ccca     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0ccce     10 00 00 BE 
0ccd2     71 06 00 00 
0ccd6     00 00 00 BE 
0ccda     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
0ccde     1C 30 00 B4 
0cce2     73 F0 00 00 
0cce6     00 00 00 00 
0ccea     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0ccee     40 00 00 CA 
0ccf2     70 00 00 00 
0ccf6     00 00 00 BE 
0ccfa     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0ccfe     4A 08 00 AA 
0cd02     73 F0 00 00 
0cd06     00 00 00 00 
0cd0a     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0cd0e     40 00 00 97 
0cd12     73 F0 00 00 
0cd16     00 00 00 BE 
0cd1a     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
0cd1e     40 00 00 00 
0cd22     0C 10 00 00 
0cd26     00 00 00 BE 
0cd2a     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cd2e     10 00 00 8F 
0cd32     71 02 01 0D 
0cd36     B0 00 00 BE 
0cd3a     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
0cd3e     1C 30 00 87 
0cd42     73 F0 00 00 
0cd46     00 00 00 00 
0cd4a     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0cd4e     1E 93 00 00 
0cd52     04 C1 00 00 
0cd56     00 00 00 BE 
0cd5a     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
0cd5e     40 00 00 00 
0cd62     04 C1 00 00 
0cd66     00 00 00 BE 
0cd6a     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cd6e     10 00 00 7F 
0cd72     73 F0 00 00 
0cd76     00 00 00 BE 
0cd7a     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
0cd7e     10 00 00 00 
0cd82     0C 10 00 00 
0cd86     00 00 00 BE 
0cd8a     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cd8e     10 00 00 8F 
0cd92     71 03 00 00 
0cd96     00 00 00 BE 
0cd9a     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0cd9e     04 81 00 87 
0cda2     73 F0 00 00 
0cda6     00 00 00 00 
0cdaa     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cdae     06 01 00 00 
0cdb2     04 C1 00 00 
0cdb6     00 00 00 BE 
0cdba     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cdbe     06 01 00 00 
0cdc2     06 01 00 00 
0cdc6     00 00 00 00 
0cdca     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cdce     06 01 00 00 
0cdd2     04 C2 00 00 
0cdd6     00 00 00 BE 
0cdda     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cdde     06 01 00 00 
0cde2     06 01 00 00 
0cde6     0D 00 00 BE 
0cdea     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
0cdee     00 00 00 00 
      ...             
0cee6     00 00 00 00 
0ceea     00 00 00    | 	byte	$00[255]
0ceed     A0 10 00 00 
0cef1     7F 74 C1 00 
0cef5     FE B0 00 00 
0cef9     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0cefd     00 00 00 00 
0cf01     00          | 	byte	$00[5]
0cf02     04 C2 00 00 
0cf06     00 00 00 00 
0cf0a     00 00 00 A0 
0cf0e     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0cf12     04 C2 00 00 
0cf16     00 00 00 BE 
0cf1a     A0 00 00 8F 
0cf1e     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
0cf22     70 00 00 00 
0cf26     00 00 00 BE 
0cf2a     A0 00 00 A0 
0cf2e     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0cf32     73 F0 00 00 
0cf36     00 00 00 BE 
0cf3a     3C 20 00 AA 
0cf3e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0cf42     0C 10 00 00 
0cf46     00 00 00 BE 
0cf4a     A0 00 00 A0 
0cf4e     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
0cf52     71 03 00 00 
0cf56     00 00 00 BE 
0cf5a     D0 00 00 A0 
0cf5e     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
0cf62     73 F0 00 00 
0cf66     00 00 00 00 
0cf6a     00 00 00 AA 
0cf6e     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0cf72     04 C1 00 00 
0cf76     00 00 00 BE 
0cf7a     A0 00 00 AA 
0cf7e     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0cf82     04 C1 00 00 
0cf86     00 00 00 00 
0cf8a     00 00 00 BE 
0cf8e     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
0cf92     73 F0 00 00 
0cf96     00 00 00 BE 
0cf9a     30 00 00 BE 
0cf9e     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cfa2     0C 10 00 00 
0cfa6     00 00 00 BE 
0cfaa     A0 00 00 AA 
0cfae     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
0cfb2     71 02 01 0D 
0cfb6     B0 00 00 BE 
0cfba     30 00 00 00 
0cfbe     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
0cfc2     73 F0 00 00 
0cfc6     00 00 00 00 
0cfca     00 00 00 AA 
0cfce     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0cfd2     04 C1 00 00 
0cfd6     00 00 00 BE 
0cfda     A0 00 00 A0 
0cfde     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0cfe2     04 C1 00 00 
0cfe6     00 00 00 BE 
0cfea     A0 00 00 AA 
0cfee     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
0cff2     71 03 00 00 
0cff6     00 00 00 BE 
0cffa     3C 20 00 BE 
0cffe     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
0d002     7C 10 00 00 
0d006     00 00 00 BE 
0d00a     A0 00 00 AA 
0d00e     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0d012     00 00 00 00 
0d016     00 00 00    | 	byte	$00[7]
0d019     BE D0 00 00 
0d01d     00 04 82 00 
0d021     00 00 00 00 
0d025     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d029     00 00 00 00 
0d02d     00          | 	byte	$00[5]
0d02e     06 01 00 B4 
0d032     74 C2 00 00 
0d036     00 00 00 BE 
0d03a     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d03e     06 01 00 00 
0d042     04 C2 00 00 
0d046     00 00 00 00 
0d04a     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d04e     06 01 00 00 
0d052     04 C2 00 00 
0d056     00 00 00 BE 
0d05a     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d05e     06 01 00 00 
0d062     04 C2 00 00 
0d066     00 00 00 BE 
0d06a     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d06e     10 00 00 D6 
0d072     71 04 00 CA 
0d076     90 00 00 BE 
0d07a     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d07e     0C 20 00 CA 
0d082     73 F0 00 00 
0d086     00 00 00 00 
0d08a     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0d08e     0E 93 00 00 
0d092     04 C2 00 00 
0d096     00 00 00 BE 
0d09a     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d09e     1C 20 00 00 
0d0a2     06 01 00 00 
0d0a6     00 00 00 BE 
0d0aa     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d0ae     10 00 00 00 
0d0b2     06 01 00 00 
0d0b6     00 00 00 BE 
0d0ba     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d0be     00 00 00 00 
0d0c2     06 01 00 00 
0d0c6     00 00 00 BE 
0d0ca     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0d0ce     10 00 00 00 
0d0d2     06 01 00 E2 
0d0d6     B0 00 00 BE 
0d0da     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
0d0de     0C 20 00 00 
0d0e2     06 01 00 00 
0d0e6     00 00 00 00 
0d0ea     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d0ee     1E 93 00 00 
0d0f2     06 01 00 00 
0d0f6     00 00 00 BE 
0d0fa     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0d0fe     10 00 00 00 
0d102     06 01 00 00 
0d106     00 00 00 00 
0d10a     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d10e     10 00 00 00 
0d112     06 01 00 00 
0d116     00 00 00 BE 
0d11a     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d11e     00 00 00 00 
0d122     06 01 00 00 
0d126     00 00 00 BE 
0d12a     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d12e     10 00 00 00 
0d132     06 01 00 CA 
0d136     90 00 00 BE 
0d13a     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d13e     00 00 00 00 
0d142     06 01 00 00 
0d146     00 00 00 00 
0d14a     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0d14e     10 00 00 00 
0d152     06 01 00 00 
0d156     00 00 00 BE 
0d15a     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d15e     00 00 00 00 
0d162     06 01 00 00 
0d166     00 00 00 BE 
0d16a     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
0d16e     10 00 00 00 
0d172     06 01 00 00 
0d176     00 00 00 BE 
0d17a     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
0d17e     1E 93 00 00 
0d182     06 01 00 00 
0d186     00 00 00 BE 
0d18a     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d18e     10 00 00 00 
0d192     06 01 00 00 
0d196     00 00 00 BE 
0d19a     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d19e     04 A1 00 00 
0d1a2     06 01 00 00 
0d1a6     00 00 00 BE 
0d1aa     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d1ae     06 01 00 00 
0d1b2     06 01 00 00 
0d1b6     00 00 00 BE 
0d1ba     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
0d1be     06 01 00 00 
0d1c2     06 01 00 00 
0d1c6     00 00 00 BE 
0d1ca     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d1ce     06 01 00 00 
0d1d2     06 01 00 00 
0d1d6     00 00 00 BE 
0d1da     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d1de     06 01 00 00 
0d1e2     06 01 00 00 
0d1e6     0D 00 00 00 
0d1ea     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0d1ee     00 00 00 00 
      ...             
0d2e6     00 00 00 00 
0d2ea     00 00 00    | 	byte	$00[255]
0d2ed     7F 1F 05 00 
0d2f1     BE 20 00 00 
0d2f5     CA 90 00 00 
0d2f9     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d2fd     00 00 00 00 
0d301     00          | 	byte	$00[5]
0d302     0A 02 00 00 
0d306     00 00 00 00 
0d30a     00 00 00 A0 
0d30e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d312     0A 02 00 00 
0d316     00 00 00 BE 
0d31a     A0 00 00 7F 
0d31e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d322     0A 02 00 00 
0d326     00 00 00 BE 
0d32a     A0 00 00 BE 
0d32e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d332     0A 02 00 00 
0d336     00 00 00 BE 
0d33a     3C 20 00 00 
0d33e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d342     0A 02 00 00 
0d346     00 00 00 BE 
0d34a     A0 00 00 F0 
0d34e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d352     20 00 00 FE 
0d356     B0 00 00 BE 
0d35a     D0 00 00 00 
0d35e     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d362     00 00 00 00 
0d366     00 00 00 00 
0d36a     00 00 00    | 	byte	$00[11]
0d36d     D6 4A 06 00 
0d371     BE 2E 93 00 
0d375     00 00 00 00 
0d379     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d37d     F0 0E 93 00 
0d381     BE 20 00 00 
0d385     00 00 00 00 
0d389     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d38d     F0 40 00 00 
0d391     D6 20 00 00 
0d395     00 00 00 00 
0d399     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d39d     00 00 00 00 
0d3a1     00          | 	byte	$00[5]
0d3a2     0C 20 00 00 
0d3a6     00 00 00 BE 
0d3aa     A0 00 00 7F 
0d3ae     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d3b2     20 00 00 CA 
0d3b6     90 00 00 BE 
0d3ba     30 00 00 00 
0d3be     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d3c2     0A 02 00 00 
0d3c6     00 00 00 00 
0d3ca     00 00 00 A0 
0d3ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d3d2     0A 02 00 00 
0d3d6     00 00 00 BE 
0d3da     A0 00 00 7F 
0d3de     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d3e2     0A 02 00 00 
0d3e6     00 00 00 BE 
0d3ea     A0 00 00 BE 
0d3ee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d3f2     00 00 00 00 
0d3f6     00 00 00    | 	byte	$00[7]
0d3f9     BE 3C 20 00 
0d3fd     AA 1C 30 00 
0d401     BE 0E 93 00 
0d405     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d409     BE A0 00 00 
0d40d     A0 10 00 00 
0d411     D6 20 00 00 
0d415     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d419     BE D0 00 00 
0d41d     A0 1C 30 00 
0d421     00 0A 02 00 
0d425     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d429     00 00 00 00 
0d42d     AA 10 00 00 
0d431     00 0A 02 00 
0d435     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d439     BE A0 00 00 
0d43d     BE 10 00 00 
0d441     D6 2C 20 00 
0d445     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d449     00 00 00 00 
0d44d     AA 10 00 00 
0d451     D6 2A 04 00 
0d455     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d459     BE 30 00 00 
0d45d     00 00 00 00 
0d461     00 0A 04 00 
0d465     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d469     BE A0 00 00 
0d46d     A0 10 00 00 
0d471     F0 20 00 00 
0d475     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d479     BE 30 00 00 
0d47d     00 0C 20 00 
0d481     00 00 00 00 
0d485     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d489     00 00 00 00 
0d48d     A0 0E 93 00 
0d491     F0 20 00 00 
0d495     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d499     BE A0 00 00 
0d49d     A0 1C 20 00 
0d4a1     F0 2C 30 00 
0d4a5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d4a9     BE A0 00 00 
0d4ad     A0 10 00 00 
0d4b1     F0 20 00 00 
0d4b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d4b9     BE 3C 20 00 
0d4bd     00 00 00 00 
0d4c1     00 00 00 00 
0d4c5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4c9     BE A0 00 00 
0d4cd     8F 10 00 00 
0d4d1     D6 20 00 00 
0d4d5     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d4d9     BE D0 00 00 
0d4dd     00 0C 20 00 
0d4e1     00 00 00 00 
0d4e5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4e9     00 00 00 00 
0d4ed     8F 1E 93 00 
0d4f1     D6 20 00 00 
0d4f5     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d4f9     BE A0 00 00 
0d4fd     A0 10 00 00 
0d501     BE 2C 30 00 
0d505     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d509     00 00 00 00 
0d50d     8F 10 00 00 
0d511     D6 20 00 00 
0d515     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d519     BE 30 00 00 
0d51d     00 00 00 00 
0d521     00 00 00 00 
0d525     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d529     BE A0 00 00 
0d52d     BE 10 00 00 
0d531     BE 20 00 00 
0d535     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
0d539     BE 30 00 00 
0d53d     00 00 00 00 
0d541     BE 2C 30 00 
0d545     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d549     00 00 00 00 
0d54d     A0 10 00 01 
0d551     7D 20 00 00 
0d555     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0d559     BE A0 00 00 
0d55d     00 00 00 00 
0d561     BE 2C 30 00 
0d565     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d569     BE A0 00 00 
0d56d     8F 10 00 00 
0d571     00 0A 06 00 
0d575     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
0d579     BE 3C 20 00 
0d57d     00 00 00 00 
0d581     BE 0E 93 00 
0d585     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d589     BE A0 00 00 
0d58d     7F 10 00 00 
0d591     BE 2C 30 00 
0d595     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d599     BE D0 00 00 
0d59d     00 00 00 00 
0d5a1     00 0A 02 00 
0d5a5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d5a9     00 00 00 00 
0d5ad     00 00 00 00 
0d5b1     00          | 	byte	$00[9]
0d5b2     0A 02 00 00 
0d5b6     00 00 00 BE 
0d5ba     A0 00 00 00 
0d5be     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d5c2     0A 02 00 00 
0d5c6     00 00 00 00 
0d5ca     00 00 00 A0 
0d5ce     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0d5d2     0A 02 00 00 
0d5d6     00 00 00 BE 
0d5da     30 00 00 8F 
0d5de     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
0d5e2     0A 02 00 00 
0d5e6     0D 00 00 BE 
0d5ea     A0 00 00 00 
0d5ee     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d5f2     00 00 00 00 
      ...             
0d6e6     00 00 00 00 
0d6ea     00 00 00    | 	byte	$00[251]
0d6ed     7F 1F 05 00 
0d6f1     BE 20 00 00 
0d6f5     CA 90 00 00 
0d6f9     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d6fd     00 00 00 00 
0d701     00          | 	byte	$00[5]
0d702     0A 02 00 00 
0d706     00 00 00 00 
0d70a     00 00 00 A0 
0d70e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d712     0A 02 00 00 
0d716     00 00 00 BE 
0d71a     A0 00 00 7F 
0d71e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d722     0A 02 00 00 
0d726     00 00 00 BE 
0d72a     A0 00 00 BE 
0d72e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d732     0A 02 00 00 
0d736     00 00 00 BE 
0d73a     3C 20 00 00 
0d73e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d742     0A 02 00 00 
0d746     00 00 00 BE 
0d74a     A0 00 00 F0 
0d74e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d752     20 00 00 FE 
0d756     B0 00 00 BE 
0d75a     D0 00 00 00 
0d75e     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d762     00 00 00 00 
0d766     00 00 00 00 
0d76a     00 00 00    | 	byte	$00[11]
0d76d     D6 4A 06 00 
0d771     BE 2E 93 00 
0d775     00 00 00 00 
0d779     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d77d     F0 0E 93 00 
0d781     BE 20 00 00 
0d785     00 00 00 00 
0d789     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d78d     F0 40 00 00 
0d791     D6 20 00 00 
0d795     00 00 00 00 
0d799     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d79d     00 00 00 00 
0d7a1     00          | 	byte	$00[5]
0d7a2     0C 20 00 00 
0d7a6     00 00 00 BE 
0d7aa     A0 00 00 7F 
0d7ae     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d7b2     20 00 00 CA 
0d7b6     90 00 00 BE 
0d7ba     30 00 00 00 
0d7be     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d7c2     0A 02 00 00 
0d7c6     00 00 00 00 
0d7ca     00 00 00 A0 
0d7ce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d7d2     0A 02 00 00 
0d7d6     00 00 00 BE 
0d7da     A0 00 00 7F 
0d7de     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d7e2     0A 02 00 00 
0d7e6     00 00 00 BE 
0d7ea     A0 00 00 BE 
0d7ee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d7f2     00 00 00 00 
0d7f6     00 00 00    | 	byte	$00[7]
0d7f9     BE 3C 20 00 
0d7fd     AA 1C 30 00 
0d801     BE 0E 93 00 
0d805     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d809     BE A0 00 00 
0d80d     A0 10 00 00 
0d811     D6 20 00 00 
0d815     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d819     BE D0 00 00 
0d81d     A0 1C 30 00 
0d821     00 0A 02 00 
0d825     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d829     00 00 00 00 
0d82d     AA 10 00 00 
0d831     00 0A 02 00 
0d835     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d839     BE A0 00 00 
0d83d     BE 10 00 00 
0d841     D6 2C 20 00 
0d845     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d849     00 00 00 00 
0d84d     AA 10 00 00 
0d851     D6 2A 04 00 
0d855     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d859     BE 30 00 00 
0d85d     00 00 00 00 
0d861     00 0A 04 00 
0d865     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d869     BE A0 00 00 
0d86d     A0 10 00 00 
0d871     F0 20 00 00 
0d875     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d879     BE 30 00 00 
0d87d     00 0C 20 00 
0d881     00 00 00 00 
0d885     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d889     00 00 00 00 
0d88d     A0 0E 93 00 
0d891     F0 20 00 00 
0d895     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d899     BE A0 00 00 
0d89d     A0 1C 20 00 
0d8a1     F0 2C 30 00 
0d8a5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d8a9     BE A0 00 00 
0d8ad     A0 10 00 00 
0d8b1     F0 20 00 00 
0d8b5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d8b9     BE 3C 20 00 
0d8bd     00 00 00 00 
0d8c1     00 00 00 00 
0d8c5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d8c9     BE A0 00 00 
0d8cd     8F 10 00 00 
0d8d1     D6 20 00 00 
0d8d5     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d8d9     BE D0 00 00 
0d8dd     00 0C 20 00 
0d8e1     00 00 00 00 
0d8e5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d8e9     00 00 00 00 
0d8ed     8F 1E 93 00 
0d8f1     D6 20 00 00 
0d8f5     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d8f9     BE A0 00 00 
0d8fd     A0 10 00 00 
0d901     BE 2C 30 00 
0d905     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d909     00 00 00 00 
0d90d     8F 10 00 00 
0d911     D6 20 00 00 
0d915     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d919     BE 30 00 00 
0d91d     00 00 00 00 
0d921     00 00 00 00 
0d925     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d929     BE A0 00 00 
0d92d     BE 10 00 01 
0d931     1D 20 00 00 
0d935     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0d939     BE 30 00 00 
0d93d     BE 1C 30 00 
0d941     00 00 00 00 
0d945     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d949     00 00 00 00 
0d94d     BE 10 00 00 
0d951     00 00 00 00 
0d955     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
0d959     BE A0 00 00 
0d95d     BE 1C 30 01 
0d961     1D 2C 30 00 
0d965     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0d969     BE A0 00 00 
0d96d     D6 10 00 00 
0d971     00 00 00 00 
0d975     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d979     BE 3C 20 00 
0d97d     BE 1E D4 00 
0d981     00 00 00 00 
0d985     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
0d989     BE A0 00 00 
0d98d     BE 10 00 01 
0d991     1D 0C 20 00 
0d995     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0d999     BE D0 00 00 
0d99d     00 0A 01 00 
0d9a1     00 00 00 00 
0d9a5     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
0d9a9     00 00 00 00 
0d9ad     00          | 	byte	$00[5]
0d9ae     0A 01 00 00 
0d9b2     00 00 00 00 
0d9b6     0A 01 00 00 
0d9ba     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9be     0A 01 01 1D 
0d9c2     0C 10 00 00 
0d9c6     0A 01 00 00 
0d9ca     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9ce     0A 01 00 00 
0d9d2     00 00 00 00 
0d9d6     0A 01 00 00 
0d9da     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9de     0A 01 00 00 
0d9e2     00 00 00 00 
0d9e6     0A 01 00 00 
0d9ea     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9ee     0A 01 00 00 
0d9f2     0C 00 00 00 
0d9f6     0A 01 00 00 
0d9fa     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d9fe     0A 01 00 00 
0da02     0E 60 00 00 
0da06     0A 01 00 00 
0da0a     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
0da0e     0A 01 00 00 
0da12     0E 6F 00 00 
0da16     0A 01 00 00 
0da1a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0da1e     0C 00 00 00 
0da22     00 00 00 00 
0da26     0C 00 00 00 
0da2a     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
0da2e     0F 1F 00 00 
0da32     00 00 00 00 
0da36     00 00 00 00 
0da3a     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0da3e     00 00 00 00 
      ...             
0dae6     00 00 00 00 
0daea     00 00 00    | 	byte	$00[175]
0daed     7F 1F 05 00 
0daf1     BE 20 00 00 
0daf5     CA 90 00 00 
0daf9     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0dafd     00 00 00 00 
0db01     00          | 	byte	$00[5]
0db02     0A 02 00 00 
0db06     00 00 00 00 
0db0a     00 00 00 A0 
0db0e     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0db12     0A 02 00 00 
0db16     00 00 00 BE 
0db1a     A0 00 00 7F 
0db1e     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0db22     0A 02 00 00 
0db26     00 00 00 BE 
0db2a     A0 00 00 BE 
0db2e     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0db32     0A 02 00 00 
0db36     00 00 00 BE 
0db3a     3C 20 00 00 
0db3e     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0db42     0A 02 00 00 
0db46     00 00 00 BE 
0db4a     A0 00 00 F0 
0db4e     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0db52     20 00 00 FE 
0db56     B0 00 00 BE 
0db5a     D0 00 00 00 
0db5e     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0db62     00 00 00 00 
0db66     00 00 00 00 
0db6a     00 00 00    | 	byte	$00[11]
0db6d     D6 4A 06 00 
0db71     BE 2E 93 00 
0db75     00 00 00 00 
0db79     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0db7d     F0 0E 93 00 
0db81     BE 20 00 00 
0db85     00 00 00 00 
0db89     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0db8d     F0 40 00 00 
0db91     D6 20 00 00 
0db95     00 00 00 00 
0db99     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0db9d     00 00 00 00 
0dba1     00          | 	byte	$00[5]
0dba2     0C 20 00 00 
0dba6     00 00 00 BE 
0dbaa     A0 00 00 7F 
0dbae     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0dbb2     20 00 00 CA 
0dbb6     90 00 00 BE 
0dbba     30 00 00 00 
0dbbe     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0dbc2     0A 02 00 00 
0dbc6     00 00 00 00 
0dbca     00 00 00 A0 
0dbce     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0dbd2     0A 02 00 00 
0dbd6     00 00 00 BE 
0dbda     A0 00 00 7F 
0dbde     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0dbe2     0A 02 00 00 
0dbe6     00 00 00 BE 
0dbea     A0 00 00 BE 
0dbee     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0dbf2     00 00 00 00 
0dbf6     00 00 00    | 	byte	$00[7]
0dbf9     BE 3C 20 00 
0dbfd     AA 1C 30 00 
0dc01     BE 0E 93 00 
0dc05     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0dc09     BE A0 00 00 
0dc0d     A0 10 00 00 
0dc11     D6 20 00 00 
0dc15     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0dc19     BE D0 00 00 
0dc1d     A0 1C 30 00 
0dc21     00 0A 02 00 
0dc25     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0dc29     00 00 00 00 
0dc2d     AA 10 00 00 
0dc31     00 0A 02 00 
0dc35     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0dc39     BE A0 00 00 
0dc3d     BE 10 00 00 
0dc41     D6 2C 20 00 
0dc45     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0dc49     00 00 00 00 
0dc4d     AA 10 00 00 
0dc51     D6 2A 04 00 
0dc55     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0dc59     BE 30 00 00 
0dc5d     00 00 00 00 
0dc61     00 0A 04 00 
0dc65     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0dc69     BE A0 00 00 
0dc6d     A0 10 00 00 
0dc71     F0 20 00 00 
0dc75     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0dc79     BE 30 00 00 
0dc7d     00 0C 20 00 
0dc81     00 00 00 00 
0dc85     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc89     00 00 00 00 
0dc8d     A0 0E 93 00 
0dc91     F0 20 00 00 
0dc95     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dc99     BE A0 00 00 
0dc9d     A0 1C 20 00 
0dca1     F0 2C 30 00 
0dca5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0dca9     BE A0 00 00 
0dcad     A0 10 00 00 
0dcb1     F0 20 00 00 
0dcb5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dcb9     BE 3C 20 00 
0dcbd     00 00 00 00 
0dcc1     00 00 00 00 
0dcc5     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcc9     BE A0 00 00 
0dccd     8F 10 00 00 
0dcd1     D6 20 00 00 
0dcd5     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0dcd9     BE D0 00 00 
0dcdd     00 0C 20 00 
0dce1     00 00 00 00 
0dce5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dce9     00 00 00 00 
0dced     8F 1E 93 00 
0dcf1     D6 20 00 00 
0dcf5     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dcf9     BE A0 00 00 
0dcfd     A0 10 00 00 
0dd01     BE 2C 30 00 
0dd05     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0dd09     00 00 00 00 
0dd0d     8F 10 00 00 
0dd11     D6 20 00 00 
0dd15     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dd19     BE 30 00 00 
0dd1d     00 00 00 00 
0dd21     00 00 00 00 
0dd25     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd29     BE A0 00 00 
0dd2d     BE 10 00 01 
0dd31     1D 20 00 00 
0dd35     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0dd39     BE 30 00 00 
0dd3d     00 00 00 00 
0dd41     00 00 00 00 
0dd45     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd49     00 00 00 00 
0dd4d     BE 10 00 00 
0dd51     00 00 00 00 
0dd55     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd59     BE A0 00 00 
0dd5d     00 00 00 01 
0dd61     1D 2C 30 00 
0dd65     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0dd69     BE A0 00 00 
0dd6d     D6 10 00 00 
0dd71     00 00 00 00 
0dd75     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd79     BE 3C 20 00 
0dd7d     00 00 00 00 
0dd81     00 00 00 00 
0dd85     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd89     BE A0 00 00 
0dd8d     BE 10 00 01 
0dd91     1D 0C 20 00 
0dd95     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0dd99     BE D0 00 00 
0dd9d     00 00 00 00 
0dda1     00 00 00 00 
0dda5     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dda9     00 00 00 00 
0ddad     BE 10 00 00 
0ddb1     00 00 00 00 
0ddb5     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddb9     BE A0 00 00 
0ddbd     BE 1E D3 01 
0ddc1     1D 0C 10 00 
0ddc5     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
0ddc9     BE AC 20 00 
0ddcd     A0 10 00 00 
0ddd1     00 00 00 00 
0ddd5     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddd9     BE 30 00 00 
0dddd     00 00 00 00 
0dde1     00 00 00 00 
0dde5     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dde9     BE AD 00 00 
0dded     00 00 00 00 
0ddf1     00 00 00 00 
0ddf5     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddf9     00 00 00 00 
      ...             
0dee9     00 00 00 00 
0deed     00          | 	byte	$00[245]
0deee     08 09 06 07 
0def2     06 08 09 08 
0def6     09 0C 0A 09 
0defa     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
0defe     07 07 0A 0C 
0df02     0A 09 0A 08 
0df06     0A 09 0A 0C 
0df0a     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
0df0e     0D 0E 0C 0C 
0df12     12 04 1B 08 
0df16     04 08 13 21 
0df1a     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
0df1e     F7 FF F1 FD 
0df22     09 FE 08 08 
0df26     F3 FF FF 00 
0df2a     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
0df2e     22 12 2B 31 
0df32     00 F7 FF 30 
0df36     18 38 26 31 
0df3a     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
0df3e     13 25 26 1C 
0df42     01 1B 13 FF 
0df46     ED EC EB E0 
0df4a     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
0df4e     D0 D9 F6 E4 
0df52     CF FF ED DE 
0df56     FF C7 C1 D9 
0df5a     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
0df5e     F0 F6 FF E4 
0df62     E7 F9 DF EC 
0df66     0C 09 12 2E 
0df6a     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
0df6e     1C 34 3C 18 
0df72     2E 26 1B 39 
0df76     25 4B 39 38 
0df7a     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
0df7e     2B 33 48 1C 
0df82     2E 39 2A 34 
0df86     34 32 1E 1C 
0df8a     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
0df8e     09 25 30 00 
0df92     E2 FA 00 CF 
0df96     EA C8 E2 FF 
0df9a     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
0df9e     FD F6 F2 D0 
0dfa2     CF E2 E4 B0 
0dfa6     D9 DA C6 E0 
0dfaa     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
0dfae     CF F6 E8 F6 
0dfb2     20 2A 46 4C 
0dfb6     26 20 2C 18 
0dfba     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
0dfbe     2E 48 39 3D 
0dfc2     4C 36 42 4E 
0dfc6     39 2A 42 46 
0dfca     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
0dfce     1E 00 DA C6 
0dfd2     F3 EE EC F2 
0dfd6     DB F1 FC 02 
0dfda     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
0dfde     DA C0 CF D5 
0dfe2     C9 C4 BD B8 
0dfe6     C1 C0 A6 C6 
0dfea     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
0dfee     EC EE FA 09 
0dff2     F9 12 33 13 
0dff6     FD FD 12 20 
0dffa     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
0dffe     49 4C 3E 4B 
0e002     51 39 42 56 
0e006     26 2E 3D 26 
0e00a     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
0e00e     43 26 28 38 
0e012     45 39 2C 3A 
0e016     3A 36 32 18 
0e01a     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
0e01e     00 FF 12 2C 
0e022     20 33 43 2B 
0e026     2A 26 09 00 
0e02a     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
0e02e     00 DA EC FE 
0e032     F2 F0 F0 DA 
0e036     F6 16 0C 08 
0e03a     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
0e03e     13 F7 EC F0 
0e042     EA F1 F0 E6 
0e046     F1 0D 0A 06 
0e04a     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
0e04e     13 12 25 2D 
0e052     21 09 ED F6 
0e056     F2 DA D4 D0 
0e05a     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
0e05e     EB FD 00 ED 
0e062     E4 EA DC CF 
0e066     D6 DA D0 CF 
0e06a     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
0e06e     CC B4 B2 CF 
0e072     D6 D9 E4 DE 
0e076     FF 10 04 19 
0e07a     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
0e07e     0F 19 28 26 
0e082     36 44 3E 46 
0e086     5E 58 49 4B 
0e08a     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
0e08e     20 38 40 30 
0e092     32 26 21 2D 
0e096     28 13 16 2B 
0e09a     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
0e09e     10 16 13 00 
0e0a2     FF 00 E1 F1 
0e0a6     06 01 0A 25 
0e0aa     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
0e0ae     0E 14 20 13 
0e0b2     00 FD 02 02 
0e0b6     00 01 F9 F8 
0e0ba     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
0e0be     1B 33 3F 4A 
0e0c2     3E 27 2E 32 
0e0c6     1F 09 FE FF 
0e0ca     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
0e0ce     0D 21 1F 13 
0e0d2     14 1B 2A 2B 
0e0d6     26 1F 26 13 
0e0da     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
0e0de     DB D9 D0 CA 
0e0e2     E1 E5 DF F1 
0e0e6     F9 F8 F6 E4 
0e0ea     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
0e0ee     C4 CD C9 C3 
0e0f2     BD B4 BA C2 
0e0f6     C1 BE C1 C1 
0e0fa     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
0e0fe     FF 07 02 00 
0e102     F2 F6 06 00 
0e106     F3 FF 14 20 
0e10a     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
0e10e     58 4C 30 2C 
0e112     2C 28 2D 26 
0e116     13 25 38 2B 
0e11a     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
0e11e     25 24 26 26 
0e122     26 27 26 1C 
0e126     0E 04 02 FC 
0e12a     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
0e12e     18 18 1B 1C 
0e132     12 20 1C 0E 
0e136     0D 04 F7 FD 
0e13a     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
0e13e     04 00 FD FE 
0e142     08 25 32 2D 
0e146     36 4B 54 56 
0e14a     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
0e14e     21 13 09 12 
0e152     18 14 1F 1E 
0e156     20 24 20 24 
0e15a     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
0e15e     13 14 13 00 
0e162     F2 E4 E1 DC 
0e166     C7 C6 CF E2 
0e16a     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
0e16e     F0 ED F1 EB 
0e172     E5 E5 E4 DA 
0e176     CD C4 C4 CF 
0e17a     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
0e17e     D4 CF D6 EA 
0e182     F6 07 06 06 
0e186     19 1F 10 0D 
0e18a     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
0e18e     04 0D 20 38 
0e192     42 40 40 45 
0e196     44 3C 2D 21 
0e19a     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
0e19e     1F 20 19 16 
0e1a2     25 1C 0D 19 
0e1a6     26 26 1A 13 
0e1aa     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
0e1ae     F7 E6 DA D4 
0e1b2     E1 ED EE F7 
0e1b6     FD FF 0F 13 
0e1ba     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
0e1be     E8 E2 F3 FE 
0e1c2     00 F6 E6 E4 
0e1c6     F1 FC F7 FE 
0e1ca     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
0e1ce     42 48 46 43 
0e1d2     36 2D 26 20 
0e1d6     21 1A 1B 27 
0e1da     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
0e1de     3A 3A 31 2E 
0e1e2     38 31 26 1B 
0e1e6     18 16 0E 00 
0e1ea     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
0e1ee     DE DC D9 DB 
0e1f2     EC ED E4 E7 
0e1f6     F1 F0 F1 E8 
0e1fa     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
0e1fe     C6 CD CF CC 
0e202     C8 CD D6 DE 
0e206     E4 E6 F1 08 
0e20a     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
0e20e     22 28 27 26 
0e212     16 19 20 21 
0e216     20 2E 3C 44 
0e21a     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
0e21e     37 38 38 32 
0e222     26 20 2D 30 
0e226     26 1A 19 22 
0e22a     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
0e22e     18 20 2A 28 
0e232     1E 0E 01 F7 
0e236     ED E6 E6 EB 
0e23a     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
0e23e     08 16 15 04 
0e242     F4 F2 F1 F1 
0e246     EE EA E6 E6 
0e24a     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
0e24e     EB EC EE FD 
0e252     0F 1E 2D 33 
0e256     32 30 26 1C 
0e25a     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
0e25e     03 08 0E 18 
0e262     1F 20 20 27 
0e266     2C 2D 26 1B 
0e26a     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
0e26e     00 ED ED EA 
0e272     DF DA D9 E6 
0e276     DE D8 D6 DE 
0e27a     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
0e27e     F1 ED DF D8 
0e282     D9 DB D0 C8 
0e286     CC CF D3 D5 
0e28a     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
0e28e     F8 FF 03 0A 
0e292     16 1F 20 20 
0e296     22 26 2B 28 
0e29a     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
0e29e     46 48 46 4F 
0e2a2     56 51 4C 3C 
0e2a6     34 36 34 30 
0e2aa     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
0e2ae     30 30 27 1C 
0e2b2     18 1B 24 26 
0e2b6     22 27 27 1C 
0e2ba     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
0e2be     F4 EB EC F1 
0e2c2     FD 0D 16 10 
0e2c6     0A 0D 09 02 
0e2ca     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
0e2ce     F2 F1 F3 F3 
0e2d2     ED EC F0 EE 
0e2d6     F3 FF 0D 20 
0e2da     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
0e2de     2A 2D 26 18 
0e2e2     06 02 07 07 
0e2e6     08 09 10 1C 
0e2ea     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
0e2ee     20 1F 15 10 
0e2f2     0A 04 FC ED 
0e2f6     DE DF DF DA 
0e2fa     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
0e2fe     C4 C9 D6 DF 
0e302     DC D8 D9 DE 
0e306     E1 DA CD C7 
0e30a     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
0e30e     BD BC C6 CD 
0e312     D5 DC E2 EC 
0e316     FC 02 03 07 
0e31a     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
0e31e     18 16 1B 21 
0e322     27 2A 31 3D 
0e326     4B 50 51 50 
0e32a     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
0e32e     39 30 2A 32 
0e332     3A 34 30 34 
0e336     34 2D 28 2A 
0e33a     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
0e33e     27 22 1F 1C 
0e342     13 00 F4 F4 
0e346     F9 FD 03 0D 
0e34a     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
0e34e     14 0C 06 01 
0e352     FD F9 F7 F7 
0e356     F9 F9 F7 F2 
0e35a     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
0e35e     16 20 26 27 
0e362     33 3A 34 2B 
0e366     26 22 18 0E 
0e36a     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
0e36e     18 19 20 24 
0e372     26 26 26 26 
0e376     24 1C 13 0A 
0e37a     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
0e37e     EB E8 DF D3 
0e382     D0 D3 D6 D8 
0e386     D9 DA DC E2 
0e38a     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
0e38e     D6 D8 D5 CC 
0e392     C3 C0 C4 C6 
0e396     C3 C4 CF E0 
0e39a     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
0e39e     F9 03 0E 10 
0e3a2     0F 13 13 0F 
0e3a6     0E 0F 0F 16 
0e3aa     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
0e3ae     3A 44 44 3E 
0e3b2     34 2B 27 24 
0e3b6     1F 1E 22 27 
0e3ba     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
0e3be     20 2A 2B 26 
0e3c2     26 28 27 27 
0e3c6     1F 15 0A 02 
0e3ca     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
0e3ce     03 0E 14 1B 
0e3d2     1F 1F 1C 18 
0e3d6     13 0A 07 00 
0e3da     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
0e3de     F4 F0 F1 FA 
0e3e2     03 0A 15 24 
0e3e6     30 34 36 3C 
0e3ea     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
0e3ee     24 1E 18 18 
0e3f2     19 1C 1F 20 
0e3f6     24 2A 2E 30 
0e3fa     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
0e3fe     1C 0E 04 00 
0e402     FD F7 EE E5 
0e406     DF DA D9 D9 
0e40a     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
0e40e     E1 E0 E1 E2 
0e412     E6 E6 E0 D8 
0e416     D3 D0 CC C4 
0e41a     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
0e41e     D9 E2 E6 E7 
0e422     EB F6 FF 01 
0e426     06 0D 16 19 
0e42a     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
0e42e     18 19 1B 22 
0e432     2E 38 43 44 
0e436     44 44 3D 30 
0e43a     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
0e43e     26 22 1C 1B 
0e442     1E 22 26 1F 
0e446     1E 24 27 25 
0e44a     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
0e44e     0C 00 F4 F0 
0e452     F0 F1 FA FF 
0e456     07 0A 10 16 
0e45a     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
0e45e     FC FD FC F7 
0e462     F2 F0 EA E5 
0e466     E6 EA F2 FA 
0e46a     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
0e46e     2B 33 37 34 
0e472     2D 22 1C 1C 
0e476     18 14 12 15 
0e47a     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
0e47e     27 30 34 36 
0e482     34 27 1C 18 
0e486     13 0F 04 FA 
0e48a     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
0e48e     E0 DE E0 E1 
0e492     E0 DF E7 EE 
0e496     F4 F2 F0 EE 
0e49a     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
0e49e     D3 C8 C6 CC 
0e4a2     D2 D6 D9 E0 
0e4a6     EC F1 F3 F7 
0e4aa     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
0e4ae     13 13 15 19 
0e4b2     18 14 13 18 
0e4b6     1B 20 2A 33 
0e4ba     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
0e4be     32 2B 28 28 
0e4c2     26 20 19 19 
0e4c6     1B 1A 19 1A 
0e4ca     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
0e4ce     21 21 22 21 
0e4d2     1C 15 09 00 
0e4d6     F3 F2 F2 F1 
0e4da     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
0e4de     10 13 10 0E 
0e4e2     09 04 00 00 
0e4e6     FE F9 F2 E8 
0e4ea     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
0e4ee     F2 F6 FD 02 
0e4f2     10 20 2C 30 
0e4f6     32 31 2D 26 
0e4fa     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
0e4fe     0E 10 14 13 
0e502     14 1B 27 2E 
0e506     30 2B 26 22 
0e50a     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
0e50e     FE F9 F1 E7 
0e512     E4 E1 DF DA 
0e516     D3 D0 D2 D8 
0e51a     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
0e51e     E5 EC EE E8 
0e522     DC D3 CC C7 
0e526     C3 C3 C8 CF 
0e52a     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
0e52e     F1 FA FF 04 
0e532     09 10 16 1A 
0e536     1B 1C 1E 1E 
0e53a     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
0e53e     33 43 4F 4F 
0e542     4C 49 48 45 
0e546     3D 37 31 2B 
0e54a     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
0e54e     25 27 27 28 
0e552     27 28 2D 32 
0e556     31 2C 26 1A 
0e55a     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
0e55e     F2 F2 F4 F7 
0e562     FF 08 0F 10 
0e566     0C 09 09 04 
0e56a     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
0e56e     ED E5 E4 E5 
0e572     E6 E6 E6 EA 
0e576     F3 FC 08 16 
0e57a     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
0e57e     2E 28 1F 18 
0e582     16 18 13 0C 
0e586     0A 0F 18 21 
0e58a     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
0e58e     2D 2B 21 1E 
0e592     16 0E 04 FA 
0e596     F3 EE EC E8 
0e59a     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
0e59e     D9 D8 D5 D8 
0e5a2     DE E2 EA EB 
0e5a6     EA EA E4 D5 
0e5aa     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
0e5ae     C6 C9 CE D4 
0e5b2     DB E5 E8 ED 
0e5b6     F4 FC 02 06 
0e5ba     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
0e5be     18 13 0C 0C 
0e5c2     16 20 2A 34 
0e5c6     3C 3D 42 44 
0e5ca     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
0e5ce     31 2B 26 21 
0e5d2     22 25 24 21 
0e5d6     1F 20 25 2B 
0e5da     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
0e5de     2B 26 1C 13 
0e5e2     0A 01 F9 F7 
0e5e6     F9 FF 08 0F 
0e5ea     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
0e5ee     18 19 18 10 
0e5f2     09 00 FC F6 
0e5f6     F4 F3 F2 ED 
0e5fa     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
0e5fe     0D 1A 25 32 
0e602     36 34 32 31 
0e606     30 2B 26 1A 
0e60a     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
0e60e     18 20 26 2C 
0e612     2E 2D 2C 2C 
0e616     2C 26 18 0C 
0e61a     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
0e61e     E5 DF DA D6 
0e622     D5 D0 CD CD 
0e626     CD CE D0 D6 
0e62a     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
0e62e     DA CE C7 C2 
0e632     BD BB BB C1 
0e636     CA CE D2 D9 
0e63a     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
0e63e     F8 FD 08 12 
0e642     18 14 13 0C 
0e646     0C 13 1A 20 
0e64a     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
0e64e     43 42 40 42 
0e652     3E 39 30 2B 
0e656     28 27 26 1E 
0e65a     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
0e65e     21 25 2A 2D 
0e662     2E 2C 2A 26 
0e666     1B 15 09 FD 
0e66a     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
0e66e     FF 02 06 09 
0e672     0C 12 14 15 
0e676     13 09 01 FD 
0e67a     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
0e67e     EA EC EB EB 
0e682     EE F8 06 12 
0e686     1E 26 2C 31 
0e68a     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
0e68e     26 21 18 14 
0e692     15 16 20 26 
0e696     2A 2C 33 3C 
0e69a     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
0e69e     26 20 19 0E 
0e6a2     04 00 F8 F0 
0e6a6     EA E6 E2 E1 
0e6aa     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
0e6ae     D9 E5 EC EC 
0e6b2     ED EB E6 DA 
0e6b6     D0 C9 C7 C8 
0e6ba     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
0e6be     D4 DE E4 E8 
0e6c2     EA EC F3 FE 
0e6c6     07 0A 0C 09 
0e6ca     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
0e6ce     0A 14 1E 24 
0e6d2     27 2E 36 39 
0e6d6     3C 36 33 30 
0e6da     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
0e6de     15 14 13 12 
0e6e2     0E 10 18 1A 
0e6e6     21 24 25 27 
0e6ea     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
0e6ee     07 00 F9 F7 
0e6f2     FA FC FE FF 
0e6f6     03 09 12 16 
0e6fa     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
0e6fe     0F 07 02 FD 
0e702     FA F7 F2 ED 
0e706     E8 EC F4 FD 
0e70a     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
0e70e     2B 30 33 34 
0e712     34 30 28 1E 
0e716     18 14 18 13 
0e71a     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
0e71e     2D 32 36 36 
0e722     32 30 26 1C 
0e726     14 0D 06 FD 
0e72a     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
0e72e     E1 DB D6 D0 
0e732     D0 D2 D6 DC 
0e736     E7 EE F0 EA 
0e73a     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
0e73e     CE C9 C3 C7 
0e742     CD D4 DC E1 
0e746     E5 E7 F0 F6 
0e74a     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
0e74e     1A 18 13 12 
0e752     13 14 16 1E 
0e756     22 2A 31 3C 
0e75a     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
0e75e     3E 39 34 31 
0e762     2C 26 21 1C 
0e766     18 13 14 19 
0e76a     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
0e76e     28 2A 2B 26 
0e772     1C 13 06 00 
0e776     FC F7 F4 F3 
0e77a     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
0e77e     08 0D 0F 13 
0e782     10 0C 07 04 
0e786     00 FC F7 EE 
0e78a     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
0e78e     E7 F0 F6 FF 
0e792     0A 14 1E 2A 
0e796     31 32 30 27 
0e79a     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
0e79e     13 10 13 15 
0e7a2     1E 22 28 31 
0e7a6     36 37 32 2E 
0e7aa     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
0e7ae     09 03 00 F7 
0e7b2     F1 EA E4 DF 
0e7b6     DA D0 CD D0 
0e7ba     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
0e7be     EB E8 E8 E6 
0e7c2     DB D5 CE C7 
0e7c6     C6 C9 CF D3 
0e7ca     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
0e7ce     EA F1 FA 03 
0e7d2     09 0F 13 0F 
0e7d6     10 12 10 10 
0e7da     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
0e7de     2E 33 3A 3F 
0e7e2     44 43 3E 3A 
0e7e6     39 37 30 28 
0e7ea     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
0e7ee     16 19 1B 1C 
0e7f2     20 28 2E 33 
0e7f6     30 2A 24 1E 
0e7fa     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
0e7fe     FE FA FA FA 
0e802     FF 06 0E 10 
0e806     16 16 15 13 
0e80a     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
0e80e     01 F8 F2 ED 
0e812     EC EB EE F1 
0e816     F4 FD 06 12 
0e81a     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
0e81e     30 30 2B 26 
0e822     1C 18 14 13 
0e826     0E 0F 19 21 
0e82a     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
0e82e     32 32 2D 26 
0e832     1C 14 0C 04 
0e836     FD F4 F1 EE 
0e83a     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
0e83e     C4 CA CF D4 
0e842     D9 DB DE E1 
0e846     E0 DC D5 CC 
0e84a     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
0e84e     C3 C8 CA CE 
0e852     D0 D6 E0 EC 
0e856     F6 FD 02 07 
0e85a     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
0e85e     10 0D 12 15 
0e862     19 22 2E 36 
0e866     3C 42 42 46 
0e86a     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
0e86e     34 2C 26 21 
0e872     20 1F 18 13 
0e876     16 1C 22 27 
0e87a     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
0e87e     28 21 1C 16 
0e882     0F 09 00 FC 
0e886     FC FF FF 06 
0e88a     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
0e88e     15 15 14 13 
0e892     0E 07 00 FA 
0e896     F3 F1 F0 ED 
0e89a     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
0e89e     FF 0A 14 1E 
0e8a2     26 2D 2C 2C 
0e8a6     2B 26 21 1C 
0e8aa     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
0e8ae     1B 1F 28 31 
0e8b2     33 38 3D 32 
0e8b6     32 30 28 21 
0e8ba     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
0e8be     07 00 ED DF 
0e8c2     D6 D2 D4 D4 
0e8c6     D5 DB DF E2 
0e8ca     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
0e8ce     DA D2 C8 C4 
0e8d2     C3 C9 C8 C9 
0e8d6     C7 C9 CD D4 
0e8da     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
0e8de     FA 02 06 08 
0e8e2     0C 0A 07 07 
0e8e6     08 08 12 16 
0e8ea     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
0e8ee     36 36 37 38 
0e8f2     34 2C 27 22 
0e8f6     21 1C 13 0C 
0e8fa     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
0e8fe     16 18 1E 26 
0e902     21 20 21 1F 
0e906     1A 15 0C 07 
0e90a     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
0e90e     FF 09 10 16 
0e912     19 1B 1F 20 
0e916     22 1F 18 0F 
0e91a     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
0e91e     FC F9 F7 F4 
0e922     FA FF 07 12 
0e926     1E 26 2D 32 
0e92a     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
0e92e     26 1E 1A 13 
0e932     14 12 15 1E 
0e936     26 2C 31 32 
0e93a     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
0e93e     21 1C 16 15 
0e942     13 09 00 F7 
0e946     EB E1 D8 D0 
0e94a     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
0e94e     D8 DB E0 E7 
0e952     E4 DC DA CE 
0e956     CD CA C7 C6 
0e95a     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
0e95e     CC D4 D9 E2 
0e962     EB F3 FE 06 
0e966     0C 0D 0E 0D 
0e96a     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
0e96e     18 22 26 2A 
0e972     2E 37 3C 42 
0e976     3F 39 3A 39 
0e97a     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
0e97e     19 13 0E 0D 
0e982     0E 13 14 15 
0e986     15 15 18 1C 
0e98a     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
0e98e     03 FC F2 EA 
0e992     E8 EB F1 F6 
0e996     F8 FA 01 08 
0e99a     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
0e99e     0E 0A 07 06 
0e9a2     00 F7 F4 F3 
0e9a6     F0 F0 F6 FF 
0e9aa     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
0e9ae     25 33 39 3E 
0e9b2     3E 39 34 2E 
0e9b6     26 1A 19 19 
0e9ba     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
0e9be     37 3D 40 3E 
0e9c2     36 31 2C 27 
0e9c6     24 1F 1A 15 
0e9ca     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
0e9ce     E2 DC D5 D2 
0e9d2     D0 D4 DE E2 
0e9d6     E4 E7 E7 E1 
0e9da     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
0e9de     CE CC CC C8 
0e9e2     C9 CA CF CF 
0e9e6     D6 DE E7 EC 
0e9ea     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
0e9ee     0D 0C 08 09 
0e9f2     0D 10 13 15 
0e9f6     1A 24 2D 32 
0e9fa     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
0e9fe     3C 39 36 32 
0ea02     28 20 18 13 
0ea06     13 10 13 12 
0ea0a     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
0ea0e     18 1B 16 18 
0ea12     13 10 09 00 
0ea16     F9 F3 F2 F1 
0ea1a     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
0ea1e     03 0A 12 13 
0ea22     15 15 13 0E 
0ea26     0C 09 04 FC 
0ea2a     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
0ea2e     F4 F6 FD 03 
0ea32     0A 16 20 2A 
0ea36     33 3A 3C 3C 
0ea3a     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
0ea3e     18 13 13 1A 
0ea42     1F 2A 33 39 
0ea46     3A 3A 36 33 
0ea4a     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
0ea4e     1C 18 0C 02 
0ea52     00 F0 E4 D5 
0ea56     D2 CC CC D0 
0ea5a     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
0ea5e     E1 E4 DC DB 
0ea62     DA D3 CD CE 
0ea66     CC CC C8 C9 
0ea6a     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
0ea6e     E6 EC F9 FF 
0ea72     07 09 08 0E 
0ea76     0F 0E 10 13 
0ea7a     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
0ea7e     2E 32 36 3D 
0ea82     3F 3F 42 40 
0ea86     3E 36 2B 26 
0ea8a     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
0ea8e     14 18 18 1A 
0ea92     1E 1E 1F 22 
0ea96     22 21 1A 14 
0ea9a     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
0ea9e     F8 F7 F7 F4 
0eaa2     F7 FC FF 07 
0eaa6     0C 0D 13 13 
0eaaa     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
0eaae     00 F9 F3 EE 
0eab2     ED EC F0 F0 
0eab6     F4 F9 FF 07 
0eaba     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
0eabe     36 32 30 2C 
0eac2     26 1C 13 0F 
0eac6     0F 16 1C 25 
0eaca     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
0eace     38 34 33 31 
0ead2     2B 27 21 1C 
0ead6     18 0E 01 F9 
0eada     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
0eade     D2 D8 DA DA 
0eae2     E0 E1 E5 E2 
0eae6     E0 DC DA D4 
0eaea     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
0eaee     C4 C8 CA CF 
0eaf2     D3 D8 DE E6 
0eaf6     EC F6 FE FE 
0eafa     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
0eafe     0D 0C 0F 16 
0eb02     16 1B 25 2B 
0eb06     2E 36 3C 40 
0eb0a     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
0eb0e     2D 26 1E 18 
0eb12     0F 0C 0C 0F 
0eb16     0E 0E 14 18 
0eb1a     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
0eb1e     18 13 0F 0E 
0eb22     09 07 01 F9 
0eb26     F7 F8 FA FF 
0eb2a     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
0eb2e     1B 21 26 20 
0eb32     1E 14 13 09 
0eb36     02 00 FE FA 
0eb3a     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
0eb3e     03 0F 1B 24 
0eb42     2E 36 36 40 
0eb46     39 32 2B 21 
0eb4a     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
0eb4e     15 20 28 2E 
0eb52     34 39 37 36 
0eb56     31 27 26 27 
0eb5a     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
0eb5e     06 F9 ED E1 
0eb62     DA CF CF C8 
0eb66     CF D6 DB DC 
0eb6a     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
0eb6e     D2 CE CA C7 
0eb72     C1 C0 C1 C2 
0eb76     C3 CA CC D8 
0eb7a     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
0eb7e     FA 08 09 09 
0eb82     0F 14 14 19 
0eb86     16 19 24 28 
0eb8a     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
0eb8e     49 4F 4C 48 
0eb92     4C 45 39 32 
0eb96     2B 1F 1C 13 
0eb9a     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
0eb9e     10 13 14 16 
0eba2     14 10 0C 0A 
0eba6     09 04 00 F9 
0ebaa     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
0ebae     E8 E8 F1 F9 
0ebb2     FC 07 12 15 
0ebb6     18 19 13 0C 
0ebba     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
0ebbe     FD F9 F9 F9 
0ebc2     F7 FA 03 09 
0ebc6     12 1B 27 31 
0ebca     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
0ebce     34 2B 1F 1A 
0ebd2     19 19 1C 22 
0ebd6     2A 2E 38 3F 
0ebda     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
0ebde     31 2E 2B 28 
0ebe2     26 18 0D 04 
0ebe6     F9 ED E2 DA 
0ebea     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
0ebee     DC DE DF E1 
0ebf2     DC D9 D8 D0 
0ebf6     C8 C8 C2 BB 
0ebfa     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
0ebfe     C4 C6 CE D9 
0ec02     E2 EB F1 F8 
0ec06     FD 06 04 FF 
0ec0a     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
0ec0e     13 15 1E 24 
0ec12     2C 32 38 42 
0ec16     49 4C 4C 48 
0ec1a     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
0ec1e     21 1E 19 14 
0ec22     16 1B 1A 1F 
0ec26     21 1C 1B 1E 
0ec2a     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
0ec2e     0C 07 00 F8 
0ec32     F4 F2 F1 ED 
0ec36     F0 F6 F9 FF 
0ec3a     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
0ec3e     15 0E 09 04 
0ec42     00 FC F9 F7 
0ec46     F2 F7 F6 F8 
0ec4a     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
0ec4e     1E 2A 37 3D 
0ec52     3D 39 31 2D 
0ec56     26 19 19 16 
0ec5a     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
0ec5e     2E 33 37 2E 
0ec62     30 34 32 31 
0ec66     31 26 21 1C 
0ec6a     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
0ec6e     E2 DB D4 D3 
0ec72     D4 D8 D8 DE 
0ec76     E2 E1 E0 E1 
0ec7a     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
0ec7e     C6 C4 C2 C1 
0ec82     C0 BE C3 C9 
0ec86     CF D5 D9 E7 
0ec8a     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
0ec8e     03 09 08 0D 
0ec92     0E 0F 15 18 
0ec96     1A 21 28 2C 
0ec9a     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
0ec9e     46 48 45 3F 
0eca2     3A 32 26 1A 
0eca6     15 10 14 16 
0ecaa     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
0ecae     1A 18 18 13 
0ecb2     0D 09 03 00 
0ecb6     00 FA F2 EE 
0ecba     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
0ecbe     F1 FC 03 0E 
0ecc2     0D 12 14 13 
0ecc6     0C 0A 06 04 
0ecca     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
0ecce     F8 F8 F9 FF 
0ecd2     08 12 20 27 
0ecd6     2E 3A 3E 39 
0ecda     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
0ecde     20 1A 18 1A 
0ece2     24 28 2E 33 
0ece6     36 39 3A 39 
0ecea     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
0ecee     2C 28 1F 13 
0ecf2     04 F7 EA E2 
0ecf6     DA D4 D3 D5 
0ecfa     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
0ecfe     DE DE DF D5 
0ed02     CE CE C9 BD 
0ed06     BA B7 B7 B7 
0ed0a     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
0ed0e     D6 DE E6 EE 
0ed12     F2 F8 FF 01 
0ed16     04 0A 0D 0E 
0ed1a     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
0ed1e     21 2A 33 3D 
0ed22     42 46 49 4C 
0ed26     4C 4A 40 34 
0ed2a     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
0ed2e     19 1A 1A 1A 
0ed32     1B 1C 21 1F 
0ed36     1C 15 13 12 
0ed3a     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
0ed3e     01 F8 F4 EE 
0ed42     EE F2 F4 FA 
0ed46     03 0E 10 14 
0ed4a     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
0ed4e     09 00 FD F9 
0ed52     F3 F1 F2 F0 
0ed56     F1 F8 FA 03 
0ed5a     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
0ed5e     33 34 34 30 
0ed62     27 21 1B 19 
0ed66     18 16 1B 21 
0ed6a     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
0ed6e     38 3A 39 37 
0ed72     38 37 30 2A 
0ed76     26 1C 10 01 
0ed7a     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
0ed7e     D6 D3 D2 D5 
0ed82     D9 DE DE DF 
0ed86     E1 DC D6 D2 
0ed8a     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
0ed8e     BB BA BA BE 
0ed92     C3 C9 D4 DE 
0ed96     E6 F1 F6 FA 
0ed9a     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
0ed9e     0E 13 13 15 
0eda2     18 1C 21 2A 
0eda6     2B 31 3C 42 
0edaa     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
0edae     44 39 30 27 
0edb2     22 1F 19 14 
0edb6     15 15 19 1A 
0edba     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
0edbe     0C 0D 0C 0A 
0edc2     07 00 F9 F3 
0edc6     F2 EB E6 EB 
0edca     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
0edce     08 12 14 14 
0edd2     15 13 0F 0A 
0edd6     04 00 FD FA 
0edda     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
0edde     FF 0A 14 1F 
0ede2     2A 33 38 3C 
0ede6     39 36 34 2B 
0edea     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
0edee     1C 20 26 2A 
0edf2     2D 31 33 37 
0edf6     3A 36 39 36 
0edfa     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
0edfe     13 04 F9 ED 
0ee02     E0 DC DA D0 
0ee06     D2 D4 D4 DC 
0ee0a     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
0ee0e     D8 D9 D3 CC 
0ee12     C7 C0 BD B8 
0ee16     B6 B8 BE C1 
0ee1a     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
0ee1e     F1 F8 FA FF 
0ee22     07 07 0A 0D 
0ee26     10 16 1A 1B 
0ee2a     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
0ee2e     36 3D 45 4B 
0ee32     4C 49 45 3D 
0ee36     36 30 26 21 
0ee3a     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
0ee3e     1A 18 18 13 
0ee42     10 0F 0F 0C 
0ee46     0D 0A 07 03 
0ee4a     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
0ee4e     EC EC EC F3 
0ee52     FA FF 09 0C 
0ee56     14 1A 19 18 
0ee5a     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
0ee5e     02 FE FA F8 
0ee62     F8 F9 FF 07 
0ee66     0F 1A 20 2C 
0ee6a     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
0ee6e     31 2B 26 1E 
0ee72     1A 18 19 1A 
0ee76     1B 1F 27 2B 
0ee7a     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
0ee7e     36 34 34 33 
0ee82     2B 26 15 07 
0ee86     FC F2 E8 E0 
0ee8a     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
0ee8e     D8 D9 DB E0 
0ee92     DE DC DE DA 
0ee96     D8 D4 CE C7 
0ee9a     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
0ee9e     BE C3 CE D5 
0eea2     DE E6 F0 F8 
0eea6     FD 01 07 0C 
0eeaa     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
0eeae     1B 20 20 22 
0eeb2     27 2D 37 3E 
0eeb6     46 4A 4E 4E 
0eeba     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
0eebe     2B 26 1C 19 
0eec2     1A 1A 18 13 
0eec6     13 10 0E 0C 
0eeca     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
0eece     04 00 FA F7 
0eed2     F0 E8 E4 E4 
0eed6     E6 EA EC F6 
0eeda     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
0eede     10 12 13 0E 
0eee2     0C 07 02 01 
0eee6     FC FA F9 F8 
0eeea     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
0eeee     1B 25 2E 33 
0eef2     3A 39 33 31 
0eef6     2D 27 21 1A 
0eefa     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
0eefe     25 2A 2D 30 
0ef02     34 36 37 3D 
0ef06     3F 39 32 28 
0ef0a     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
0ef0e     F0 E6 DE D5 
0ef12     D4 D3 D3 D9 
0ef16     D9 D9 D9 DB 
0ef1a     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
0ef1e     CA C4 BD B8 
0ef22     B6 B6 B6 BB 
0ef26     C1 CC D4 DB 
0ef2a     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
0ef2e     FD 02 06 0C 
0ef32     10 12 15 18 
0ef36     19 1A 20 25 
0ef3a     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
0ef3e     4C 4E 50 4C 
0ef42     40 36 32 2D 
0ef46     26 22 21 20 
0ef4a     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
0ef4e     18 16 15 13 
0ef52     10 0E 0E 09 
0ef56     02 FD FC F4 
0ef5a     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
0ef5e     F6 FA FF 0A 
0ef62     0F 15 18 1A 
0ef66     18 16 10 0C 
0ef6a     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
0ef6e     F8 FC FF 02 
0ef72     07 0E 19 22 
0ef76     2A 31 33 37 
0ef7a     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
0ef7e     1C 19 18 14 
0ef82     16 1B 21 24 
0ef86     22 25 28 31 
0ef8a     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
0ef8e     31 2B 26 15 
0ef92     09 01 F7 E8 
0ef96     DF D8 D8 D6 
0ef9a     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
0ef9e     DE DF DF DF 
0efa2     DB D8 D3 CC 
0efa6     C4 C0 BC B7 
0efaa     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
0efae     D3 DB E2 EB 
0efb2     F1 F6 FA FF 
0efb6     06 09 0C 12 
0efba     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
0efbe     20 26 2A 30 
0efc2     3A 44 46 49 
0efc6     4C 48 40 39 
0efca     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
0efce     1E 19 16 15 
0efd2     14 14 10 0D 
0efd6     0E 0C 09 07 
0efda     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
0efde     F4 EE EC E8 
0efe2     E7 EB F1 F4 
0efe6     FA 03 0D 14 
0efea     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
0efee     19 15 0F 09 
0eff2     06 03 03 01 
0eff6     01 07 0D 16 
0effa     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
0effe     39 3C 3A 39 
0f002     36 2D 26 1E 
0f006     1B 1E 1F 1F 
0f00a     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
0f00e     28 2C 31 34 
0f012     36 36 32 2E 
0f016     2B 21 13 04 
0f01a     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
0f01e     DB D6 D4 D5 
0f022     D5 D6 D9 DB 
0f026     DA DB DB DA 
0f02a     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
0f02e     B8 B6 B4 B5 
0f032     BC C3 C9 D2 
0f036     D9 E2 EA EC 
0f03a     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
0f03e     08 0D 10 12 
0f042     14 18 1A 1F 
0f046     26 2D 38 42 
0f04a     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
0f04e     44 3E 3A 34 
0f052     30 26 21 1F 
0f056     19 18 16 18 
0f05a     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
0f05e     0C 0A 08 07 
0f062     02 FC F4 F1 
0f066     ED EB E8 E5 
0f06a     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
0f06e     06 0D 10 1A 
0f072     1C 1C 16 16 
0f076     13 0E 07 02 
0f07a     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
0f07e     06 0D 16 1E 
0f082     26 2D 33 39 
0f086     3C 34 30 2A 
0f08a     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
0f08e     1E 19 19 18 
0f092     19 1E 25 2A 
0f096     30 34 37 39 
0f09a     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
0f09e     1C 0E 04 F9 
0f0a2     F2 ED E6 DF 
0f0a6     DB DA DB D9 
0f0aa     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
0f0ae     E4 DF DC DA 
0f0b2     D0 C4 BE BA 
0f0b6     B8 B5 BA BE 
0f0ba     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
0f0be     E5 E7 EE F3 
0f0c2     F9 FF 02 06 
0f0c6     08 0A 0C 10 
0f0ca     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
0f0ce     2C 36 3F 43 
0f0d2     44 46 43 3E 
0f0d6     39 32 28 26 
0f0da     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
0f0de     16 18 13 0F 
0f0e2     0D 0F 0E 0E 
0f0e6     0A 06 03 FF 
0f0ea     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
0f0ee     E8 EA EA EC 
0f0f2     F3 FA 03 0A 
0f0f6     10 18 1C 20 
0f0fa     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
0f0fe     0D 09 09 04 
0f102     04 07 09 0E 
0f106     14 1A 24 2D 
0f10a     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
0f10e     34 31 30 28 
0f112     26 24 1F 1A 
0f116     18 16 19 1B 
0f11a     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
0f11e     33 36 38 38 
0f122     32 27 21 15 
0f126     09 00 F4 ED 
0f12a     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
0f12e     D9 DB DA DE 
0f132     E2 E6 E7 E5 
0f136     E0 DF D5 CE 
0f13a     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
0f13e     BE C2 C8 CE 
0f142     D5 D9 E0 E6 
0f146     EE F6 FA FF 
0f14a     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
0f14e     0F 0F 10 15 
0f152     19 24 2C 32 
0f156     38 3F 44 44 
0f15a     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
0f15e     32 2B 24 1F 
0f162     1C 19 16 15 
0f166     13 10 10 10 
0f16a     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
0f16e     04 00 FC F7 
0f172     F0 E8 E4 E5 
0f176     E4 E6 ED F2 
0f17a     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
0f17e     14 1A 19 18 
0f182     19 13 0E 0C 
0f186     07 04 04 03 
0f18a     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
0f18e     20 27 2D 31 
0f192     34 36 32 32 
0f196     30 30 28 26 
0f19a     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
0f19e     18 19 1B 1E 
0f1a2     24 2A 31 36 
0f1a6     3A 3C 36 31 
0f1aa     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
0f1ae     00 F4 ED E6 
0f1b2     E1 DE DC DC 
0f1b6     DF E0 E2 E6 
0f1ba     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
0f1be     DB D5 CD C7 
0f1c2     C1 BE BC C1 
0f1c6     C6 C9 D0 D6 
0f1ca     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
0f1ce     F6 FF 06 08 
0f1d2     09 09 0A 0C 
0f1d6     10 12 16 1E 
0f1da     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
0f1de     3F 42 45 44 
0f1e2     40 3C 39 30 
0f1e6     28 26 21 1B 
0f1ea     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
0f1ee     13 13 10 0E 
0f1f2     0D 09 09 03 
0f1f6     00 FC F3 ED 
0f1fa     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
0f1fe     EB F1 F7 FE 
0f202     06 0C 12 16 
0f206     1A 1B 18 15 
0f20a     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
0f20e     03 03 03 03 
0f212     08 10 1B 24 
0f216     28 2D 32 32 
0f21a     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
0f21e     2B 26 21 1C 
0f222     18 15 14 13 
0f226     14 19 1E 24 
0f22a     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
0f22e     30 2B 26 1A 
0f232     13 06 00 F2 
0f236     E8 E1 DC D8 
0f23a     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
0f23e     DC E0 E1 E2 
0f242     E0 DE DA D3 
0f246     CA C3 BE BC 
0f24a     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
0f24e     C9 CF D6 DA 
0f252     E2 EC F3 FA 
0f256     FF 04 08 08 
0f25a     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
0f25e     15 1B 25 2A 
0f262     31 37 3D 42 
0f266     46 45 43 3F 
0f26a     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
0f26e     26 20 1C 1C 
0f272     18 18 19 18 
0f276     13 0F 10 10 
0f27a     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
0f27e     F9 F3 EE EA 
0f282     E8 EA EB EE 
0f286     F3 FA 03 0C 
0f28a     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
0f28e     19 16 15 14 
0f292     10 0C 04 03 
0f296     02 04 09 12 
0f29a     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
0f29e     30 33 36 36 
0f2a2     36 34 30 2D 
0f2a6     27 24 1F 1B 
0f2aa     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
0f2ae     1F 25 2C 34 
0f2b2     38 39 39 34 
0f2b6     2E 26 1C 13 
0f2ba     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
0f2be     E5 DE DA D9 
0f2c2     DA DB DE E1 
0f2c6     E5 E8 E7 E5 
0f2ca     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
0f2ce     C7 C2 BE BE 
0f2d2     C0 C2 C7 CD 
0f2d6     D2 D8 DE E8 
0f2da     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
0f2de     03 06 04 06 
0f2e2     08 0D 10 15 
0f2e6     1A 21 2A 31 
0f2ea     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
0f2ee     3E 3C 39 36 
0f2f2     32 2B 26 20 
0f2f6     1C 1A 1A 16 
0f2fa     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
0f2fe     13 0F 0D 0C 
0f302     09 00 FC F7 
0f306     F2 F0 EC EA 
0f30a     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
0f30e     FF 09 0F 14 
0f312     18 1A 1E 1B 
0f316     1B 1A 15 13 
0f31a     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
0f31e     0C 10 15 1B 
0f322     22 2B 2D 32 
0f326     38 38 36 37 
0f32a     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
0f32e     20 1A 15 13 
0f332     10 13 19 20 
0f336     27 2D 31 32 
0f33a     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
0f33e     21 18 0F 04 
0f342     FC F0 E6 E1 
0f346     DB D6 D8 D9 
0f34a     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
0f34e     E6 E4 DF DB 
0f352     D5 CE CC C7 
0f356     C2 C0 C1 C1 
0f35a     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
0f35e     D9 E2 EC F3 
0f362     F8 FC FE FF 
0f366     02 03 03 08 
0f36a     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
0f36e     22 2A 32 36 
0f372     3A 3C 3E 3D 
0f376     3C 37 31 2B 
0f37a     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
0f37e     16 14 14 13 
0f382     0F 0F 12 13 
0f386     0D 09 07 02 
0f38a     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
0f38e     EA E7 E7 EC 
0f392     F1 F6 FC 03 
0f396     0A 0D 13 16 
0f39a     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
0f39e     15 13 0C 0A 
0f3a2     09 07 09 0E 
0f3a6     14 19 1F 26 
0f3aa     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
0f3ae     36 34 37 34 
0f3b2     30 2B 26 1E 
0f3b6     18 13 13 14 
0f3ba     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
0f3be     2E 31 33 31 
0f3c2     30 2D 26 1E 
0f3c6     13 0C 02 F8 
0f3ca     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
0f3ce     DB DE E2 E5 
0f3d2     E7 E8 E7 E8 
0f3d6     E5 DF DA D5 
0f3da     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
0f3de     C6 C8 C7 C8 
0f3e2     CD D3 D9 E4 
0f3e6     EC F1 F8 FD 
0f3ea     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
0f3ee     03 08 0A 0E 
0f3f2     14 1B 24 27 
0f3f6     2C 32 36 3C 
0f3fa     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
0f3fe     30 2B 26 20 
0f402     1F 1C 18 13 
0f406     12 0F 0F 0F 
0f40a     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
0f40e     06 02 FE F8 
0f412     F1 ED E8 E6 
0f416     E6 EA EE F3 
0f41a     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
0f41e     12 18 1A 1B 
0f422     1E 1A 16 13 
0f426     0E 0D 0D 0D 
0f42a     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
0f42e     20 26 2B 2E 
0f432     34 36 36 37 
0f436     39 38 33 2D 
0f43a     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
0f43e     13 14 19 1E 
0f442     21 25 2A 2E 
0f446     30 30 2D 28 
0f44a     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
0f44e     03 F9 F0 E6 
0f452     DF DB D9 DA 
0f456     D9 DC E1 E5 
0f45a     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
0f45e     DC D5 D3 CD 
0f462     CA C9 C7 C3 
0f466     C4 C8 CE D3 
0f46a     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
0f46e     F6 FA FF 03 
0f472     03 06 06 04 
0f476     0C 12 14 18 
0f47a     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
0f47e     34 38 3C 3D 
0f482     3A 39 33 2E 
0f486     2D 26 1F 1C 
0f48a     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
0f48e     13 13 0F 0D 
0f492     0D 0A 07 01 
0f496     00 FA F4 F0 
0f49a     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
0f49e     E8 ED F3 F6 
0f4a2     FD 01 0C 0F 
0f4a6     15 19 1A 19 
0f4aa     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
0f4ae     0C 0A 0D 0D 
0f4b2     10 15 19 21 
0f4b6     28 2B 2D 32 
0f4ba     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
0f4be     33 30 28 20 
0f4c2     18 16 13 12 
0f4c6     00 00 0D 08 
0f4ca     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
0f4ce     16 18 1E 18 
0f4d2     1C 1A 1F 18 
0f4d6     12 19 14 13 
0f4da     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
0f4de     15 13 0D 14 
0f4e2     1C 1E 1B 18 
0f4e6     18 1F 13 16 
0f4ea     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
0f4ee     F3 F2 EB F1 
0f4f2     EA F7 F2 F6 
0f4f6     F0 F7 F2 F7 
0f4fa     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
0f4fe     E8 D8 DC DF 
0f502     DF D3 DB E6 
0f506     E8 E4 DE EB 
0f50a     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
0f50e     F7 F7 F8 00 
0f512     00 FE 07 01 
0f516     01 06 15 1C 
0f51a     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
0f51e     1A 21 1E 1F 
0f522     10 14 12 0E 
0f526     08 13 18 0C 
0f52a     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
0f52e     09 08 0A 08 
0f532     00 03 00 FA 
0f536     F4 FC FA F8 
0f53a     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
0f53e     00 0C 0D 0D 
0f542     0F 13 14 0E 
0f546     10 18 12 0E 
0f54a     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
0f54e     19 15 0E 13 
0f552     14 1A 14 1C 
0f556     20 22 21 26 
0f55a     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
0f55e     14 10 07 06 
0f562     00 00 F3 1A 
0f566     F7 2A EB 2A 
0f56a     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
0f56e     10 3E 30 2A 
0f572     00 13 1A 0E 
0f576     F3 E6 DB FC 
0f57a     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
0f57e     CE D5 F7 D6 
0f582     C7 C9 CE D5 
0f586     D6 C7 BB D8 
0f58a     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
0f58e     D0 D2 E4 D6 
0f592     CC FC CC C7 
0f596     B5 D5 00 EB 
0f59a     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
0f59e     1E 1E 2A 4A 
0f5a2     3E 4A 37 48 
0f5a6     54 2A 21 37 
0f5aa     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
0f5ae     2C 2A 0C 09 
0f5b2     25 1A FE 0E 
0f5b6     1A FC 00 09 
0f5ba     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
0f5be     E1 EB EC DF 
0f5c2     BD B0 00 EC 
0f5c6     EC E6 00 2A 
0f5ca     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
0f5ce     10 2A 1F 0F 
0f5d2     13 2A F7 EB 
0f5d6     F7 EB 00 06 
0f5da     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
0f5de     0E 13 09 F8 
0f5e2     13 12 F7 F2 
0f5e6     F4 F7 EA FC 
0f5ea     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
0f5ee     E1 D8 CC 09 
0f5f2     EB EC FC 00 
0f5f6     25 1F 2A 00 
0f5fa     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
0f5fe     F7 2A 18 F2 
0f602     F1 F7 FC 00 
0f606     09 06 0D 09 
0f60a     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
0f60e     DE F3 F2 E2 
0f612     ED F1 EC F3 
0f616     00 EC F7 00 
0f61a     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
0f61e     EC E2 E0 E1 
0f622     00 2A 2A 3F 
0f626     1F 1C 39 3F 
0f62a     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
0f62e     00 0E 01 00 
0f632     FE 07 1A 0E 
0f636     00 F2 00 0E 
0f63a     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
0f63e     E2 EE FF E7 
0f642     D9 F6 C8 F0 
0f646     E4 C1 D5 B6 
0f64a     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
0f64e     EB 13 1A 46 
0f652     40 2E 24 3F 
0f656     44 20 34 39 
0f65a     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
0f65e     14 21 2A 34 
0f662     39 32 2A 3E 
0f666     30 0D 19 2C 
0f66a     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
0f66e     1A 10 1A 09 
0f672     15 14 F8 00 
0f676     EB F7 00 F7 
0f67a     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
0f67e     2A 1F 09 0D 
0f682     00 09 ED 09 
0f686     04 DB DA D6 
0f68a     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
0f68e     00 FA DF C6 
0f692     E8 D9 B0 C8 
0f696     DB D5 CF ED 
0f69a     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
0f69e     F3 00 E1 E0 
0f6a2     C6 D4 E0 D5 
0f6a6     D6 D6 00 1C 
0f6aa     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
0f6ae     2D 3E 34 2A 
0f6b2     3E 34 07 12 
0f6b6     1E 13 14 1A 
0f6ba     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
0f6be     00 18 00 EC 
0f6c2     0E 08 00 09 
0f6c6     13 1A 00 09 
0f6ca     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
0f6ce     EC DA E0 DE 
0f6d2     DB E8 CC 00 
0f6d6     1B 32 34 2A 
0f6da     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
0f6de     06 2A 14 FC 
0f6e2     F7 00 06 09 
0f6e6     0E 1C 2B 36 
0f6ea     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
0f6ee     FC 0D 0F FC 
0f6f2     0D 1E 09 13 
0f6f6     00 FD 13 14 
0f6fa     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
0f6fe     04 F7 F2 EB 
0f702     1B 2A 2B 34 
0f706     1C 1A 19 14 
0f70a     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
0f70e     D9 E8 F2 E6 
0f712     EB F1 00 00 
0f716     00 E4 F1 ED 
0f71a     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
0f71e     E0 E6 09 F7 
0f722     04 EE E0 18 
0f726     F4 EB E1 EB 
0f72a     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
0f72e     EB 0E 2B 3E 
0f732     3F 3C 32 43 
0f736     34 1A 2A 30 
0f73a     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
0f73e     00 03 0E 08 
0f742     19 09 FE 03 
0f746     00 E0 EB FE 
0f74a     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
0f74e     00 F2 E6 D5 
0f752     F2 E1 E1 CC 
0f756     D0 E6 E0 F2 
0f75a     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
0f75e     3E 34 30 2B 
0f762     3C 2A 03 31 
0f766     30 0A 06 12 
0f76a     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
0f76e     2E 3E 2A 27 
0f772     3C 14 13 13 
0f776     14 14 01 27 
0f77a     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
0f77e     0E 14 09 F7 
0f782     EC 00 04 0E 
0f786     00 ED 00 1C 
0f78a     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
0f78e     19 18 00 FC 
0f792     0E 00 EC E4 
0f796     E6 E0 E4 EB 
0f79a     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
0f79e     E0 F2 CE C1 
0f7a2     D5 D0 D6 D5 
0f7a6     EC EB EB EC 
0f7aa     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
0f7ae     D9 D0 EB DE 
0f7b2     F9 DB DB 00 
0f7b6     0E 32 3C 3D 
0f7ba     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
0f7be     2A 43 30 1A 
0f7c2     13 0E 14 0E 
0f7c6     19 18 2A 21 
0f7ca     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
0f7ce     FC 01 09 EE 
0f7d2     10 00 00 0E 
0f7d6     F2 E6 F2 F2 
0f7da     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
0f7de     EB F2 DE E0 
0f7e2     00 13 31 37 
0f7e6     2A 25 34 2A 
0f7ea     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
0f7ee     00 09 08 04 
0f7f2     09 1F 24 2D 
0f7f6     2C 13 30 21 
0f7fa     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
0f7fe     00 09 14 09 
0f802     15 F2 06 03 
0f806     00 FC E1 00 
0f80a     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
0f80e     F7 00 19 21 
0f812     30 1A 0A 22 
0f816     09 F3 09 09 
0f81a     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
0f81e     EC F7 F6 00 
0f822     01 00 F1 F2 
0f826     EC D2 D9 EB 
0f82a     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
0f82e     F7 00 E4 F1 
0f832     F0 F0 EC D5 
0f836     EC EB FD EE 
0f83a     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
0f83e     34 34 30 34 
0f842     48 2A 1E 38 
0f846     39 1A 14 18 
0f84a     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
0f84e     1B 2B 04 0F 
0f852     18 00 00 F3 
0f856     0E FC FC 00 
0f85a     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
0f85e     EC E8 EB D6 
0f862     D5 D9 E8 F7 
0f866     E1 DB EE 09 
0f86a     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
0f86e     2A 34 0E 13 
0f872     27 2A 0D 09 
0f876     0E 09 0E 12 
0f87a     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
0f87e     26 30 0E 09 
0f882     24 14 09 13 
0f886     18 09 1F 00 
0f88a     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
0f88e     EC 00 FE 06 
0f892     0D EC F7 F7 
0f896     0D 22 28 1F 
0f89a     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
0f89e     FA 0E 00 ED 
0f8a2     E8 F7 E4 ED 
0f8a6     F3 F1 0A F3 
0f8aa     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
0f8ae     CC E2 E1 DB 
0f8b2     EB E1 F7 00 
0f8b6     E2 E6 EC F1 
0f8ba     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
0f8be     F7 F7 DB E4 
0f8c2     FC 0E 26 36 
0f8c6     2A 24 44 2A 
0f8ca     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
0f8ce     14 13 14 0E 
0f8d2     04 14 13 26 
0f8d6     10 01 1F 09 
0f8da     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
0f8de     F7 09 F8 12 
0f8e2     00 E7 F3 E4 
0f8e6     FA DB D5 E1 
0f8ea     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
0f8ee     EB FE 13 2A 
0f8f2     37 21 24 3F 
0f8f6     21 10 26 2A 
0f8fa     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
0f8fe     14 19 18 2A 
0f902     2A 2A 2A 2A 
0f906     25 09 13 18 
0f90a     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
0f90e     1F 09 FE 04 
0f912     00 09 F7 FA 
0f916     FC FE 14 FC 
0f91a     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
0f91e     1E 1F 09 13 
0f922     1A 00 F4 09 
0f926     00 F7 EB F7 
0f92a     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
0f92e     00 00 DB F7 
0f932     ED DF CC DF 
0f936     E1 D2 EB E1 
0f93a     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
0f93e     DA F1 EC DE 
0f942     E0 DB F7 F7 
0f946     E6 E4 EB 00 
0f94a     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
0f94e     3E 39 1F 1E 
0f952     37 2B 14 22 
0f956     16 14 0E 0D 
0f95a     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
0f95e     13 13 00 FE 
0f962     09 01 FC 09 
0f966     FD 09 0D ED 
0f96a     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
0f96e     D8 E6 DB FD 
0f972     F9 E8 EA F1 
0f976     02 1C 34 2A 
0f97a     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
0f97e     24 25 21 0C 
0f982     0F 15 09 1C 
0f986     0E 1B 3E 1F 
0f98a     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
0f98e     0E 1F 09 13 
0f992     14 0C 1E 14 
0f996     06 00 00 06 
0f99a     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
0f99e     10 04 F4 F2 
0f9a2     FC 00 10 25 
0f9a6     0D 10 1F 0E 
0f9aa     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
0f9ae     F7 F2 F9 EB 
0f9b2     EC F7 00 04 
0f9b6     ED F2 F7 EC 
0f9ba     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
0f9be     F0 EA E8 06 
0f9c2     ED F3 E1 F2 
0f9c6     FA DF ED DE 
0f9ca     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
0f9ce     E8 F3 03 24 
0f9d2     2C 1B 2E 3C 
0f9d6     2A 1E 26 34 
0f9da     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
0f9de     14 0E 01 1C 
0f9e2     14 06 03 0E 
0f9e6     04 F2 00 00 
0f9ea     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
0f9ee     04 F6 EC E0 
0f9f2     EA EC D5 D6 
0f9f6     D3 EB FC ED 
0f9fa     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
0f9fe     26 2A 1C 2E 
0fa02     39 15 18 2A 
0fa06     2A 19 0C 1F 
0fa0a     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
0fa0e     3C 2B 25 2A 
0fa12     30 2A 0E 2A 
0fa16     14 1A 1C 0A 
0fa1a     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
0fa1e     00 13 00 00 
0fa22     FC FF 13 0D 
0fa26     00 F8 FC FD 
0fa2a     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
0fa2e     1E 14 00 FC 
0fa32     0F 00 F2 FC 
0fa36     EB EE F3 E7 
0fa3a     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
0fa3e     EB ED D6 D0 
0fa42     E1 D9 E0 E1 
0fa46     DB F8 ED EC 
0fa4a     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
0fa4e     E2 D8 DE F2 
0fa52     F3 E6 E0 ED 
0fa56     F3 0E 2A 1C 
0fa5a     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
0fa5e     24 30 2C 13 
0fa62     1A 1A 10 14 
0fa66     01 1E 1E 14 
0fa6a     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
0fa6e     09 09 00 10 
0fa72     00 00 09 0D 
0fa76     FC E6 F7 F2 
0fa7a     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
0fa7e     00 F8 EE ED 
0fa82     F7 FE 1E 25 
0fa86     1F 2A 37 2A 
0fa8a     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
0fa8e     13 0F 10 0E 
0fa92     0E 0E 27 2C 
0fa96     1F 1E 26 2A 
0fa9a     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
0fa9e     1A 01 18 13 
0faa2     0D 04 F3 09 
0faa6     FE FD F7 F1 
0faaa     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
0faae     F7 F6 FC 1A 
0fab2     1A 04 1C 1A 
0fab6     09 FC 01 0E 
0faba     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
0fabe     FC EC F7 00 
0fac2     01 F2 EE FE 
0fac6     E1 DE EB E1 
0faca     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
0face     FD 00 EC E8 
0fad2     F8 F0 F2 E1 
0fad6     E4 F7 FD F7 
0fada     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
0fade     24 21 1C 39 
0fae2     3E 1A 22 34 
0fae6     2A 1A 14 18 
0faea     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
0faee     19 14 08 03 
0faf2     14 F9 FC 04 
0faf6     F7 0E F3 FF 
0fafa     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
0fafe     E6 EB E0 DB 
0fb02     D0 D5 F0 F7 
0fb06     EC E2 F0 EB 
0fb0a     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
0fb0e     2A 30 1A 13 
0fb12     2B 1A 14 13 
0fb16     0D 13 14 13 
0fb1a     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
0fb1e     2A 2C 18 1E 
0fb22     25 13 2A 15 
0fb26     19 1F 1C 14 
0fb2a     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
0fb2e     01 F7 00 0E 
0fb32     10 00 FC F7 
0fb36     FC 0E 25 08 
0fb3a     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
0fb3e     00 09 00 F2 
0fb42     FA ED F8 EC 
0fb46     ED FC F7 F7 
0fb4a     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
0fb4e     E0 D6 E8 E4 
0fb52     E0 EB ED FD 
0fb56     EC DC EC E6 
0fb5a     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
0fb5e     F3 F6 E1 E8 
0fb62     E1 F7 13 14 
0fb66     1C 2A 34 2A 
0fb6a     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
0fb6e     18 14 13 14 
0fb72     09 09 1B 18 
0fb76     14 09 1A 09 
0fb7a     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
0fb7e     06 01 0D 06 
0fb82     09 F2 EB EE 
0fb86     ED F0 DC E0 
0fb8a     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
0fb8e     F3 F1 FA 27 
0fb92     1E 18 34 32 
0fb96     25 13 27 27 
0fb9a     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
0fb9e     12 0D 19 21 
0fba2     2E 1A 24 2A 
0fba6     14 1E 14 13 
0fbaa     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
0fbae     18 14 F9 00 
0fbb2     00 00 00 F2 
0fbb6     F1 00 0D 00 
0fbba     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
0fbbe     0F 09 09 1C 
0fbc2     1A 00 00 04 
0fbc6     04 F4 F9 ED 
0fbca     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
0fbce     FC FC E8 F3 
0fbd2     F9 D9 F0 E1 
0fbd6     EB F3 E5 F6 
0fbda     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
0fbde     F1 ED F7 ED 
0fbe2     DE E8 F8 01 
0fbe6     F1 F2 F6 E6 
0fbea     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
0fbee     38 39 1C 24 
0fbf2     32 2A 1E 14 
0fbf6     13 13 09 09 
0fbfa     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
0fbfe     0E 09 FC 04 
0fc02     FD 00 04 FE 
0fc06     00 FE 07 EE 
0fc0a     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
0fc0e     DB D3 DB F1 
0fc12     F2 F2 EB E6 
0fc16     EB 09 1A 0E 
0fc1a     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
0fc1e     1E 2A 18 1C 
0fc22     0E 13 1E 0D 
0fc26     19 20 32 24 
0fc2a     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
0fc2e     21 1C 2A 1F 
0fc32     1C 1C 22 2A 
0fc36     0E 09 06 09 
0fc3a     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
0fc3e     1C 0E 04 07 
0fc42     ED FE 13 14 
0fc46     0C 18 26 09 
0fc4a     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
0fc4e     F9 F2 F3 F3 
0fc52     E7 F0 F7 F7 
0fc56     EC EB F7 D9 
0fc5a     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
0fc5e     DF EA E6 FC 
0fc62     F7 E2 E5 E4 
0fc66     EA EC D6 D9 
0fc6a     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
0fc6e     EC E0 F7 19 
0fc72     0D 15 2A 37 
0fc76     22 19 2D 21 
0fc7a     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
0fc7e     0D 0C 08 1A 
0fc82     18 04 13 0E 
0fc86     08 0D 01 0D 
0fc8a     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
0fc8e     13 00 F4 F1 
0fc92     EA F2 EC E4 
0fc96     D9 F7 FF F3 
0fc9a     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
0fc9e     1A 18 19 34 
0fca2     30 1F 19 2A 
0fca6     1E 18 14 0E 
0fcaa     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
0fcae     24 25 13 32 
0fcb2     1B 19 1F 13 
0fcb6     1E 18 18 0D 
0fcba     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
0fcbe     00 FF 09 FA 
0fcc2     F2 F7 01 09 
0fcc6     00 01 ED E8 
0fcca     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
0fcce     1C 14 00 00 
0fcd2     00 FF FC F0 
0fcd6     F3 F2 F0 E8 
0fcda     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
0fcde     FC E6 EB E4 
0fce2     E8 F3 EB F2 
0fce6     F0 00 00 F2 
0fcea     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
0fcee     F7 DE EB 00 
0fcf2     00 00 F9 EC 
0fcf6     F7 13 1B 14 
0fcfa     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
0fcfe     2C 27 22 20 
0fd02     0D 1C 0D 04 
0fd06     04 0D 1C 00 
0fd0a     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
0fd0e     FC 00 01 00 
0fd12     00 F6 03 00 
0fd16     EC E8 DB EB 
0fd1a     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
0fd1e     F7 ED F8 F2 
0fd22     DE F7 09 12 
0fd26     0C 2A 34 1F 
0fd2a     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
0fd2e     18 0E 14 15 
0fd32     09 16 24 2A 
0fd36     1C 33 2A 26 
0fd3a     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
0fd3e     21 1A 16 26 
0fd42     18 09 09 09 
0fd46     04 10 00 F9 
0fd4a     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
0fd4e     04 F0 00 13 
0fd52     0A 09 1C 2A 
0fd56     04 03 04 00 
0fd5a     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
0fd5e     EE E8 E6 00 
0fd62     EC E6 FA E4 
0fd66     E6 DF DB E6 
0fd6a     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
0fd6e     F8 EE EB E1 
0fd72     EC EB EC DE 
0fd76     D5 F4 F2 F6 
0fd7a     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
0fd7e     10 06 19 31 
0fd82     30 1C 22 2A 
0fd86     1E 25 10 14 
0fd8a     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
0fd8e     1F 07 09 14 
0fd92     07 0F 00 06 
0fd96     0E 0D 0D FD 
0fd9a     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
0fd9e     F1 ED F7 EC 
0fda2     E1 E0 F8 FD 
0fda6     FF 04 EC F3 
0fdaa     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
0fdae     3C 30 21 26 
0fdb2     1F 24 1A 13 
0fdb6     10 14 0F 09 
0fdba     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
0fdbe     2A 1E 21 14 
0fdc2     1E 1A 1C 14 
0fdc6     0D 13 14 0A 
0fdca     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
0fdce     00 EC FE 06 
0fdd2     06 0E 04 ED 
0fdd6     F1 09 01 00 
0fdda     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
0fdde     07 FD 06 F7 
0fde2     EE F7 ED EE 
0fde6     E4 FE F9 EB 
0fdea     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
0fdee     E0 EB EA F7 
0fdf2     EB EB 00 F8 
0fdf6     F2 F1 EE F8 
0fdfa     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
0fdfe     00 FD 07 F7 
0fe02     ED F7 0E 0E 
0fe06     12 2A 37 2A 
0fe0a     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
0fe0e     1C 10 14 0F 
0fe12     04 00 1A 09 
0fe16     03 0E 06 0E 
0fe1a     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
0fe1e     04 FC 00 04 
0fe22     FD EC E8 E4 
0fe26     E8 ED D9 DA 
0fe2a     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
0fe2e     EE E4 00 09 
0fe32     0A 0E 2E 30 
0fe36     1A 22 18 22 
0fe3a     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
0fe3e     15 09 13 26 
0fe42     1A 24 2A 24 
0fe46     2A 1A 1E 1C 
0fe4a     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
0fe4e     1A 14 08 00 
0fe52     08 09 0E FC 
0fe56     FC 0C 0C 13 
0fe5a     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
0fe5e     09 01 09 1C 
0fe62     1A 04 09 03 
0fe66     04 04 F4 F8 
0fe6a     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
0fe6e     00 EC F7 EC 
0fe72     F2 EC DA E5 
0fe76     EA ED EC E0 
0fe7a     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
0fe7e     E4 E8 F1 EC 
0fe82     DB E0 F2 F1 
0fe86     00 FC E4 EB 
0fe8a     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
0fe8e     31 2A 24 1F 
0fe92     22 24 1A 18 
0fe96     12 10 09 FE 
0fe9a     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
0fe9e     08 0E 04 00 
0fea2     01 08 13 00 
0fea6     00 03 04 F7 
0feaa     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
0feae     E6 DE E8 EC 
0feb2     F8 02 00 E6 
0feb6     F7 09 0A 0C 
0feba     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
0febe     22 1E 25 15 
0fec2     19 14 1A 09 
0fec6     09 25 1C 24 
0feca     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
0fece     1B 1E 1E 2A 
0fed2     0E 12 1C 14 
0fed6     09 00 FC 00 
0feda     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
0fede     01 09 0E 04 
0fee2     F1 F7 09 00 
0fee6     FE 13 14 09 
0feea     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
0feee     F7 F8 F4 F9 
0fef2     E1 EB FD ED 
0fef6     F7 F2 F1 F2 
0fefa     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
0fefe     F2 EE F3 01 
0ff02     FC F2 F1 EB 
0ff06     F7 F7 EC E6 
0ff0a     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
0ff0e     F2 EB FE 09 
0ff12     04 09 34 2A 
0ff16     26 28 21 27 
0ff1a     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
0ff1e     0E FA 09 09 
0ff22     03 0D 00 0D 
0ff26     06 00 03 FF 
0ff2a     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
0ff2e     01 FC ED E7 
0ff32     E2 F0 E8 D6 
0ff36     E4 E6 EB F7 
0ff3a     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
0ff3e     04 01 13 2C 
0ff42     27 20 1F 1E 
0ff46     26 18 18 13 
0ff4a     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
0ff4e     1C 22 2A 26 
0ff52     2D 2A 25 25 
0ff56     26 2A 21 1A 
0ff5a     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
0ff5e     02 08 0E 09 
0ff62     FC 04 06 07 
0ff66     18 0E 00 F8 
0ff6a     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
0ff6e     19 0E 09 04 
0ff72     06 04 FA F7 
0ff76     F4 FC E6 E6 
0ff7a     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
0ff7e     ED ED E4 E8 
0ff82     DE F0 ED E8 
0ff86     EB F8 F8 F0 
0ff8a     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
0ff8e     EC E4 EA ED 
0ff92     F1 00 F9 E6 
0ff96     F3 00 04 00 
0ff9a     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
0ff9e     21 2B 22 1F 
0ffa2     14 1B 1C 00 
0ffa6     0C 10 06 10 
0ffaa     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
0ffae     09 06 0D 0E 
0ffb2     01 06 0A 04 
0ffb6     FA F2 EA F1 
0ffba     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
0ffbe     E8 F7 00 F9 
0ffc2     E7 F7 09 00 
0ffc6     09 24 2A 21 
0ffca     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
0ffce     15 0E 19 14 
0ffd2     04 13 14 1C 
0ffd6     1F 20 26 1F 
0ffda     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
0ffde     1A 13 18 1C 
0ffe2     14 0A 00 FF 
0ffe6     09 09 F7 F8 
0ffea     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
0ffee     00 F8 FC 09 
0fff2     F7 09 16 14 
0fff6     0C 01 04 04 
0fffa     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
0fffe     F2 E7 F7 ED 
10002     F6 F2 EE F7 
10006     ED F2 E6 EB 
1000a     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
1000e     00 FC F7 EE 
10012     ED FE F3 E8 
10016     F0 ED F4 FF 
1001a     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
1001e     04 00 13 2A 
10022     25 27 1C 27 
10026     21 1F 14 0E 
1002a     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
1002e     02 04 01 03 
10032     00 03 00 FD 
10036     00 04 FD FC 
1003a     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
1003e     E7 E6 F7 E8 
10042     DC EB E4 F6 
10046     00 FC F2 F1 
1004a     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
1004e     2B 2D 2A 27 
10052     25 27 21 0D 
10056     1C 1F 09 13 
1005a     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
1005e     2A 21 2A 1F 
10062     18 24 20 15 
10066     16 21 1F 15 
1006a     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
1006e     00 FD 00 00 
10072     08 18 09 F9 
10076     00 0F 00 00 
1007a     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
1007e     09 06 03 00 
10082     F1 FE F7 E8 
10086     F6 F0 F1 EE 
1008a     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
1008e     DE DB ED EC 
10092     E1 EB F8 FC 
10096     F3 EE E0 F3 
1009a     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
1009e     E8 FC 00 F9 
100a2     E8 FC 07 F9 
100a6     00 21 24 25 
100aa     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
100ae     14 0E 1E 09 
100b2     09 0C 06 0D 
100b6     04 0D 04 08 
100ba     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
100be     04 F9 00 09 
100c2     06 FE EC EA 
100c6     F7 F7 E0 EC 
100ca     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
100ce     00 F0 09 0A 
100d2     00 13 26 30 
100d6     2A 26 2A 24 
100da     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
100de     0A 12 18 13 
100e2     1F 1A 21 1E 
100e6     21 21 0F 1A 
100ea     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
100ee     1C 14 0E FC 
100f2     FD 09 00 FE 
100f6     F8 F7 FE 09 
100fa     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
100fe     01 F8 0D 10 
10102     0E 09 09 01 
10106     03 01 F0 00 
1010a     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
1010e     FA F3 F3 F2 
10112     F0 F2 EC E0 
10116     EB F3 E8 EB 
1011a     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
1011e     EA EB FF ED 
10122     ED F2 E5 F3 
10126     00 07 F2 F7 
1012a     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
1012e     26 28 20 2A 
10132     20 26 1F 09 
10136     1E 0E 03 0A 
1013a     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
1013e     04 04 09 00 
10142     FF 00 06 F9 
10146     FD 06 01 00 
1014a     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
1014e     E4 DF E1 DB 
10152     EA FC 00 E8 
10156     F7 07 F7 06 
1015a     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
1015e     21 1C 26 14 
10162     0E 1C 10 0E 
10166     15 1C 21 1C 
1016a     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
1016e     1C 1C 25 1F 
10172     18 19 21 1F 
10176     1F 0E FF 12 
1017a     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
1017e     00 04 19 0D 
10182     FD 09 09 00 
10186     03 0F 15 09 
1018a     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
1018e     EC F7 F9 E8 
10192     F1 EC F7 F2 
10196     F0 F3 EC F0 
1019a     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
1019e     EA E6 F1 FC 
101a2     00 F8 EC EB 
101a6     F4 F2 E6 EE 
101aa     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
101ae     F7 F1 09 00 
101b2     FF 0E 1E 25 
101b6     21 21 1F 24 
101ba     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
101be     04 09 08 0F 
101c2     09 09 0E 06 
101c6     09 04 00 00 
101ca     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
101ce     08 09 01 EC 
101d2     F4 FA F2 EA 
101d6     E8 E7 E8 FC 
101da     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
101de     01 00 0E 22 
101e2     20 1C 1F 14 
101e6     24 14 09 13 
101ea     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
101ee     1B 19 24 22 
101f2     21 22 21 19 
101f6     21 1F 14 13 
101fa     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
101fe     FE 07 0C 00 
10202     00 FC FE 00 
10206     10 12 00 09 
1020a     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
1020e     14 0E 0A 04 
10212     FE 09 F9 F2 
10216     FC EE F3 EB 
1021a     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
1021e     F3 F3 F0 EC 
10222     EA F3 F3 E4 
10226     F6 FC 00 01 
1022a     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
1022e     ED EC E8 EC 
10232     F3 00 00 EB 
10236     00 04 FF 01 
1023a     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
1023e     14 19 1F 0E 
10242     0D 09 06 01 
10246     02 04 04 04 
1024a     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
1024e     00 00 06 04 
10252     FC FF 09 08 
10256     07 F2 ED F8 
1025a     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
1025e     E7 F7 06 F7 
10262     F7 09 04 03 
10266     09 21 27 24 
1026a     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
1026e     14 1C 0E 13 
10272     0E 13 1C 1A 
10276     22 22 25 26 
1027a     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
1027e     15 18 19 1C 
10282     22 18 04 02 
10286     09 01 00 FC 
1028a     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
1028e     00 00 0D 00 
10292     FD 00 0E 0D 
10296     0E 09 FF 06 
1029a     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
1029e     ED E8 ED F4 
102a2     F0 F3 EE F0 
102a6     F2 E6 E8 EB 
102aa     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
102ae     F8 04 F8 EC 
102b2     F3 F7 F2 ED 
102b6     F0 E8 EB 00 
102ba     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
102be     02 00 0E 21 
102c2     1C 2B 1F 1E 
102c6     2B 1B 19 14 
102ca     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
102ce     0D 0E 0A 09 
102d2     09 10 03 00 
102d6     0D 04 FF FF 
102da     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
102de     EB F7 EE EE 
102e2     E7 E4 E4 E6 
102e6     FF FC EB FE 
102ea     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
102ee     1C 1E 27 1A 
102f2     1E 25 12 15 
102f6     0E 0D 09 08 
102fa     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
102fe     1F 26 1F 1F 
10302     18 22 1B 0E 
10306     16 15 21 1F 
1030a     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
1030e     00 00 FF F8 
10312     00 16 09 00 
10316     09 0A 00 00 
1031a     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
1031e     06 0E 09 00 
10322     FE F7 F4 F2 
10326     F1 F7 F8 FA 
1032a     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
1032e     EC F1 F3 EE 
10332     E8 F3 F8 01 
10336     01 EC F3 F3 
1033a     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
1033e     E4 F4 02 EE 
10342     F4 FF FF FC 
10346     FE 13 13 21 
1034a     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
1034e     10 0A 06 04 
10352     FC 00 01 08 
10356     04 04 06 07 
1035a     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
1035e     FC FD 00 08 
10362     0D 04 F1 F8 
10366     FA F2 F2 ED 
1036a     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
1036e     F1 F8 03 04 
10372     00 09 1B 21 
10376     2B 25 24 2C 
1037a     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
1037e     14 0A 14 19 
10382     1F 26 1E 27 
10386     2A 1F 1A 21 
1038a     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
1038e     1C 22 14 08 
10392     08 09 06 00 
10396     00 F7 F7 10 
1039a     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
1039e     01 F7 03 07 
103a2     0D 12 00 08 
103a6     04 FD F9 F2 
103aa     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
103ae     F3 F7 F7 F2 
103b2     F3 F7 E6 E6 
103b6     F0 EC EA ED 
103ba     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
103be     F2 FA F7 F7 
103c2     F1 F2 E6 EB 
103c6     03 00 F8 01 
103ca     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
103ce     19 24 2A 1C 
103d2     2B 22 1C 1A 
103d6     14 10 04 07 
103da     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
103de     0A 0E 0D 00 
103e2     FF 08 00 FF 
103e6     FF 01 09 09 
103ea     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
103ee     EC E8 E7 D6 
103f2     EB F7 EC F1 
103f6     FA 01 F8 00 
103fa     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
103fe     1C 26 1F 1A 
10402     18 12 0E 0C 
10406     09 13 19 21 
1040a     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
1040e     1A 1E 21 18 
10412     15 19 15 26 
10416     1F 09 09 07 
1041a     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
1041e     ED 00 0D 00 
10422     03 08 09 FE 
10426     02 09 0C 19 
1042a     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
1042e     01 FC FE F2 
10432     F2 F3 F0 FE 
10436     F8 F9 F7 FD 
1043a     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
1043e     F0 ED F7 FC 
10442     07 00 F4 F7 
10446     F9 F2 F2 F3 
1044a     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
1044e     F3 F7 00 00 
10452     F8 06 0A 16 
10456     1F 16 21 21 
1045a     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
1045e     08 00 01 00 
10462     09 0C 04 09 
10466     09 01 FC 03 
1046a     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
1046e     03 0E 00 F4 
10472     F3 F2 EE E7 
10476     EE DB E0 F8 
1047a     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
1047e     00 FF 0E 13 
10482     2A 2A 21 2B 
10486     2A 25 1C 1E 
1048a     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
1048e     19 21 27 20 
10492     28 2B 21 1E 
10496     21 20 18 1B 
1049a     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
1049e     09 09 03 00 
104a2     FE 00 F2 FC 
104a6     08 00 00 03 
104aa     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
104ae     03 13 09 04 
104b2     0C 01 04 FC 
104b6     FC F7 ED F2 
104ba     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
104be     F2 F4 F8 E8 
104c2     F0 F0 EC F0 
104c6     ED F3 00 01 
104ca     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
104ce     EC F1 EC E2 
104d2     F7 FA F8 F3 
104d6     00 01 F8 00 
104da     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
104de     1E 26 22 1A 
104e2     19 14 0E 08 
104e6     04 03 06 10 
104ea     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
104ee     00 02 07 00 
104f2     00 00 01 10 
104f6     09 F9 F7 F4 
104fa     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
104fe     DB F3 F7 F2 
10502     F3 00 00 F7 
10506     06 08 1C 21 
1050a     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
1050e     1C 1C 19 0F 
10512     13 0D 0E 18 
10516     20 1E 1E 2A 
1051a     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
1051e     16 15 14 19 
10522     21 1A 09 06 
10526     09 00 00 00 
1052a     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
1052e     00 00 0D 00 
10532     FE 00 00 15 
10536     14 08 0E 0C 
1053a     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
1053e     F8 F7 F1 F2 
10542     FC FA F8 F7 
10546     00 F3 EE F6 
1054a     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
1054e     FE 03 FC F2 
10552     F0 F3 E8 ED 
10556     EE DE EB F7 
1055a     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
1055e     F7 FC FD 09 
10562     19 18 1C 1A 
10566     21 1A 14 13 
1056a     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
1056e     00 08 06 01 
10572     09 06 00 00 
10576     04 FF FD FC 
1057a     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
1057e     F4 F4 F2 EA 
10582     F0 EC DB E8 
10586     F7 F4 F2 FE 
1058a     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
1058e     13 28 21 2A 
10592     2B 2C 2A 21 
10596     25 1C 1C 15 
1059a     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
1059e     24 2C 2B 1F 
105a2     26 25 1C 1C 
105a6     14 16 21 1B 
105aa     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
105ae     FA 03 F2 F1 
105b2     FC 03 FF F8 
105b6     08 00 FC FA 
105ba     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
105be     07 0A 09 00 
105c2     FF FA FA F3 
105c6     F0 E8 F4 F8 
105ca     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
105ce     EB F2 F2 EB 
105d2     EE EC F7 00 
105d6     FD F7 F0 F3 
105da     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
105de     E4 F4 F9 F3 
105e2     F7 04 FA FD 
105e6     00 01 1C 1B 
105ea     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
105ee     1A 1E 14 14 
105f2     0A 04 03 09 
105f6     12 09 0C 10 
105fa     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
105fe     00 00 F9 00 
10602     08 04 F7 F4 
10606     F6 E6 EB EC 
1060a     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
1060e     EC F7 00 F8 
10612     FC FD 00 1A 
10616     1E 1E 27 27 
1061a     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
1061e     1A 18 0E 13 
10622     1C 1F 1E 24 
10626     2A 1F 21 26 
1062a     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
1062e     1C 1E 1A 07 
10632     07 04 FC 04 
10636     FC F0 FA 00 
1063a     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
1063e     00 00 F7 09 
10642     0E 0F 0F 0F 
10646     15 0D 09 04 
1064a     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
1064e     F6 00 FC FC 
10652     00 FD F3 FA 
10656     F7 F2 F7 F2 
1065a     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
1065e     F1 F7 EE EB 
10662     F3 EC E2 EB 
10666     F7 F7 F1 FF 
1066a     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
1066e     09 13 14 1C 
10672     1E 22 1B 1A 
10676     13 0E 0C 01 
1067a     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
1067e     06 0D 09 00 
10682     06 00 FE 00 
10686     F3 FE 03 06 
1068a     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
1068e     F0 F2 E6 E2 
10692     EB F7 EE F7 
10696     00 FD 00 FC 
1069a     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
1069e     25 2D 30 2B 
106a2     25 26 20 1C 
106a6     18 10 1C 21 
106aa     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
106ae     20 25 1F 1C 
106b2     1A 0E 15 1C 
106b6     1B 0A 04 06 
106ba     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
106be     F7 FD 06 FA 
106c2     03 06 FE 01 
106c6     F6 FD 09 09 
106ca     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
106ce     0A 07 00 01 
106d2     FC F7 F1 FA 
106d6     FC F7 FD FF 
106da     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
106de     F7 EE ED F8 
106e2     00 00 F2 F7 
106e6     F2 EB F7 F0 
106ea     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
106ee     F2 FE FC FC 
106f2     FC F8 00 0F 
106f6     15 1A 1E 24 
106fa     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
106fe     0E 0D 00 00 
10702     06 04 04 0C 
10706     0D 00 03 03 
1070a     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
1070e     00 04 01 F3 
10712     F8 EC EB F2 
10716     EC E4 E0 F6 
1071a     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
1071e     00 FC FC 09 
10722     19 21 21 2A 
10726     2B 2C 2A 26 
1072a     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
1072e     16 20 1C 1E 
10732     28 25 1F 25 
10736     1F 1C 1C 10 
1073a     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
1073e     08 09 FD 00 
10742     04 FC F7 F8 
10746     00 FD 00 04 
1074a     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
1074e     00 08 0E 0D 
10752     0F 10 09 09 
10756     01 00 FF F7 
1075a     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
1075e     F7 FE F4 F1 
10762     F7 ED F2 EE 
10766     E6 ED F8 00 
1076a     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
1076e     F1 F2 EC DF 
10772     F0 F4 ED F8 
10776     F8 FC FE F7 
1077a     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
1077e     1E 21 25 21 
10782     1E 19 14 12 
10786     06 00 06 09 
1078a     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
1078e     08 09 00 02 
10792     FD F7 FC 06 
10796     07 F9 FD F7 
1079a     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
1079e     E4 F1 F2 EB 
107a2     FC F8 FE 00 
107a6     F7 00 0E 1C 
107aa     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
107ae     28 26 21 20 
107b2     1B 14 10 1C 
107b6     1B 18 24 26 
107ba     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
107be     1C 14 0E 0F 
107c2     1C 14 09 0D 
107c6     00 FE 01 01 
107ca     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
107ce     FE 00 00 01 
107d2     00 F4 FF 08 
107d6     0D 0F 10 18 
107da     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
107de     02 00 F4 F6 
107e2     FC F7 F7 00 
107e6     00 F7 FC F7 
107ea     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
107ee     F7 06 00 FA 
107f2     FD EE F6 F7 
107f6     F3 E7 E8 F8 
107fa     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
107fe     FD F7 F7 FF 
10802     0E 13 18 1E 
10806     21 1F 1C 18 
1080a     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
1080e     00 07 01 03 
10812     0D 04 06 04 
10816     00 02 FD F3 
1081a     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
1081e     F9 F7 EB EE 
10822     F3 EE E4 EA 
10826     F0 ED F7 F7 
1082a     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
1082e     08 14 1E 21 
10832     2E 30 2B 2A 
10836     25 24 22 1A 
1083a     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
1083e     24 2E 21 27 
10842     26 20 25 1A 
10846     14 0D 1C 1A 
1084a     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
1084e     01 06 00 F6 
10852     00 00 FE 00 
10856     00 00 00 FA 
1085a     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
1085e     12 16 14 0E 
10862     0D 04 04 00 
10866     F7 EE F8 F7 
1086a     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
1086e     F8 F2 F3 F3 
10872     EC E6 E6 FC 
10876     FC F3 F9 EE 
1087a     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
1087e     E4 F2 EC F0 
10882     F8 F2 FE F7 
10886     F7 FC 06 13 
1088a     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
1088e     20 1B 15 15 
10892     0E 04 00 09 
10896     07 03 13 09 
1089a     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
1089e     01 FE F2 F7 
108a2     03 00 FE FC 
108a6     F2 ED F3 F3 
108aa     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
108ae     F2 F9 F7 00 
108b2     FE FA 03 0E 
108b6     1A 20 2A 30 
108ba     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
108be     25 1F 14 EB 
108c2     00 00 34 39 
108c6     33 37 4C 5D 
108ca     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
108ce     A5 CF 2E 57 
108d2     36 18 0F 00 
108d6     AC 87 CF 5E 
108da     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
108de     FF 7F 60 DB 
108e2     3C 0C 16 30 
108e6     A0 CF 30 E7 
108ea     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
108ee     AB E7 D0 CF 
108f2     18 A0 9F BE 
108f6     B7 B8 B7 CF 
108fa     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
108fe     D0 FF 00 B7 
10902     FF 30 0F 00 
10906     06 D0 CF F4 
1090a     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
1090e     AC 81 CF 00 
10912     C7 A0 9F 06 
10916     A0 9F D0 87 
1091a     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
1091e     18 FF E8 AC 
10922     B7 FF 00 BD 
10926     DC CF F1 B8 
1092a     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
1092e     18 EE D2 F3 
10932     09 E8 EB B8 
10936     CF E8 FF 0A 
1093a     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
1093e     10 28 34 5E 
10942     48 2E 5E 7F 
10946     60 0A 52 30 
1094a     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
1094e     3C 2E 5E 6C 
10952     30 46 3C 5E 
10956     60 72 30 22 
1095a     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
1095e     7F 60 46 55 
10962     48 5E 60 7F 
10966     7F 7F 4F 7F 
1096a     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
1096e     78 66 30 0A 
10972     46 30 2E 7F 
10976     60 5E 60 5E 
1097a     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
1097e     66 76 7F 7F 
10982     6F 49 7B 30 
10986     46 60 42 46 
1098a     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
1098e     46 46 69 48 
10992     28 5E 3C 46 
10996     60 30 3A 3C 
1099a     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
1099e     22 36 1E 37 
109a2     18 2E 18 10 
109a6     2E 48 2A 1E 
109aa     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
109ae     00 EE A0 CF 
109b2     00 DF E7 DC 
109b6     B7 FF 0C EE 
109ba     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
109be     0C FD 12 E8 
109c2     FF 00 E8 BD 
109c6     E1 EE D0 AB 
109ca     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
109ce     C3 C4 A0 B7 
109d2     E8 A0 9F B8 
109d6     BE A0 AC A0 
109da     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
109de     A0 87 C0 A3 
109e2     C9 A0 9F B4 
109e6     AC 80 9F AC 
109ea     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
109ee     87 80 84 80 
109f2     84 80 80 9F 
109f6     80 80 80 80 
109fa     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
109fe     93 80 99 A0 
10a02     80 80 80 80 
10a06     93 80 80 80 
10a0a     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
10a0e     93 80 80 80 
10a12     9F 80 80 B8 
10a16     80 80 A0 80 
10a1a     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
10a1e     80 8E 80 80 
10a22     9D 80 9F 88 
10a26     88 80 99 80 
10a2a     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
10a2e     81 9F 80 93 
10a32     94 82 93 A6 
10a36     91 9F 91 97 
10a3a     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
10a3e     BD CA 93 CF 
10a42     A0 B7 B1 AC 
10a46     B1 D3 A0 CF 
10a4a     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
10a4e     F0 E4 DC C9 
10a52     E7 F4 D0 DB 
10a56     FF 00 D2 F3 
10a5a     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
10a5e     0A 16 18 E4 
10a62     2E 18 2E 2E 
10a66     18 F3 52 00 
10a6a     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
10a6e     2E 1B 24 0A 
10a72     3C 28 76 30 
10a76     3F 36 2A 46 
10a7a     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
10a7e     24 2E 5E 60 
10a82     6A 7C 6C 48 
10a86     40 46 5E 6C 
10a8a     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
10a8e     48 76 6C 60 
10a92     5E 7F 60 7F 
10a96     60 6A 7F 73 
10a9a     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
10a9e     76 7F 7F 7F 
10aa2     7C 7F 78 7F 
10aa6     7F 7F 7F 7F 
10aaa     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
10aae     7F 7F 7F 7F 
10ab2     7F 7F 7F 7F | 	byte	$7f[8]
10ab6     76 7F 7E 7F 
10aba     7F 7F 7F 7F 
10abe     7F 7F 64 7F 
10ac2     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
10ac6     7F 7F 7F 7F 
10aca     7F 7F       | 	byte	$7f[6]
10acc     79 7F 66 64 
10ad0     6D 73 7F 7F 
10ad4     64 7F 60 6A 
10ad8     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
10adc     76 7F 7F 78 
10ae0     58 78 60 75 
10ae4     6C 46 66 48 
10ae8     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
10aec     45 51 5E 60 
10af0     3A 5E 4E 40 
10af4     5E 42 3F 3D 
10af8     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
10afc     42 0C 28 28 
10b00     3C 30 1F 40 
10b04     48 43 42 22 
10b08     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
10b0c     0C 18 0C 04 
10b10     24 DB 1E F3 
10b14     00 FF 0C E7 
10b18     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
10b1c     00 F3 18 D0 
10b20     EE F3 E8 DB 
10b24     E1 D8 E7 E2 
10b28     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
10b2c     E8 BD D3 D5 
10b30     CD DB DC C3 
10b34     CA B7 D0 C3 
10b38     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
10b3c     C0 B8 88 9F 
10b40     C1 A0 C3 D0 
10b44     88 9F B8 A0 
10b48     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
10b4c     A0 80 82 80 
10b50     93 A0 87 94 
10b54     80 87 94 80 
10b58     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
10b5c     88 8D 9F 97 
10b60     90 9C 94 80 
10b64     8B 87 80 87 
10b68     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
10b6c     8E 9A 94 84 
10b70     9F A6 80 88 
10b74     80 81 8D 80 
10b78     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
10b7c     82 80 8D 80 
10b80     80 AC 80 9A 
10b84     9F 90 94 80 
10b88     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
10b8c     9F 94 80 80 
10b90     8E 80 80 80 
10b94     80 AC 8D 94 
10b98     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
10b9c     9F A0 80 AC 
10ba0     87 8E 9F AC 
10ba4     94 9A 91 93 
10ba8     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
10bac     A0 9C C3 AF 
10bb0     A8 BB AF A3 
10bb4     AF AB B7 B8 
10bb8     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
10bbc     BE C3 D2 BE 
10bc0     C3 D0 BD D9 
10bc4     DF BE C3 DC 
10bc8     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
10bcc     EE DF D9 E4 
10bd0     E4 DE F3 EE 
10bd4     E7 00 FF 0C 
10bd8     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
10bdc     06 07 06 FF 
10be0     18 0C FF 1C 
10be4     15 1B 27 1F 
10be8     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
10bec     2E 48 13 2A 
10bf0     2E 3C 30 3A 
10bf4     48 3D 3F 40 
10bf8     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
10bfc     5A 48 3A 5B 
10c00     5A 5E 60 52 
10c04     61 69 60 6A 
10c08     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
10c0c     69 66 6A 6F 
10c10     76 7F 7F 78 
10c14     6C 6A 78 64 
10c18     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
10c1c     7F 7F 78 7B 
10c20     7F 7F 7F 7F 
10c24     7F 7F 7F 7E 
10c28     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
10c2c     7F 79 7F 7F 
10c30     7F 7F 7F 7F 
10c34     7F 7F 7F 7F 
10c38     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
10c3c     7F 7F 7F 7F 
10c40     7F 7F 7F 7F 
10c44     7F 7F 7F 7F | 	byte	$7f[12]
10c48     7E 7F 7F 7F 
10c4c     7E 7F 7F 76 
10c50     78 76 6C 7F 
10c54     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
10c58     6A 78 67 60 
10c5c     64 64 6C 7C 
10c60     60 5E 78 60 
10c64     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
10c68     60 52 66 5A 
10c6c     4E 4B 48 3C 
10c70     37 46 30 2E 
10c74     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
10c78     3F 30 2A 2D 
10c7c     24 22 3A 3C 
10c80     28 2A 12 22 
10c84     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
10c88     1B 1E 1F 1E 
10c8c     0C 00 10 00 
10c90     FF 18 0A 06 
10c94     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
10c98     F4 F3 EE DC 
10c9c     DE E5 E7 E7 
10ca0     F9 E8 D8 E1 
10ca4     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
10ca8     E8 D2 CA DB 
10cac     D0 CF D0 C9 
10cb0     C4 B8 B7 C9 
10cb4     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
10cb8     BD BA B2 AE 
10cbc     A9 AF AC AF 
10cc0     A8 B7 AC 9F 
10cc4     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
10cc8     9C 94 8D 94 
10ccc     9F A0 A0 94 
10cd0     93 9F 97 9C 
10cd4     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
10cd8     87 91 80 80 
10cdc     80 80 80 87 
10ce0     88 87 80 81 
10ce4     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
10ce8     80 80 87 80 
10cec     80 80 81 82 
10cf0     80 80 80 81 
10cf4     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
10cf8     84 87 80 80 
10cfc     87 8E 93 88 
10d00     80 81 85 8D 
10d04     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
10d08     8B 8E 93 8B 
10d0c     93 96 8E 93 
10d10     9A 9F 99 97 
10d14     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
10d18     A0 9F A8 A6 
10d1c     A5 A8 A8 A8 
10d20     A0 9F A3 AB 
10d24     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
10d28     B4 A6 B7 B8 
10d2c     AB B1 B8 B1 
10d30     B7 B8 B7 BA 
10d34     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
10d38     C7 C6 CA C4 
10d3c     CF C4 CF D0 
10d40     DB D0 CF D0 
10d44     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
10d48     DF DE DC DE 
10d4c     E4 E2 F3 DC 
10d50     E7 E8 ED E8 
10d54     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
10d58     E8 FF 00 FF 
10d5c     00 FF 01 04 
10d60     07 07 13 12 
10d64     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
10d68     07 16 18 18 
10d6c     13 19 19 22 
10d70     27 34 30 22 
10d74     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
10d78     36 33 37 37 
10d7c     37 30 34 30 
10d80     2E 40 36 46 
10d84     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
10d88     4C 4B 4C 5B 
10d8c     55 5E 60 52 
10d90     57 4E 52 61 
10d94     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
10d98     58 5E 60 5E 
10d9c     66 69 6A 6F 
10da0     69 6A 66 67 
10da4     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
10da8     73 73 76 78 
10dac     7C 7F 7B 79 
10db0     78 7B 6D 73 
10db4     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
10db8     76 72 73 76 
10dbc     72 6D 67 70 
10dc0     72 7B 78 7C 
10dc4     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
10dc8     72 75 78 6F 
10dcc     70 6F 6F 67 
10dd0     6A 79 72 67 
10dd4     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
10dd8     70 6F 67 6A 
10ddc     60 64 60 57 
10de0     57 5E 5A 5D 
10de4     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
10de8     54 4F 58 54 
10dec     51 52 4F 52 
10df0     4F 4F 4F 51 
10df4     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
10df8     3D 3F 3F 3C 
10dfc     3F 36 37 30 
10e00     34 3C 36 33 
10e04     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
10e08     27 2B 1E 22 
10e0c     1E 1E 18 0F 
10e10     0D 0C 10 10 
10e14     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
10e18     0F 06 0A 06 
10e1c     0A 0A 00 F4 
10e20     F6 F0 F3 FD 
10e24     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
10e28     EE EE EE E8 
10e2c     E7 ED E8 E7 
10e30     E5 DF E1 DE 
10e34     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
10e38     D8 DB D3 D8 
10e3c     D0 C9 C7 C9 
10e40     CF D0 CF CF 
10e44     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
10e48     BE C0 C1 C1 
10e4c     C3 C1 C0 BE 
10e50     C1 BB BE BB 
10e54     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
10e58     B8 B7 B5 AE 
10e5c     B1 AF B5 AC 
10e60     A8 AB AE B1 
10e64     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
10e68     9F 9D 9F A5 
10e6c     A8 AC A3 A5 
10e70     A6 A6 A2 A3 
10e74     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
10e78     B1 AC A6 A6 
10e7c     A5 A6 A5 A8 
10e80     A3 A8 A8 A3 
10e84     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
10e88     A5 A3 9D 9F 
10e8c     A9 A8 AB A0 
10e90     9F A8 A2 AB 
10e94     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
10e98     B2 AE B4 AF 
10e9c     B1 AE B5 AF 
10ea0     AE B7 B2 AF 
10ea4     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
10ea8     AF B5 B7 B2 
10eac     B4 B8 BB BD 
10eb0     C6 C4 C4 C6 
10eb4     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
10eb8     C6 C7 CC CC 
10ebc     C7 C9 D0 C7 
10ec0     CF CC CD CF 
10ec4     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
10ec8     DE DB DC DF 
10ecc     DE DB E1 E4 
10ed0     E7 ED EA E5 
10ed4     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
10ed8     ED EE EB EB 
10edc     F0 F3 F7 F6 
10ee0     FC FF 00 01 
10ee4     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
10ee8     01 07 06 07 
10eec     04 07 06 09 
10ef0     0C 0C 0C 0D 
10ef4     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
10ef8     19 18 18 18 
10efc     10 19 18 1B 
10f00     19 1B 18 19 
10f04     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
10f08     25 28 27 27 
10f0c     2A 2E 30 30 
10f10     30 2A 28 2E 
10f14     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
10f18     2B 28 2A 2D 
10f1c     30 30 30 33 
10f20     36 37 36 37 
10f24     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
10f28     3A 3C 36 3C 
10f2c     3C 3C 3A 3C 
10f30     39 3D 3C 3C 
10f34     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
10f38     40 46 43 40 
10f3c     3F 40 40 3F 
10f40     42 3F 40 42 
10f44     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
10f48     4C 4B 4E 4B 
10f4c     49 4F 4B 4B 
10f50     48 48 45 48 
10f54     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
10f58     45 48 42 3F 
10f5c     43 43 46 48 
10f60     49 49 49 4B 
10f64     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
10f68     43 45 43 42 
10f6c     3F 3F 3D 3F 
10f70     45 43 43 3F 
10f74     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
10f78     3D 3D 40 3F 
10f7c     3F 39 3A 3A 
10f80     39 3C 3D 3C 
10f84     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
10f88     33 33 34 36 
10f8c     36 31 30 30 
10f90     2D 2A 28 27 
10f94     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
10f98     28 28 24 22 
10f9c     22 21 21 21 
10fa0     22 1F 1F 21 
10fa4     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
10fa8     21 1B 19 18 
10fac     12 10 0F 0C 
10fb0     0C 0D 0C 0F 
10fb4     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
10fb8     0C 0A 09 06 
10fbc     07 06 03 03 
10fc0     01 01 01 00 
10fc4     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
10fc8     FA F7 F7 F7 
10fcc     F6 F4 F1 F0 
10fd0     F3 F3 F6 F1 
10fd4     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
10fd8     E5 E7 E8 E7 
10fdc     E5 E4 E4 E5 
10fe0     E4 E7 E5 E4 
10fe4     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
10fe8     DE DB DB D9 
10fec     D9 DB D9 D6 
10ff0     D8 D8 D8 D9 
10ff4     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
10ff8     DC DC DE DC 
10ffc     D9 D6 D6 D5 
11000     D5 D5 D6 D3 
11004     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
11008     CF D0 D2 D2 
1100c     D2 D2 D3 D2 
11010     D2 D2 D2 D0 
11014     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
11018     D2 D3 D2 D2 
1101c     D2 D2 D3 D3 
11020     D3 D5 D6 D8 
11024     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
11028     D3 D5 D6 D6 
1102c     D5 D5 D5 D5 
11030     D5 D3 D5 D5 
11034     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
11038     D6 D6 D5 D5 
1103c     D3 D5 D6 D6 
11040     D6 D8 D8 D9 
11044     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
11048     D8 DB DE DF 
1104c     DF DF DF DF 
11050     DF DF E1 DF 
11054     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
11058     E5 E4 E4 E4 
1105c     E2 E2 DE DF 
11060     E1 E1 E4 E4 
11064     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
11068     E7 E8 EA EA 
1106c     EA ED EE ED 
11070     ED EB ED F0 
11074     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
11078     F1 F1 F1 F0 
1107c     EE F0 F0 F0 
11080     F1 F1 F1 F1 
11084     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
11088     F3 F4 F7 F9 
1108c     FD FF FF FF 
11090     FF 00 00 00 
11094     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
11098     FD FC FA FA 
1109c     FA FC FD FD 
110a0     FD FD FF 00 
110a4     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
110a8     04 04 07 09 
110ac     09 0A 0C 0C 
110b0     0A 0A 09 09 
110b4     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
110b8     03 04 06 07 
110bc     0A 0C 0C 0D 
110c0     0D 0C 0A 0A 
110c4     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
110c8     0F 0F 0D 0C 
110cc     0D 0F 0D 0F 
110d0     0F 0F 0F 10 
110d4     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
110d8     0D 0C 0D 0D 
110dc     0D 0F 0D 0C 
110e0     0C 0C 0C 0F 
110e4     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
110e8     12 12 10 10 
110ec     10 12 13 13 
110f0     13 15 16 18 
110f4     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
110f8     19 19 18 13 
110fc     13 12 10 10 
11100     0F 0F 0F 0F 
11104     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
11108     0D 0C 0D 0D 
1110c     0F 10 12 10 
11110     10 0F 0F 0F 
11114     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
11118     10 10 12 12 
1111c     10 12 12 10 
11120     12 12 10 0F 
11124     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
11128     0A 0C 0D 0F 
1112c     10 12 12 12 
11130     0F 0D 0C 0A 
11134     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
11138     0C 09 09 09 
1113c     09 09 09 09 
11140     09 0A 0A 0C 
11144     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
11148     0D 0D 0D 0C 
1114c     0C 0A 09 09 
11150     09 09 09 09 
11154     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
11158     07 06 03 03 
1115c     03 06 06 07 
11160     07 06 06 06 
11164     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
11168     03 01 01 00 
1116c     01 01 01 03 
11170     03 06 09 09 
11174     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
11178     03 01 01 01 
1117c     03 03 03 01 
11180     01 01 01 00 
11184     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
11188     01 03 01 00 
1118c     00 FD FD FC 
11190     FC FC FC FA 
11194     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
11198     FF 01 03 03 
1119c     04 04 04 03 
111a0     00 FD FC FC 
111a4     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
111a8     FD FD FD FC 
111ac     FC FA FA F9 
111b0     F7 F9 FA FC 
111b4     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
111b8     FA FA F9 FA 
111bc     FA FA FC FC 
111c0     FC FD FD FD 
111c4     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
111c8     F7 F6 F6 F6 
111cc     F6 F7 F9 FA 
111d0     FC FD FD FF 
111d4     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
111d8     FF FF 00 00 
111dc     00 00 00 FF 
111e0     FC FA FA F9 
111e4     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
111e8     F7 F7 F9 F9 
111ec     F9 FA FA F9 
111f0     F9 F9 F7 F7 
111f4     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
111f8     FA FA FA FA 
111fc     FA FA       | 	byte	$fa[6]
111fe     F9 F9 F7 F7 
11202     F7 F9 F9 FA 
11206     FA FA F9 F9 
1120a     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
1120e     FC FC FC FD 
11212     FC FD FD FC 
11216     FC FC FD FD 
1121a     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
1121e     F7 F9 FA FC 
11222     FC FC FC FC 
11226     FC FC FC FC 
1122a     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
1122e     F9 F9 F9 F7 
11232     F7 F7 F7 F6 
11236     F7 F7 F7 F7 
1123a     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
1123e     F7 F9 F9 F9 
11242     F9 F9 F9 F9 
11246     F9 F9 F9 F7 
1124a     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
1124e     FA FC FC FA 
11252     FC FC FA FA 
11256     FA FA FA FA 
1125a     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
1125e     F7 F9 F9 F9 
11262     F9 F7 F7 F6 
11266     F7 F9 FC 00 
1126a     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
1126e     FA FA F9 F9 
11272     F9 FA FC FC 
11276     FC FC FC FD 
1127a     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
1127e     FC FC FD FD 
11282     FC FA F9 F7 
11286     F7 F9 FA FC 
1128a     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
1128e     FC FC FC FC 
11292     FA FA F9 F9 
11296     F9 F9 F9 F7 
1129a     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
1129e     F7 F7 F7 F7 
112a2     F7 F7 F7 F7 
112a6     F7          | 	byte	$f7[9]
112a7     F9 F9 F9 F9 
112ab     F9 F9 F9 F9 
112af     F9 F9       | 	byte	$f9[10]
112b1     F7 F7 F7 F7 
112b5     F9 FA FC FC 
112b9     FA FC FC FA 
112bd     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
112c1     FA F9 F7 F7 
112c5     F7 F7 F9 F9 
112c9     F9 F9 F7 F7 
112cd     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
112d1     00 05 05 08 
112d5     08 09 0A 0B 
112d9     06 09 09 09 
112dd     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
112e1     0B 0A 0F 17 
112e5     04 10 FF 08 
112e9     F8 F3 08 07 
112ed     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
112f1     1D 24 00 FF 
112f5     14 20 0F 12 
112f9     10 20 01 10 
112fd     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
11301     D8 F7 D7 F0 
11305     FF CB F7 F7 
11309     F2 FF EB E4 
1130d     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
11311     18 32 27 17 
11315     1F 30 40 4C 
11319     24 3C 27 23 
1131d     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
11321     08 28 E7 00 
11325     ED E7 F8 F0 
11329     FD F4 D7 E8 
1132d     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
11331     D7 EC 1B 3B 
11335     20 25 16 13 
11339     27 30 40 37 
1133d     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
11341     19 E0 F5 EF 
11345     E1 FC F0 F2 
11349     E0 D7 D2 C8 
1134d     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
11351     EF FB FA 2B 
11355     FD 0F 1F 31 
11359     3D 34 44 37 
1135d     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
11361     38 22 3A 25 
11365     31 2A 00 0C 
11369     00 0F 1B 38 
1136d     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
11371     00 EF F4 F2 
11375     F7 0A 17 14 
11379     10 EF ED F2 
1137d     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
11381     10 1F 1C F0 
11385     F4 DB DF D9 
11389     EE 00 E8 E2 
1138d     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
11391     D4 BF DD E8 
11395     FF 04 18 0E 
11399     0D 22 2D 34 
1139d     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
113a1     1B 36 2A 1C 
113a5     22 13 2B 28 
113a9     0E 10 FF E6 
113ad     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
113b1     0C 1B 00 02 
113b5     00 FA FB 0B 
113b9     17 35 34 27 
113bd     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
113c1     0B 1A 11 23 
113c5     20 20 02 FA 
113c9     E1 D8 E6 E4 
113cd     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
113d1     CE D2 C8 C5 
113d5     CB CB CF EC 
113d9     FF 02 F4 05 
113dd     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
113e1     4A 28 25 26 
113e5     10 2F 1D 14 
113e9     1F 20 20 20 
113ed     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
113f1     14 17 0F 18 
113f5     0B F8 04 FC 
113f9     04 FD 07 2A 
113fd     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
11401     1C 08 14 1A 
11405     1B 1B 20 1C 
11409     10 10 F4 E6 
1140d     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
11411     F2 F3 E9 E8 
11415     D5 CE D8 D7 
11419     DB DD F7 05 
1141d     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
11421     04 1B 37 36 
11425     39 26 19 23 
11429     1A 15 1F 0B 
1142d     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
11431     F8 E0 E6 F1 
11435     FD 0D 09 02 
11439     EC F5 00 EA 
1143d     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
11441     37 3B 2D 20 
11445     1C 17 20 27 
11449     31 29 2F 20 
1144d     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
11451     E3 DF EF E8 
11455     F3 F3 E0 E0 
11459     CF D7 D1 DD 
1145d     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
11461     1D 21 13 1B 
11465     1B 32 43 40 
11469     2E 2F 20 26 
1146d     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
11471     14 23 19 01 
11475     F0 EA F3 F5 
11479     07 12 F6 F3 
1147d     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
11481     EE F1 0D 26 
11485     2A 20 13 10 
11489     03 0C 1A 1B 
1148d     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
11491     00 F0 E4 DF 
11495     E3 DD E9 F1 
11499     F3 E4 DF D8 
1149d     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
114a1     F9 03 13 1B 
114a5     1D 24 1C 1F 
114a9     3B 3B 48 40 
114ad     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
114b1     28 21 14 1E 
114b5     1D 21 0A F9 
114b9     F6 EF FD 13 
114bd     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
114c1     F4 F5 F0 F2 
114c5     F5 0B 28 26 
114c9     23 20 05 06 
114cd     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
114d1     1B 12 09 FC 
114d5     E3 E4 D9 D9 
114d9     CE DD E2 DF 
114dd     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
114e1     C8 CF DC E7 
114e5     FC 03 0E 20 
114e9     14 17 21 29 
114ed     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
114f1     30 23 31 28 
114f5     2C 22 29 30 
114f9     21 1A 10 F6 
114fd     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
11501     11 05 FD F8 
11505     FA F8 EC F5 
11509     13 20 2B 2C 
1150d     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
11511     14 1B 20 20 
11515     1E 10 02 F0 
11519     EE E4 D8 DD 
1151d     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
11521     DD DC CD CE 
11525     CD D7 EE ED 
11529     FA 0C 0D 10 
1152d     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
11531     31 39 2C 21 
11535     1A 1D 20 18 
11539     1B 24 20 21 
1153d     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
11541     03 11 1A 18 
11545     10 06 FF 07 
11549     F6 F3 03 12 
1154d     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
11551     1E 14 15 1A 
11555     1E 27 26 25 
11559     18 04 FD F1 
1155d     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
11561     E6 E6 EA E5 
11565     DA D4 C7 CF 
11569     DF EA EE FF 
1156d     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
11571     14 17 27 38 
11575     39 33 1E 1C 
11579     20 18 19 20 
1157d     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
11581     0A F6 F2 FB 
11585     06 0E 14 04 
11589     FC FC F4 ED 
1158d     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
11591     24 2E 26 18 
11595     14 0F 16 1B 
11599     21 2C 2C 18 
1159d     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
115a1     E5 E5 E5 EB 
115a5     F6 F2 F0 EC 
115a9     DA CF D9 DF 
115ad     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
115b1     10 12 14 10 
115b5     17 23 36 3E 
115b9     2A 22 20 15 
115bd     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
115c1     1C 1D 18 08 
115c5     F5 F4 F3 FF 
115c9     0E 0E 08 00 
115cd     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
115d1     F4 FD 0E 25 
115d5     2A 26 1B 10 
115d9     0C 11 11 21 
115dd     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
115e1     FE F3 E8 E4 
115e5     DA D9 E2 E5 
115e9     E9 F1 E2 D4 
115ed     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
115f1     F3 FF 08 13 
115f5     17 19 18 18 
115f9     2B 42 40 3C 
115fd     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
11601     1F 21 21 26 
11605     29 20 10 00 
11609     F4 F6 FF 0D 
1160d     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
11611     F0 E8 EA EA 
11615     F5 07 1B 25 
11619     27 1A 13 10 
1161d     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
11621     26 1C 13 04 
11625     F5 EF E4 DF 
11629     DF DC E3 ED 
1162d     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
11631     CF D6 E1 EC 
11635     F6 02 09 13 
11639     14 0A 13 23 
1163d     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
11641     29 20 1D 1E 
11645     1A 1F 26 29 
11649     24 18 09 FA 
1164d     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
11651     14 14 08 FC 
11655     F6 F4 F1 FD 
11659     0B 1F 2D 2A 
1165d     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
11661     14 20 27 25 
11665     25 14 04 FA 
11669     E9 E0 DC D5 
1166d     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
11671     E0 D0 C8 C6 
11675     D3 D9 E9 F2 
11679     F9 07 14 10 
1167d     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
11681     38 36 34 28 
11685     22 20 18 1A 
11689     1C 23 27 23 
1168d     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
11691     FF 05 0A 11 
11695     10 01 FC F5 
11699     ED EE F1 05 
1169d     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
116a1     20 14 12 1B 
116a5     23 2B 33 2C 
116a9     20 15 04 F9 
116ad     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
116b1     DF EF F0 EA 
116b5     D8 D0 CD D2 
116b9     DB E8 ED F5 
116bd     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
116c1     09 19 21 2D 
116c5     32 2B 23 1B 
116c9     12 10 0C 14 
116cd     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
116d1     06 FA FB FE 
116d5     03 0F 15 11 
116d9     0D 02 FB F4 
116dd     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
116e1     24 2B 2C 22 
116e5     14 14 10 1A 
116e9     26 2D 2A 20 
116ed     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
116f1     E6 DD D8 DD 
116f5     EB F2 E8 E0 
116f9     D6 CD D5 E2 
116fd     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
11701     16 10 10 13 
11705     1D 29 35 38 
11709     34 2C 25 1C 
1170d     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
11711     22 24 18 05 
11715     FC F6 F4 FB 
11719     07 0D 0E 06 
1171d     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
11721     EB F7 09 19 
11725     29 28 1E 17 
11729     10 10 19 22 
1172d     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
11731     08 00 F3 E8 
11735     E0 D5 DF ED 
11739     EE EC E1 D6 
1173d     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
11741     ED FB 08 10 
11745     0E 0E 0D 1B 
11749     27 31 39 34 
1174d     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
11751     13 17 1B 27 
11755     28 1E 14 06 
11759     FE FB FF 0C 
1175d     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
11761     01 F4 EF F1 
11765     F6 05 1B 27 
11769     28 24 18 11 
1176d     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
11771     2A 26 18 0A 
11775     FD F3 E8 D4 
11779     CE D7 DF E3 
1177d     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
11781     CD D3 D8 E5 
11785     F7 02 0E 0E 
11789     0E 0F 15 27 
1178d     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
11791     2C 20 1B 14 
11795     13 1D 25 26 
11799     22 18 0D 00 
1179d     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
117a1     12 11 0C 00 
117a5     F5 F2 EC EF 
117a9     FF 11 20 25 
117ad     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
117b1     17 22 2B 33 
117b5     2A 22 15 0C 
117b9     06 F0 DD DB 
117bd     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
117c1     E0 D1 CD D1 
117c5     D0 D5 DF EB 
117c9     FB 05 0A 06 
117cd     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
117d1     2D 2E 2C 21 
117d5     1C 10 07 0D 
117d9     13 19 1C 1C 
117dd     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
117e1     FF 0E 15 1A 
117e5     1D 14 0D 05 
117e9     FC F8 FB 06 
117ed     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
117f1     20 16 11 12 
117f5     20 29 2D 2A 
117f9     1C 13 10 00 
117fd     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
11801     DE E5 E8 E0 
11805     D5 D0 D1 D4 
11809     D4 DF EE FE 
1180d     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
11811     14 20 27 32 
11815     35 31 2C 20 
11819     15 0C 0C 11 
1181d     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
11821     03 F4 EC F3 
11825     F9 01 0C 0F 
11829     0C 06 00 F6 
1182d     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
11831     1F 30 34 2C 
11835     20 15 1A 23 
11839     2E 36 2D 25 
1183d     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
11841     E7 DC D8 E3 
11845     E8 EB E3 DA 
11849     D6 D4 D2 D7 
1184d     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
11851     0B 07 0B 10 
11855     16 26 2E 33 
11859     32 2D 22 14 
1185d     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
11861     14 13 10 08 
11865     FA F4 F4 F7 
11869     03 0F 12 10 
1186d     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
11871     F6 FD 09 1B 
11875     2B 32 2C 20 
11879     14 10 1A 2B 
1187d     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
11881     18 0A 00 E8 
11885     D9 D4 DE E7 
11889     E6 E2 E0 D5 
1188d     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
11891     EA FA 06 07 
11895     0D 0E 0E 19 
11899     27 2D 35 37 
1189d     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
118a1     11 14 19 1A 
118a5     1D 16 0C 04 
118a9     F9 F8 F8 FF 
118ad     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
118b1     00 F5 F0 F2 
118b5     F6 FF 0F 23 
118b9     2D 28 20 10 
118bd     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
118c1     2F 2B 24 1C 
118c5     14 01 F2 E1 
118c9     D9 E0 E5 E9 
118cd     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
118d1     CE D3 DA E3 
118d5     EF FE FF 0B 
118d9     0B 0D 13 1F 
118dd     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
118e1     26 19 0D 0A 
118e5     0C 11 17 17 
118e9     14 0D 08 01 
118ed     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
118f1     17 20 19 10 
118f5     02 FE FD FD 
118f9     03 17 27 2D 
118fd     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
11901     12 22 2C 2E 
11905     29 20 19 16 
11909     05 F0 E0 D7 
1190d     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
11911     D9 D3 CB CB 
11915     CD D4 E3 EF 
11919     FB 08 0D 11 
1191d     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
11921     3D 40 40 00 
11925     00 FF FF FE 
11929     FF FF 00 00 
1192d     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
11931     03 05 05 05 
11935     06 09 09 07 
11939     05 02 03 06 
1193d     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
11941     0E 06 FD F4 
11945     F3 F0 F0 F2 
11949     FA FF FF FE 
1194d     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
11951     FE F6 F0 F0 
11955     EB EC E4 DE 
11959     DD D5 D4 C9 
1195d     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
11961     E1 DD DC DD 
11965     E0 F5 07 17 
11969     19 18 16 FC 
1196d     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
11971     EE F9 FC FE 
11975     09 F6 F2 E1 
11979     CE C3 BE BD 
1197d     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
11981     FD 00 18 1E 
11985     2B 25 1B 0C 
11989     03 FF FE F4 
1198d     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
11991     F2 01 12 14 
11995     14 02 EC D1 
11999     CC CC CA CA 
1199d     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
119a1     BD B7 B8 BD 
119a5     C8 D1 E3 EC 
119a9     F7 02 08 07 
119ad     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
119b1     FB FE 09 17 
119b5     2B 32 38 39 
119b9     36 35 36 34 
119bd     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
119c1     EC E2 D4 DC 
119c5     E0 E7 F0 F8 
119c9     01 F9 F7 F2 
119cd     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
119d1     F1 FB FB 05 
119d5     00 F0 E2 D5 
119d9     D7 CD CE C6 
119dd     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
119e1     D8 C7 BD B8 
119e5     BE D2 E8 FE 
119e9     04 08 07 0C 
119ed     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
119f1     2E 29 23 0E 
119f5     FE E4 DF CB 
119f9     BA B9 B4 B8 
119fd     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
11a01     ED F2 F8 01 
11a05     07 07 0F 14 
11a09     1B 22 21 11 
11a0d     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
11a11     0F 14 12 FD 
11a15     DC C9 AF 9F 
11a19     9E 9E A5 B4 
11a1d     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
11a21     D4 D9 E2 EF 
11a25     F4 FB 00 06 
11a29     0B 0A 09 04 
11a2d     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
11a31     F3 FD 05 17 
11a35     28 29 28 23 
11a39     19 20 29 37 
11a3d     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
11a41     FD 01 01 0D 
11a45     1D 1D 24 16 
11a49     0D FA F3 DC 
11a4d     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
11a51     CD DF E8 ED 
11a55     E7 EA ED ED 
11a59     EE ED E3 DB 
11a5d     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
11a61     D7 C7 C4 C5 
11a65     C7 DB E6 EA 
11a69     E6 E5 E4 EB 
11a6d     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
11a71     2C 2F 2E 2D 
11a75     21 09 F9 E4 
11a79     DE DF E4 E6 
11a7d     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
11a81     E4 E4 D9 D8 
11a85     D6 D4 DC F1 
11a89     FC 12 1D 27 
11a8d     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
11a91     37 30 08 E6 
11a95     C3 B0 A0 9F 
11a99     A3 AA B8 C5 
11a9d     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
11aa1     C7 C6 C9 D4 
11aa5     E3 01 15 27 
11aa9     35 38 35 30 
11aad     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
11ab1     00 03 05 0A 
11ab5     15 08 FD F3 
11ab9     F3 F8 01 0C 
11abd     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
11ac1     0C 24 3A 41 
11ac5     4C 4A 38 2A 
11ac9     17 F8 E3 CE 
11acd     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
11ad1     D5 D0 D0 CF 
11ad5     CC CB CE CB 
11ad9     C4 C7 CC DF 
11add     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
11ae1     0A 04 FF FE 
11ae5     FE 01 00 EF 
11ae9     EC E7 E6 E4 
11aed     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
11af1     FD FD F3 ED 
11af5     E7 E2 DB E6 
11af9     F3 FC 11 19 
11afd     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
11b01     FB F3 DC CC 
11b05     C4 C7 CA E1 
11b09     ED 03 08 0B 
11b0d     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
11b11     18 0C FD F0 
11b15     E6 E2 E4 EE 
11b19     F2 F8 EC E7 
11b1d     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
11b21     A8 9E AD BD 
11b25     D8 ED FA 0D 
11b29     15 1B 2A 27 
11b2d     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
11b31     1A 21 23 20 
11b35     1B 12 03 F2 
11b39     F1 E8 EA E3 
11b3d     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
11b41     1E 33 4C 53 
11b45     51 51 4A 41 
11b49     3C 1D 09 FF 
11b4d     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
11b51     DF CF C8 BB 
11b55     BF A6 A3 9D 
11b59     94 9C A5 B5 
11b5d     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
11b61     FC FE 08 0E 
11b65     18 0F 0F 08 
11b69     01 03 03 08 
11b6d     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
11b71     DD D4 C7 C2 
11b75     BC BF C9 D6 
11b79     ED FA 0D 1B 
11b7d     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
11b81     36 1F 0E FC 
11b85     EE EC F3 FC 
11b89     09 0B 04 F6 
11b8d     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
11b91     CA B9 B7 B5 
11b95     C5 D2 EE FD 
11b99     14 08 09 09 
11b9d     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
11ba1     D7 D6 CE CF 
11ba5     DA D3 D7 E3 
11ba9     EB F3 02 04 
11bad     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
11bb1     1F 32 47 49 
11bb5     4F 44 3C 2F 
11bb9     21 14 FE F4 
11bbd     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
11bc1     0E 18 26 18 
11bc5     10 0A 04 FB 
11bc9     F5 F5 F3 F6 
11bcd     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
11bd1     F5 EB E2 DA 
11bd5     D5 C7 C2 AA 
11bd9     A0 96 98 9B 
11bdd     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
11be1     F0 FC 0F 1A 
11be5     17 1E 27 2D 
11be9     3C 3A 45 46 
11bed     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
11bf1     F6 E9 E2 DA 
11bf5     D5 CA C6 CC 
11bf9     CE CF D4 DA 
11bfd     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
11c01     F2 F0 EE E9 
11c05     F7 F7 06 18 
11c09     13 1F 1C 1B 
11c0d     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
11c11     B1 9F A2 A5 
11c15     B5 D7 EE F3 
11c19     FD FD 03 11 
11c1d     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
11c21     1A 17 16 09 
11c25     04 05 06 09 
11c29     0E 0F FD F4 
11c2d     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
11c31     E7 ED FD 05 
11c35     08 0A 1A 23 
11c39     21 21 1F 1C 
11c3d     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
11c41     3B 33 22 07 
11c45     F2 E2 D4 CC 
11c49     CF D7 E6 FA 
11c4d     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
11c51     05 0A 0B 06 
11c55     FF F3 E0 C9 
11c59     B9 BA BA CA 
11c5d     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
11c61     E6 F0 ED F4 
11c65     ED ED EE F0 
11c69     FB 00 07 17 
11c6d     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
11c71     F4 F7 F6 F7 
11c75     F9 FE FE 04 
11c79     F8 EF E6 DD 
11c7d     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
11c81     DD E5 E5 ED 
11c85     FE 0A 1C 2E 
11c89     2A 2F 2D 2A 
11c8d     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
11c91     E8 E4 EF F7 
11c95     EB F0 E6 D4 
11c99     D2 D3 D3 D4 
11c9d     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
11ca1     F5 FF 02 01 
11ca5     00 03 05 07 
11ca9     07 0A 05 FE 
11cad     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
11cb1     EA E9 E9 EE 
11cb5     F7 0A 1A 28 
11cb9     39 44 49 58 
11cbd     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
11cc1     32 16 02 FC 
11cc5     EF F5 F5 FF 
11cc9     04 02 02 01 
11ccd     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
11cd1     D2 D4 D3 D0 
11cd5     CF CC C5 C6 
11cd9     BB C3 CC D0 
11cdd     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
11ce1     FD 00 0C 0F 
11ce5     09 02 F9 F1 
11ce9     EC F0 F0 F2 
11ced     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
11cf1     31 32 30 2D 
11cf5     21 18 06 FD 
11cf9     F9 F4 F5 FF 
11cfd     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
11d01     DD D5 C8 C1 
11d05     C6 C7 CF D8 
11d09     DD EB F4 F8 
11d0d     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
11d11     F4 F2 E8 E9 
11d15     E2 DB DB DD 
11d19     ED EF F9 F6 
11d1d     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
11d21     03 0A 14 1D 
11d25     25 2A 34 35 
11d29     25 23 15 03 
11d2d     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
11d31     09 16 1D 1A 
11d35     18 18 1A 25 
11d39     29 2A 29 28 
11d3d     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
11d41     EC E5 E0 E7 
11d45     E8 ED F1 F8 
11d49     FF 04 00 F8 
11d4d     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
11d51     D7 D3 C9 CA 
11d55     C7 C6 C9 D9 
11d59     DE F1 FE 02 
11d5d     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
11d61     07 0C 1B 1D 
11d65     1F 20 1B 1B 
11d69     06 EC E3 DE 
11d6d     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
11d71     02 00 03 05 
11d75     03 01 FE F4 
11d79     F5 F2 F0 F0 
11d7d     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
11d81     D2 D0 D3 D3 
11d85     D8 D7 E2 E3 
11d89     EE ED F4 03 
11d8d     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
11d91     28 17 0A F4 
11d95     E2 E0 E0 EC 
11d99     FA 08 15 13 
11d9d     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
11da1     0D FF 01 FE 
11da5     FB FA F7 F5 
11da9     E8 E9 E6 E3 
11dad     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
11db1     FB 00 06 0B 
11db5     11 1C 31 46 
11db9     4C 48 3D 29 
11dbd     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
11dc1     E4 EE FE 0F 
11dc5     18 23 21 23 
11dc9     24 10 0D 08 
11dcd     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
11dd1     00 00 F0 E6 
11dd5     D8 CB C4 C0 
11dd9     C2 C7 CB CF 
11ddd     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
11de1     FC 00 07 07 
11de5     07 F7 F4 DB 
11de9     CB CF D7 E6 
11ded     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
11df1     25 20 1F 0D 
11df5     08 01 03 06 
11df9     10 0D 0B 00 
11dfd     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
11e01     D3 D3 D0 DA 
11e05     E3 F5 0C 02 
11e09     02 03 0B 19 
11e0d     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
11e11     FC E0 D0 CD 
11e15     C8 CC D8 E3 
11e19     E9 F2 F8 F6 
11e1d     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
11e21     F9 00 09 0F 
11e25     18 18 18 16 
11e29     0C 06 01 03 
11e2d     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
11e31     1B 1C 12 1E 
11e35     2D 3A 4E 56 
11e39     53 43 3C 1F 
11e3d     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
11e41     E0 F0 F4 03 
11e45     08 12 0D 08 
11e49     FF F7 F2 E1 
11e4d     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
11e51     CE CB C6 C0 
11e55     BB BD C2 D1 
11e59     D5 E4 EB F3 
11e5d     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
11e61     1C 1E 27 25 
11e65     1B F7 E5 D5 
11e69     DB EC FE 15 
11e6d     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
11e71     4A 38 2E 1E 
11e75     11 04 00 F4 
11e79     EC E8 E6 DA 
11e7d     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
11e81     AA AF B1 C2 
11e85     D1 DB D3 DC 
11e89     EB EF 04 12 
11e8d     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
11e91     03 F9 F6 F7 
11e95     F7 06 0B 14 
11e99     19 18 0E FF 
11e9d     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
11ea1     0A 14 18 1A 
11ea5     21 1F 12 07 
11ea9     02 01 FE 00 
11ead     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
11eb1     21 20 20 2A 
11eb5     29 29 1E 10 
11eb9     07 EB D6 CE 
11ebd     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
11ec1     E7 FE 14 2A 
11ec5     2F 2E 2E 2E 
11ec9     26 1F 16 0E 
11ecd     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
11ed1     DE D5 CD CC 
11ed5     CF E0 E5 EF 
11ed9     FD 02 FC F3 
11edd     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
11ee1     05 06 05 F4 
11ee5     E6 E2 D7 DC 
11ee9     E7 ED F7 02 
11eed     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
11ef1     06 05 F9 FB 
11ef5     F1 ED ED ED 
11ef9     EE F3 F3 F2 
11efd     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
11f01     D7 E8 F2 F6 
11f05     E8 E4 E6 00 
11f09     0F 21 36 38 
11f0d     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
11f11     04 FC FD FA 
11f15     FF 06 05 15 
11f19     0C 05 06 01 
11f1d     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
11f21     E0 DE DF DF 
11f25     E0 E3 E5 E3 
11f29     E6 EB F7 0E 
11f2d     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
11f31     37 47 4B 51 
11f35     44 3E 2E 0C 
11f39     FA DE D0 C9 
11f3d     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
11f41     2E 43 48 3E 
11f45     34 24 1D 10 
11f49     09 01 F9 F0 
11f4d     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
11f51     E4 D6 D6 C4 
11f55     BB BD BE BD 
11f59     BC B9 BC CD 
11f5d     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
11f61     FE FB F9 F6 
11f65     F9 FE 08 16 
11f69     22 2C 39 37 
11f6d     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
11f71     04 02 02 05 
11f75     07 09 07 09 
11f79     07 F8 EA D8 
11f7d     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
11f81     ED EE EE EE 
11f85     F3 FC 07 0F 
11f89     0F 0A 01 ED 
11f8d     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
11f91     D9 E1 EA F2 
11f95     05 0D 13 14 
11f99     16 17 1A 1C 
11f9d     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
11fa1     02 00 F2 E8 
11fa5     E4 E5 EA F9 
11fa9     0D 24 42 4D 
11fad     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
11fb1     31 2C 2D 22 
11fb5     15 02 F1 E8 
11fb9     E4 E4 E5 ED 
11fbd     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
11fc1     0A 00 FA F9 
11fc5     F9 F7 FF F8 
11fc9     F9 FA F5 FB 
11fcd     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
11fd1     F6 EC EC EC 
11fd5     E9 E4 DB CD 
11fd9     C3 BE CC E1 
11fdd     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
11fe1     18 17 12 02 
11fe5     05 02 05 0F 
11fe9     1D 2A 2A 27 
11fed     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
11ff1     FE F4 E5 CF 
11ff5     C4 B7 B4 AF 
11ff9     AF AD AD B2 
11ffd     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
12001     FC 09 0E 15 
12005     1F 31 3D 44 
12009     41 27 11 07 
1200d     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
12011     E8 FD 12 29 
12015     33 36 35 2A 
12019     1A 15 0E 09 
1201d     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
12021     06 07 06 07 
12025     06 03 01 01 
12029     02 02 00 FD 
1202d     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
12031     FD 03 05 F9 
12035     F1 F3 F6 FB 
12039     04 0A 19 23 
1203d     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
12041     1D 0F 00 FC 
12045     FB FD 0C 11 
12049     1C 27 27 27 
1204d     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
12051     D0 CB CC C9 
12055     C9 D0 D0 D3 
12059     DD E8 F8 02 
1205d     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
12061     D1 D3 D8 DE 
12065     EC F9 05 1C 
12069     2B 2D 33 34 
1206d     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
12071     03 FB EE E4 
12075     E0 CF C8 C2 
12079     BC BE C9 DB 
1207d     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
12081     24 16 16 14 
12085     1F 27 25 1B 
12089     15 0F 0A 0D 
1208d     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
12091     FC FE F6 F1 
12095     E8 E4 DB D7 
12099     DB DC E6 EE 
1209d     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
120a1     1F 2C 2F 30 
120a5     2D 2D 2E 26 
120a9     24 1F 0C 03 
120ad     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
120b1     08 0C 13 14 
120b5     1E 1F 15 17 
120b9     0F 15 14 16 
120bd     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
120c1     21 1A 1A 12 
120c5     0D 04 FE F4 
120c9     EB E5 E0 DF 
120cd     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
120d1     BF BD C2 D2 
120d5     D5 DC DD EA 
120d9     FE 0C 09 0A 
120dd     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
120e1     F3 F8 F9 04 
120e5     11 24 39 4A 
120e9     51 50 44 23 
120ed     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
120f1     D5 CE CE CC 
120f5     CE DA E0 E7 
120f9     E5 DE D7 D6 
120fd     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
12101     DB E2 F3 05 
12105     07 10 18 17 
12109     22 26 28 33 
1210d     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
12111     13 0F 09 00 
12115     F3 EA E7 E9 
12119     EA F5 09 15 
1211d     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
12121     37 30 27 1F 
12125     19 17 14 16 
12129     16 11 FE FA 
1212d     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
12131     E4 DA D6 D4 
12135     DE E6 EE F9 
12139     F9 FE 07 16 
1213d     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
12141     2D 32 2C 22 
12145     1E 0F 05 00 
12149     F2 E8 E4 DB 
1214d     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
12151     DA E3 F6 FD 
12155     EF EE EE FE 
12159     FA FD FE 00 
1215d     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
12161     1A 18 25 20 
12165     1B 1B 13 0E 
12169     00 EF DD D1 
1216d     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
12171     C8 CD D8 E3 
12175     FB FE 0C 01 
12179     F3 EC E8 E9 
1217d     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
12181     F3 07 0B 19 
12185     2B 33 3D 48 
12189     4B 3D 35 21 
1218d     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
12191     00 00 02 01 
12195     00 FE 06 06 
12199     05 03 03 FC 
1219d     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
121a1     06 05 03 01 
121a5     02 07 0E 0D 
121a9     05 03 03 0B 
121ad     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
121b1     FC FA F7 F9 
121b5     09 0C 0B 0D 
121b9     0D 15 24 38 
121bd     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
121c1     2B 24 18 15 
121c5     0F 09 04 03 
121c9     03 00 F8 F1 
121cd     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
121d1     AE A5 A1 9B 
121d5     9F BA C1 D1 
121d9     E4 F6 FF 08 
121dd     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
121e1     38 37 35 25 
121e5     23 15 11 F9 
121e9     E3 DE D4 D8 
121ed     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
121f1     ED FC 09 10 
121f5     14 04 FF EA 
121f9     E7 E5 ED EE 
121fd     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
12201     19 1C 22 24 
12205     21 1F 15 0F 
12209     0F 05 05 F9 
1220d     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
12211     F8 F9 FA F9 
12215     03 08 0F 14 
12219     13 14 12 12 
1221d     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
12221     27 1F 19 17 
12225     17 14 13 08 
12229     FD FA F4 F3 
1222d     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
12231     05 0F 1F 29 
12235     27 28 1E 16 
12239     12 10 0F 08 
1223d     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
12241     FB FE 04 06 
12245     07 0C 0A 14 
12249     12 07 FC E4 
1224d     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
12251     AD A2 A7 B7 
12255     C5 D8 F3 03 
12259     09 17 1B 25 
1225d     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
12261     30 2C 23 1F 
12265     1A 10 0A F6 
12269     EE EB E2 E3 
1226d     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
12271     D7 E2 EB EA 
12275     E5 D5 D1 CB 
12279     DB DE EF F4 
1227d     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
12281     24 23 24 23 
12285     18 17 0D 0F 
12289     0D 0F 0F 0A 
1228d     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
12291     05 06 03 05 
12295     07 0A 0D 14 
12299     14 1E 24 2E 
1229d     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
122a1     19 0B FF FA 
122a5     F1 E6 DB D7 
122a9     D2 D3 DD E8 
122ad     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
122b1     1F 2D 2F 2E 
122b5     22 19 10 07 
122b9     01 00 00 FE 
122bd     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
122c1     27 2B 31 2E 
122c5     23 2A 2A 1E 
122c9     0F F1 D9 BC 
122cd     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
122d1     BE C2 CC CC 
122d5     DE EC F1 FB 
122d9     FA FF 00 08 
122dd     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
122e1     0A 0B 09 07 
122e5     00 FC FA F0 
122e9     EC EE E7 E9 
122ed     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
122f1     EF F6 F3 EB 
122f5     E4 DE E0 EB 
122f9     EF FD 0E 19 
122fd     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
12301     30 33 31 2E 
12305     2E 30 31 34 
12309     2A 18 0B F2 
1230d     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
12311     DB DC E7 ED 
12315     F7 06 18 21 
12319     30 39 41 45 
1231d     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
12321     E8 DE D1 D4 
12325     D4 D4 D3 CE 
12329     DF F5 0B 1B 
1232d     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
12331     3A 39 31 22 
12335     15 0C FE 00 
12339     F9 FF 04 0D 
1233d     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
12341     21 21 20 20 
12345     1F 1C 11 FD 
12349     E3 C5 B5 B4 
1234d     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
12351     D8 CC CE D0 
12355     DD E8 E8 ED 
12359     ED F8 FE 07 
1235d     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
12361     1F 14 0C 04 
12365     FF FE F4 F0 
12369     F0 F2 F3 F8 
1236d     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
12371     13 10 F9 E1 
12375     D0 BF BE CB 
12379     DB EE FE F7 
1237d     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
12381     35 38 39 36 
12385     3B 3A 37 2F 
12389     17 FD EC DB 
1238d     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
12391     CA D6 ED 03 
12395     1C 32 48 4E 
12399     5C 5E 60 50 
1239d     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
123a1     D3 D3 D8 E9 
123a5     EE EE ED F4 
123a9     FF 0C 11 10 
123ad     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
123b1     28 28 23 19 
123b5     18 13 09 0B 
123b9     06 07 07 06 
123bd     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
123c1     0D 0F 12 13 
123c5     09 01 ED D6 
123c9     C6 C2 C2 CC 
123cd     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
123d1     E0 DA D9 DC 
123d5     E6 E4 EB EA 
123d9     F2 00 11 14 
123dd     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
123e1     F4 E2 E0 DB 
123e5     DC E1 EC F9 
123e9     06 12 28 2F 
123ed     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
123f1     0A E5 CC AF 
123f5     A6 AC BC D3 
123f9     E9 EF E5 E9 
123fd     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
12401     37 41 44 46 
12405     52 4E 42 32 
12409     1C 0B F1 E5 
1240d     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
12411     DE F4 05 17 
12415     1F 2A 37 37 
12419     37 37 2C 17 
1241d     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
12421     F9 01 0E 15 
12425     07 F8 F6 F7 
12429     F6 F9 00 FD 
1242d     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
12431     FE FD FE 01 
12435     02 07 0E 0F 
12439     1A 22 1F 20 
1243d     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
12441     27 1F 19 10 
12445     02 F4 E2 D0 
12449     CD C6 CA D4 
1244d     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
12451     DA E7 EF FE 
12455     0A 0E 0F 12 
12459     10 0D 0B 01 
1245d     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
12461     C9 CB CA CB 
12465     C9 D0 DF ED 
12469     08 1C 2B 3B 
1246d     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
12471     F8 DC CA C3 
12475     C5 CD DE E8 
12479     EB E8 EA F7 
1247d     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
12481     20 21 24 29 
12485     29 2E 30 2E 
12489     30 2E 2D 1D 
1248d     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
12491     FB FD 03 0C 
12495     11 18 1D 17 
12499     16 FB E5 D5 
1249d     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
124a1     F6 10 24 24 
124a5     24 21 1F 26 
124a9     27 27 24 18 
124ad     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
124b1     E7 ED F1 F2 
124b5     F2 F5 F7 FA 
124b9     FB 05 0D 21 
124bd     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
124c1     53 4B 3B 28 
124c5     08 F6 DD CC 
124c9     CA C9 CC DC 
124cd     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
124d1     BE C6 CC D6 
124d5     DE E6 EB F9 
124d9     02 06 03 03 
124dd     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
124e1     F4 E3 DA DB 
124e5     D9 E6 F4 07 
124e9     18 24 29 27 
124ed     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
124f1     EA E7 ED F4 
124f5     03 14 1D 18 
124f9     0E 08 02 05 
124fd     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
12501     0A 0A 0A 02 
12505     FC FB F6 F7 
12509     F7 F9 FE 07 
1250d     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
12511     1C 27 28 32 
12515     2D 22 13 FD 
12519     E8 DE D0 CD 
1251d     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
12521     0D 15 13 16 
12525     18 22 30 47 
12529     4E 56 51 3D 
1252d     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
12531     EE E4 E5 E3 
12535     E4 E9 ED EE 
12539     F3 F0 F7 F9 
1253d     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
12541     01 0B 0F 14 
12545     12 0A 09 09 
12549     14 14 19 11 
1254d     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
12551     C4 CB DA DC 
12555     DB E0 E0 DD 
12559     DF EB EF 00 
1255d     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
12561     24 19 18 17 
12565     14 13 16 16 
12569     16 14 04 00 
1256d     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
12571     BC B9 BA BD 
12575     CE E1 E5 EF 
12579     03 06 0B 14 
1257d     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
12581     23 1E 09 FE 
12585     FA F4 F5 FC 
12589     03 0C 19 1D 
1258d     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
12591     37 3F 3D 33 
12595     2B 1D 0A FE 
12599     F5 F6 F7 F7 
1259d     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
125a1     13 0E 05 FD 
125a5     F9 FD FE 06 
125a9     05 02 FA FA 
125ad     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
125b1     E8 E8 E9 FD 
125b5     05 0A 0B 0B 
125b9     0B 06 00 F9 
125bd     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
125c1     F7 FE 09 16 
125c5     1F 2D 34 3D 
125c9     43 41 2D 15 
125cd     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
125d1     E8 EA EF E7 
125d5     E6 DB CD C8 
125d9     BD B9 BC BA 
125dd     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
125e1     FF 0C 1E 26 
125e5     24 19 1A 12 
125e9     12 08 07 FD 
125ed     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
125f1     DE DC DB E2 
125f5     E9 E5 F0 F9 
125f9     06 1A 2B 39 
125fd     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
12601     26 18 07 05 
12605     05 06 10 18 
12609     26 2B 31 31 
1260d     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
12611     EA D2 C3 C0 
12615     BF BE CE E5 
12619     F7 00 06 07 
1261d     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
12621     1B 1A 15 0E 
12625     12 14 1C 1C 
12629     12 0E 05 00 
1262d     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
12631     03 0F 15 1C 
12635     22 20 21 1F 
12639     1C 15 07 04 
1263d     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
12641     00 06 05 07 
12645     06 01 00 F9 
12649     F4 E6 E2 DB 
1264d     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
12651     DF E0 EA E3 
12655     E4 DA D6 D6 
12659     D4 CD D0 D8 
1265d     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
12661     25 2C 37 3B 
12665     3A 37 30 1B 
12669     12 FF F9 F6 
1266d     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
12671     FB FE 01 FE 
12675     FD FA FA F5 
12679     F1 F3 F2 F3 
1267d     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
12681     EA F2 FC FB 
12685     FE 08 10 1E 
12689     2C 36 3A 40 
1268d     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
12691     EF DC D4 D1 
12695     D7 E8 FB 12 
12699     21 31 3D 49 
1269d     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
126a1     18 13 14 17 
126a5     2B 33 31 31 
126a9     27 1E 10 02 
126ad     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
126b1     C2 C6 C7 D1 
126b5     DA EC F4 01 
126b9     F6 EB E7 E0 
126bd     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
126c1     14 1E 2B 32 
126c5     30 30 23 0A 
126c9     FB F8 EF EE 
126cd     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
126d1     0B 0A 05 F4 
126d5     E6 DA D7 D7 
126d9     D9 E9 F5 0B 
126dd     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
126e1     36 2B 1C 09 
126e5     F9 DD C4 BD 
126e9     B8 BA CE DB 
126ed     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
126f1     EE E4 E0 E6 
126f5     EF F8 01 07 
126f9     15 1F 25 24 
126fd     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
12701     09 0E 15 24 
12705     2B 3A 3F 3F 
12709     3E 2E 25 1F 
1270d     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
12711     F1 EC F0 F8 
12715     04 12 14 16 
12719     14 13 10 FA 
1271d     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
12721     EA F2 F8 06 
12725     0A 0B 0B 06 
12729     02 02 00 00 
1272d     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
12731     07 06 05 06 
12735     09 0A 0A 0B 
12739     0A 09 04 FE 
1273d     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
12741     1B 28 37 3A 
12745     3F 2F 21 18 
12749     10 03 F9 E6 
1274d     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
12751     D2 C3 BA B4 
12755     AE B1 B6 B8 
12759     C4 D6 E8 F6 
1275d     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
12761     1C 22 23 1E 
12765     12 FE ED E9 
12769     EA F5 03 08 
1276d     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
12771     FF FC FA FA 
12775     FA F9 00 10 
12779     21 31 30 31 
1277d     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
12781     19 18 16 13 
12785     10 0D 03 F6 
12789     F1 E2 DE D8 
1278d     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
12791     C8 CF E0 F4 
12795     05 1C 2C 3A 
12799     43 3F 2F 22 
1279d     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
127a1     16 1E 27 28 
127a5     25 1E 10 04 
127a9     FF FA F9 FB 
127ad     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
127b1     1D 1B 1A 17 
127b5     0D 00 F8 F9 
127b9     EF E1 D4 D2 
127bd     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
127c1     FF FD FE F3 
127c5     EB E2 DA DD 
127c9     DB DD E7 ED 
127cd     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
127d1     08 FD F0 EB 
127d5     EA F2 F8 01 
127d9     0C 11 18 14 
127dd     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
127e1     11 10 10 0D 
127e5     00 00 00 07 
127e9     0E 14 13 0E 
127ed     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
127f1     D9 DB D6 D6 
127f5     D6 D6 DE EC 
127f9     F1 F7 F5 F5 
127fd     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
12801     2C 37 41 3F 
12805     3E 2E 1B 0B 
12809     00 FC FE FE 
1280d     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
12811     F6 FB 04 12 
12815     20 2C 38 30 
12819     2E 2D 2D 32 
1281d     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
12821     12 10 08 01 
12825     FA E9 E2 D5 
12829     D7 D8 D3 CD 
1282d     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
12831     DF DD E5 EB 
12835     01 11 1F 27 
12839     23 19 1A 18 
1283d     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
12841     2E 13 02 F4 
12845     EA E7 E2 E3 
12849     E0 E3 F4 05 
1284d     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
12851     08 00 01 00 
12855     F9 FA FA F9 
12859     FA F9 F1 E8 
1285d     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
12861     CB C1 BD BC 
12865     BD C2 D1 E8 
12869     03 12 1E 1A 
1286d     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
12871     1A 18 17 14 
12875     16 22 23 20 
12879     1B 11 09 0A 
1287d     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
12881     33 32 31 2C 
12885     1D 10 09 01 
12889     FE 01 01 F9 
1288d     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
12891     F0 F7 FC 03 
12895     F8 E4 DB DC 
12899     DC E7 F0 F8 
1289d     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
128a1     30 33 34 2A 
128a5     1C 10 0E 10 
128a9     10 0F 05 05 
128ad     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
128b1     E4 E6 F3 03 
128b5     17 1E 21 20 
128b9     28 25 28 38 
128bd     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
128c1     F0 E0 D3 D3 
128c5     D3 CE CA C6 
128c9     C0 C6 C6 D1 
128cd     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
128d1     CC E0 F6 10 
128d5     1F 32 36 35 
128d9     30 25 1D 0F 
128dd     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
128e1     EA DF D7 D3 
128e5     DA F2 01 12 
128e9     14 0E 08 06 
128ed     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
128f1     26 21 16 22 
128f5     1B 1B 1A 10 
128f9     08 02 FE 00 
128fd     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
12901     D4 CA C4 C2 
12905     BB BF D1 EE 
12909     08 1D 2E 3F 
1290d     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
12911     3A 45 37 27 
12915     11 01 F8 FA 
12919     FB 07 0B 09 
1291d     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
12921     26 24 19 18 
12925     13 16 17 17 
12929     12 09 FC F0 
1292d     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
12931     D9 DE D8 D6 
12935     D3 D4 D6 D9 
12939     E3 F0 02 12 
1293d     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
12941     0B 0B 0D 0D 
12945     0B 0A 07 07 
12949     07 09 07 F7 
1294d     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
12951     FB 09 1B 26 
12955     21 1F 1C 1B 
12959     18 0E 00 FE 
1295d     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
12961     DB DB DD E7 
12965     EF FC EC D0 
12969     C1 B6 AD B1 
1296d     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
12971     F9 0E 25 3F 
12975     57 5D 5B 58 
12979     50 46 46 3C 
1297d     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
12981     DB CB C9 CC 
12985     D9 F2 03 13 
12989     24 30 33 31 
1298d     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
12991     32 24 12 06 
12995     FD FA FE 04 
12999     00 F8 EF E0 
1299d     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
129a1     CC CB CB D6 
129a5     E4 F1 03 0E 
129a9     1B 1A 1B 1B 
129ad     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
129b1     1E 17 1A 15 
129b5     09 FE F9 F9 
129b9     00 0E 0B 06 
129bd     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
129c1     F6 00 04 0A 
129c5     09 04 03 06 
129c9     0E 0D 05 FE 
129cd     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
129d1     F4 E3 D9 CE 
129d5     C3 C0 C2 BF 
129d9     C2 CD CE DF 
129dd     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
129e1     26 2B 34 35 
129e5     2B 17 05 F7 
129e9     E1 D6 D6 D8 
129ed     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
129f1     19 2F 3F 4A 
129f5     51 4C 45 3E 
129f9     38 2E 21 18 
129fd     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
12a01     D3 D6 D9 E3 
12a05     E7 DB DF E0 
12a09     E3 E5 E6 EB 
12a0d     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
12a11     0E 15 1E 2C 
12a15     3A 44 43 44 
12a19     3D 2A 19 11 
12a1d     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
12a21     E2 E4 E9 F3 
12a25     02 0C 11 0F 
12a29     08 07 0A 0B 
12a2d     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
12a31     0F 14 12 12 
12a35     12 0F 0F 0A 
12a39     FB E5 C5 AC 
12a3d     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
12a41     AE C2 D4 DF 
12a45     EB FF 17 30 
12a49     41 48 46 44 
12a4d     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
12a51     20 09 F9 E1 
12a55     D2 C7 C5 CB 
12a59     D1 D7 E8 F2 
12a5d     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
12a61     26 25 19 0C 
12a65     00 EF E7 E2 
12a69     E3 EB FA 06 
12a6d     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
12a71     F6 F6 F7 FC 
12a75     FA F7 F7 F7 
12a79     FC FE FE 00 
12a7d     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
12a81     22 2F 32 2C 
12a85     2D 26 24 1C 
12a89     15 04 00 FC 
12a8d     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
12a91     0A 15 22 29 
12a95     2D 32 32 22 
12a99     10 04 06 06 
12a9d     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
12aa1     06 05 00 F5 
12aa5     DC C3 AF A5 
12aa9     A1 AA BB CD 
12aad     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
12ab1     20 31 41 49 
12ab5     4F 4E 3A 2D 
12ab9     1B 01 EC DC 
12abd     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
12ac1     DB E1 E7 F5 
12ac5     03 17 29 3A 
12ac9     3C 3A 39 37 
12acd     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
12ad1     FE F5 F0 E1 
12ad5     E6 E9 E4 DB 
12ad9     D2 C4 BD BE 
12add     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
12ae1     C5 CD D8 DD 
12ae5     DF E7 FA 0A 
12ae9     22 39 4A 53 
12aed     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
12af1     3A 33 2A 18 
12af5     05 FC F1 F2 
12af9     F0 EB EC EE 
12afd     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
12b01     1E 1C 1B 1A 
12b05     1B 22 23 24 
12b09     24 23 0E 05 
12b0d     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
12b11     CC C9 C7 CF 
12b15     DB E0 E7 E9 
12b19     F9 06 1C 32 
12b1d     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
12b21     3D 39 2E 17 
12b25     05 F5 E9 E2 
12b29     DE E5 E5 E4 
12b2d     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
12b31     19 1E 29 28 
12b35     14 0C FF F3 
12b39     E5 D9 D2 D4 
12b3d     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
12b41     0C 0D 0A FF 
12b45     00 FD F3 EB 
12b49     E3 D5 D7 DC 
12b4d     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
12b51     03 05 0F 15 
12b55     1B 15 11 08 
12b59     02 03 02 01 
12b5d     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
12b61     DB DC DB DB 
12b65     E0 E7 FA 0F 
12b69     21 39 37 36 
12b6d     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
12b71     3A 33 2C 1D 
12b75     0A 06 FF EF 
12b79     DC C5 BB B7 
12b7d     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
12b81     E3 F5 05 18 
12b85     29 3B 47 4C 
12b89     3F 32 2B 23 
12b8d     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
12b91     EE F2 F7 FB 
12b95     FB F9 F4 FA 
12b99     0A 1E 2A 2D 
12b9d     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
12ba1     15 0D 00 FE 
12ba5     F5 F6 F6 00 
12ba9     00 01 FE 01 
12bad     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
12bb1     E0 D7 C3 B1 
12bb5     AF B2 BF CC 
12bb9     D1 DF EB 02 
12bbd     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
12bc1     3F 3D 3E 3D 
12bc5     3D 38 29 1D 
12bc9     0A FA F3 F0 
12bcd     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
12bd1     EE F6 F6 F3 
12bd5     F2 F0 EB F1 
12bd9     F8 01 09 0F 
12bdd     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
12be1     EB E5 D6 CC 
12be5     C4 C0 CC D9 
12be9     DD ED F7 02 
12bed     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
12bf1     46 3E 34 27 
12bf5     1E 14 0C FF 
12bf9     FA F1 F3 F5 
12bfd     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
12c01     05 07 0F 1D 
12c05     27 2D 2D 19 
12c09     15 07 0A 07 
12c0d     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
12c11     F6 00 03 05 
12c15     06 09 0A 11 
12c19     12 12 07 F2 
12c1d     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
12c21     E4 F1 00 0C 
12c25     1A 1D 24 25 
12c29     20 1F 0F 03 
12c2d     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
12c31     F6 EA E4 DE 
12c35     DC D7 D8 D6 
12c39     D3 D6 E1 F6 
12c3d     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
12c41     2A 37 44 47 
12c45     44 3D 2A 10 
12c49     02 FC FE 00 
12c4d     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
12c51     C4 B2 AB A7 
12c55     A9 BB CE E9 
12c59     07 19 1E 16 
12c5d     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
12c61     01 F5 EB E7 
12c65     EA FA 0D 1E 
12c69     2A 2D 2A 2D 
12c6d     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
12c71     15 03 FD F8 
12c75     FA FA 02 03 
12c79     08 0F 15 13 
12c7d     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
12c81     07 06 06 09 
12c85     06 EF DF CF 
12c89     CE D5 DE EC 
12c8d     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
12c91     07 0C 16 1E 
12c95     1F 1F 21 26 
12c99     25 23 19 11 
12c9d     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
12ca1     13 16 1B 18 
12ca5     17 12 03 FE 
12ca9     F4 E6 E2 DB 
12cad     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
12cb1     E9 E6 E4 E5 
12cb5     E8 E8 E0 D4 
12cb9     D4 D6 D8 E3 
12cbd     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
12cc1     2B 3D 50 57 
12cc5     4E 3A 24 13 
12cc9     0F 0A 0D 0B 
12ccd     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
12cd1     E3 DC DF DC 
12cd5     DD E7 EF FD 
12cd9     00 FE F4 EB 
12cdd     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
12ce1     E3 D9 DC EC 
12ce5     FA 0B 1C 25 
12ce9     29 2F 2D 23 
12ced     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
12cf1     E8 DD DA DD 
12cf5     EF 02 13 24 
12cf9     2F 33 27 1F 
12cfd     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
12d01     01 06 0A 07 
12d05     FD FD FE 08 
12d09     0E 1A 16 0C 
12d0d     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
12d11     F6 F9 00 06 
12d15     05 07 0F 19 
12d19     1D 1C 17 16 
12d1d     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
12d21     1B 16 16 09 
12d25     FC 00 00 E0 
12d29     F6 F5 04 0D 
12d2d     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
12d31     0E 0F 12 17 
12d35     17 0C FD F0 
12d39     EC EE F8 08 
12d3d     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
12d41     0A 07 06 01 
12d45     01 FF FF F8 
12d49     F7 F2 E3 D9 
12d4d     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
12d51     AB AC B8 C6 
12d55     DA ED FD 05 
12d59     12 1C 2B 39 
12d5d     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
12d61     35 16 F7 EE 
12d65     E9 EA E9 DF 
12d69     D1 CE CE CE 
12d6d     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
12d71     0E 1F 20 29 
12d75     2D 27 1B 16 
12d79     0D 09 FF F9 
12d7d     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
12d81     DF E3 E4 EE 
12d85     F7 04 12 20 
12d89     2A 2E 2A 2D 
12d8d     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
12d91     3F 38 1A 06 
12d95     F1 E0 D7 DB 
12d99     CE D3 DA DC 
12d9d     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
12da1     E7 E2 D9 DD 
12da5     D1 CD CE CB 
12da9     D0 D7 DE ED 
12dad     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
12db1     06 0E 06 05 
12db5     05 0A 0E 15 
12db9     24 2E 33 38 
12dbd     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
12dc1     2C 2A 22 21 
12dc5     10 03 F9 EA 
12dc9     E7 E2 C4 B9 
12dcd     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
12dd1     AF B1 BB C9 
12dd5     D6 EA E4 EF 
12dd9     EE FE 01 11 
12ddd     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
12de1     1C 12 0D 04 
12de5     F7 E9 D5 D3 
12de9     C2 CC D3 DD 
12ded     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
12df1     41 5D 69 6E 
12df5     62 4A 3A 1F 
12df9     07 F9 E8 DF 
12dfd     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
12e01     E4 EB ED F2 
12e05     F6 FA 01 08 
12e09     07 07 0C 10 
12e0d     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
12e11     15 0C FF F5 
12e15     F2 DA CF D3 
12e19     C9 D1 E5 F6 
12e1d     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
12e21     07 05 07 0C 
12e25     10 0F 0E FE 
12e29     F9 F2 E1 DE 
12e2d     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
12e31     E7 F2 00 08 
12e35     1B 2B 2D 32 
12e39     38 36 1F 0C 
12e3d     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
12e41     D5 DC E2 F0 
12e45     F4 FF 09 06 
12e49     F2 D7 C7 B5 
12e4d     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
12e51     E0 E7 FB 12 
12e55     19 31 32 34 
12e59     2C 26 18 11 
12e5d     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
12e61     03 FE FF FE 
12e65     F6 EF DC D4 
12e69     CF C5 CC DB 
12e6d     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
12e71     20 2D 2F 21 
12e75     21 16 1A 1A 
12e79     17 14 0C F6 
12e7d     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
12e81     E3 E4 EF EE 
12e85     FB 08 15 2E 
12e89     48 58 63 60 
12e8d     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
12e91     FB E7 E1 C5 
12e95     C5 C3 CB DB 
12e99     EE FA 0B 12 
12e9d     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
12ea1     BB B9 B9 BC 
12ea5     BF C7 D1 DE 
12ea9     E8 F5 FF 03 
12ead     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
12eb1     E0 F0 04 1E 
12eb5     36 4E 67 6D 
12eb9     75 6E 64 4C 
12ebd     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
12ec1     D0 CD C8 D1 
12ec5     DF E4 E9 D6 
12ec9     D1 CA CA CA 
12ecd     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
12ed1     E3 DC E8 ED 
12ed5     EE F3 F0 E3 
12ed9     E4 E4 EB F2 
12edd     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
12ee1     09 FE F8 E9 
12ee5     DC D2 CD CB 
12ee9     D5 DA F8 0E 
12eed     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
12ef1     6C 52 43 28 
12ef5     19 12 0D 0D 
12ef9     01 FD FE F9 
12efd     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
12f01     E3 D4 C8 B5 
12f05     B6 C5 D8 EF 
12f09     06 17 23 31 
12f0d     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
12f11     1D 01 EE D7 
12f15     D2 D3 D6 E8 
12f19     03 17 1E 1D 
12f1d     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
12f21     FE F9 F4 EA 
12f25     E4 DE DC D7 
12f29     D8 DB D6 CA 
12f2d     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
12f31     F7 11 20 37 
12f35     37 39 3E 38 
12f39     31 1C 09 ED 
12f3d     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
12f41     C4 D6 DF F4 
12f45     F7 EC DE D4 
12f49     CC CB D0 DB 
12f4d     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
12f51     32 36 3B 3A 
12f55     30 1B 0A F4 
12f59     EE E1 DF EC 
12f5d     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
12f61     EF FB FA F2 
12f65     E8 DA C1 A7 
12f69     A3 A4 B4 C7 
12f6d     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
12f71     1D 1D 25 2B 
12f75     31 3B 37 37 
12f79     30 27 1A 07 
12f7d     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
12f81     E0 DE DD E8 
12f85     F5 11 1F 2A 
12f89     33 32 32 35 
12f8d     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
12f91     EA D9 D6 D6 
12f95     E6 F3 00 13 
12f99     0E FD DC CF 
12f9d     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
12fa1     B1 C1 C8 DC 
12fa5     E5 EB FA FC 
12fa9     F9 EF DD D1 
12fad     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
12fb1     07 2B 3E 54 
12fb5     60 6C 78 75 
12fb9     65 4F 20 FD 
12fbd     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
12fc1     C2 CC D0 D2 
12fc5     CF CF D0 D2 
12fc9     D7 DD DB D6 
12fcd     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
12fd1     E9 EA E8 E9 
12fd5     E9 E4 E8 E0 
12fd9     E7 EE F3 02 
12fdd     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
12fe1     F5 FC FD FD 
12fe5     EB E4 DB D7 
12fe9     E3 F0 02 14 
12fed     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
12ff1     26 25 1B 1D 
12ff5     1D 27 25 2A 
12ff9     29 24 15 0B 
12ffd     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
13001     AB A7 AB BD 
13005     CC E2 F8 04 
13009     0D 1D 2A 38 
1300d     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
13011     F8 E9 EA EA 
13015     FA 06 10 0F 
13019     04 FF F5 F0 
1301d     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
13021     FF 01 00 FD 
13025     E8 DD D6 C9 
13029     C4 C3 C3 C6 
1302d     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
13031     F9 01 01 08 
13035     12 1C 21 1D 
13039     04 ED D6 C9 
1303d     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
13041     ED F1 ED ED 
13045     EC EA EF F1 
13049     FC 07 0F 18 
1304d     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
13051     1A 1A 10 0F 
13055     08 F2 E6 CF 
13059     D6 D3 D2 DD 
1305d     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
13061     01 F5 E1 C6 
13065     B8 A8 A7 AB 
13069     B7 C6 DA ED 
1306d     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
13071     1E 30 41 4D 
13075     51 56 4F 3F 
13079     28 18 06 EC 
1307d     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
13081     DD E6 FE 0F 
13085     20 32 39 31 
13089     28 28 20 23 
1308d     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
13091     E8 E9 F3 EC 
13095     E5 D5 C2 B6 
13099     B1 AB AF B2 
1309d     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
130a1     FC 00 FD FE 
130a5     FD FB F4 F2 
130a9     E8 E3 E5 E8 
130ad     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
130b1     1D 2A 34 42 
130b5     58 5A 53 3D 
130b9     1D 03 DE C5 
130bd     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
130c1     B9 BE C8 D7 
130c5     E1 DA DC E1 
130c9     EB F1 F7 F3 
130cd     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
130d1     E5 EA EC E4 
130d5     DB DB E0 E1 
130d9     E9 EE F0 F2 
130dd     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
130e1     05 F9 EB E2 
130e5     E3 E1 F5 05 
130e9     18 28 21 26 
130ed     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
130f1     1D 26 35 3C 
130f5     44 3D 2A 09 
130f9     EC D3 C5 B2 
130fd     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
13101     B9 C6 DC F3 
13105     03 0C 1B 27 
13109     3E 4B 50 40 
1310d     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
13111     FE F9 F7 EB 
13115     D7 CB CF D2 
13119     E3 EC FF 0F 
1311d     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
13121     F9 E8 D1 CC 
13125     C8 CC CE D8 
13129     D4 CA CC CC 
1312d     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
13131     F5 02 10 1D 
13135     21 1B 10 00 
13139     EF E6 DE E3 
1313d     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
13141     D8 DB E2 E7 
13145     EE FC 08 16 
13149     28 30 2D 2C 
1314d     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
13151     1A FD E2 CF 
13155     BF B8 BC BF 
13159     C7 D1 DA D3 
1315d     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
13161     C8 C7 B7 B9 
13165     BA C7 DB E9 
13169     EB F9 02 16 
1316d     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
13171     64 66 66 5A 
13175     41 21 08 F4 
13179     E5 E2 E0 EA 
1317d     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
13181     0E 1A 12 12 
13185     08 0A 0D 18 
13189     1C 11 16 0B 
1318d     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
13191     CB C6 A9 A8 
13195     A1 A5 AF BD 
13199     D4 E4 FB 0B 
1319d     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
131a1     12 FD FC EE 
131a5     F2 F0 DE E0 
131a9     D6 DB E6 EF 
131ad     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
131b1     49 56 5A 4F 
131b5     3B 1C 03 E5 
131b9     CE C7 C2 C1 
131bd     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
131c1     B6 B9 C4 CD 
131c5     DB ED FD 00 
131c9     FF F4 F5 ED 
131cd     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
131d1     F5 F5 EB E7 
131d5     E9 E8 E9 E9 
131d9     E2 E3 E4 F4 
131dd     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
131e1     FD FD FF 09 
131e5     0F 0F 04 FF 
131e9     FF 01 08 11 
131ed     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
131f1     4C 40 27 0E 
131f5     F9 E0 CD C8 
131f9     C9 C6 C5 C5 
131fd     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
13201     F7 09 15 28 
13205     34 46 42 44 
13209     33 25 17 FC 
1320d     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
13211     BF BD C8 D7 
13215     E9 FE 0A 16 
13219     1B 22 21 1F 
1321d     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
13221     D9 DD D6 C8 
13225     C6 BC B3 AB 
13229     B3 B4 C6 D5 
1322d     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
13231     19 27 2A 29 
13235     1F 1A 10 07 
13239     FA EB D4 C5 
1323d     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
13241     E9 F9 0A 21 
13245     36 42 3F 42 
13249     35 2A 17 0B 
1324d     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
13251     BE BB B0 B7 
13255     B5 B4 B6 B6 
13259     B6 C3 CB DA 
1325d     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
13261     DC E6 E6 E8 
13265     ED F4 05 1B 
13269     2B 3B 3E 4A 
1326d     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
13271     31 2A 1C 10 
13275     07 02 06 09 
13279     11 13 0E FF 
1327d     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
13281     00 04 03 0D 
13285     0D 15 0E 05 
13289     FB EB D8 C5 
1328d     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
13291     9A A6 BA CF 
13295     DC F7 06 1B 
13299     2D 38 36 36 
1329d     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
132a1     E7 E2 E5 E4 
132a5     E5 E6 E6 EE 
132a9     FD 0F 21 2D 
132ad     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
132b1     1F 15 0D FD 
132b5     F0 E2 DE C0 
132b9     B0 A4 A2 A4 
132bd     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
132c1     E8 F4 02 0B 
132c5     0E 0E 0F 0D 
132c9     0F 0D 08 07 
132cd     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
132d1     C5 BC B9 BF 
132d5     CE D5 E2 E7 
132d9     EE FD 0A 14 
132dd     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
132e1     0A F8 F5 F7 
132e5     01 07 17 21 
132e9     2F 2A 2A 27 
132ed     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
132f1     F4 EF E8 DE 
132f5     E0 E0 EB E8 
132f9     E9 E6 E6 F0 
132fd     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
13301     35 27 1F 16 
13305     17 17 12 0E 
13309     FD EF E2 CF 
1330d     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
13311     F0 F4 03 07 
13315     11 12 14 12 
13319     13 09 05 ED 
1331d     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
13321     BC B9 BA B9 
13325     B6 B9 CA D6 
13329     F3 FC 09 0E 
1332d     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
13331     42 34 1F 03 
13335     E5 C7 B3 B1 
13339     B4 BF D3 E5 
1333d     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
13341     4A 43 42 3D 
13345     32 2C 1D 0B 
13349     FB F8 F1 E7 
1334d     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
13351     91 93 A0 A5 
13355     B3 B1 B9 C5 
13359     DC E9 F6 FB 
1335d     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
13361     F3 04 12 1F 
13365     29 28 2A 2D 
13369     32 36 36 31 
1336d     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
13371     28 29 28 28 
13375     1D 1C 0C FB 
13379     E9 DD DF EF 
1337d     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
13381     F4 EF F2 F5 
13385     FA F7 E5 D6 
13389     BD AD A6 A9 
1338d     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
13391     FD 13 24 39 
13395     37 35 2A 1A 
13399     09 FB EF E3 
1339d     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
133a1     F0 ED E8 E9 
133a5     EE 01 00 11 
133a9     15 0E 08 0A 
133ad     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
133b1     1E 01 E6 B9 
133b5     AA 9B 9A 9B 
133b9     9E B3 BF D8 
133bd     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
133c1     10 15 24 2E 
133c5     31 2B 22 19 
133c9     02 F8 E4 C9 
133cd     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
133d1     CD E4 EF EC 
133d5     E7 F3 00 11 
133d9     1D 1A 1C 12 
133dd     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
133e1     F2 06 0F 0D 
133e5     10 13 13 13 
133e9     0E 0A 06 05 
133ed     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
133f1     14 0F 0F 0E 
133f5     0E 0D 01 FD 
133f9     F8 FF FE FF 
133fd     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
13401     F7 0B 1E 26 
13405     21 11 FF E7 
13409     DA DF DF E1 
1340d     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
13411     16 1C 1A 1C 
13415     15 FF F7 EF 
13419     E0 DB CC C8 
1341d     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
13421     BF BE BE C6 
13425     CD E8 F5 02 
13429     04 0A 19 2B 
1342d     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
13431     FC E7 D7 D6 
13435     DD DF EA F2 
13439     F8 0D 1B 2D 
1343d     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
13441     23 21 21 11 
13445     0D 08 FE E7 
13449     D7 C7 B5 A3 
1344d     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
13451     B7 BD BD C4 
13455     CE DE F1 03 
13459     11 13 14 02 
1345d     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
13461     F5 FA 00 0E 
13465     1B 2D 31 42 
13469     3F 41 43 44 
1346d     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
13471     3E 2E 27 13 
13475     02 F2 EA E5 
13479     E5 E8 E8 E0 
1347d     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
13481     DE EC EF EE 
13485     EE D7 D0 CB 
13489     CE D8 E7 F3 
1348d     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
13491     20 16 0D 04 
13495     00 00 07 0E 
13499     0E 15 14 0D 
1349d     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
134a1     DE DB DF E4 
134a5     EA EC E7 E6 
134a9     EB F7 0B 12 
134ad     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
134b1     D1 C8 BC B9 
134b5     BA BD C9 D7 
134b9     EA F3 FD 03 
134bd     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
134c1     2F 23 1E 0B 
134c5     FF F2 E5 DE 
134c9     DD D8 D9 DB 
134cd     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
134d1     F0 EE E7 EE 
134d5     F8 05 0A 11 
134d9     17 FB F9 F4 
134dd     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
134e1     F3 F2 F3 F2 
134e5     F3 F6 FE 0C 
134e9     15 29 3E 40 
134ed     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
134f1     40 31 1F 05 
134f5     F1 D7 CC C4 
134f9     CB D4 D8 DD 
134fd     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
13501     20 21 21 0A 
13505     FE F4 F6 F9 
13509     FB FB FE FE 
1350d     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
13511     FF F8 F7 F5 
13515     F5 F0 EC ED 
13519     E5 E8 E8 E8 
1351d     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
13521     D4 D6 DE E4 
13525     E1 E3 DE DF 
13529     E7 F6 03 16 
1352d     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
13531     1D 20 1B 12 
13535     09 FE F9 F0 
13539     F8 F5 F6 00 
1353d     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
13541     16 0B 0A FF 
13545     F7 EA E1 D4 
13549     C8 BA B5 AF 
1354d     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
13551     CF D4 DE ED 
13555     F4 09 0A FF 
13559     F4 E7 EA ED 
1355d     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
13561     17 1C 2A 2D 
13565     3C 43 42 4E 
13569     4B 50 59 58 
1356d     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
13571     33 25 12 F3 
13575     DA C7 BF B9 
13579     AF AF B0 AB 
1357d     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
13581     F9 FB F7 F5 
13585     FF 03 11 18 
13589     16 11 02 FE 
1358d     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
13591     04 0D 1A 1E 
13595     2C 2F 2C 2C 
13599     1F 11 04 FC 
1359d     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
135a1     C9 C9 C6 CD 
135a5     D3 D2 D3 DE 
135a9     ED FF 08 0E 
135ad     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
135b1     FF 04 05 FB 
135b5     F1 EB E4 DF 
135b9     E3 E5 ED F2 
135bd     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
135c1     00 02 01 08 
135c5     09 0E 18 13 
135c9     12 07 FF F4 
135cd     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
135d1     D9 D8 E3 F3 
135d5     F8 01 F9 E9 
135d9     E4 E5 EA F5 
135dd     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
135e1     F2 F3 FF 12 
135e5     24 35 41 4F 
135e9     59 5D 5E 5E 
135ed     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
135f1     19 11 F8 E6 
135f5     D3 C8 BF C3 
135f9     C6 CD DC E8 
135fd     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
13601     FE F9 F2 F5 
13605     00 08 10 14 
13609     0E 08 FA F6 
1360d     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
13611     03 0B 0A 0D 
13615     0F 10 0D 03 
13619     FF FE F4 F0 
1361d     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
13621     AF AB B2 BE 
13625     CD D9 E6 FF 
13629     14 30 32 37 
1362d     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
13631     38 29 12 FE 
13635     E9 DC D2 CD 
13639     CF D9 E7 EB 
1363d     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
13641     FB FB F9 FB 
13645     FD FE FD F8 
13649     E9 E5 DE DC 
1364d     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
13651     D4 D4 DF EC 
13655     EF E9 E8 EA 
13659     EC F7 00 0B 
1365d     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
13661     21 31 36 35 
13665     40 44 49 4F 
13669     54 5A 58 57 
1366d     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
13671     12 01 E9 D2 
13675     C2 B1 AA AC 
13679     B3 BA CA D1 
1367d     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
13681     F2 F2 F3 F2 
13685     F7 00 03 08 
13689     0E 0E 13 13 
1368d     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
13691     1B 26 33 30 
13695     31 20 11 04 
13699     F8 F4 EA E1 
1369d     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
136a1     A4 A1 AA B4 
136a5     C6 D8 EF 06 
136a9     1D 22 25 25 
136ad     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
136b1     16 0B FE FA 
136b5     E5 DA D1 CD 
136b9     CF D7 E3 E7 
136bd     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
136c1     FF 06 05 10 
136c5     19 1E 1D 0D 
136c9     FF EE E6 E0 
136cd     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
136d1     E2 F0 F2 E2 
136d5     DB D5 D6 D1 
136d9     DD E2 F0 04 
136dd     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
136e1     31 2E 36 34 
136e5     35 3A 3B 40 
136e9     47 40 42 3D 
136ed     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
136f1     15 FC E3 D3 
136f5     BC B7 BC C7 
136f9     D7 E3 E1 E4 
136fd     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
13701     F3 EB ED EE 
13705     ED EC ED F8 
13709     05 11 18 1E 
1370d     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
13711     25 27 25 15 
13715     08 FC EF E3 
13719     DE DC D5 CC 
1371d     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
13721     C0 CE DC E6 
13725     F5 FA 0F 20 
13729     1F 29 2D 21 
1372d     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
13731     04 08 07 06 
13735     FF F9 F0 DC 
13739     D4 CC CC D1 
1373d     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
13741     06 0C 15 14 
13745     14 08 F8 E6 
13749     D5 CD CA CE 
1374d     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
13751     FA 04 01 FE 
13755     EE E1 D3 C7 
13759     C5 D1 E5 00 
1375d     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
13761     3B 3D 3F 47 
13765     4C 51 51 53 
13769     50 3E 28 19 
1376d     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
13771     FF F3 E8 DA 
13775     D8 DC E1 E7 
13779     E8 E3 E6 E8 
1377d     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
13781     DA D8 DD E7 
13785     FE 0E 25 2B 
13789     29 28 1E 15 
1378d     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
13791     14 0D 08 FC 
13795     FD F3 F5 F2 
13799     ED E9 E2 C4 
1379d     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
137a1     B3 D5 EF 09 
137a5     21 3C 40 3F 
137a9     35 1E FF E3 
137ad     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
137b1     F3 04 07 09 
137b5     10 12 10 12 
137b9     02 F8 E9 DF 
137bd     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
137c1     F0 FD 01 0B 
137c5     07 FD F5 E6 
137c9     E4 E8 EF F8 
137cd     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
137d1     ED E5 DF DF 
137d5     D4 D3 D8 DC 
137d9     ED 03 12 23 
137dd     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
137e1     2D 30 37 37 
137e5     3F 41 41 42 
137e9     43 3E 34 2B 
137ed     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
137f1     D7 C5 C1 C8 
137f5     D1 E3 F0 F7 
137f9     F6 00 06 05 
137fd     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
13801     C2 B7 BF D3 
13805     EE 0C 21 37 
13809     46 4E 4B 48 
1380d     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
13811     F3 EB E1 E3 
13815     DE DF E1 E6 
13819     E6 E6 E8 DE 
1381d     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
13821     DA E9 F5 03 
13825     14 15 17 0D 
13829     F5 E4 CD CF 
1382d     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
13831     1F 1B 11 08 
13835     00 01 FA F1 
13839     F2 F3 F5 F7 
1383d     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
13841     F0 F0 ED F0 
13845     F1 E9 DF DB 
13849     E1 EA F8 09 
1384d     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
13851     0D F9 D8 C1 
13855     A6 A4 AD C3 
13859     E3 FC 0A 16 
1385d     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
13861     52 56 5C 56 
13865     3D 2C 1B 09 
13869     FB FE FD 07 
1386d     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
13871     01 F4 EB EE 
13875     F3 02 06 0F 
13879     0D 05 FC F3 
1387d     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
13881     E0 F2 FE 12 
13885     13 10 12 0F 
13889     10 13 18 0C 
1388d     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
13891     EC EE EE F1 
13895     F6 FA E7 DD 
13899     D5 C7 B9 B7 
1389d     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
138a1     23 36 42 33 
138a5     24 09 FB E0 
138a9     CD C7 C4 D0 
138ad     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
138b1     1F 26 3A 3E 
138b5     3D 2B 15 FB 
138b9     E5 CF C2 BA 
138bd     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
138c1     D2 E2 EF FC 
138c5     FF FF 06 07 
138c9     05 02 03 08 
138cd     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
138d1     F9 F1 E8 E8 
138d5     E5 E6 EE F8 
138d9     05 0C 1B 22 
138dd     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
138e1     44 46 46 46 
138e5     3C 2E 1C 04 
138e9     F5 E9 DA D7 
138ed     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
138f1     D5 E1 F0 FE 
138f5     11 1F 30 31 
138f9     26 1E FF E9 
138fd     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
13901     DB F2 08 21 
13905     2C 2E 33 34 
13909     2A 21 19 11 
1390d     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
13911     EE E2 E0 DF 
13915     E1 EE F9 FE 
13919     F8 EE E1 DC 
1391d     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
13921     FF FA F2 E6 
13925     E6 D4 CD C9 
13929     D4 E3 FA 0F 
1392d     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
13931     13 18 21 1D 
13935     1C 1B 18 0D 
13939     FF F3 DA C8 
1393d     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
13941     E8 FA F9 F9 
13945     F9 F7 FC 07 
13949     17 29 2D 29 
1394d     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
13951     C3 BB B8 BA 
13955     CA D4 F0 FF 
13959     0A 1E 30 42 
1395d     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
13961     49 3B 28 17 
13965     00 F1 EA E2 
13969     E5 EF F7 04 
1396d     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
13971     0D 24 2B 31 
13975     38 34 1A 04 
13979     F8 F0 EB ED 
1397d     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
13981     F7 F7 F0 F0 
13985     ED EA EA EF 
13989     F1 F3 F8 FA 
1398d     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
13991     F7 E9 E2 E1 
13995     DF E4 E4 E5 
13999     E5 F0 F6 00 
1399d     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
139a1     06 FA F3 E1 
139a5     E0 E0 DF E0 
139a9     EB F1 00 0C 
139ad     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
139b1     3A 33 1F 0C 
139b5     FA EA D9 C6 
139b9     B4 A8 A1 A0 
139bd     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
139c1     02 14 13 13 
139c5     13 16 1B 1D 
139c9     20 1D 09 FC 
139cd     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
139d1     EA EC EE F9 
139d5     08 0F 1F 2C 
139d9     2E 3D 3B 3D 
139dd     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
139e1     3E 33 1B 01 
139e5     EC CC B9 AF 
139e9     B4 B2 B4 C5 
139ed     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
139f1     1F 3B 51 56 
139f5     3E 24 0F 02 
139f9     F9 F1 E8 E9 
139fd     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
13a01     01 07 03 08 
13a05     0C 10 17 17 
13a09     16 1B 18 16 
13a0d     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
13a11     E2 E1 E4 F4 
13a15     F1 F2 F2 E8 
13a19     E2 E3 E4 E4 
13a1d     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
13a21     C3 CB CC DE 
13a25     F0 02 03 0A 
13a29     11 10 12 14 
13a2d     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
13a31     16 0E 0D 0B 
13a35     01 FC EE E9 
13a39     D8 D3 C9 CE 
13a3d     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
13a41     F6 F6 01 0C 
13a45     1A 28 2F 2A 
13a49     11 F8 DF D3 
13a4d     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
13a51     C9 DA E7 F9 
13a55     09 1B 32 47 
13a59     47 4D 52 51 
13a5d     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
13a61     0E FD E5 D9 
13a65     D5 CF D7 E2 
13a69     EF FD 0A 17 
13a6d     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
13a71     48 43 28 16 
13a75     01 F7 FA FB 
13a79     FD FD F8 F1 
13a7d     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
13a81     C2 C1 C3 D0 
13a85     DB F0 F9 03 
13a89     16 24 1A 18 
13a8d     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
13a91     EC E7 E8 E8 
13a95     E9 EE F0 F8 
13a99     06 12 20 22 
13a9d     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
13aa1     E9 EC F3 FA 
13aa5     F9 FA 01 FF 
13aa9     09 0F 18 18 
13aad     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
13ab1     EC D8 CD C3 
13ab5     BB BA B9 BA 
13ab9     BD C7 DE F5 
13abd     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
13ac1     1C 1B 1D 1F 
13ac5     20 16 FE EF 
13ac9     E6 E0 EB F9 
13acd     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
13ad1     1B 1B 20 24 
13ad5     2A 2A 29 2A 
13ad9     2C 2A 2D 2D 
13add     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
13ae1     DB C6 B0 A4 
13ae5     9C A3 B2 C3 
13ae9     E3 00 13 23 
13aed     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
13af1     4D 3C 29 19 
13af5     11 0D 06 FD 
13af9     F8 F1 E8 E9 
13afd     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
13b01     06 07 0F 0F 
13b05     12 12 10 0F 
13b09     05 FD F4 EB 
13b0d     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
13b11     DF E6 E8 E9 
13b15     DF D6 D1 D2 
13b19     DD DB DD DF 
13b1d     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
13b21     10 1A 25 28 
13b25     22 19 18 17 
13b29     14 09 FE F4 
13b2d     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
13b31     08 07 07 FF 
13b35     F8 EF E0 DB 
13b39     DB DD E2 EB 
13b3d     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
13b41     08 0A 11 03 
13b45     F6 E4 CD BB 
13b49     BC C2 D1 E3 
13b4d     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
13b51     21 2D 3F 46 
13b55     4B 4B 48 47 
13b59     42 38 29 0E 
13b5d     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
13b61     CF D5 DE EB 
13b65     F5 0A 21 36 
13b69     3B 34 34 32 
13b6d     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
13b71     07 FB FD FB 
13b75     00 FF FD EB 
13b79     D7 C5 B2 B6 
13b7d     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
13b81     E8 FA 0D 15 
13b85     28 24 27 24 
13b89     1A 0D FF ED 
13b8d     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
13b91     E4 F0 02 09 
13b95     0F 19 1D 12 
13b99     0D 06 FD EF 
13b9d     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
13ba1     14 14 04 00 
13ba5     FA FE 01 FA 
13ba9     F1 E1 CF CB 
13bad     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
13bb1     D5 DA E1 E6 
13bb5     EB EA F7 FC 
13bb9     02 0C 1E 2A 
13bbd     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
13bc1     08 F5 EE E9 
13bc5     E9 F3 FC 0C 
13bc9     20 2C 31 2D 
13bcd     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
13bd1     1B 1C 1F 1F 
13bd5     17 16 0E 0D 
13bd9     05 FC EE D8 
13bdd     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
13be1     AD B3 C2 E2 
13be5     08 28 39 40 
13be9     45 50 4F 3F 
13bed     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
13bf1     14 0C 0D 0F 
13bf5     0D 05 FF F8 
13bf9     F1 FC 02 08 
13bfd     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
13c01     01 06 07 06 
13c05     06 FF F9 EF 
13c09     E2 D6 CD C3 
13c0d     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
13c11     CD D4 D4 D9 
13c15     D9 D7 DE E7 
13c19     EF FD 09 20 
13c1d     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
13c21     33 1F 0C 05 
13c25     00 FA EB E8 
13c29     EA ED F8 03 
13c2d     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
13c31     01 F9 EA E5 
13c35     E0 DF DA DD 
13c39     EF FD 07 0B 
13c3d     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
13c41     C8 BF C2 C3 
13c45     CD DC F3 08 
13c49     1F 2E 27 28 
13c4d     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
13c51     3F 3A 30 1C 
13c55     10 07 FF 00 
13c59     F5 F5 F2 F2 
13c5d     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
13c61     09 10 1E 2C 
13c65     2E 35 31 29 
13c69     1D 0A 0B 0B 
13c6d     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
13c71     00 F8 F1 E8 
13c75     D4 C3 B7 B9 
13c79     BE D4 E0 EF 
13c7d     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
13c81     26 2F 2D 2A 
13c85     1A 0C FA EE 
13c89     E1 D5 C9 CE 
13c8d     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
13c91     1F 22 0F FB 
13c95     F0 ED F1 FC 
13c99     00 06 12 20 
13c9d     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
13ca1     FE F3 E7 D1 
13ca5     C2 BA B2 AE 
13ca9     AF BA CA E1 
13cad     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
13cb1     0A 0F 14 0D 
13cb5     06 06 05 06 
13cb9     11 10 10 0E 
13cbd     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
13cc1     04 17 28 39 
13cc5     3B 40 47 43 
13cc9     37 23 17 08 
13ccd     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
13cd1     FD F0 E7 DE 
13cd5     D5 CD C8 C7 
13cd9     C0 C3 C5 C7 
13cdd     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
13ce1     0D 1E 38 46 
13ce5     51 51 38 26 
13ce9     1D 17 1E 22 
13ced     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
13cf1     28 2D 29 1D 
13cf5     14 06 FF FF 
13cf9     FD F8 F7 F5 
13cfd     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
13d01     02 01 01 FA 
13d05     F0 E3 DA BD 
13d09     AD A6 A7 A9 
13d0d     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
13d11     DF D5 C8 D6 
13d15     EF 0E 27 3B 
13d19     43 4E 51 4E 
13d1d     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
13d21     FD EF EC E7 
13d25     E8 E9 EA F2 
13d29     F8 01 06 0C 
13d2d     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
13d31     FD EE EB E2 
13d35     E3 E5 EA F3 
13d39     F3 E7 D3 B3 
13d3d     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
13d41     F8 11 24 3B 
13d45     3C 43 49 47 
13d49     42 32 2B 19 
13d4d     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
13d51     F9 EA E5 E6 
13d55     EB F7 04 10 
13d59     19 23 28 22 
13d5d     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
13d61     1A 1D 25 1F 
13d65     14 FC ED EE 
13d69     F8 03 0D 0A 
13d6d     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
13d71     F0 E9 DF D6 
13d75     D8 DB D9 E1 
13d79     EA F5 00 01 
13d7d     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
13d81     19 18 1B 1A 
13d85     17 06 FA F3 
13d89     EB EE F6 00 
13d8d     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
13d91     D4 D3 DE F2 
13d95     08 1D 2D 38 
13d99     3C 3E 3B 2B 
13d9d     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
13da1     AB A6 A2 A4 
13da5     AC B1 BF D3 
13da9     DE EC FA 06 
13dad     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
13db1     11 07 01 FA 
13db5     FA 04 0A 11 
13db9     0E FA F1 F5 
13dbd     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
13dc1     4E 52 51 54 
13dc5     4D 3F 31 16 
13dc9     06 F8 EE E3 
13dcd     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
13dd1     AC 9F A0 A3 
13dd5     B5 C9 E3 FC 
13dd9     10 21 1D 20 
13ddd     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
13de1     22 29 25 0B 
13de5     00 02 05 20 
13de9     36 45 53 53 
13ded     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
13df1     2D 16 FD EC 
13df5     E3 DF DF DF 
13df9     E0 DF DF DF 
13dfd     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
13e01     FC F6 F5 E5 
13e05     D3 C2 BA B7 
13e09     B6 C1 D1 E4 
13e0d     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
13e11     D1 EA 08 22 
13e15     37 48 54 5E 
13e19     61 61 55 48 
13e1d     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
13e21     EB EC E2 D9 
13e25     D3 D2 D2 D9 
13e29     E0 F0 FC 05 
13e2d     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
13e31     FC EE E0 CC 
13e35     C5 C9 C4 B3 
13e39     AF B0 C1 E3 
13e3d     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
13e41     55 5A 57 54 
13e45     44 36 20 0E 
13e49     FE F8 FB FE 
13e4d     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
13e51     F1 F0 F7 03 
13e55     0B 16 23 28 
13e59     2D 2E 2C 27 
13e5d     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
13e61     01 F2 E6 DD 
13e65     DA E1 EA F9 
13e69     03 08 0F 15 
13e6d     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
13e71     0A F7 E6 D5 
13e75     CE D3 D4 DC 
13e79     DD E2 EB F8 
13e7d     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
13e81     3A 3E 38 31 
13e85     22 10 FD EA 
13e89     DC D8 DC DB 
13e8d     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
13e91     ED 05 1B 32 
13e95     41 3D 44 38 
13e99     2A 1D 01 E3 
13e9d     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
13ea1     C1 CF CC CC 
13ea5     CB CB CA D5 
13ea9     E4 F7 09 1B 
13ead     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
13eb1     1A 0D 09 09 
13eb5     0A 0A FF F9 
13eb9     F4 F6 01 16 
13ebd     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
13ec1     54 4D 41 32 
13ec5     1F 04 F1 DB 
13ec9     D1 C8 C4 C5 
13ecd     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
13ed1     B6 CB E5 08 
13ed5     19 29 32 2D 
13ed9     2D 22 14 06 
13edd     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
13ee1     00 00 FF 02 
13ee5     13 30 46 5C 
13ee9     6C 6B 65 5A 
13eed     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
13ef1     F8 E1 D5 D1 
13ef5     CA CE CB CB 
13ef9     CA CC D1 D2 
13efd     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
13f01     ED EA E8 E6 
13f05     E4 E4 E3 D9 
13f09     DC DD D1 C3 
13f0d     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
13f11     12 35 53 62 
13f15     6B 66 66 69 
13f19     68 56 3D 1C 
13f1d     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
13f21     BE B9 B8 B8 
13f25     BF C6 D5 DF 
13f29     F2 03 0B 0A 
13f2d     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
13f31     E2 DB D6 D1 
13f35     CA CA CB D8 
13f39     EC FA 0D 25 
13f3d     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
13f41     34 35 34 2F 
13f45     26 17 03 FC 
13f49     FD FF 0B 0A 
13f4d     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
13f51     FD FF 01 0B 
13f55     11 12 17 17 
13f59     12 07 FA F0 
13f5d     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
13f61     CC C3 C5 CA 
13f65     DA F3 0C 20 
13f69     35 3D 42 3E 
13f6d     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
13f71     E4 D5 CC CF 
13f75     DA E2 EA EE 
13f79     F4 F6 02 10 
13f7d     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
13f81     21 0E FC E9 
13f85     D7 D3 D2 D7 
13f89     DE DC D9 CE 
13f8d     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
13f91     10 30 34 38 
13f95     36 35 32 30 
13f99     1E 03 EE DF 
13f9d     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
13fa1     B5 AE AC AC 
13fa5     BC D0 EA 09 
13fa9     17 23 26 20 
13fad     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
13fb1     30 36 36 24 
13fb5     10 FA E9 D9 
13fb9     D8 E5 F5 09 
13fbd     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
13fc1     0E 0F 0D 00 
13fc5     F0 DF D7 D6 
13fc9     DC DC DB DB 
13fcd     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
13fd1     00 08 0E 0E 
13fd5     04 FF FF FD 
13fd9     FE 01 0C 1A 
13fdd     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
13fe1     02 FD 03 13 
13fe5     25 36 46 48 
13fe9     46 36 29 26 
13fed     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
13ff1     E9 DC D2 D3 
13ff5     CE CF CA CA 
13ff9     CC D8 E1 F0 
13ffd     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
14001     CD C5 B6 B9 
14005     BE CF E5 E7 
14009     E9 EC F1 F1 
1400d     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
14011     3D 4B 57 55 
14015     5A 63 62 52 
14019     39 1D FF E3 
1401d     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
14021     AA A8 AB B2 
14025     CA D5 E7 F5 
14029     F0 EB E4 E8 
1402d     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
14031     23 26 23 16 
14035     FA E4 D4 CD 
14039     D4 DF EC FF 
1403d     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
14041     30 32 27 1A 
14045     11 0D 0E 15 
14049     12 14 12 08 
1404d     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
14051     06 05 F3 E7 
14055     DD D2 CE C9 
14059     CC E0 F1 FC 
1405d     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
14061     ED E8 E9 F1 
14065     00 09 0C 0A 
14069     05 07 12 1C 
1406d     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
14071     20 20 1F 17 
14075     0E 03 FD FB 
14079     FE 00 00 29 
1407d     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
14081     37 2A 25 2A 
14085     25 18 0F 00 
14089     EA EF F1 E2 
1408d     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
14091     EA FE 1A 13 
14095     00 05 16 29 
14099     49 46 2E 31 
1409d     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
140a1     3D 2E 31 2E 
140a5     25 1A 05 E8 
140a9     E2 E6 DF EF 
140ad     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
140b1     EA 00 1A 08 
140b5     00 07 1A 37 
140b9     4F 38 2E 37 
140bd     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
140c1     35 2A 31 29 
140c5     1D 16 00 E3 
140c9     E3 E3 E2 F2 
140cd     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
140d1     EF 0E 13 01 
140d5     00 0E 1E 3F 
140d9     46 35 2E 38 
140dd     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
140e1     2A 29 2A 21 
140e5     18 0F F1 E2 
140e9     E3 E3 EA F1 
140ed     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
140f1     FE 16 0F 00 
140f5     01 11 29 45 
140f9     3D 2E 35 3C 
140fd     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
14101     25 2A 25 21 
14105     13 00 ED E3 
14109     E3 E2 EF EA 
1410d     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
14111     00 11 05 00 
14115     02 16 31 46 
14119     38 31 37 44 
1411d     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
14121     25 2A 24 18 
14125     0F 00 E8 E2 
14129     E3 E3 F1 E3 
1412d     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
14131     08 08 00 00 
14135     08 1E 3C 46 
14139     37 37 3C 46 
1413d     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
14141     25 29 21 13 
14145     05 F1 E8 E2 
14149     E3 EA EA D6 
1414d     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
14151     08 05 00 00 
14155     11 29 44 3D 
14159     37 3C 44 4D 
1415d     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
14161     29 25 1A 0F 
14165     00 F1 E3 DF 
14169     E2 EF E2 CF 
1416d     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
14171     05 01 00 02 
14175     1A 31 44 3C 
14179     38 3D 49 4F 
1417d     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
14181     2A 21 18 0F 
14185     FB EF E2 DF 
14189     E3 EA D6 C8 
1418d     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
14191     01 00 00 0E 
14195     1E 3C 3F 3C 
14199     3D 44 4F 54 
1419d     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
141a1     2A 21 13 05 
141a5     F8 ED DF DF 
141a9     E8 E3 CF C8 
141ad     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
141b1     00 00 01 13 
141b5     2E 3F 3D 3D 
141b9     3F 49 54 54 
141bd     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
141c1     25 1D 0F 00 
141c5     F2 E8 DC DF 
141c9     E8 D7 C8 C9 
141cd     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
141d1     00 00 07 1D 
141d5     31 3F 3D 3F 
141d9     45 4F 54 54 
141dd     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
141e1     24 18 05 FB 
141e5     F2 DF DB E3 
141e9     E3 CB C4 CB 
141ed     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
141f1     00 00 0E 24 
141f5     3C 3D 3F 45 
141f9     49 54 58 4F 
141fd     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
14201     21 11 01 FB 
14205     F1 DB DC E6 
14209     DF C4 C4 CF 
1420d     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
14211     00 02 16 2E 
14215     3C 3D 44 46 
14219     4F 58 5A 4F 
1421d     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
14221     1D 08 00 F9 
14225     E8 DB DC E3 
14229     D2 C1 C8 D2 
1422d     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
14231     00 07 1E 31 
14235     3C 3F 46 4D 
14239     54 5A 5A 4D 
1423d     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
14241     18 05 FF F8 
14245     E2 D7 E2 DF 
14249     C8 C1 C9 DB 
1424d     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
14251     01 11 29 38 
14255     3C 44 49 4F 
14259     58 5C 54 49 
1425d     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
14261     0F 00 FE F1 
14265     DF D7 E3 D6 
14269     BC C1 D2 DC 
1426d     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
14271     05 18 2E 38 
14275     3D 46 4D 54 
14279     5C 5C 54 46 
1427d     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
14281     07 00 FE EA 
14285     D7 DC DF CB 
14289     BA C8 D2 E3 
1428d     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
14291     0E 1E 31 38 
14295     3F 49 4F 58 
14299     5E 5A 4F 46 
1429d     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
142a1     01 00 F9 E3 
142a5     D6 DC DB C3 
142a9     B7 C9 DB E6 
142ad     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
142b1     11 29 35 3C 
142b5     45 4F 54 5C 
142b9     5E 5A 4D 38 
142bd     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
142c1     00 00 F1 DF 
142c5     D6 DF D2 BA 
142c9     BC D2 DC E6 
142cd     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
142d1     1A 2E 37 3C 
142d5     49 4F 58 5E 
142d9     5E 54 46 35 
142dd     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
142e1     00 FF ED D7 
142e5     D7 DB C8 B7 
142e9     C4 D7 DF E6 
142ed     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
142f1     1E 2E 37 3F 
142f5     4D 54 5C 60 
142f9     5E 54 46 2E 
142fd     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
14301     00 FB E8 D6 
14305     DC D6 BC B7 
14309     CF DB DF EA 
1430d     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
14311     29 31 38 45 
14315     4F 58 5E 64 
14319     5C 4F 3D 2E 
1431d     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
14321     00 F2 DF D6 
14325     DB CB BA BB 
14329     D2 DB E2 EF 
1432d     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
14331     2E 31 3C 49 
14335     54 5C 64 64 
14339     5A 4D 35 2E 
1433d     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
14341     00 F1 DB D7 
14345     D7 C3 B3 C4 
14349     D6 DB E6 F9 
1434d     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
14351     2E 35 3F 4F 
14355     58 5E 65 5E 
14359     54 46 35 2E 
1435d     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
14361     FB E8 D6 D7 
14365     D2 BB B7 C9 
14369     D6 DC EA FE 
1436d     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
14371     2E 37 45 54 
14375     5C 64 65 5E 
14379     4F 3D 2E 2A 
1437d     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
14381     F8 E3 D6 D6 
14385     CB BA BB D2 
14389     D7 DC EF 00 
1438d     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
14391     2E 3C 4D 58 
14395     5E 65 64 5A 
14399     4D 37 2E 25 
1439d     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
143a1     F1 DF D6 D2 
143a5     C3 B3 C4 D2 
143a9     D7 E6 F9 00 
143ad     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
143b1     31 3F 4F 5A 
143b5     64 65 64 5A 
143b9     46 35 2A 21 
143bd     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
143c1     EA D7 D2 CB 
143c5     BA B7 C9 D2 
143c9     DB EA FE 02 
143cd     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
143d1     37 45 54 5E 
143d5     65 66 5E 54 
143d9     3D 2E 2A 18 
143dd     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
143e1     E6 D6 D2 C8 
143e5     BA BC C9 D2 
143e9     DC EF 00 07 
143ed     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
143f1     3C 4D 58 60 
143f5     66 65 5C 4D 
143f9     37 2E 24 11 
143fd     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
14401     DF D2 CF BC 
14405     B3 C1 CB D6 
14409     E6 F9 01 0E 
1440d     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
14411     3F 54 5C 65 
14415     66 64 5A 46 
14419     35 2A 21 08 
1441d     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
14421     DF D2 CB BA 
14425     B7 C4 CF DB 
14429     EA FF 07 11 
1442d     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
14431     45 58 60 66 
14435     66 60 54 46 
14439     2E 25 18 05 
1443d     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
14441     D7 CF C4 B3 
14445     BB 00 00 F9 
14449     FC FC FD FF 
1444d     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
14451     04 07 09 0A 
14455     0D 0D 0E 13 
14459     13 13 10 0E 
1445d     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
14461     21 20 1E 16 
14465     0E 07 07 03 
14469     03 03 FD EA 
1446d     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
14471     B1 B1 B3 AD 
14475     A7 A9 A6 A9 
14479     A2 9D 9D 9A 
1447d     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
14481     A0 A9 B1 AD 
14485     AF B1 B5 CC 
14489     E0 F2 F6 F6 
1448d     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
14491     CC CF DA E6 
14495     EC F0 FC EC 
14499     EA DA CA C0 
1449d     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
144a1     E0 F3 04 09 
144a5     21 2A 37 34 
144a9     2C 20 18 16 
144ad     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
144b1     01 09 16 26 
144b5     37 3B 3D 2D 
144b9     18 01 FF 00 
144bd     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
144c1     09 00 FC F7 
144c5     F9 FF 07 10 
144c9     24 2D 3A 44 
144cd     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
144d1     27 14 FF F2 
144d5     F6 01 14 1D 
144d9     21 21 20 20 
144dd     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
144e1     04 ED DC D3 
144e5     C5 CC D3 D9 
144e9     E2 EA F3 EC 
144ed     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
144f1     E0 E2 E8 F2 
144f5     F3 FD F9 EA 
144f9     DF D0 D4 CA 
144fd     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
14501     D6 DA DC CA 
14505     C3 BF C6 DA 
14509     F0 04 0D 10 
1450d     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
14511     36 3B 3D 3A 
14515     34 20 13 FC 
14519     F7 E6 D6 D6 
1451d     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
14521     FF 03 00 F6 
14525     E6 DC D3 CA 
14529     D3 DA E2 EC 
1452d     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
14531     D4 E0 E6 EC 
14535     EC DA BC AC 
14539     92 84 86 89 
1453d     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
14541     B9 BC C6 CC 
14545     D9 E6 EC F3 
14549     F9 00 04 04 
1454d     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
14551     F9 F9 F9 03 
14555     0A 1D 2D 30 
14559     30 2C 24 2C 
1455d     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
14561     30 1E 0D 13 
14565     13 1E 2D 30 
14569     36 27 20 07 
1456d     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
14571     80 80 83 94 
14575     9D A6 A0 A6 
14579     A9 AC AD AD 
1457d     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
14581     A2 A3 A3 96 
14585     96 98 9C B1 
14589     BD C3 C0 C0 
1458d     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
14591     F0 01 10 16 
14595     16 18 0E FC 
14599     ED DA D6 DA 
1459d     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
145a1     F2 F3 EC ED 
145a5     E3 E6 E6 E6 
145a9     F0 03 0E 27 
145ad     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
145b1     53 59 57 51 
145b5     2C 0D ED DC 
145b9     CF CF D4 DF 
145bd     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
145c1     FF 00 01 01 
145c5     04 10 20 40 
145c9     54 66 74 77 
145cd     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
145d1     4B 37 1E 0D 
145d5     FF F9 00 F6 
145d9     EA E0 E0 E6 
145dd     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
145e1     F0 F6 FC 10 
145e5     26 2D 3A 37 
145e9     26 18 07 EC 
145ed     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
145f1     B1 BC CC C9 
145f5     C9 C9 C6 C6 
145f9     C9 C6 C0 C5 
145fd     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
14601     0D 0E 09 04 
14605     01 01 01 04 
14609     04 F7 F6 F2 
1460d     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
14611     0A 10 0D 0D 
14615     03 00 FD F9 
14619     F3 FF 0A 14 
1461d     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
14621     27 20 18 04 
14625     E0 BC A0 96 
14629     90 A6 B3 CA 
1462d     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
14631     E3 ED ED E2 
14635     D6 CA C3 C0 
14639     C5 D0 D6 DC 
1463d     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
14641     B1 A6 9A 92 
14645     A2 B3 CF E6 
14649     F3 04 0E 14 
1464d     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
14651     1A 1A 1D 24 
14655     26 24 20 1A 
14659     0A FD FD F6 
1465d     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
14661     03 10 2D 43 
14665     5A 63 60 63 
14669     5A 53 4D 2D 
1466d     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
14671     A6 9A 92 83 
14675     80 80 80 80 
14679     80 80 80 80 
1467d     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
14681     B1 C5 C6 CA 
14685     D6 DF EA E2 
14689     E3 E0 DA DF 
1468d     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
14691     E6 D3 C5 BF 
14695     B3 B1 AC B1 
14699     BD CA E3 F2 
1469d     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
146a1     37 3A 37 24 
146a5     14 04 FC FC 
146a9     01 0D 1A 20 
146ad     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
146b1     10 00 ED DF 
146b5     DF DF F0 FD 
146b9     18 27 40 36 
146bd     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
146c1     1D 10 0E 0E 
146c5     09 0D 18 10 
146c9     16 21 2C 34 
146cd     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
146d1     49 4B 44 41 
146d5     41 37 3A 2D 
146d9     26 1A 0A 00 
146dd     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
146e1     F0 F6 FD 04 
146e5     13 04 FF FC 
146e9     F6 ED E8 E8 
146ed     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
146f1     FC F2 EC E2 
146f5     DA D3 CF C0 
146f9     BD A6 9D 94 
146fd     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
14701     CF E2 F2 FD 
14705     10 1A 18 20 
14709     2A 31 41 40 
1470d     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
14711     27 0D 04 FC 
14715     F6 ED EA E0 
14719     DF E6 E8 EA 
1471d     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
14721     0D 0E 10 0E 
14725     04 F3 ED DA 
14729     D9 E0 D9 E6 
1472d     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
14731     BD A0 86 80 
14735     80 80 92 B5 
14739     CC D4 E0 E2 
1473d     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
14741     04 04 07 04 
14745     04 FD F9 FC 
14749     FD 01 04 09 
1474d     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
14751     DF E2 EC F3 
14755     01 0A 0E 10 
14759     21 2A 2A 2A 
1475d     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
14761     37 41 49 41 
14765     31 16 03 F6 
14769     EA E2 E6 EA 
1476d     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
14771     B9 B5 B5 BC 
14775     BF BC B5 AC 
14779     9C 86 80 80 
1477d     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
14781     B5 B1 B1 BD 
14785     BC C3 BF C0 
14789     C3 C6 D4 DA 
1478d     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
14791     E2 DF DC E0 
14795     E2 E3 E8 F0 
14799     F2 F9 ED E8 
1479d     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
147a1     DA E0 E3 ED 
147a5     F0 F9 09 16 
147a9     2A 3D 3B 41 
147ad     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
147b1     14 0E 09 07 
147b5     13 1D 13 18 
147b9     10 01 01 03 
147bd     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
147c1     16 24 2D 37 
147c5     3B 3D 3D 41 
147c9     43 47 47 4B 
147cd     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
147d1     31 16 03 F0 
147d5     E0 DC E3 F7 
147d9     04 13 21 2D 
147dd     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
147e1     3A 30 1D 03 
147e5     F2 EC E0 E6 
147e9     E6 F0 F6 F6 
147ed     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
147f1     D0 CF C9 CC 
147f5     CC C9 C9 C6 
147f9     C0 C3 B9 C0 
147fd     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
14801     E3 F0 FF 01 
14805     0D 10 0D 07 
14809     00 F9 F6 FC 
1480d     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
14811     20 2D 40 41 
14815     41 40 34 2C 
14819     1D 14 10 0D 
1481d     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
14821     1A 10 00 F9 
14825     ED E6 E2 D4 
14829     CA BF B5 B7 
1482d     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
14831     CC CC C9 C9 
14835     C0 C3 BD B9 
14839     BC BF CF D3 
1483d     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
14841     E0 EC F0 F9 
14845     03 0D 14 1D 
14849     26 2A 1D 1A 
1484d     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
14851     FC FF 09 16 
14855     1E 1D 1D 1D 
14859     20 2C 30 31 
1485d     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
14861     0E FF FC F6 
14865     F2 F9 F9 FF 
14869     01 09 0A 01 
1486d     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
14871     9C 8F 89 86 
14875     80 80 80 80 
14879     84 96 9C AF 
1487d     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
14881     CF CF D0 D6 
14885     E8 EC F0 F2 
14889     F0 F2 DF C6 
1488d     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
14891     DA E2 EA EA 
14895     ED F2 F2 F2 
14899     F2 EA EC EC 
1489d     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
148a1     E2 DF DA D9 
148a5     DF E0 E6 E8 
148a9     F3 F6 01 01 
148ad     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
148b1     47 4B 47 3A 
148b5     2D 18 09 09 
148b9     0A 18 26 36 
148bd     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
148c1     4D 49 43 37 
148c5     3B 3A 37 37 
148c9     36 34 27 2A 
148cd     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
148d1     16 07 FF F6 
148d5     F3 F7 FD 07 
148d9     1A 30 36 31 
148dd     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
148e1     D9 D0 D4 DF 
148e5     ED FF 04 10 
148e9     0E 13 13 00 
148ed     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
148f1     F6 F6 F7 F7 
148f5     EA E0 D3 C6 
148f9     C0 BD C0 C6 
148fd     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
14901     E0 F2 FF 03 
14905     0A 0A 0D FF 
14909     FD E6 D9 DF 
1490d     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
14911     2C 36 36 31 
14915     31 20 1E 18 
14919     1A 1E 2A 27 
1491d     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
14921     03 F9 F7 F9 
14925     F7 01 09 1A 
14929     2A 10 01 F2 
1492d     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
14931     E6 D6 CF B5 
14935     A7 A6 A2 A7 
14939     B5 C3 C9 D4 
1493d     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
14941     E0 E2 E6 ED 
14945     F9 FF 09 09 
14949     0A 0A 01 FF 
1494d     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
14951     14 20 18 1D 
14955     13 1E 2D 3B 
14959     51 59 57 47 
1495d     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
14961     F2 F0 ED FF 
14965     01 0E 14 1E 
14969     1A 14 01 E8 
1496d     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
14971     80 80 80 80 
14975     80 80 80 80 
14979     80          | 	byte	$80[9]
1497a     8C 92 A2 AC 
1497e     B3 B5 BC C6 
14982     CF E3 E8 F2 
14986     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
1498a     AC B3 C5 D9 
1498e     F2 0A 1A 24 
14992     2C 2C 1D 14 
14996     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
1499a     E8 E2 E0 E0 
1499e     D6 D4 C6 C5 
149a2     BD B1 B9 BC 
149a6     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
149aa     F0 FF 03 18 
149ae     27 30 37 3B 
149b2     2C 21 1A 18 
149b6     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
149ba     3D 43 44 3D 
149be     30 2D 2D 31 
149c2     3A 40 4B 51 
149c6     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
149ca     44 41 41 40 
149ce     41 49 4B 44 
149d2     31 1D 0E 09 
149d6     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
149da     FC F3 D9 C5 
149de     BD AD AF B1 
149e2     C3 D6 ED 01 
149e6     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
149ea     1D 14 0E 07 
149ee     00 F9 F6 F0 
149f2     E3 D6 CC C6 
149f6     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
149fa     EC F9 FF FC 
149fe     F3 F3 FC 00 
14a02     07 07 09 09 
14a06     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
14a0a     E8 F3 F9 03 
14a0e     0E 14 1D 1D 
14a12     18 18 18 0E 
14a16     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
14a1a     07 09 0E 10 
14a1e     10 07 FC FC 
14a22     F7 FD 0D 18 
14a26     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
14a2a     2A 37 41 47 
14a2e     37 2C 0E F2 
14a32     E3 D3 CC D0 
14a36     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
14a3a     F2 EA E3 E6 
14a3e     E3 E3 E3 DA 
14a42     DC CA CA CC 
14a46     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
14a4a     D9 DC E2 F0 
14a4e     04 16 27 2C 
14a52     2D 31 43 47 
14a56     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
14a5a     0E FF E6 D9 
14a5e     D3 DA EC FF 
14a62     21 36 49 4F 
14a66     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
14a6a     1A 0D F3 D6 
14a6e     B7 A7 98 98 
14a72     98 92 86 89 
14a76     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
14a7a     80 80 80 80 
14a7e     8C 9C AC B9 
14a82     BF C5 C5 C5 
14a86     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
14a8a     EA F7 00 0E 
14a8e     0E 0E 00 F6 
14a92     EA E8 E8 EA 
14a96     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
14a9a     F9 FC ED E2 
14a9e     D3 CC C9 D0 
14aa2     DC F0 F3 F6 
14aa6     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
14aaa     1D 1E 1D 14 
14aae     03 FC F2 F6 
14ab2     F6 F9 01 0A 
14ab6     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
14aba     3D 40 43 47 
14abe     4B 51 4D 4B 
14ac2     43 37 36 2A 
14ac6     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
14aca     36 4B 63 7F 
14ace     7F 7F 7F 6A 
14ad2     4F 37 20 16 
14ad6     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
14ada     D4 D0 D0 D3 
14ade     DA E3 EC F6 
14ae2     FC F7 ED E8 
14ae6     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
14aea     EA EC EC E8 
14aee     ED F3 F2 F6 
14af2     F3 EC E3 E3 
14af6     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
14afa     CA C0 BD CA 
14afe     E0 F7 0D 1A 
14b02     18 18 18 14 
14b06     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
14b0a     16 26 34 34 
14b0e     31 2D 26 1E 
14b12     20 10 07 FC 
14b16     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
14b1a     CC CF CC CF 
14b1e     D4 E0 F6 04 
14b22     13 20 2D 34 
14b26     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
14b2a     6C 6A 51 3D 
14b2e     34 18 04 F0 
14b32     DF D0 D6 E3 
14b36     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
14b3a     00 F3 F0 EC 
14b3e     E8 EA E8 EA 
14b42     EA ED F0 F0 
14b46     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
14b4a     F2 F3 F6 F3 
14b4e     F2 F2 E8 EC 
14b52     ED F7 FF 01 
14b56     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
14b5a     FD 04 0A 1A 
14b5e     24 30 3B 37 
14b62     31 21 14 07 
14b66     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
14b6a     1A 24 27 18 
14b6e     03 E0 C0 9A 
14b72     84 80 80 80 
14b76     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
14b7a     89 94 A0 B1 
14b7e     BD BC AD A6 
14b82     9C 96 9A A0 
14b86     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
14b8a     EC FC FF 04 
14b8e     09 03 FC F2 
14b92     EA E3 DF D4 
14b96     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
14b9a     B1 AD B1 BD 
14b9e     D0 E6 F9 07 
14ba2     1A 20 14 16 
14ba6     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
14baa     24 20 1D 1A 
14bae     1E 20 1D 1A 
14bb2     1A 16 1A 14 
14bb6     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
14bba     FF 03 04 10 
14bbe     1A 20 30 3B 
14bc2     44 51 5E 63 
14bc6     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
14bca     60 5E 5A 49 
14bce     41 2D 27 2D 
14bd2     36 2D 1E 13 
14bd6     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
14bda     00 F9 00 FF 
14bde     00 04 04 0A 
14be2     0A 0A 04 04 
14be6     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
14bea     E3 DC D6 D3 
14bee     D3 C5 BF B1 
14bf2     B3 B5 B3 B9 
14bf6     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
14bfa     E6 F9 04 04 
14bfe     04 00 00 F7 
14c02     F2 F6 FC FD 
14c06     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
14c0a     4F 57 54 4B 
14c0e     2C 14 03 F6 
14c12     EC E8 E2 E2 
14c16     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
14c1a     00 FF FC F3 
14c1e     F6 F7 F9 FC 
14c22     00 FF 04 16 
14c26     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
14c2a     40 4B 4F 53 
14c2e     5E 5A 54 51 
14c32     4D 34 20 09 
14c36     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
14c3a     BD BF CA E0 
14c3e     ED 00 0E 13 
14c42     14 16 10 09 
14c46     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
14c4a     01 01 FF F0 
14c4e     EC EC F7 E6 
14c52     E2 DC D4 D0 
14c56     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
14c5a     F9 F9 FF 07 
14c5e     16 1E 2C 34 
14c62     34 30 36 30 
14c66     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
14c6a     09 FD F3 F0 
14c6e     E2 CA AC 98 
14c72     84 86 8C 9D 
14c76     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
14c7a     AD AC B1 B3 
14c7e     B7 BC BC C0 
14c82     CC D9 D9 E6 
14c86     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
14c8a     D9 CC BF AF 
14c8e     A6 9D 9C 9A 
14c92     9C A6 AC B9 
14c96     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
14c9a     EA DF D9 D6 
14c9e     DA DC DA DA 
14ca2     DC ED 01 07 
14ca6     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
14caa     4B 51 43 3D 
14cae     2C 27 1D 10 
14cb2     14 14 16 1A 
14cb6     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
14cba     27 27 27 27 
14cbe     24 24 24 2A 
14cc2     31 36 36 36 
14cc6     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
14cca     44 3D 3D 40 
14cce     47 47 47 47 
14cd2     41 3D 36 26 
14cd6     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
14cda     F7 F7 FF 0D 
14cde     20 27 2C 26 
14ce2     16 14 0E 03 
14ce6     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
14cea     F2 F2 F0 E8 
14cee     E2 CF B7 AD 
14cf2     A6 A3 9A 98 
14cf6     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
14cfa     CA DF F0 F9 
14cfe     01 0E 14 24 
14d02     2D 34 34 31 
14d06     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
14d0a     FF EC E6 DF 
14d0e     E2 E3 E3 E8 
14d12     EA FC 0A 18 
14d16     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
14d1a     00 FF FD 04 
14d1e     07 0A 14 1A 
14d22     2A 37 3B 41 
14d26     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
14d2a     34 36 2C 2D 
14d2e     21 1E 18 1A 
14d32     1E 26 26 21 
14d36     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
14d3a     F2 E8 E6 E6 
14d3e     E8 E8 F0 FF 
14d42     03 03 FF F9 
14d46     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
14d4a     F0 E8 E6 E0 
14d4e     E0 E6 E8 EA 
14d52     F0 F9 03 13 
14d56     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
14d5a     10 0D 0D 0D 
14d5e     04 00 FD FF 
14d62     FC FF 01 07 
14d66     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
14d6a     1A 18 0E 04 
14d6e     F0 D4 CA B9 
14d72     A6 90 80 80 
14d76     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
14d7a     AF B7 C5 CA 
14d7e     D6 E8 E8 EC 
14d82     F2 EA E6 E0 
14d86     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
14d8a     BD B5 B5 AD 
14d8e     B1 AC A7 A7 
14d92     A9 AD BC C5 
14d96     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
14d9a     AF C0 C6 D9 
14d9e     E0 EA FC FF 
14da2     04 16 16 1A 
14da6     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
14daa     0E 0E 13 14 
14dae     13 13 10 10 
14db2     10 16 16 16 
14db6     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
14dba     30 31 3D 44 
14dbe     51 60 64 64 
14dc2     54 43 37 2D 
14dc6     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
14dca     0D 09 0A 16 
14dce     21 30 3B 44 
14dd2     53 5D 6C 6E 
14dd6     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
14dda     0D F9 F0 EC 
14dde     EA E8 ED F7 
14de2     03 0E 14 1A 
14de6     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
14dea     09 FC E0 C9 
14dee     AD A2 A3 A2 
14df2     A6 B1 B5 C0 
14df6     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
14dfa     F2 F2 F6 F7 
14dfe     00 09 0A 0D 
14e02     0A 04 07 04 
14e06     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
14e0a     F3 F2 F3 ED 
14e0e     F2 EC EC F0 
14e12     F6 FC 01 00 
14e16     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
14e1a     FF 03 10 21 
14e1e     2D 2C 2C 31 
14e22     3B 49 4F 4D 
14e26     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
14e2a     54 4D 3B 31 
14e2e     18 0E 0D 04 
14e32     07 07 09 14 
14e36     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
14e3a     21 1E 18 16 
14e3e     14 13 01 EC 
14e42     D3 C3 BC AF 
14e46     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
14e4a     B5 C6 DF F6 
14e4e     03 16 13 16 
14e52     27 27 27 21 
14e56     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
14e5a     FC F3 FC 00 
14e5e     09 0E 16 1D 
14e62     1E 20 21 21 
14e66     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
14e6a     03 EC CF C0 
14e6e     BF BC C9 D0 
14e72     DC DF C6 B5 
14e76     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
14e7a     96 98 A6 AC 
14e7e     B7 C5 CA CC 
14e82     D0 D6 CC C6 
14e86     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
14e8a     B3 B5 B7 BC 
14e8e     C0 CA D0 E0 
14e92     E3 E3 E3 CF 
14e96     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
14e9a     AC BD D0 E2 
14e9e     DF E3 ED 04 
14ea2     14 21 27 2A 
14ea6     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
14eaa     2A 14 FF F2 
14eae     E2 D9 D0 D4 
14eb2     D6 DA E8 FF 
14eb6     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
14eba     66 76 77 7C 
14ebe     6E 4D 34 18 
14ec2     07 FF FF 04 
14ec6     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
14eca     26 31 40 44 
14ece     47 4D 4F 54 
14ed2     5D 63 64 60 
14ed6     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
14eda     34 1D 0A FD 
14ede     F3 F3 F3 F6 
14ee2     F6 F7 F9 FD 
14ee6     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
14eea     C5 B5 B1 B3 
14eee     BD CA D6 E3 
14ef2     E6 D3 CC CC 
14ef6     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
14efa     E0 E8 F6 04 
14efe     09 14 13 09 
14f02     FD F0 DF DF 
14f06     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
14f0a     FC 07 13 2A 
14f0e     31 3B 3B 3A 
14f12     26 13 F2 DA 
14f16     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
14f1a     E6 FC 01 FC 
14f1e     FF 0A 1A 3A 
14f22     47 4F 5A 5E 
14f26     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
14f2a     53 3D 2D 16 
14f2e     0A 01 FC FC 
14f32     03 09 20 31 
14f36     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
14f3a     51 43 31 18 
14f3e     F7 D9 C6 BF 
14f42     C3 D0 DA E8 
14f46     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
14f4a     DA DA E0 E8 
14f4e     E6 EA F0 F0 
14f52     EC F0 ED F2 
14f56     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
14f5a     04 10 1A 18 
14f5e     1A 20 21 26 
14f62     24 24 1E 1A 
14f66     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
14f6a     D9 D4 CF D3 
14f6e     DF EC F6 F0 
14f72     F0 E6 F0 EC 
14f76     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
14f7a     BC B7 B7 B5 
14f7e     AD A6 9A 94 
14f82     89 80 83 84 
14f86     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
14f8a     AD CA E0 F0 
14f8e     00 01 01 FC 
14f92     E6 C9 AF A0 
14f96     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
14f9a     C5 CA C9 CC 
14f9e     DC F0 FD 04 
14fa2     0A 0A 0E 13 
14fa6     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
14faa     26 2A 2A 2C 
14fae     1E 18 10 04 
14fb2     04 07 09 13 
14fb6     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
14fba     2D 30 16 03 
14fbe     F7 F2 ED F3 
14fc2     07 1D 37 4D 
14fc6     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
14fca     57 59 5A 59 
14fce     4D 40 34 27 
14fd2     26 21 2A 2D 
14fd6     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
14fda     30 21 1A 0E 
14fde     14 16 2A 34 
14fe2     37 3A 31 21 
14fe6     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
14fea     BC B9 B7 BC 
14fee     CA D0 C9 C0 
14ff2     B3 AF B9 BF 
14ff6     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
14ffa     ED F7 FC F9 
14ffe     F9 FC F3 F6 
15002     F3 F0 E0 D9 
15006     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
1500a     04 16 24 2A 
1500e     27 26 18 04 
15012     00 F6 F3 F9 
15016     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
1501a     26 1E 18 14 
1501e     18 1D 21 20 
15022     26 24 24 26 
15026     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
1502a     18 18 1D 21 
1502e     2C 2C 3A 43 
15032     43 44 51 53 
15036     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
1503a     27 0D F6 D9 
1503e     C5 B9 B7 BF 
15042     CF E2 EC EC 
15046     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
1504a     24 2C 36 34 
1504e     20 10 00 EC 
15052     EA DC D4 D6 
15056     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
1505a     E6 EC EA F2 
1505e     F6 F6 F9 F9 
15062     FF 00 0A 0E 
15066     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
1506a     0D 18 18 1E 
1506e     16 00 EC DC 
15072     D4 D0 D4 DA 
15076     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
1507a     8A 89 94 9A 
1507e     AC B1 C0 C9 
15082     CF D6 CC CF 
15086     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
1508a     D4 D6 D6 C9 
1508e     C6 B7 AC 9C 
15092     9A 8C 8C 8F 
15096     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
1509a     CA E2 E6 ED 
1509e     F7 00 0A 14 
150a2     16 0D 0A F9 
150a6     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
150aa     F6 FF 09 16 
150ae     1D 24 27 3A 
150b2     3D 40 49 49 
150b6     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
150ba     14 0D 10 13 
150be     14 1A 26 30 
150c2     3A 3A 36 2D 
150c6     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
150ca     36 36 36 2D 
150ce     30 27 2D 30 
150d2     26 24 24 27 
150d6     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
150da     3D 30 18 01 
150de     F0 E2 D9 D9 
150e2     DF E2 E8 F3 
150e6     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
150ea     26 2C 2A 16 
150ee     00 F3 E2 D6 
150f2     D9 D9 DC E0 
150f6     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
150fa     BD B5 B1 B3 
150fe     B3 B5 C5 D6 
15102     E0 F9 04 18 
15106     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
1510a     10 13 09 09 
1510e     01 FF FF F3 
15112     EC E8 E8 E8 
15116     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
1511a     09 16 2A 3D 
1511e     4B 5D 5A 5D 
15122     51 40 31 21 
15126     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
1512a     3A 47 4D 54 
1512e     54 54 47 3A 
15132     27 14 00 F3 
15136     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
1513a     16 21 20 16 
1513e     09 03 03 FD 
15142     F6 F0 F0 ED 
15146     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
1514a     FC F3 F2 EA 
1514e     E8 E2 E8 EA 
15152     ED F2 FD 03 
15156     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
1515a     13 10 0A 00 
1515e     FF F7 F3 F9 
15162     F7 FF 04 04 
15166     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
1516a     FF F9 ED EA 
1516e     E2 E6 E6 E3 
15172     E6 E8 E3 DF 
15176     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
1517a     80 80 80 80 
1517e     84 8C A3 B1 
15182     BF D6 E0 EC 
15186     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
1518a     D9 D3 C0 BD 
1518e     BD BF C3 C5 
15192     C6 CA CF D4 
15196     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
1519a     D3 D0 D3 D4 
1519e     D6 D9 D6 D9 
151a2     D9 D9 E2 ED 
151a6     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
151aa     16 26 31 37 
151ae     40 36 30 1E 
151b2     09 FC EC E6 
151b6     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
151ba     27 3A 4B 57 
151be     64 64 5A 4F 
151c2     47 3D 3A 3D 
151c6     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
151ca     60 59 51 43 
151ce     37 26 18 0E 
151d2     03 00 04 04 
151d6     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
151da     26 09 F0 DC 
151de     CC C5 CA D6 
151e2     E6 FD 04 13 
151e6     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
151ea     F6 E8 E6 DC 
151ee     DC DC DC ED 
151f2     F7 FC FC F6 
151f6     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
151fa     CC D0 E0 EC 
151fe     00 10 21 2D 
15202     2C 2D 24 16 
15206     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
1520a     C0 BD C0 D4 
1520e     E2 F2 F6 F3 
15212     F7 F9 F2 ED 
15216     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
1521a     18 26 31 37 
1521e     37 2D 27 21 
15222     21 24 2A 31 
15226     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
1522a     60 60 53 4B 
1522e     44 37 2D 2A 
15232     21 1E 1A 1E 
15236     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
1523a     49 47 41 36 
1523e     14 FD E6 D3 
15242     CC C5 CA D0 
15246     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
1524a     E6 E3 E6 E6 
1524e     E8 EA EC ED 
15252     F3 F6 F6 F6 
15256     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
1525a     00 00 00 FD 
1525e     F7 F0 F6 FD 
15262     09 16 24 34 
15266     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
1526a     18 13 04 FD 
1526e     EC E3 E2 E0 
15272     DF D0 B5 9A 
15276     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
1527a     80 80 80 94 
1527e     A2 AD B7 C5 
15282     C9 CF D6 DA 
15286     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
1528a     A9 AC B9 C9 
1528e     CF DF E2 E2 
15292     D9 CF CC CC 
15296     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
1529a     EC FF 0E 10 
1529e     13 13 0E 10 
152a2     0A 04 04 04 
152a6     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
152aa     F2 F0 E2 E0 
152ae     DC DA D9 DA 
152b2     DC D6 E0 F2 
152b6     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
152ba     51 5A 59 4B 
152be     40 40 37 3A 
152c2     3A 3B 44 4F 
152c6     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
152ca     34 31 2C 2D 
152ce     30 37 40 49 
152d2     51 57 57 57 
152d6     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
152da     0E F6 D9 C3 
152de     BD BC C5 D3 
152e2     DF E8 E8 E8 
152e6     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
152ea     CA C9 CA D4 
152ee     DA EC FF 04 
152f2     01 F7 ED E2 
152f6     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
152fa     F6 00 04 0D 
152fe     0A 09 01 01 
15302     03 0A 0A 0D 
15306     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
1530a     07 10 16 16 
1530e     13 0A F7 F2 
15312     ED E6 EA E6 
15316     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
1531a     00 04 0D 0A 
1531e     0D 0E 1A 26 
15322     36 47 54 5E 
15326     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
1532a     30 26 21 24 
1532e     26 2C 2C 21 
15332     21 24 2A 34 
15336     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
1533a     63 63 60 60 
1533e     60 54 41 27 
15342     0E FD F2 E3 
15346     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
1534a     B5 B9 BC B7 
1534e     B3 BD BF C9 
15352     C9 CC CA D4 
15356     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
1535a     18 16 0D 0E 
1535e     0E 13 1E 26 
15362     27 27 0E 00 
15366     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
1536a     E6 E3 E6 F7 
1536e     07 13 1A 18 
15372     13 00 EA D9 
15376     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
1537a     9D A0 A2 9A 
1537e     94 8C 86 8C 
15382     80 80 80 80 
15386     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
1538a     A7 C3 D4 E0 
1538e     E0 DF E0 E3 
15392     E3 E8 E8 E8 
15396     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
1539a     FC F7 F0 EA 
1539e     ED F6 00 0D 
153a2     14 1D 1E 1E 
153a6     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
153aa     FC FC FF 00 
153ae     FC FF FC FC 
153b2     FD FC 03 0A 
153b6     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
153ba     F6 F7 01 0D 
153be     14 1E 24 2D 
153c2     43 54 59 5A 
153c6     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
153ca     40 40 41 37 
153ce     3A 2D 27 20 
153d2     1D 1E 21 30 
153d6     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
153da     34 2C 1A 13 
153de     1D 1E 1D 10 
153e2     F6 DA CA BD 
153e6     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
153ea     B3 AD B3 B5 
153ee     BF C6 C3 BC 
153f2     BC BD D3 E8 
153f6     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
153fa     26 21 18 10 
153fe     04 FC FD F9 
15402     F0 E6 DF D6 
15406     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
1540a     13 14 0E 0A 
1540e     0A 0D 14 1E 
15412     26 30 2A 21 
15416     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
1541a     21 1A 16 13 
1541e     16 18 10 04 
15422     FF F3 EC E6 
15426     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
1542a     13 2D 43 54 
1542e     66 68 63 5E 
15432     63 66 71 64 
15436     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
1543a     2D 30 3B 41 
1543e     40 41 44 41 
15442     3D 31 21 09 
15446     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
1544a     F3 F0 EA DF 
1544e     D3 CA C9 C3 
15452     C5 C5 CA C6 
15456     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
1545a     CC D9 E6 F7 
1545e     07 09 0A 07 
15462     04 04 04 07 
15466     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
1546a     04 04 09 07 
1546e     F9 E8 DF E0 
15472     EA F9 FC FC 
15476     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
1547a     BD BC B3 A7 
1547e     A6 A0 9C 94 
15482     94 8C 8F 92 
15486     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
1548a     8C 80 80 80 
1548e     80 89 96 A9 
15492     BD C5 DC F3 
15496     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
1549a     2D 27 20 21 
1549e     1A 0E 07 F0 
154a2     D9 C6 B9 B9 
154a6     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
154aa     09 1A 27 2D 
154ae     2D 30 34 3D 
154b2     43 37 2C 1D 
154b6     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
154ba     18 16 0E 09 
154be     FD ED EC F2 
154c2     F2 F3 F3 F6 
154c6     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
154ca     3B 49 49 4B 
154ce     4D 54 54 54 
154d2     59 54 4F 54 
154d6     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
154da     1E 14 13 00 
154de     F3 EC E2 DC 
154e2     DF DF E8 ED 
154e6     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
154ea     F0 F9 F7 F2 
154ee     EA E6 E3 E3 
154f2     E8 E2 D3 CA 
154f6     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
154fa     B3 B7 C3 C5 
154fe     D6 E3 FD 09 
15502     16 1E 24 2D 
15506     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
1550a     F7 E3 DA DC 
1550e     DF EA FC 0A 
15512     0E 20 37 47 
15516     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
1551a     4D 49 40 34 
1551e     2C 1A 0A FC 
15522     F2 F2 F6 F9 
15526     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
1552a     03 09 0A 0D 
1552e     13 21 2C 2D 
15532     31 3B 43 4D 
15536     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
1553a     76 70 5E 4F 
1553e     47 41 41 36 
15542     26 13 0A 03 
15546     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
1554a     ED E3 E2 E8 
1554e     EA F6 FC F6 
15552     F3 F6 FC FC 
15556     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
1555a     F9 EC D9 B9 
1555e     A2 96 86 92 
15562     9C A9 BD D0 
15566     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
1556a     2C 3D 43 43 
1556e     41 40 40 3A 
15572     2C 20 07 F2 
15576     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
1557a     80 80 80 8C 
1557e     98 AC BC C0 
15582     C9 D3 D3 C9 
15586     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
1558a     9C 9D A7 B7 
1558e     C5 CF CC C6 
15592     BC BF C0 C3 
15596     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
1559a     CC D3 D9 D9 
1559e     DF E0 E3 ED 
155a2     F9 07 14 18 
155a6     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
155aa     0D 09 FD F9 
155ae     F9 F3 F9 03 
155b2     0A 0E 1A 27 
155b6     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
155ba     31 21 18 1A 
155be     1D 20 24 26 
155c2     26 26 26 21 
155c6     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
155ca     D4 D0 DA EC 
155ce     FF 0A 18 2D 
155d2     3B 54 66 77 
155d6     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
155da     64 4B 24 01 
155de     E2 C9 B7 B5 
155e2     B7 C3 C9 D0 
155e6     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
155ea     20 21 20 20 
155ee     1E 13 0A 00 
155f2     FC EC E3 E0 
155f6     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
155fa     CF C6 B9 B3 
155fe     B5 B3 B7 BC 
15602     C6 BF C9 D4 
15606     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
1560a     07 20 37 49 
1560e     53 4F 47 47 
15612     40 40 3A 31 
15616     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
1561a     01 00 FF 00 
1561e     01 04 10 20 
15622     2D 36 34 36 
15626     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
1562a     43 44 44 31 
1562e     2A 2D 24 0D 
15632     00 F9 F7 F7 
15636     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
1563a     1A 2C 00 00 
1563e     FC FF 02 04 
15642     05 07 07 09 
15646     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
1564a     08 07 06 06 
1564e     05 04 04 04 
15652     03 00 F4 EC 
15656     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
1565a     00 BF FF 00 
1565e     CF FF E0 FF 
15662     20 C0 FF 20 
15666     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
1566a     10 FF 50 00 
1566e     0F 20 07 18 
15672     10 17 10 FF 
15676     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
1567a     28 F0 FF 10 
1567e     F3 F1 FF 00 
15682     DF F8 F0 F3 
15686     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
1568a     DF 10 F7 00 
1568e     DF 1B 00 DF 
15692     20 EB FC 1F 
15696     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
1569a     08 EF 0F 14 
1569e     01 FF 10 03 
156a2     17 00 FF 30 
156a6     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
156aa     00 FB 0F 00 
156ae     EF F0 EF 00 
156b2     FF 00 FF 00 
156b6     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
156ba     E8 F7 00 EB 
156be     FB 02 F0 E0 
156c2     FF 10 FF 30 
156c6     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
156ca     FF 1B 08 0F 
156ce     20 FF 10 FF 
156d2     10 FF 17 20 
156d6     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
156da     F3 0E 00 EB 
156de     D0 DF 06 00 
156e2     E0 FF 00 DF 
156e6     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
156ea     F0 EF FF 20 
156ee     E1 FF 10 FF 
156f2     10 FF 00 FF 
156f6     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
156fa     0B 08 F7 09 
156fe     2E 00 EF 20 
15702     F3 FF 00 EB 
15706     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
1570a     0D 00 E7 FF 
1570e     10 FF 10 F7 
15712     07 20 00 EF 
15716     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
1571a     E5 EF F0 F7 
1571e     10 00 FB F8 
15722     F5 FD 06 00 
15726     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
1572a     08 FF 18 08 
1572e     07 18 00 F7 
15732     00 FF 09 12 
15736     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
1573a     FF 00 FF 08 
1573e     F9 E4 E5 F7 
15742     F4 E0 EF F0 
15746     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
1574a     00 FF 1F 00 
1574e     EF 20 07 00 
15752     FE F0 FF 00 
15756     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
1575a     FF 00 FF 00 
1575e     F7 0B 10 F0 
15762     FF 10 FB 00 
15766     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
1576a     0F 10 0F 04 
1576e     E8 FF 00 DF 
15772     FC F0 DF E4 
15776     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
1577a     F7 06 00 EF 
1577e     FE F4 FF 10 
15782     FF 07 08 07 
15786     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
1578a     0F E0 FF 20 
1578e     D7 1F 10 DF 
15792     20 FF 03 1F 
15796     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
1579a     00 EF FF F0 
1579e     EF 00 FF F1 
157a2     FF 00 FF 0F 
157a6     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
157aa     00 EF 00 F4 
157ae     EF FF F8 FF 
157b2     00 FE F7 FF 
157b6     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
157ba     00 FF 10 FF 
157be     00 06 03 17 
157c2     00 F7 08 05 
157c6     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
157ca     FF F0 F7 0F 
157ce     00 F7 0B 10 
157d2     F0 F7 08 FF 
157d6     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
157da     08 F0 FF 00 
157de     F7 FF 08 E5 
157e2     FF 00 EF 0F 
157e6     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
157ea     FF 00 12 00 
157ee     FF 00 FF 10 
157f2     04 FF 02 0D 
157f6     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
157fa     FF 08 FB 05 
157fe     10 08 F8 FB 
15802     FD 0B 00 EF 
15806     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
1580a     10 00 EF 0F 
1580e     00 FF 00 FF 
15812     07 00 EF 00 
15816     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
1581a     00 FF 00 FF 
1581e     00 EF 17 10 
15822     FF 10 F0 FF 
15826     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
1582a     04 08 F0 FF 
1582e     00 FD F0 FF 
15832     00 EF FF 00 
15836     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
1583a     00 FF 08 F8 
1583e     EB FF 00 FB 
15842     FB 0D 00 FF 
15846     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
1584a     07 04 03 0A 
1584e     F0 FF 08 F7 
15852     0F 08 FF 09 
15856     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
1585a     00 0F 00 FF 
1585e     00 F0 FF 00 
15862     F5 FF 00 0B 
15866     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
1586a     F0 FF 08 F1 
1586e     FF 00 FD FB 
15872     00 0B 00 F5 
15876     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
1587a     0A 04 F8 FF 
1587e     08 FB 07 00 
15882     FF 08 FF 0F 
15886     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
1588a     0F 00 FF 00 
1588e     FC F7 0C F2 
15892     FF 04 04 FF 
15896     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
1589a     FF 03 08 FC 
1589e     FA F2 FB FF 
158a2     F8 EF FF F0 
158a6     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
158aa     00 FB 07 02 
158ae     0F 00 0F 09 
158b2     16 00 17 08 
158b6     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
158ba     09 00 EF 0F 
158be     00 EF 0B 00 
158c2     FF 00 00 F7 
158c6     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
158ca     FE FF F8 FF 
158ce     00 F7 FF 00 
158d2     FB F9 FC FF 
158d6     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
158da     FF 03 0C F2 
158de     FF 09 08 FB 
158e2     15 00 FF 00 
158e6     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
158ea     FD 15 00 FF 
158ee     00 04 03 0A 
158f2     F4 FF 00 FF 
158f6     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
158fa     E5 FF 00 F7 
158fe     FF 00 FF 00 
15902     FF 0E 00 FF 
15906     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
1590a     14 00 FF 00 
1590e     F5 0F 00 FF 
15912     F3 FF FB 04 
15916     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
1591a     00 FE F7 06 
1591e     00 FF 09 00 
15922     07 00 ED FF 
15926     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
1592a     F6 FF 05 00 
1592e     FF 00 FD 04 
15932     F4 F9 F7 FD 
15936     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
1593a     F7 08 F0 FD 
1593e     FF 00 F3 0B 
15942     00 FF 07 00 
15946     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
1594a     08 04 FF 08 
1594e     F9 0C F7 12 
15952     F1 0F 00 FF 
15956     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
1595a     FF 02 F8 FF 
1595e     00 FD FF 00 
15962     FC FD 01 F8 
15966     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
1596a     F9 02 FA F7 
1596e     06 00 02 FB 
15972     04 07 04 FB 
15976     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
1597a     04 00 FF F8 
1597e     FF 07 00 FB 
15982     0E F2 FF 00 
15986     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
1598a     F4 FA FF 00 
1598e     FC FB 08 00 
15992     FF 03 00 FB 
15996     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
1599a     01 00 00 FB 
1599e     04 FD 04 00 
159a2     FB 04 FA FF 
159a6     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
159aa     00 FF 03 08 
159ae     01 0A 00 08 
159b2     01 00 F7 0B 
159b6     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
159ba     FF F5 FB FD 
159be     F8 FE FB FF 
159c2     FA F9 FF 05 
159c6     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
159ca     06 01 04 FF 
159ce     08 F8 FF 00 
159d2     F6 FF FB 02 
159d6     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
159da     00 EF 0D 00 
159de     F6 FF 00 FB 
159e2     0A F3 08 03 
159e6     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
159ea     FB FF 00 F3 
159ee     FF FA F4 F7 
159f2     FF 00 F6 F9 
159f6     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
159fa     FA FF 00 FD 
159fe     08 F9 05 03 
15a02     04 00 FF 04 
15a06     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
15a0a     F3 0E FB 08 
15a0e     01 03 06 06 
15a12     02 FD 04 F9 
15a16     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
15a1a     FE 00 F8 FB 
15a1e     04 00 F8 FF 
15a22     04 00 F9 FF 
15a26     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
15a2a     02 00 F9 FF 
15a2e     01 00 FD 05 
15a32     04 04 04 00 
15a36     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
15a3a     02 FF 0C FB 
15a3e     08 03 04 00 
15a42     FD FE F9 FA 
15a46     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
15a4a     F9 FF 00 F8 
15a4e     FE FD 00 FE 
15a52     FB FF 00 FA 
15a56     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
15a5a     00 FB 04 03 
15a5e     08 01 04 FF 
15a62     04 FC FF 02 
15a66     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
15a6a     02 00 00 03 
15a6e     04 00 FF 08 
15a72     00 FF 06 00 
15a76     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
15a7a     FD FF 00 01 
15a7e     00 FB 00 F5 
15a82     FD F7 F6 FA 
15a86     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
15a8a     04 02 04 00 
15a8e     FF 03 00 FF 
15a92     08 F7 FF 02 
15a96     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
15a9a     00 F9 FF FE 
15a9e     00 FF 01 FE 
15aa2     03 00 FB 06 
15aa6     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
15aaa     FF 05 01 00 
15aae     FF 00 FB FF 
15ab2     FF FC FF 00 
15ab6     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
15aba     FD 00 FB 00 
15abe     FF 00 FB 03 
15ac2     03 01 06 04 
15ac6     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
15aca     FB 08 01 00 
15ace     FF 00 FB FF 
15ad2     00 F7 08 F7 
15ad6     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
15ada     FB F9 FB FE 
15ade     FA FD FF 01 
15ae2     00 FF 02 00 
15ae6     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
15aea     00 FF 04 FD 
15aee     05 08 00 00 
15af2     02 00 FF 00 
15af6     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
15afa     FD 05 04 FD 
15afe     09 08 01 02 
15b02     03 00 FD FE 
15b06     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
15b0a     FF 00 F7 FE 
15b0e     FC F5 FA FD 
15b12     F8 FB FF FD 
15b16     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
15b1a     04 05 08 03 
15b1e     07 04 01 04 
15b22     02 00 FE FC 
15b26     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
15b2a     00 FF 00 FF 
15b2e     04 00 FF 02 
15b32     FF 02 FF 03 
15b36     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
15b3a     02 00 00 FF 
15b3e     00 FE FC FD 
15b42     FE FC FD FC 
15b46     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
15b4a     FA FF 02 FD 
15b4e     FE 03 04 00 
15b52     04 05 02 05 
15b56     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
15b5a     01 03 01 01 
15b5e     01 FF 00 FF 
15b62     02 FA FD 00 
15b66     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
15b6a     00 FE FF 04 
15b6e     02 FF 01 02 
15b72     00 FD FE FC 
15b76     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
15b7a     FE 00 00 FD 
15b7e     FF 00 01 00 
15b82     FF 02 00 FF 
15b86     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
15b8a     01 00 FF 00 
15b8e     03 00 FD FE 
15b92     FF FD FF 00 
15b96     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
15b9a     FF 02 FD FE 
15b9e     FE FE FE FD 
15ba2     FC FC FF 00 
15ba6     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
15baa     04 02 01 00 
15bae     FE FF FC FC 
15bb2     FD FF FD FE 
15bb6     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
15bba     01 00 00 FF 
15bbe     03 01 FF 03 
15bc2     02 FF 03 02 
15bc6     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
15bca     00 00 FD 00 
15bce     FF FC FA FC 
15bd2     FC FB FE FD 
15bd6     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
15bda     FE FF 00 03 
15bde     02 01 03 02 
15be2     01 00 01 00 
15be6     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
15bea     00 00 FD FF 
15bee     00 FF 00 FF 
15bf2     02 02 02 02 
15bf6     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
15bfa     00 FD FE FE 
15bfe     FF 00 FF 02 
15c02     01 01 00 FD 
15c06     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
15c0a     FB FD F8 FB 
15c0e     FD FD FF 00 
15c12     03 01 03 02 
15c16     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
15c1a     00 FF 04 01 
15c1e     03 04 00 FF 
15c22     00 FF 01 00 
15c26     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
15c2a     FD FE FF 01 
15c2e     02 00 FE FE 
15c32     FF FE FF 00 
15c36     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
15c3a     FF 01 FF FF 
15c3e     00 FE FF 01 
15c42     01 01 01 01 
15c46     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
15c4a     04 05 06 02 
15c4e     03 02 00 00 
15c52     00 FF 00 FE 
15c56     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
15c5a     FF 00 FE FD 
15c5e     FE FC FA FB 
15c62     FC FC FD FD 
15c66     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
15c6a     FE FF FF 01 
15c6e     01 02 02 02 
15c72     02 02 01 01 
15c76     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
15c7a     00 FF 00 FE 
15c7e     FF 00 FE FF 
15c82     FF FF FF FF 
15c86     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
15c8a     03 03 02 02 
15c8e     00 FF 00 FD 
15c92     FD FD FC FB 
15c96     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
15c9a     FC FD FE FF 
15c9e     00 00 02 03 
15ca2     01 03 00 FF 
15ca6     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
15caa     FE FE FE FE 
15cae     FD FE FF 00 
15cb2     FE FF 00 FF 
15cb6     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
15cba     03 03 02 02 
15cbe     02 02 01 01 
15cc2     02 00 FF 00 
15cc6     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
15cca     FF FE FD FD 
15cce     FC FB FB FC 
15cd2     FD FF 00 FE 
15cd6     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
15cda     01 02 01 01 
15cde     01 01 02 02 
15ce2     02 03 02 01 
15ce6     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
15cea     00 00 FF FE 
15cee     FF 00 01 01 
15cf2     02 00 01 00 
15cf6     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
15cfa     00 FE FE FE 
15cfe     FE FD FE FD 
15d02     FD FD FD FD 
15d06     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
15d0a     FE FF FF 01 
15d0e     02 02 03 02 
15d12     03 04 02 02 
15d16     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
15d1a     FE FE FE FF 
15d1e     00 FF 00 00 
15d22     FF 00 FD FD 
15d26     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
15d2a     FE FF FE FE 
15d2e     FD FD FD FF 
15d32     FE FF 00 FE 
15d36     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
15d3a     00 FF FE FE 
15d3e     FD FE FF FF 
15d42     01 01 01 02 
15d46     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
15d4a     06 04 03 02 
15d4e     00 FF FF FF 
15d52     FC FA FA F9 
15d56     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
15d5a     FA FB FB FB 
15d5e     FC FC FD FE 
15d62     FF 01 01 01 
15d66     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
15d6a     01 02 03 04 
15d6e     02 01 00 FF 
15d72     00 00 FF FF 
15d76     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
15d7a     FF 00 00 00 
15d7e     00 00 00 00 
15d82     00 FF 00 FF 
15d86     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
15d8a     FA FB FC FB 
15d8e     FC FC FD FD 
15d92     FE FF FF 01 
15d96     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
15d9a     FF 01 02 02 
15d9e     02 04 03 02 
15da2     02 02 02 02 
15da6     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
15daa     00 00 FE FE 
15dae     FE FE FE FD 
15db2     FD FE FE FF 
15db6     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
15dba     00 00 00 00 
15dbe     00 00 00 00 
15dc2     00          | 	byte	$00[9]
15dc3     FF FE FC FC 
15dc7     FC FC FD FE 
15dcb     FF FF 00 00 
15dcf     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
15dd3     01 01 01 00 
15dd7     00 00 01 01 
15ddb     01 01 00 00 
15ddf     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
15de3     00 FF FF FF 
15de7     FE FE FE FF 
15deb     FF FF 01 00 
15def     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
15df3     02 03 03 02 
15df7     01 01 01 01 
15dfb     01 01 01 00 
15dff     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
15e03     FF FF 00 00 
15e07     01 03 05 06 
15e0b     06 05 05 04 
15e0f     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
15e13     00 FE FE FD 
15e17     FC FC FB FA 
15e1b     FA FA FB FB 
15e1f     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
15e23     FE FF 01 01 
15e27     01 02 02 01 
15e2b     02 02 03 04 
15e2f     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
15e33     02 01 00 01 
15e37     01 01 00 00 
15e3b     00 FF FF FF 
15e3f     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
15e43     02 03 03 02 
15e47     02 00 00 FF 
15e4b     FF FF FF FF 
15e4f     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
15e53     FD FD FD FC 
15e57     FD FE FE FF 
15e5b     FE FE FF 01 
15e5f     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
15e63     04 04 04 02 
15e67     02 02 02 01 
15e6b     02 00 00 FE 
15e6f     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
15e73     FD FC FC FD 
15e77     FD FD FD FF 
15e7b     00 00 01 02 
15e7f     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
15e83     00 00 00 00 
15e87     00          | 	byte	$00[5]
15e88     01 00 00 FF 
15e8c     FE FE FE FD 
15e90     FE FF FF 00 
15e94     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
15e98     05 06 05 04 
15e9c     04 04 02 02 
15ea0     00 00 00 FF 
15ea4     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
15ea8     FD FE FE FE 
15eac     FE FE FF FF 
15eb0     FE FD FD FD 
15eb4     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
15eb8     FF FF FF FF 
15ebc     FF          | 	byte	$ff[5]
15ebd     00 00 FF FF 
15ec1     FF FE FE FE 
15ec5     FE FD FD FE 
15ec9     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
15ecd     01 02 02 02 
15ed1     02 02 03 02 
15ed5     02 01 01 00 
15ed9     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
15edd     FC FD FE FD 
15ee1     FE FD FD FE 
15ee5     FE FE FF FE 
15ee9     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
15eed     01 01 01 02 
15ef1     03 04 03 02 
15ef5     02 01 FE 00 
15ef9     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
15efd     01 0A 10 13 
15f01     16 0E 10 13 
15f05     16 1D 1E 14 
15f09     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
15f0d     04 14 13 1D 
15f11     1E 1D 1A 18 
15f15     16 13 13 13 
15f19     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
15f1d     E8 C5 8F 80 
15f21     80 80 80 80 
15f25     80 80 92 A7 
15f29     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
15f2d     EA FC 0A 18 
15f31     1D 13 FD E2 
15f35     C6 BF BC BD 
15f39     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
15f3d     AC AD B5 C6 
15f41     CA E3 F6 04 
15f45     09 13 18 14 
15f49     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
15f4d     F9 F6 F6 ED 
15f51     E6 ED E6 EC 
15f55     ED F9 03 10 
15f59     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
15f5d     40 43 41 47 
15f61     53 5D 5D 59 
15f65     3D 2A 18 09 
15f69     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
15f6d     0A 0E 24 31 
15f71     34 30 20 1D 
15f75     14 1A 0E 0D 
15f79     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
15f7d     20 30 36 3D 
15f81     47 44 34 26 
15f85     07 F9 F2 F7 
15f89     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
15f8d     1E 21 1E 14 
15f91     18 18 18 16 
15f95     0E 0E FF F3 
15f99     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
15f9d     B7 AD A9 A2 
15fa1     A3 A6 A7 A9 
15fa5     B3 C0 CF E3 
15fa9     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
15fad     FD 0A 14 1A 
15fb1     1A 1A 1A 10 
15fb5     0D 04 FC F0 
15fb9     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
15fbd     DF E8 FD 0E 
15fc1     21 3A 4D 68 
15fc5     76 7C 70 5A 
15fc9     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
15fcd     01 FC FD FC 
15fd1     F7 07 03 07 
15fd5     00 F6 E3 D4 
15fd9     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
15fdd     D4 DA E3 EA 
15fe1     F2 ED E8 E2 
15fe5     D6 CF CC B7 
15fe9     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
15fed     CA DF F3 FD 
15ff1     FD F3 F6 F6 
15ff5     F9 FF 03 03 
15ff9     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
15ffd     DF DC D9 DA 
16001     E2 E3 EC F7 
16005     03 0D 20 30 
16009     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
1600d     2A 18 07 FD 
16011     F2 ED E8 F0 
16015     F6 01 07 10 
16019     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
1601d     DF C5 B1 A0 
16021     89 89 92 9A 
16025     AF C6 CF E8 
16029     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
1602d     D6 D0 C6 BF 
16031     C3 BD CA C9 
16035     CA CC C6 C0 
16039     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
1603d     A7 B7 C0 CF 
16041     DF ED 03 10 
16045     14 09 0A 03 
16049     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
1604d     01 F0 EC E6 
16051     E2 E2 E6 EA 
16055     F6 F7 03 13 
16059     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
1605d     74 74 71 63 
16061     44 31 18 07 
16065     03 EC EC EC 
16069     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
1606d     37 41 36 2A 
16071     18 00 F6 F3 
16075     F6 F9 FD 04 
16079     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
1607d     40 44 43 31 
16081     27 24 21 24 
16085     21 26 2C 3A 
16089     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
1608d     4D 36 20 01 
16091     E2 D0 C0 BD 
16095     B9 C3 D0 D4 
16099     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
1609d     BD BF C0 C5 
160a1     C5 D0 D9 D3 
160a5     E0 E3 E6 EC 
160a9     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
160ad     E6 ED F9 04 
160b1     0E 07 07 FF 
160b5     F9 EC E0 D9 
160b9     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
160bd     00 14 30 4D 
160c1     64 71 76 5E 
160c5     51 36 27 24 
160c9     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
160cd     14 10 13 0D 
160d1     0D 09 00 F6 
160d5     E8 CA BC B5 
160d9     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
160dd     E8 F7 00 07 
160e1     FF F9 ED D4 
160e5     C5 AF AD AF 
160e9     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
160ed     00 00 FD F6 
160f1     F0 F2 EC E8 
160f5     E3 DC D9 D4 
160f9     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
160fd     D3 C9 C0 C3 
16101     CF E8 FC 13 
16105     21 3A 3A 3D 
16109     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
1610d     13 FC E0 CC 
16111     C9 CA D6 E8 
16115     F2 04 09 00 
16119     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
1611d     E6 F0 F6 F6 
16121     ED E3 E8 E6 
16125     EC EC E3 D0 
16129     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
1612d     9D AC A9 AD 
16131     B1 B1 B7 C5 
16135     C5 BF B7 AC 
16139     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
1613d     90 A3 BF DA 
16141     F3 FC FF 00 
16145     09 10 18 24 
16149     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
1614d     0E FF F9 F0 
16151     F0 F2 E2 E2 
16155     E3 F0 FF 1A 
16159     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
1615d     43 49 49 44 
16161     2D 20 07 FC 
16165     F9 FC 0A 18 
16169     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
1616d     09 00 ED E3 
16171     E2 E8 EA FC 
16175     01 14 20 27 
16179     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
1617d     1E 13 0D 0E 
16181     20 3B 49 63 
16185     63 63 5A 59 
16189     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
1618d     0A EA CF BD 
16191     B5 AF B1 BC 
16195     C0 C3 C0 C0 
16199     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
1619d     CF C9 CA CF 
161a1     D9 D6 DF E0 
161a5     DF E0 E0 DC 
161a9     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
161ad     ED FD FC F3 
161b1     F6 F2 F6 FD 
161b5     FD FF F0 E8 
161b9     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
161bd     09 1A 36 3A 
161c1     3D 3A 31 31 
161c5     27 2C 2D 37 
161c9     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
161cd     2C 21 16 F9 
161d1     E2 D0 CC C9 
161d5     CF DF E6 EC 
161d9     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
161dd     F0 FD 00 01 
161e1     EC DC C9 BC 
161e5     BF BF D3 E0 
161e9     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
161ed     D9 D4 D0 DA 
161f1     DC EA EC ED 
161f5     F0 ED DA D3 
161f9     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
161fd     BF C3 D6 E2 
16201     F6 F7 FC 03 
16205     03 0A 16 20 
16209     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
1620d     E2 D6 D4 D4 
16211     E2 EC FD 01 
16215     FF FF FF FD 
16219     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
1621d     21 27 1E 07 
16221     F2 DA CC CA 
16225     C0 C0 BC A7 
16229     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
1622d     90 9C 9D A6 
16231     B1 BF C9 BD 
16235     AC 94 89 80 
16239     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
1623d     B3 C6 CC D6 
16241     F0 F2 00 13 
16245     24 31 37 40 
16249     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
1624d     FC E3 DF D3 
16251     D0 D0 DF EA 
16255     01 14 26 3A 
16259     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
1625d     31 36 2C 1D 
16261     0A 09 04 09 
16265     14 0E 09 FD 
16269     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
1626d     E0 E3 F2 04 
16271     16 20 31 37 
16275     36 37 37 37 
16279     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
1627d     26 2A 36 40 
16281     4D 54 5A 57 
16285     4B 44 49 43 
16289     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
1628d     CC B3 A7 A6 
16291     A7 A9 A9 AD 
16295     B7 C6 D3 CA 
16299     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
1629d     EA E6 E6 DA 
162a1     DA DA DA E0 
162a5     E2 DC D4 D4 
162a9     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
162ad     EC F0 F0 F9 
162b1     01 01 03 FC 
162b5     ED E6 E8 E6 
162b9     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
162bd     27 2D 26 1E 
162c1     21 1E 2A 34 
162c5     43 4B 54 4F 
162c9     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
162cd     E0 CF CC C9 
162d1     C9 CA DC EA 
162d5     FF 14 26 2D 
162d9     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
162dd     21 07 F7 ED 
162e1     D4 D3 CF CA 
162e5     CA C0 AF A6 
162e9     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
162ed     E0 F2 FD 09 
162f1     07 F6 E3 D4 
162f5     BF BD BC BF 
162f9     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
162fd     C6 C9 CC D6 
16301     E3 EA F6 01 
16305     10 1E 21 1E 
16309     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
1630d     EA ED F6 F6 
16311     EA EA E8 EC 
16315     F2 F7 FF 0A 
16319     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
1631d     37 27 10 F9 
16321     E2 D9 C9 AC 
16325     94 83 80 80 
16329     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
1632d     98 92 98 A0 
16331     A0 96 90 92 
16335     83 86 8A 98 
16339     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
1633d     DA F0 FF 16 
16341     26 36 43 47 
16345     49 40 27 0A 
16349     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
1634d     D9 E3 E2 E8 
16351     F3 01 0E 1D 
16355     16 16 0E 13 
16359     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
1635d     27 1E 18 07 
16361     FC F9 EC E8 
16365     CC CF C9 CF 
16369     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
1636d     27 3A 4B 51 
16371     53 49 47 34 
16375     34 27 2C 2C 
16379     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
1637d     26 30 40 54 
16381     64 6A 71 6A 
16385     5A 40 24 04 
16389     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
1638d     B1 AF A6 A6 
16391     A7 A6 A6 A9 
16395     B5 BD CC DF 
16399     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
1639d     E8 E0 E3 E6 
163a1     F2 F0 EA EC 
163a5     E2 E0 E2 E2 
163a9     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
163ad     E2 F2 F9 F9 
163b1     FD FD FF 00 
163b5     01 0A 13 13 
163b9     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
163bd     13 1D 2C 3D 
163c1     47 5A 59 4D 
163c5     37 20 0D F7 
163c9     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
163cd     E2 E3 E2 ED 
163d1     FD 03 16 2A 
163d5     36 4B 57 6A 
163d9     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
163dd     14 EA D0 BC 
163e1     AC 98 8F 8F 
163e5     9C AC BF D6 
163e9     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
163ed     FF FF F6 EA 
163f1     DF D4 C5 C9 
163f5     C5 B7 B7 AF 
163f9     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
163fd     BF CF DF F2 
16401     FC 14 14 24 
16405     27 27 1E 1A 
16409     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
1640d     DF CF D0 D0 
16411     D6 E2 F6 03 
16415     14 2C 41 4D 
16419     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
1641d     18 FC D3 B1 
16421     94 80 80 80 
16425     80 80 80 80 
16429     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1642d     89 98 9D A2 
16431     A2 A2 A3 AD 
16435     AF B3 B9 C3 
16439     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
1643d     10 1E 1D 20 
16441     26 1D 10 0A 
16445     00 F7 F2 ED 
16449     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
1644d     01 F7 F7 F0 
16451     F3 F9 00 04 
16455     07 13 13 1D 
16459     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
1645d     ED DC D4 BF 
16461     B9 B7 BC C9 
16465     DF F3 00 1D 
16469     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
1646d     60 63 53 43 
16471     30 21 1D 18 
16475     1D 1D 1E 20 
16479     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
1647d     60 6C 6C 6A 
16481     60 53 43 24 
16485     09 ED DC CF 
16489     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
1648d     90 94 96 A2 
16491     B3 C5 D6 E2 
16495     F0 F9 FD FD 
16499     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
1649d     F9 F9 FC F0 
164a1     E2 CC BC B3 
164a5     B1 B7 C6 CF 
164a9     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
164ad     04 0E 18 18 
164b1     10 04 09 FC 
164b5     F9 FC 04 0D 
164b9     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
164bd     31 30 27 20 
164c1     14 10 04 01 
164c5     FD F3 F7 F7 
164c9     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
164cd     01 0D 1A 2D 
164d1     4B 51 54 49 
164d5     41 3A 3B 3B 
164d9     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
164dd     0A F3 E2 D0 
164e1     CA C3 C5 C5 
164e5     D3 D9 E3 E6 
164e9     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
164ed     E2 CC BD AD 
164f1     A0 A6 A6 A3 
164f5     A6 A6 A6 A9 
164f9     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
164fd     FD 03 0D 1D 
16501     26 36 3B 2D 
16505     1A 01 E6 C9 
16509     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
1650d     DA EC 03 18 
16511     2D 3D 4F 49 
16515     49 43 3A 36 
16519     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
1651d     F7 DA B5 80 
16521     80 80 80 80 
16525     80 80 80 80 
16529     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
1652d     AF B7 B7 B9 
16531     B3 B5 B7 CA 
16535     D9 E8 F3 F3 
16539     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
1653d     09 04 0D 0A 
16541     0D 0E 04 09 
16545     09 0A 03 03 
16549     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
1654d     D4 E6 F6 01 
16551     09 FC F3 F0 
16555     F6 F9 00 FF 
16559     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
1655d     B9 BF C5 DA 
16561     E8 FF 18 2D 
16565     41 57 57 57 
16569     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
1656d     1A 10 0E 10 
16571     14 21 21 20 
16575     1E 1E 26 3A 
16579     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
1657d     44 49 4F 5E 
16581     6A 68 4B 1D 
16585     F0 B3 9A 89 
16589     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
1658d     AD C5 DA F2 
16591     F2 F7 FD 00 
16595     0E 18 1D 16 
16599     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
1659d     D6 BD AF A3 
165a1     A7 B3 C3 DA 
165a5     E6 E3 DF EC 
165a9     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
165ad     16 0D FF E8 
165b1     E3 EC F3 07 
165b5     0E 0E 13 16 
165b9     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
165bd     0E 0E 13 18 
165c1     21 24 21 20 
165c5     20 20 21 21 
165c9     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
165cd     18 1A 1E 14 
165d1     09 10 18 2D 
165d5     41 49 44 36 
165d9     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
165dd     0A 0D 1A 27 
165e1     27 26 1E 10 
165e5     00 F6 E6 D0 
165e9     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
165ed     A7 A3 A0 A2 
165f1     A2 A2 A6 A6 
165f5     A7 AF B7 D4 
165f9     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
165fd     09 1A 1E 20 
16601     1D 0A F6 E2 
16605     D3 D4 DC DF 
16609     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
1660d     1D 2D 2A 30 
16611     27 2C 27 26 
16615     26 16 14 0E 
16619     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
1661d     C3 A9 92 80 
16621     80 80 80 80 
16625     80 80 80 8F 
16629     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
1662d     C9 B9 B9 B3 
16631     B7 B5 B5 BD 
16635     C5 D3 E2 F6 
16639     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
1663d     10 14 21 21 
16641     24 1A 18 0A 
16645     04 F6 E8 DA 
16649     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
1664d     D9 D3 CF C3 
16651     C3 CF DA EA 
16655     ED F0 F2 DC 
16659     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
1665d     F6 01 14 21 
16661     30 36 36 2D 
16665     26 20 1E 20 
16669     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
1666d     3B 36 2D 26 
16671     21 16 0E 0D 
16675     13 18 20 21 
16679     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
1667d     47 4F 53 51 
16681     49 2C 10 00 
16685     E6 D0 BF B1 
16689     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
1668d     E8 F0 F7 04 
16691     07 14 18 0D 
16695     09 F7 ED E0 
16699     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
1669d     CA CC D6 DC 
166a1     E3 E3 E3 E3 
166a5     DC E3 ED FC 
166a9     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
166ad     F3 F0 F9 F3 
166b1     F6 F3 F3 F3 
166b5     F6 F6 F7 FC 
166b9     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
166bd     43 44 4D 54 
166c1     54 51 4B 3D 
166c5     2D 16 03 ED 
166c9     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
166cd     F3 F9 04 14 
166d1     27 3B 40 40 
166d5     41 2C 21 18 
166d9     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
166dd     27 27 2C 30 
166e1     34 2C 2D 21 
166e5     18 07 F7 E2 
166e9     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
166ed     BD BF C0 BC 
166f1     B7 AF B5 B9 
166f5     C0 C9 C6 CA 
166f9     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
166fd     F0 03 0D 0A 
16701     0D 0D 10 14 
16705     10 09 01 F9 
16709     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
1670d     F7 00 FF 0E 
16711     10 16 18 0E 
16715     0E 03 FF F3 
16719     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
1671d     C0 BC C6 CA 
16721     C0 B3 9C 8F 
16725     8A 96 9C B3 
16729     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
1672d     9C A2 AD B5 
16731     BF C0 D3 D9 
16735     E8 EC FD 03 
16739     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
1673d     21 21 24 26 
16741     20 13 07 FD 
16745     ED D0 BC A9 
16749     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
1674d     9C 9A A7 B7 
16751     C6 E3 F0 F3 
16755     F2 F2 FD 01 
16759     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
1675d     09 07 07 04 
16761     09 0E 16 20 
16765     2D 34 43 49 
16769     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
1676d     27 20 14 0A 
16771     01 FC F9 F9 
16775     F9 00 07 07 
16779     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
1677d     41 49 3B 3A 
16781     3B 3A 40 44 
16785     44 37 20 09 
16789     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
1678d     D9 DF DF E6 
16791     E3 EC EC ED 
16795     ED F6 F6 FC 
16799     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
1679d     ED E3 DA D4 
167a1     D0 CC CA CA 
167a5     D6 E6 EC F6 
167a9     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
167ad     E3 ED F2 F6 
167b1     F6 EC F0 F2 
167b5     FF 10 21 34 
167b9     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
167bd     60 60 5A 51 
167c1     43 34 24 1D 
167c5     04 F7 E6 DC 
167c9     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
167cd     F3 00 0D 18 
167d1     1A 21 1A 16 
167d5     10 14 20 2A 
167d9     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
167dd     20 1E 1E 20 
167e1     2A 2C 30 37 
167e5     37 3A 36 2C 
167e9     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
167ed     CA C3 B7 AC 
167f1     9A 92 8C 8A 
167f5     92 A0 AF BD 
167f9     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
167fd     18 1E 21 24 
16801     30 30 26 18 
16805     04 F3 E0 D6 
16809     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
1680d     E3 EA EA ED 
16811     F6 F6 FD FD 
16815     FD FF 01 03 
16819     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
1681d     E8 E6 E2 E3 
16821     E2 DF D9 CA 
16825     C0 B9 A9 96 
16829     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
1682d     AD B9 BF C6 
16831     C9 D6 D6 E8 
16835     F0 F0 FC 00 
16839     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
1683d     1A 1D 18 0E 
16841     FD F6 E3 D6 
16845     BF AC 9D 8F 
16849     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
1684d     B1 B9 C9 DF 
16851     E8 EA E3 E6 
16855     E8 E8 F0 F9 
16859     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
1685d     14 16 1A 1D 
16861     20 21 27 34 
16865     43 40 43 36 
16869     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
1686d     09 01 F9 ED 
16871     E2 DF D0 CF 
16875     DA E3 F7 09 
16879     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
1687d     5A 5A 5E 5D 
16881     53 54 51 49 
16885     3B 3A 26 1A 
16889     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
1688d     DC D6 DC E3 
16891     EC EA EA F2 
16895     F0 FC 03 07 
16899     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
1689d     D4 D0 CA CA 
168a1     CC CC D4 E2 
168a5     E3 D4 CF C9 
168a9     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
168ad     E8 FC 03 13 
168b1     1E 21 2A 26 
168b5     30 2D 30 36 
168b9     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
168bd     43 40 3A 36 
168c1     36 2A 1D 04 
168c5     F0 E2 CC C9 
168c9     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
168cd     F7 FC 0A 0E 
168d1     0D 0E 0D 04 
168d5     09 0A 0A 0A 
168d9     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
168dd     3B 41 44 44 
168e1     49 4B 4D 51 
168e5     4F 41 36 2A 
168e9     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
168ed     C9 B1 9D 98 
168f1     8C 8F 98 A7 
168f5     B7 C3 D3 DA 
168f9     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
168fd     10 07 00 F2 
16901     F2 EC F3 F7 
16905     F9 F9 F3 F0 
16909     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
1690d     C9 CF E0 E6 
16911     F6 00 04 0A 
16915     14 14 16 0A 
16919     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
1691d     D4 D9 DA E6 
16921     EC F6 03 0D 
16925     04 F7 D4 B1 
16929     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
1692d     90 AD C6 E0 
16931     E6 ED ED F2 
16935     F6 FD 03 09 
16939     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
1693d     EC DF D4 D3 
16941     D6 D3 CC C3 
16945     BC AF AF B5 
16949     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
1694d     C9 CA CF D0 
16951     CA CC C9 C9 
16955     CF DA F3 01 
16959     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
1695d     1D 14 13 13 
16961     13 1E 1D 18 
16965     14 0A 0D 04 
16969     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
1696d     00 E3 CF BD 
16971     BC C9 DC FF 
16975     18 31 4B 66 
16979     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
1697d     31 18 0E 09 
16981     10 1D 2D 40 
16985     43 44 4F 51 
16989     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
1698d     01 E6 D3 C5 
16991     C5 CF DC E8 
16995     EC F6 F3 EA 
16999     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
1699d     DC E6 EC EA 
169a1     E0 E0 DF D6 
169a5     D0 D0 C6 C6 
169a9     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
169ad     04 16 18 1D 
169b1     1E 21 24 27 
169b5     2D 30 37 3B 
169b9     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
169bd     34 2C 1A 0A 
169c1     01 F0 E0 D0 
169c5     CC D4 E0 F2 
169c9     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
169cd     16 16 13 13 
169d1     00 ED DF D4 
169d5     DC F2 0A 2A 
169d9     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
169dd     6C 6A 5A 4F 
169e1     37 2C 1D 14 
169e5     0D 0E 0A 0D 
169e9     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
169ed     F7 DF C0 B5 
169f1     A7 A9 AF BF 
169f5     CC DC ED F2 
169f9     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
169fd     B3 B7 BF D6 
16a01     ED FF 09 07 
16a05     00 F9 F3 F6 
16a09     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
16a0d     F0 F3 F6 F6 
16a11     F6 F2 F2 F2 
16a15     ED F2 F6 ED 
16a19     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
16a1d     FF 0E 1A 24 
16a21     30 24 14 01 
16a25     E3 CA A6 90 
16a29     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
16a2d     B1 BF CC D9 
16a31     EA F7 00 04 
16a35     0D 09 F3 E3 
16a39     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
16a3d     BF CA D9 DF 
16a41     E2 DF CC C3 
16a45     BC C0 C6 D9 
16a49     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
16a4d     DA D4 C6 BC 
16a51     B5 B9 CA DF 
16a55     EC 00 03 01 
16a59     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
16a5d     13 09 0A 03 
16a61     FD F7 F6 F9 
16a65     FC FF 04 0A 
16a69     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
16a6d     D6 D6 DF F2 
16a71     0D 27 44 5A 
16a75     66 59 4D 34 
16a79     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
16a7d     FC 04 16 31 
16a81     40 49 57 5E 
16a85     74 77 77 68 
16a89     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
16a8d     EC D3 C3 AC 
16a91     AD B3 BD CC 
16a95     DA E6 EA EA 
16a99     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
16a9d     F0 F6 F9 ED 
16aa1     EC E6 E8 E2 
16aa5     D9 DA D6 D9 
16aa9     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
16aad     0D 14 26 2A 
16ab1     34 37 3A 3D 
16ab5     3D 3D 36 27 
16ab9     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
16abd     DC DA DC DF 
16ac1     E0 D6 DF EA 
16ac5     FC 07 1A 2A 
16ac9     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
16acd     10 FD E2 DA 
16ad1     D9 DA F6 0A 
16ad5     21 3B 47 49 
16ad9     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
16add     3A 34 34 2D 
16ae1     2A 21 16 0D 
16ae5     0A 0A 0E 1D 
16ae9     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
16aed     04 F3 DF CC 
16af1     C6 C9 D4 CF 
16af5     C6 BD BF AF 
16af9     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
16afd     DC F2 FC FF 
16b01     FD FD FD 03 
16b05     0D 0A 0A 0A 
16b09     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
16b0d     D3 C3 C0 BC 
16b11     C9 D9 E8 F9 
16b15     F9 FC FC F9 
16b19     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
16b1d     30 2C 18 00 
16b21     F0 D9 CC C6 
16b25     C5 C5 CA C5 
16b29     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
16b2d     D6 EA FC 07 
16b31     03 FF F7 EC 
16b35     DA CA B7 A9 
16b39     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
16b3d     B7 C6 C3 C0 
16b41     C6 CA D9 F0 
16b45     F9 00 07 04 
16b49     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
16b4d     CA CF CF CF 
16b51     DA DA E2 E2 
16b55     DF E0 DF DF 
16b59     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
16b5d     F6 F9 03 04 
16b61     09 0A FF F3 
16b65     F0 F0 F0 F6 
16b69     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
16b6d     0E 1A 26 37 
16b71     3B 3B 27 1E 
16b75     1A 09 09 0A 
16b79     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
16b7d     31 40 49 59 
16b81     60 6E 71 6A 
16b85     59 47 37 2A 
16b89     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
16b8d     CA B7 B1 A9 
16b91     BD D9 EC FD 
16b95     FD FD FD 00 
16b99     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
16b9d     F6 EA DF D9 
16ba1     DC DC DA DC 
16ba5     DF EA F9 FF 
16ba9     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
16bad     2D 30 34 36 
16bb1     3A 37 34 2A 
16bb5     13 FD EA CA 
16bb9     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
16bbd     B9 CA D6 E6 
16bc1     00 14 24 40 
16bc5     57 5D 44 2D 
16bc9     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
16bcd     FC FD FD 01 
16bd1     09 10 18 1E 
16bd5     1D 21 27 2C 
16bd9     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
16bdd     3A 3A 30 21 
16be1     16 0E 0A 0D 
16be5     0E 20 1E 20 
16be9     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
16bed     0E 04 FD EC 
16bf1     C9 B9 A2 A3 
16bf5     A3 B5 C9 DC 
16bf9     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
16bfd     F3 F7 F7 FD 
16c01     03 FF 00 FC 
16c05     FC F9 F2 ED 
16c09     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
16c0d     C3 C9 D0 E0 
16c11     E6 F0 F6 F6 
16c15     00 0A 18 27 
16c19     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
16c1d     E6 DA D3 CF 
16c21     CF D0 D3 E3 
16c25     F0 FC FD FD 
16c29     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
16c2d     F7 F9 F7 ED 
16c31     E2 D0 BD AF 
16c35     98 90 8C 89 
16c39     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
16c3d     CA D9 E6 F2 
16c41     FD 04 10 0D 
16c45     F6 E6 D4 CC 
16c49     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
16c4d     D6 D0 CA BD 
16c51     BD B1 AD AF 
16c55     B3 C0 CC E3 
16c59     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
16c5d     14 14 0D 04 
16c61     00 F6 F6 F3 
16c65     F6 F7 F9 00 
16c69     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
16c6d     37 3B 31 24 
16c71     13 07 0D 10 
16c75     1A 21 21 24 
16c79     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
16c7d     49 4B 49 41 
16c81     36 30 26 13 
16c85     0A 01 FC FC 
16c89     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
16c8d     F3 F9 ED F3 
16c91     FC FF 03 03 
16c95     04 07 07 00 
16c99     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
16c9d     D9 E6 F0 FC 
16ca1     01 01 07 09 
16ca5     0D 13 18 18 
16ca9     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
16cad     20 20 18 0D 
16cb1     FD ED D6 C3 
16cb5     AD A3 9C A3 
16cb9     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
16cbd     13 24 3B 4D 
16cc1     59 59 51 43 
16cc5     31 21 1D 18 
16cc9     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
16ccd     FD FF 00 07 
16cd1     16 18 1E 20 
16cd5     2A 2A 2D 30 
16cd9     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
16cdd     18 10 04 04 
16ce1     04 07 0A 13 
16ce5     14 16 0E 07 
16ce9     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
16ced     10 0E 01 F9 
16cf1     FF FF FD FD 
16cf5     FF FF F9 F3 
16cf9     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
16cfd     E0 D9 DA DA 
16d01     E3 EC F3 F3 
16d05     F6 ED E8 E0 
16d09     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
16d0d     DA E3 ED FD 
16d11     FD FF 03 04 
16d15     0D 00 F6 E6 
16d19     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
16d1d     D6 E8 F2 FF 
16d21     07 14 24 30 
16d25     3A 31 24 10 
16d29     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
16d2d     D0 B7 A9 9A 
16d31     90 84 80 89 
16d35     92 A2 AD C3 
16d39     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
16d3d     F3 F3 FC EA 
16d41     E6 E0 D3 C9 
16d45     CC CC D3 D4 
16d49     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
16d4d     94 9A A0 AC 
16d51     B3 C5 D3 E6 
16d55     FC 03 16 14 
16d59     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
16d5d     FD ED DF D6 
16d61     D6 DC ED FC 
16d65     0D 16 1D 2A 
16d69     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
16d6d     16 0A 0E 16 
16d71     26 2C 37 37 
16d75     2A 27 24 27 
16d79     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
16d7d     03 00 F9 FF 
16d81     01 09 0E 14 
16d85     1D 21 27 27 
16d89     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
16d8d     20 1D 14 0D 
16d91     01 F9 F2 DF 
16d95     D9 D4 D4 DF 
16d99     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
16d9d     1A 16 0D 00 
16da1     FF 00 07 09 
16da5     0D 0D 07 04 
16da9     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
16dad     E3 CF C0 B1 
16db1     A7 A2 A9 B1 
16db5     C0 E0 04 24 
16db9     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
16dbd     4F 40 40 3B 
16dc1     34 24 1D 14 
16dc5     16 1A 18 13 
16dc9     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
16dcd     14 1D 1E 1E 
16dd1     1E 1D 1D 21 
16dd5     24 24 24 1E 
16dd9     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
16ddd     F7 ED E8 E3 
16de1     EA F6 FC 01 
16de5     03 09 09 07 
16de9     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
16ded     3D 54 64 70 
16df1     6C 59 37 16 
16df5     F7 E6 DC D4 
16df9     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
16dfd     D9 E6 F3 F9 
16e01     FC F2 EC E3 
16e05     D6 D3 CF D0 
16e09     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
16e0d     FD 00 FD F9 
16e11     EA D3 C5 BD 
16e15     C0 C3 CC DC 
16e19     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
16e1d     26 27 27 31 
16e21     36 40 40 3A 
16e25     26 03 E6 CA 
16e29     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
16e2d     98 9A A0 A6 
16e31     B1 B5 B9 C0 
16e35     D0 E0 E3 EC 
16e39     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
16e3d     CA CC CC D0 
16e41     C9 CC CC C5 
16e45     C0 B9 A7 9A 
16e49     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
16e4d     BD CF D3 E3 
16e51     F0 FF 0D 16 
16e55     16 16 09 FF 
16e59     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
16e5d     C6 CF DA F3 
16e61     09 1A 24 2A 
16e65     18 07 00 FF 
16e69     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
16e6d     2A 3A 44 44 
16e71     3D 31 20 16 
16e75     0D FC ED E8 
16e79     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
16e7d     FD 14 26 31 
16e81     31 3A 41 47 
16e85     4D 47 43 43 
16e89     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
16e8d     14 03 E8 D6 
16e91     D0 DC ED FF 
16e95     0E 1E 20 26 
16e99     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
16e9d     01 F3 F2 F0 
16ea1     F0 ED EC E0 
16ea5     D9 D0 C6 C0 
16ea9     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
16ead     BC BF CF D4 
16eb1     E6 F7 04 16 
16eb5     30 40 4B 4B 
16eb9     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
16ebd     1E 21 2C 2C 
16ec1     2C 2D 2D 36 
16ec5     31 26 20 13 
16ec9     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
16ecd     0A 09 09 0A 
16ed1     0D 14 1D 1D 
16ed5     1D 18 0E 03 
16ed9     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
16edd     D0 D4 E6 F9 
16ee1     03 0E 0A 03 
16ee5     F9 04 1E 3D 
16ee9     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
16eed     7F 7F 77 68 
16ef1     57 41 26 0D 
16ef5     FC E8 DA D0 
16ef9     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
16efd     E3 EC EC EC 
16f01     EA EA E3 D6 
16f05     D6 CF D0 D4 
16f09     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
16f0d     C9 A9 A6 A9 
16f11     B7 D9 F2 09 
16f15     1D 34 36 3D 
16f19     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
16f1d     27 18 16 0E 
16f21     03 00 FC ED 
16f25     E3 DA CC C5 
16f29     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
16f2d     CA C6 C0 BD 
16f31     C3 C3 C6 CA 
16f35     D4 D0 C6 B1 
16f39     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
16f3d     CA CA C6 C0 
16f41     BF BC B9 B5 
16f45     AC A6 A9 AD 
16f49     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
16f4d     DC DF E6 EA 
16f51     ED F9 FF 00 
16f55     03 04 03 F6 
16f59     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
16f5d     F0 FC 03 04 
16f61     FF ED DA DC 
16f65     E8 FD 13 27 
16f69     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
16f6d     4F 41 30 13 
16f71     FC E0 CF CC 
16f75     CA CC D6 DC 
16f79     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
16f7d     2A 36 49 54 
16f81     5A 54 47 3D 
16f85     3A 34 36 40 
16f89     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
16f8d     04 FC F7 03 
16f91     16 26 31 36 
16f95     36 37 31 24 
16f99     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
16f9d     DA CF CC CC 
16fa1     BC A9 9C 90 
16fa5     90 94 A7 BC 
16fa9     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
16fad     0E 13 10 10 
16fb1     0E 13 18 20 
16fb5     1D 04 FD FF 
16fb9     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
16fbd     51 53 54 57 
16fc1     57 44 31 1D 
16fc5     04 F7 F0 ED 
16fc9     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
16fcd     F3 F6 F7 00 
16fd1     04 10 14 10 
16fd5     10 03 F3 E3 
16fd9     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
16fdd     F9 0A 0E 03 
16fe1     F9 F9 FF 16 
16fe5     36 4F 64 76 
16fe9     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
16fed     7F 7C 66 4D 
16ff1     3A 2C 24 24 
16ff5     13 00 F0 E0 
16ff9     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
16ffd     D9 E0 ED F3 
17001     ED EA E0 D4 
17005     C9 B5 AF B5 
17009     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
1700d     B3 D6 F9 1E 
17011     36 43 47 4D 
17015     4B 49 3B 2D 
17019     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
1701d     FC FD FF FF 
17021     F6 F2 F3 F3 
17025     F9 01 01 FF 
17029     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
1702d     CF C9 B7 AC 
17031     A6 A7 AC 9D 
17035     94 8C 8A 94 
17039     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
1703d     C9 D0 DA DF 
17041     E3 E3 CF BF 
17045     AF A0 9A A2 
17049     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
1704d     C3 D3 DC ED 
17051     FC 0A 18 20 
17055     1D 16 09 FC 
17059     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
1705d     D4 D4 CF CC 
17061     C9 DC F0 07 
17065     1E 36 47 43 
17069     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
1706d     13 F9 DF D3 
17071     CC D4 E2 F0 
17075     F0 F0 F2 F2 
17079     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
1707d     34 47 4F 57 
17081     5D 57 4D 41 
17085     40 40 41 43 
17089     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
1708d     31 3A 3B 3D 
17091     40 37 37 30 
17095     24 16 04 EC 
17099     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
1709d     AF B1 A2 9D 
170a1     98 9A A6 B9 
170a5     D3 F7 04 16 
170a9     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
170ad     04 F9 F2 F0 
170b1     F6 FC F7 F9 
170b5     F7 FC 0A 27 
170b9     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
170bd     60 57 47 36 
170c1     26 10 FF EA 
170c5     DF DC D6 DC 
170c9     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
170cd     E3 E6 ED 00 
170d1     00 F4 E0 C7 
170d5     F0 DF 5F 40 
170d9     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
170dd     1F 7F 00 DF 
170e1     7F 20 E0 BF 
170e5     3F 40 0B 10 
170e9     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
170ed     E2 DA D5 D3 
170f1     DF F9 E8 C8 
170f5     AF CA CB D5 
170f9     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
170fd     21 20 19 33 
17101     4B 7F 7F 60 
17105     2A 3F 40 4F 
17109     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
1710d     A0 DF 00 EA 
17111     D0 AF FF 00 
17115     80 83 DF D8 
17119     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
1711d     EF 1A 1C 08 
17121     0B 10 03 1B 
17125     3F 70 40 28 
17129     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
1712d     47 34 00 CD 
17131     EF 2A 08 C0 
17135     97 BF C0 CF 
17139     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
1713d     F8 C5 DF 17 
17141     04 07 F0 D7 
17145     FF 0F 5F 7F 
17149     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
1714d     F0 FF 6F 60 
17151     E0 FF 40 1F 
17155     3C 20 18 1A 
17159     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
1715d     00 E0 B4 C5 
17161     B0 AF EB D8 
17165     E7 FC FA 07 
17169     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
1716d     3C 43 54 40 
17171     10 0F 00 E7 
17175     13 00 FF 00 
17179     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
1717d     14 00 E8 B0 
17181     A9 B7 DB F7 
17185     16 00 E0 C0 
17189     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
1718d     29 35 20 E0 
17191     D7 FF 4F 7C 
17195     5A 60 40 00 
17199     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
1719d     37 2F 28 00 
171a1     F0 D0 DF 0C 
171a5     E0 C4 CF E0 
171a9     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
171ad     E0 D7 FF 3F 
171b1     38 4B 40 2D 
171b5     34 10 0F 04 
171b9     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
171bd     E0 80 81 BF 
171c1     A0 BF 37 00 
171c5     95 BF EF 28 
171c9     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
171cd     2B 20 FB 02 
171d1     E4 EB 1B 08 
171d5     FF 24 19 19 
171d9     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
171dd     F0 2F 60 A0 
171e1     FF 20 A0 B7 
171e5     DF E8 A4 AF 
171e9     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
171ed     18 02 1F 20 
171f1     00 EF 35 10 
171f5     09 E8 B4 B7 
171f9     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
171fd     40 DB 1F 30 
17201     3F 7D 70 20 
17205     0F 20 F7 2F 
17209     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
1720d     00 B7 FE D0 
17211     EF 0F 04 1F 
17215     20 D3 F3 E0 
17219     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
1721d     02 FF 3B 20 
17221     E0 C8 CF 17 
17225     14 10 08 11 
17229     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
1722d     C7 D8 A7 FF 
17231     E0 DF 20 E0 
17235     EF 40 E0 BF 
17239     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
1723d     1F 14 1F 7F 
17241     10 FF 7F 60 
17245     2F 60 2B 47 
17249     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
1724d     F0 E0 BC AE 
17251     C7 DF E8 C4 
17255     A0 9F F7 4F 
17259     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
1725d     FF 7F 20 12 
17261     D0 EF 30 E0 
17265     BF 3F 20 80 
17269     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
1726d     CC FF 10 C0 
17271     CF 14 F0 CC 
17275     C2 CF C0 9B 
17279     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
1727d     20 D4 CB FF 
17281     60 00 3F 60 
17285     01 00 0D 00 
17289     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
1728d     1F 20 0F 3F 
17291     20 FF 10 BB 
17295     EF 17 20 E8 
17299     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
1729d     E8 E2 E7 EC 
172a1     C8 EF 1F 6F 
172a5     50 E0 C7 17 
172a9     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
172ad     1F 30 E4 FF 
172b1     5F 50 00 2F 
172b5     7F 40 06 00 
172b9     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
172bd     3F 00 9F FF 
172c1     08 0A F0 B7 
172c5     1F 00 FF 6E 
172c9     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
172cd     2C E0 BF 14 
172d1     F0 F7 10 90 
172d5     9F 3F 40 10 
172d9     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
172dd     2A 2F 08 DE 
172e1     D4 DF 17 3F 
172e5     00 BF FF 00 
172e9     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
172ed     FF 10 F3 E0 
172f1     BF 00 80 BF 
172f5     18 D8 CC B4 
172f9     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
172fd     20 9F FF E0 
17301     BF FF 30 D4 
17305     FF 50 00 EF 
17309     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
1730d     08 F0 EB 00 
17311     C9 2F 20 9F 
17315     3F 20 C7 FA 
17319     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
1731d     B9 FF 58 00 
17321     B7 F7 33 3B 
17325     54 10 EA EF 
17329     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
1732d     20 0F 4F 08 
17331     FF 30 17 3F 
17335     20 1F 40 E0 
17339     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
1733d     00 B0 8B BF 
17341     10 00 E9 E0 
17345     C4 D7 FF 54 
17349     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
1734d     10 00 FF 2F 
17351     6F 68 20 FF 
17355     4F 60 13 3E 
17359     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
1735d     F6 1B 28 D0 
17361     B7 E4 C7 F7 
17365     D0 BF F9 E2 
17369     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
1736d     FF 24 20 27 
17371     6C 20 1D 20 
17375     10 F3 1F 28 
17379     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
1737d     EB 1F 40 E0 
17381     EF 14 D0 A0 
17385     D7 00 C0 D7 
17389     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
1738d     C0 DF 70 00 
17391     B6 DF EF 1F 
17395     00 FF 30 FF 
17399     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
1739d     FF 3F 40 D0 
173a1     FF FB 2D 00 
173a5     CF 0D E8 C0 
173a9     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
173ad     00 FF E0 D7 
173b1     FF 28 3F 20 
173b5     D5 FF 1F 10 
173b9     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
173bd     E0 BF 37 E0 
173c1     EF F2 F9 0F 
173c5     14 EB 13 00 
173c9     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
173cd     EF 40 00 A0 
173d1     BF DA C2 DF 
173d5     0F 10 FF 37 
173d9     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
173dd     35 48 10 DF 
173e1     F7 FC E8 EF 
173e5     2F 20 E8 C0 
173e9     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
173ed     F7 E8 B8 D7 
173f1     D0 C0 CF 13 
173f5     00 D1 FF F0 
173f9     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
173fd     30 04 FF 27 
17401     2F 04 0F 48 
17405     25 40 00 B3 
17409     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
1740d     1F 30 00 9F 
17411     1F 20 F8 FB 
17415     0B E0 B7 D7 
17419     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
1741d     20 E3 1F 00 
17421     C1 1F 74 20 
17425     F0 FF 00 1F 
17429     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
1742d     AF FF F7 08 
17431     D3 FF 00 CF 
17435     FF 1F 1C 08 
17439     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
1743d     14 00 FF 44 
17441     F0 1F 20 EF 
17445     4D 10 E2 C0 
17449     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
1744d     10 E4 C8 C0 
17451     BB CF CB DB 
17455     F7 0B 00 EF 
17459     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
1745d     1B 57 10 FF 
17461     20 1F 20 27 
17465     30 1F 30 00 
17469     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
1746d     34 E0 D7 0F 
17471     08 1B 10 17 
17475     20 3F 40 F0 
17479     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
1747d     C7 FF 08 00 
17481     FF 30 00 E9 
17485     D4 FF 40 1B 
17489     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
1748d     DF 3F 00 08 
17491     E8 EF E8 E7 
17495     08 D0 CF E2 
17499     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
1749d     10 D0 C2 A8 
174a1     AF F7 0B 10 
174a5     E0 B0 AF 1F 
174a9     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
174ad     34 00 FF 3F 
174b1     28 24 00 FF 
174b5     5F 40 DF F4 
174b9     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
174bd     10 C8 DF 0F 
174c1     00 ED F0 FF 
174c5     00 FF E0 DF 
174c9     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
174cd     2F 44 20 CB 
174d1     FF 14 1F 50 
174d5     00 DF F4 FF 
174d9     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
174dd     34 E0 CF F4 
174e1     DC FF 00 EB 
174e5     12 0B F0 BF 
174e9     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
174ed     B7 FF 00 C7 
174f1     FF F0 DF 02 
174f5     F8 FB 02 F7 
174f9     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
174fd     E7 0F 20 D0 
17501     DF 38 C0 9F 
17505     0F 00 B7 C8 
17509     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
1750d     00 C1 EE E5 
17511     0E 05 10 E8 
17515     E8 E7 3F 40 
17519     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
1751d     20 F0 FF 1E 
17521     F0 BF FF 38 
17525     00 EF 20 08 
17529     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
1752d     08 F7 3F 30 
17531     F7 37 38 2F 
17535     3C 28 08 13 
17539     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
1753d     1F 20 F0 F7 
17541     04 F0 EB FD 
17545     04 D0 D7 DB 
17549     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
1754d     00 D7 2A E8 
17551     DF 1F 20 FF 
17555     00 DD C0 AF 
17559     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
1755d     D0 D7 FF 29 
17561     14 2F 64 00 
17565     BF 1F 61 40 
17569     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
1756d     ED 0F 26 20 
17571     F7 1F 40 08 
17575     DF 0F 2C 02 
17579     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
1757d     D1 EF F7 2A 
17581     00 FF 10 0F 
17585     20 E8 EF ED 
17589     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
1758d     30 00 CF 35 
17591     04 F9 FF 03 
17595     27 E0 BF 17 
17599     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
1759d     E8 FF 14 00 
175a1     ED FF 2C 00 
175a5     E0 EF 13 0C 
175a9     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
175ad     F7 E0 EF F0 
175b1     EF C4 DF D0 
175b5     BF C8 D7 F4 
175b9     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
175bd     27 30 18 F8 
175c1     FF 2F 40 08 
175c5     1B 08 CF FF 
175c9     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
175cd     F7 F0 FF 1B 
175d1     2C 00 EF E0 
175d5     D7 0C EA E4 
175d9     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
175dd     D0 AB FF 18 
175e1     0F 00 FF FB 
175e5     11 F0 FF 00 
175e9     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
175ed     E8 D5 E7 F8 
175f1     B0 D7 F0 CF 
175f5     0F 07 2B 10 
175f9     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
175fd     08 E8 1F 60 
17601     20 FE 02 E8 
17605     D1 F7 0C E0 
17609     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
1760d     EB E1 FB 00 
17611     C0 DF 08 D0 
17615     EF 08 F3 0D 
17619     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
1761d     EB 0F 08 E0 
17621     DD EF F3 0F 
17625     00 CD DF E3 
17629     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
1762d     1F 20 00 04 
17631     E8 17 30 18 
17635     00 BF F7 FD 
17639     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
1763d     17 2A 10 E8 
17641     F7 10 E8 FF 
17645     17 00 CA DF 
17649     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
1764d     1D 10 0F 2A 
17651     20 1B 2D 30 
17655     22 22 24 04 
17659     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
1765d     EC E4 DF DD 
17661     FF 10 FF 00 
17665     E1 FF 10 F1 
17669     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
1766d     10 07 10 0A 
17671     FD 17 10 F4 
17675     D9 FF 00 FF 
17679     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
1767d     FB 20 E8 E7 
17681     1F 20 13 27 
17685     28 0C 1F 4A 
17689     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
1768d     1F 00 FF 20 
17691     FE F8 FF 20 
17695     F0 DF 0F 2B 
17699     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
1769d     FB 00 F5 1F 
176a1     10 DF 17 00 
176a5     E7 FE F3 0F 
176a9     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
176ad     05 0D 0C F4 
176b1     E7 FF 00 F7 
176b5     FC F5 F2 EA 
176b9     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
176bd     14 17 33 28 
176c1     03 2F 20 1F 
176c5     2E 20 08 00 
176c9     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
176cd     00 17 12 1E 
176d1     E8 DB 0F 1F 
176d5     10 EF 0B 00 
176d9     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
176dd     1F 20 F0 DF 
176e1     17 10 F0 D3 
176e5     FF 07 04 E1 
176e9     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
176ed     DF FF EC FF 
176f1     20 00 F8 D7 
176f5     FF 03 17 04 
176f9     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
176fd     04 0B 00 FB 
17701     F0 FB E0 EF 
17705     08 00 F4 F3 
17709     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
1770d     F7 16 00 EB 
17711     F0 E3 EB FF 
17715     F0 C8 DB EF 
17719     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
1771d     20 E4 DC BB 
17721     DF FA E9 E7 
17725     FB 00 E0 EB 
17729     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
1772d     08 0F 30 00 
17731     F8 E9 FE 0F 
17735     08 DD FB E8 
17739     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
1773d     CF EF F0 C4 
17741     CF ED FB 06 
17745     E0 DF F3 1F 
17749     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
1774d     03 F8 F7 00 
17751     F8 FB 0F 08 
17755     F3 F2 FF 16 
17759     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
1775d     E8 EB F5 FF 
17761     16 08 F8 E4 
17765     FD E8 DB FF 
17769     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
1776d     E3 F0 E0 D0 
17771     F7 14 E8 F7 
17775     00 EF 11 04 
17779     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
1777d     12 00 F2 FD 
17781     0B 00 E8 D7 
17785     FF 10 F3 FF 
17789     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
1778d     00 FB 12 00 
17791     FF 14 E8 FF 
17795     08 FF 12 00 
17799     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
1779d     22 1B 28 1D 
177a1     12 0B 04 05 
177a5     0E 00 06 07 
177a9     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
177ad     EF 1C 00 F0 
177b1     D7 FF 10 F5 
177b5     FF 1A 16 04 
177b9     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
177bd     27 28 F0 F7 
177c1     2F 20 15 22 
177c5     10 00 F5 F7 
177c9     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
177cd     D7 F7 14 E8 
177d1     DF FF 08 E8 
177d5     EF 14 E8 E7 
177d9     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
177dd     15 00 EF FF 
177e1     17 12 12 1B 
177e5     20 F4 17 14 
177e9     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
177ed     2F 28 00 03 
177f1     0D 13 21 08 
177f5     FB 0E 13 18 
177f9     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
177fd     1E 18 02 07 
17801     14 0B 0A 0B 
17805     27 20 00 06 
17809     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
1780d     00 F4 FF 20 
17811     F0 FF 10 F7 
17815     12 F0 DF 08 
17819     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
1781d     0F 24 00 F3 
17821     FF 07 10 00 
17825     F3 02 FF 04 
17829     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
1782d     FD 0A F0 E7 
17831     17 00 EF F4 
17835     D9 FF 00 E8 
17839     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
1783d     D3 FF F0 D7 
17841     FF 08 F8 DA 
17845     EF 07 1E 00 
17849     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
1784d     FB 17 10 13 
17851     10 07 08 0E 
17855     17 08 E8 E7 
17859     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
1785d     00 F3 E8 DB 
17861     FF E4 FF 18 
17865     E8 DE DC E9 
17869     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
1786d     FF F0 DF 17 
17871     00 F8 FB 1F 
17875     10 F0 FB 00 
17879     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
1787d     F8 EB F0 DE 
17881     ED EC EA E8 
17885     EF EB F7 18 
17889     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
1788d     13 00 FB 10 
17891     F6 F9 FF 08 
17895     E0 D3 FF 00 
17899     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
1789d     14 E0 EF 0A 
178a1     F5 FF 04 E0 
178a5     F7 0D 07 25 
178a9     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
178ad     E7 FB 0E 0C 
178b1     0F 22 00 F7 
178b5     08 02 05 08 
178b9     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
178bd     F7 0E F9 07 
178c1     08 FC F8 0B 
178c5     00 F3 0D 0C 
178c9     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
178cd     FC F0 D7 EB 
178d1     F7 0B F4 EF 
178d5     FE 00 EC F3 
178d9     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
178dd     02 FF F0 DB 
178e1     FF 00 F8 FB 
178e5     04 F5 0F 04 
178e9     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
178ed     18 00 E8 EF 
178f1     0A 00 03 F8 
178f5     EF 0F 24 00 
178f9     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
178fd     20 08 FF 0A 
17901     F8 EB FF 20 
17905     00 EF 10 EC 
17909     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
1790d     E8 FF 18 02 
17911     F4 F5 FB 12 
17915     04 F8 F0 EF 
17919     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
1791d     20 00 EF 1F 
17921     10 FB 00 FF 
17925     10 00 FF 18 
17929     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
1792d     FF 09 06 0F 
17931     20 01 0F 00 
17935     0F 04 F2 ED 
17939     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
1793d     19 00 D7 FF 
17941     17 1A 10 F0 
17945     D7 1F 24 00 
17949     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
1794d     04 0F 08 FD 
17951     0B 10 02 1B 
17955     10 0F 1C 00 
17959     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
1795d     13 10 00 0B 
17961     10 ED FF 0B 
17965     15 00 EB FC 
17969     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
1796d     00 FD 00 E5 
17971     FF 00 E4 FF 
17975     10 F6 F6 FF 
17979     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
1797d     04 0C 04 FB 
17981     0C FB 0F 14 
17985     10 F4 F7 08 
17989     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
1798d     FF 0A E8 F5 
17991     F8 F7 F0 FF 
17995     00 F7 04 F7 
17999     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
1799d     FB 02 0B 11 
179a1     0C 06 0B 14 
179a5     F8 FF 10 00 
179a9     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
179ad     FF 03 0D 04 
179b1     F6 FF FA FD 
179b5     00 E5 EF FF 
179b9     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
179bd     FD F0 EF FA 
179c1     01 07 16 00 
179c5     F3 FE FF 04 
179c9     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
179cd     EF FF 00 F7 
179d1     13 18 08 0D 
179d5     08 F5 07 10 
179d9     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
179dd     F0 FF 0C FA 
179e1     F6 FF 0C 04 
179e5     07 21 10 0A 
179e9     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
179ed     0C F8 FF 08 
179f1     FF 0C F0 F7 
179f5     FC FB 06 F4 
179f9     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
179fd     FD E8 F7 00 
17a01     E5 E9 F7 F0 
17a05     E7 0A 00 F0 
17a09     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
17a0d     FF 2B 10 03 
17a11     17 08 FF 0D 
17a15     10 04 EE FF 
17a19     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
17a1d     09 06 00 F3 
17a21     FB 0F 10 E9 
17a25     F7 F0 ED F5 
17a29     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
17a2d     00 FC F0 F7 
17a31     15 16 08 EC 
17a35     FF 04 FE FF 
17a39     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
17a3d     F5 F2 F3 F8 
17a41     FD 04 EB EB 
17a45     FB 04 FC E8 
17a49     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
17a4d     F0 FF 00 F7 
17a51     FA 06 02 07 
17a55     02 06 0E 0E 
17a59     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
17a5d     0A 08 FC FA 
17a61     FF 00 E0 F7 
17a65     08 F6 FB F4 
17a69     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
17a6d     F8 FA FB 07 
17a71     04 EA FD 08 
17a75     02 08 0D 08 
17a79     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
17a7d     08 FF 04 0F 
17a81     18 00 0C F1 
17a85     FB F4 FF 0A 
17a89     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
17a8d     F0 EF F0 D4 
17a91     E7 F2 F0 EF 
17a95     F4 ED F9 F8 
17a99     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
17a9d     02 FF 04 06 
17aa1     02 FF 1A 10 
17aa5     09 1A 12 04 
17aa9     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
17aad     1F 00 FF 08 
17ab1     01 0F 04 F9 
17ab5     05 00 FB F2 
17ab9     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
17abd     EA FF 10 04 
17ac1     EC FF 18 15 
17ac5     1A 16 10 09 
17ac9     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
17acd     FF 14 00 EE 
17ad1     E7 FB FE F4 
17ad5     E5 FF 06 06 
17ad9     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
17add     08 F8 0F 10 
17ae1     F0 FF 00 FF 
17ae5     1E 10 FF 13 
17ae9     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
17aed     1A 00 13 10 
17af1     0C 02 02 00 
17af5     F9 0A F0 EF 
17af9     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
17afd     FF 00 E4 F3 
17b01     00 F7 07 13 
17b05     14 00 05 02 
17b09     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
17b0d     0D 11 0D 04 
17b11     FF 08 F8 FF 
17b15     0A 00 FB F8 
17b19     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
17b1d     0F 04 FB 06 
17b21     00 F3 FF 0C 
17b25     00 09 F2 EF 
17b29     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
17b2d     14 00 02 00 
17b31     FD 07 12 10 
17b35     0A 0C 04 0F 
17b39     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
17b3d     00 FF 0F 10 
17b41     0C FC FF 00 
17b45     F9 FF 08 00 
17b49     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
17b4d     DD EF F0 EF 
17b51     08 F0 F7 F0 
17b55     EF 06 09 05 
17b59     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
17b5d     F8 F5 01 FF 
17b61     14 00 ED ED 
17b65     EE F5 F4 EA 
17b69     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
17b6d     F0 EB FC EF 
17b71     F8 E0 FF 10 
17b75     F0 ED 0B 1C 
17b79     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
17b7d     13 18 FD 0A 
17b81     F8 0B 10 02 
17b85     F4 F6 FB FA 
17b89     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
17b8d     04 FA FF 04 
17b91     F8 EF 0D 10 
17b95     04 F0 0F 08 
17b99     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
17b9d     00 FF F0 F7 
17ba1     F4 EF 17 0C 
17ba5     07 16 00 FB 
17ba9     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
17bad     0B 18 F0 EF 
17bb1     ED EF FF F2 
17bb5     F1 F6 F0 EA 
17bb9     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
17bbd     F1 FE E4 EF 
17bc1     10 00 F3 FF 
17bc5     08 FA FD FF 
17bc9     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
17bcd     00 F9 F0 FF 
17bd1     18 00 FF 0C 
17bd5     E8 F5 F8 F7 
17bd9     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
17bdd     0E F0 F7 12 
17be1     02 03 0F 18 
17be5     FD 23 10 05 
17be9     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
17bed     F2 FD 14 00 
17bf1     F3 FD F7 F8 
17bf5     EB FF F8 FB 
17bf9     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
17bfd     FB 14 04 0F 
17c01     10 F9 17 20 
17c05     10 12 09 27 
17c09     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
17c0d     F7 05 15 08 
17c11     E9 F2 F7 01 
17c15     F0 ED FF 04 
17c19     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
17c1d     E7 FF 10 F0 
17c21     F5 03 F8 E9 
17c25     FF 00 ED F3 
17c29     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
17c2d     EF FF 10 00 
17c31     07 14 00 FB 
17c35     00 07 10 00 
17c39     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
17c3d     14 1A 00 FF 
17c41     0D 10 F8 FE 
17c45     FE FF 08 00 
17c49     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
17c4d     F9 0F 14 04 
17c51     00 FF 26 08 
17c55     FF 2D 20 FC 
17c59     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
17c5d     F8 F7 F0 EB 
17c61     00 EA F9 E0 
17c65     D7 F3 F8 F0 
17c69     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
17c6d     FF 16 10 0D 
17c71     14 0B 0A 01 
17c75     11 10 0D 08 
17c79     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
17c7d     F9 FB 00 ED 
17c81     EF F3 07 08 
17c85     02 07 08 F3 
17c89     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
17c8d     04 FF 10 F0 
17c91     F5 06 0A F8 
17c95     EF 0D 08 FB 
17c99     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
17c9d     03 08 F8 FF 
17ca1     04 F7 0B 14 
17ca5     08 EA F7 1C 
17ca9     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
17cad     F8 F6 F7 FC 
17cb1     F2 F5 F8 E0 
17cb5     DF EA E4 E0 
17cb9     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
17cbd     FD 08 F0 FB 
17cc1     00 03 0F 16 
17cc5     08 07 1B 20 
17cc9     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
17ccd     12 04 0D 0C 
17cd1     E8 EF 04 EA 
17cd5     EF FE F8 EF 
17cd9     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
17cdd     04 F7 0F 00 
17ce1     FD 05 0D 13 
17ce5     06 00 F1 FF 
17ce9     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
17ced     EF FF FC F3 
17cf1     FE FC F6 FF 
17cf5     00 07 00 F9 
17cf9     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
17cfd     09 04 EE FF 
17d01     00 FB 07 03 
17d05     00 F6 FD FA 
17d09     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
17d0d     00 E9 F5 07 
17d11     00 EF 0F 00 
17d15     FA 01 FD FF 
17d19     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
17d1d     0D 0D 08 00 
17d21     F7 0B 10 F0 
17d25     E7 FC F1 FF 
17d29     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
17d2d     01 09 01 0F 
17d31     18 07 1D 18 
17d35     08 0F 1A 14 
17d39     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
17d3d     0C 00 F4 0F 
17d41     04 EB FD E4 
17d45     DF F7 F8 EA 
17d49     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
17d4d     FA FF F8 FF 
17d51     0C 04 08 F0 
17d55     FF 0C 00 F6 
17d59     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
17d5d     FC F6 F6 F7 
17d61     05 0E 00 FB 
17d65     12 10 0C 02 
17d69     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
17d6d     08 04 00 F2 
17d71     FF 08 02 00 
17d75     FF 18 00 FE 
17d79     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
17d7d     05 00 F0 F3 
17d81     F6 F7 07 12 
17d85     00 E5 FF 10 
17d89     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
17d8d     01 FA FF 00 
17d91     FB 09 04 04 
17d95     F8 EA EB EF 
17d99     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
17d9d     08 F2 FF 16 
17da1     0E 0C 02 0B 
17da5     0C 08 06 08 
17da9     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
17dad     F9 F4 F1 F1 
17db1     FF EC E4 E2 
17db5     EB F2 E9 EC 
17db9     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
17dbd     F4 FF 1B 10 
17dc1     00 0F 18 01 
17dc5     0F 04 05 12 
17dc9     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
17dcd     00 EC F3 F8 
17dd1     EB F7 08 00 
17dd5     F7 F2 F3 02 
17dd9     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
17ddd     FF 06 00 FD 
17de1     00 FF 12 08 
17de5     F9 15 0A FA 
17de9     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
17ded     FF 08 E9 F3 
17df1     FA F7 F6 F2 
17df5     F2 FD 0C F0 
17df9     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
17dfd     F6 FB FD 0B 
17e01     08 FD F9 F7 
17e05     02 F0 F7 04 
17e09     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
17e0d     FF 02 09 08 
17e11     0D 10 F0 FF 
17e15     14 02 0F 10 
17e19     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
17e1d     FF 00 F1 F6 
17e21     EF FF 00 E8 
17e25     F7 04 ED FF 
17e29     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
17e2d     14 02 02 09 
17e31     0C 08 0F 10 
17e35     F4 F1 F7 0F 
17e39     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
17e3d     F6 F6 FF 00 
17e41     F7 09 00 F9 
17e45     FD 02 00 F6 
17e49     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
17e4d     00 FF 06 00 
17e51     FF 11 00 FF 
17e55     0D 00 FF 15 
17e59     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
17e5d     FD FA FF 00 
17e61     F9 FF FC 05 
17e65     08 0A 00 FF 
17e69     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
17e6d     0C 09 09 0C 
17e71     04 FF 04 FB 
17e75     08 00 F8 F2 
17e79     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
17e7d     FD F0 E9 EB 
17e81     FF 00 FB 00 
17e85     FF 0E 00 FF 
17e89     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
17e8d     08 F8 FF 00 
17e91     EA EF 05 00 
17e95     EF FB F6 FB 
17e99     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
17e9d     08 07 02 FE 
17ea1     05 04 00 FB 
17ea5     FC EC F5 F5 
17ea9     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
17ead     F7 FF 08 FA 
17eb1     F1 0B 0A 00 
17eb5     FC F1 FF 00 
17eb9     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
17ebd     F7 05 05 0B 
17ec1     00 FF 16 08 
17ec5     01 06 00 F8 
17ec9     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
17ecd     00 F7 0B 08 
17ed1     05 09 12 08 
17ed5     09 0C 05 04 
17ed9     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
17edd     05 09 00 F5 
17ee1     FB 05 F4 F5 
17ee5     04 00 F4 F4 
17ee9     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
17eec                 | 	alignl
17eec                 | _hng030rm_spin2_dat_
17eec     00 00 00 00 
17ef0     00 00 00 00 
17ef4     00 00 00 00 
17ef8     00 00 00 00 
17efc     00 00 00    | vga_font       file "vgafont.def"
17eff     7E 81 A5 81 
17f03     81 BD 99 81 
17f07     81 7E 00 00 
17f0b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
17f0f     7E FF DB FF 
17f13     FF C3 E7 FF 
17f17     FF 7E 00 00 
17f1b     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
17f1f     00 36 7F 7F 
17f23     7F 7F 3E 1C 
17f27     08 00 00 00 
17f2b     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
17f2f     00 08 1C 3E 
17f33     7F 3E 1C 08 
17f37     00 00 00 00 
17f3b     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
17f3f     18 3C 3C E7 
17f43     E7 E7 18 18 
17f47     3C 00 00 00 
17f4b     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17f4f     18 3C 7E FF 
17f53     FF 7E 18 18 
17f57     3C 00 00 00 
17f5b     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17f5f     00 00 00 18 
17f63     3C 3C 18 00 
17f67     00 00 00 00 
17f6b     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
17f6f     FF FF FF E7 
17f73     C3 C3 E7 FF 
17f77     FF FF FF FF 
17f7b     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17f7f     00 00 3C 66 
17f83     42 42 66 3C 
17f87     00 00 00 00 
17f8b     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
17f8f     FF FF C3 99 
17f93     BD BD 99 C3 
17f97     FF FF FF FF 
17f9b     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17f9f     78 70 58 4C 
17fa3     1E 33 33 33 
17fa7     33 1E 00 00 
17fab     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
17faf     3C 66 66 66 
17fb3     66 3C 18 7E 
17fb7     18 18 00 00 
17fbb     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
17fbf     FC CC FC 0C 
17fc3     0C 0C 0C 0E 
17fc7     0F 07 00 00 
17fcb     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
17fcf     FE C6 FE C6 
17fd3     C6 C6 C6 E6 
17fd7     E7 67 03 00 
17fdb     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
17fdf     18 18 DB 3C 
17fe3     E7 3C DB 18 
17fe7     18 00 00 00 
17feb     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
17fef     03 07 0F 1F 
17ff3     7F 1F 0F 07 
17ff7     03 01 00 00 
17ffb     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
17fff     60 70 78 7C 
18003     7F 7C 78 70 
18007     60 40 00 00 
1800b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1800f     18 3C 7E 18 
18013     18 18 7E 3C 
18017     18 00 00 00 
1801b     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1801f     66 66 66 66 
18023     66 66 66    | 	byte	$66[7]
18026     00 66 66 00 
1802a     00 00 00 00 
1802e     00 FE DB DB 
18032     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
18036     D8 D8 D8 00 
1803a     00 00 00 3E 
1803e     63 06 1C 36 
18042     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
18046     30 63 3E 00 
1804a     00 00 00 00 
1804e     00 00 00 00 
18052     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
18056     7F 7F 7F 00 
1805a     00 00 00 00 
1805e     00 18 3C 7E 
18062     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
18066     3C 18 7E 00 
1806a     00 00 00 00 
1806e     00 18 3C 7E 
18072     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
18076     18 18 18 00 
1807a     00 00 00 00 
1807e     00 18 18 18 
18082     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18086     7E 3C 18 00 
1808a     00 00 00 00 
1808e     00 00 00 18 
18092     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
18096     00 00 00 00 
1809a     00 00 00 00 
1809e     00 00 00    | 	byte	$00[11]
180a1     0C 06 7F 06 
180a5     0C 00 00 00 
180a9     00 00 00 00 
180ad     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180b1     00 03 03 03 
180b5     7F 00 00 00 
180b9     00 00 00 00 
180bd     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180c1     14 36 7F 36 
180c5     14 00 00 00 
180c9     00 00 00 00 
180cd     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
180d1     1C 1C 3E 3E 
180d5     7F 7F 00 00 
180d9     00 00 00 00 
180dd     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
180e1     7F 3E 3E 1C 
180e5     1C 08 00 00 
180e9     00 00 00 00 
180ed     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
180f1     00 00 00 00 
180f5     00 00 00 00 
180f9     00 00 00 00 
180fd     00 00       | 	byte	$00[14]
180ff     18 3C 3C 3C 
18103     18 18 18 00 
18107     18 18 00 00 
1810b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1810f     66 24 00 00 
18113     00 00 00 00 
18117     00 00 00 00 
1811b     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1811f     00 36 36 7F 
18123     36 36 36 7F 
18127     36 36 00 00 
1812b     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1812f     3E 63 43 03 
18133     3E 60 60 61 
18137     63 3E 18 18 
1813b     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1813f     00 00 43 63 
18143     30 18 0C 06 
18147     63 61 00 00 
1814b     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1814f     1C 36 36 1C 
18153     6E 3B 33 33 
18157     33 6E 00 00 
1815b     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1815f     0C 0C 0C 06 
18163     00 00 00 00 
18167     00 00 00 00 
1816b     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1816f     30 18 0C 0C 
18173     0C 0C 0C 0C 
18177     18 30 00 00 
1817b     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1817f     0C 18 30 30 
18183     30 30 30 30 
18187     18 0C 00 00 
1818b     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1818f     00 00 00 66 
18193     3C FF 3C 66 
18197     00 00 00 00 
1819b     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1819f     00 00 00 18 
181a3     18 7E 18 18 
181a7     00 00 00 00 
181ab     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
181af     00 00 00 00 
181b3     00 00 00 00 | 	byte	$00[8]
181b7     18 18 18 0C 
181bb     00 00 00 00 
181bf     00 00 00 00 
181c3     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
181c7     00 00 00 00 
181cb     00 00 00 00 
181cf     00 00 00 00 
181d3     00 00 00 00 | 	byte	$00[16]
181d7     18 18 00 00 
181db     00 00 00 00 
181df     00 00 40 60 
181e3     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
181e7     03 01 00 00 
181eb     00 00 00 00 
181ef     1C 36 63 63 
181f3     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
181f7     36 1C 00 00 
181fb     00 00 00 00 
181ff     18 1C 1E 18 
18203     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
18207     18 7E 00 00 
1820b     00 00 00 00 
1820f     3E 63 60 30 
18213     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
18217     63 7F 00 00 
1821b     00 00 00 00 
1821f     3E 63 60 60 
18223     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
18227     63 3E 00 00 
1822b     00 00 00 00 
1822f     30 38 3C 36 
18233     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
18237     30 78 00 00 
1823b     00 00 00 00 
1823f     7F 03 03 03 
18243     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
18247     63 3E 00 00 
1824b     00 00 00 00 
1824f     1C 06 03 03 
18253     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
18257     63 3E 00 00 
1825b     00 00 00 00 
1825f     7F 63 60 60 
18263     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
18267     0C 0C 00 00 
1826b     00 00 00 00 
1826f     3E 63 63 63 
18273     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
18277     63 3E 00 00 
1827b     00 00 00 00 
1827f     3E 63 63 63 
18283     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
18287     30 1E 00 00 
1828b     00 00 00 00 
1828f     00 00 00 18 
18293     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
18297     18 18 00 00 
1829b     00 00 00 00 
1829f     00 00 00 18 
182a3     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
182a7     18 18 0C 00 
182ab     00 00 00 00 
182af     00 60 30 18 
182b3     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
182b7     30 60 00 00 
182bb     00 00 00 00 
182bf     00 00 00 7E 
182c3     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
182c7     00 00 00 00 
182cb     00 00 00 00 
182cf     00          | 	byte	$00[9]
182d0     06 0C 18 30 
182d4     60 30 18 0C 
182d8     06 00 00 00 
182dc     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
182e0     63 63 30 18 
182e4     18 18 00 18 
182e8     18 00 00 00 
182ec     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
182f0     3E 63 63 7B 
182f4     7B 7B 3B 03 
182f8     3E 00 00 00 
182fc     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
18300     1C 36 63 63 
18304     7F 63 63 63 
18308     63 00 00 00 
1830c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
18310     66 66 66 3E 
18314     66 66 66 66 
18318     3F 00 00 00 
1831c     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
18320     66 43 03 03 
18324     03 03 43 66 
18328     3C 00 00 00 
1832c     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
18330     36 66 66 66 
18334     66 66 66 36 
18338     1F 00 00 00 
1833c     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
18340     66 46 16 1E 
18344     16 06 46 66 
18348     7F 00 00 00 
1834c     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
18350     66 46 16 1E 
18354     16 06 06 06 
18358     0F 00 00 00 
1835c     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
18360     66 43 03 03 
18364     7B 63 63 66 
18368     5C 00 00 00 
1836c     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
18370     63 63 63 7F 
18374     63 63 63 63 
18378     63 00 00 00 
1837c     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
18380     18 18 18 18 
18384     18 18 18 18 | 	byte	$18[8]
18388     3C 00 00 00 
1838c     00 00 00 78 
18390     30 30 30 30 
18394     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
18398     1E 00 00 00 
1839c     00 00 00 67 
183a0     66 66 36 1E 
183a4     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
183a8     67 00 00 00 
183ac     00 00 00 0F 
183b0     06 06 06 06 
183b4     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
183b8     7F 00 00 00 
183bc     00 00 00 63 
183c0     77 7F 7F 6B 
183c4     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
183c8     63 00 00 00 
183cc     00 00 00 63 
183d0     67 6F 7F 7B 
183d4     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
183d8     63 00 00 00 
183dc     00 00 00 3E 
183e0     63 63 63 63 
183e4     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
183e8     3E 00 00 00 
183ec     00 00 00 3F 
183f0     66 66 66 3E 
183f4     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
183f8     0F 00 00 00 
183fc     00 00 00 3E 
18400     63 63 63 63 
18404     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
18408     3E 30 70 00 
1840c     00 00 00 3F 
18410     66 66 66 3E 
18414     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
18418     67 00 00 00 
1841c     00 00 00 3E 
18420     63 63 06 1C 
18424     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
18428     3E 00 00 00 
1842c     00 00 00 7E 
18430     7E 5A 18 18 
18434     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
18438     3C 00 00 00 
1843c     00 00 00 63 
18440     63 63 63 63 
18444     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
18448     3E 00 00 00 
1844c     00 00 00 63 
18450     63 63 63 63 
18454     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
18458     08 00 00 00 
1845c     00 00 00 63 
18460     63 63 63 6B 
18464     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
18468     36 00 00 00 
1846c     00 00 00 63 
18470     63 36 3E 1C 
18474     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
18478     63 00 00 00 
1847c     00 00 00 66 
18480     66 66 66 3C 
18484     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
18488     3C 00 00 00 
1848c     00 00 00 7F 
18490     63 61 30 18 
18494     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
18498     7F 00 00 00 
1849c     00 00 00 3C 
184a0     0C 0C 0C 0C 
184a4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
184a8     3C 00 00 00 
184ac     00 00 00 00 
184b0     01 03 07 0E 
184b4     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
184b8     40 00 00 00 
184bc     00 00 00 3C 
184c0     30 30 30 30 
184c4     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
184c8     3C 00 00 00 
184cc     1C 36 00 00 
184d0     00 00 00 00 
184d4     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
184d8     00 00 00 00 
184dc     00 00 00 00 
184e0     00 00 00 00 
184e4     00 00 00 00 
184e8     00          | 	byte	$00[17]
184e9     FF 00 00 0C 
184ed     18 00 00 00 
184f1     00 00 00 00 
184f5     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
184f9     00 00 00 00 
184fd     00 00 00 00 
18501     00          | 	byte	$00[9]
18502     1E 30 3E 33 
18506     33 33 6E 00 
1850a     00 00 00 00 
1850e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
18512     1E 36 66 66 
18516     66 66 3E 00 
1851a     00 00 00 00 
1851e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18522     3E 63 03 03 
18526     03 63 3E 00 
1852a     00 00 00 00 
1852e     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
18532     3C 36 33 33 
18536     33 33 6E 00 
1853a     00 00 00 00 
1853e     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18542     3E 63 7F 03 
18546     03 63 3E 00 
1854a     00 00 00 00 
1854e     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
18552     0C 1E 0C 0C 
18556     0C 0C 1E 00 
1855a     00 00 00 00 
1855e     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18562     6E 33 33 33 
18566     33 33 3E 30 
1856a     33 1E 00 00 
1856e     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
18572     36 6E 66 66 
18576     66 66 67 00 
1857a     00 00 00 00 
1857e     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
18582     1C 18 18 18 
18586     18 18 3C 00 
1858a     00 00 00 00 
1858e     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
18592     70 60 60 60 
18596     60 60 60 66 
1859a     66 3C 00 00 
1859e     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
185a2     66 36 1E 1E 
185a6     36 66 67 00 
185aa     00 00 00 00 
185ae     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
185b2     18 18 18 18 
185b6     18 18       | 	byte	$18[6]
185b8     3C 00 00 00 
185bc     00 00 00 00 
185c0     00 00 37 7F 
185c4     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
185c8     63 00 00 00 
185cc     00 00 00 00 
185d0     00 00 3B 66 
185d4     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
185d8     66 00 00 00 
185dc     00 00 00 00 
185e0     00 00 3E 63 
185e4     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
185e8     3E 00 00 00 
185ec     00 00 00 00 
185f0     00 00 3B 66 
185f4     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
185f8     3E 06 06 0F 
185fc     00 00 00 00 
18600     00 00 6E 33 
18604     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
18608     3E 30 30 78 
1860c     00 00 00 00 
18610     00 00 3B 6E 
18614     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
18618     0F 00 00 00 
1861c     00 00 00 00 
18620     00 00 3E 63 
18624     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
18628     3E 00 00 00 
1862c     00 00 00 08 
18630     0C 0C 3F 0C 
18634     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
18638     38 00 00 00 
1863c     00 00 00 00 
18640     00 00 33 33 
18644     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
18648     6E 00 00 00 
1864c     00 00 00 00 
18650     00 00 63 63 
18654     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
18658     1C 00 00 00 
1865c     00 00 00 00 
18660     00 00 63 63 
18664     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
18668     36 00 00 00 
1866c     00 00 00 00 
18670     00 00 63 36 
18674     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
18678     63 00 00 00 
1867c     00 00 00 00 
18680     00 00 63 63 
18684     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
18688     7E 60 30 1F 
1868c     00 00 00 00 
18690     00 00 7F 33 
18694     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
18698     7F 00 00 00 
1869c     00 00 00 70 
186a0     18 18 18 0E 
186a4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
186a8     70 00 00 00 
186ac     00 00 00 18 
186b0     18 18 18 18 
186b4     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
186b8     18 00 00 00 
186bc     00 00 00 0E 
186c0     18 18 18 70 
186c4     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
186c8     0E 00 00 00 
186cc     6E 3B 00 00 
186d0     00 00 00 00 
186d4     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
186d8     00 00 00 00 
186dc     00 00 00 00 
186e0     00 00       | 	byte	$00[10]
186e2     08 1C 36 63 
186e6     63 63 7F 00 
186ea     00 00 00 00 
186ee     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
186f2     03 03 03 03 
186f6     43 66 3C 18 
186fa     30 1E 00 00 
186fe     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
18702     33 33 33 33 
18706     33 33       | 	byte	$33[6]
18708     6E 00 00 00 
1870c     00 00 60 30 
18710     18 00 3E 63 
18714     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
18718     3E 00 00 00 
1871c     00 00 08 1C 
18720     36 00 1E 30 
18724     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
18728     6E 00 00 00 
1872c     00 00 00 00 
18730     33 00 1E 30 
18734     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
18738     6E 00 00 00 
1873c     00 00 1C 36 
18740     1C 00 33 33 
18744     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
18748     6E 00 00 00 
1874c     00 00 60 30 
18750     18 00 3E 63 
18754     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
18758     3E 00 00 00 
1875c     00 00 00 00 
18760     00 00 3E 63 
18764     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
18768     3E 18 30 1E 
1876c     00 00 00 1C 
18770     58 78 38 18 
18774     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
18778     3C 00 00 00 
1877c     00 00 00 00 
18780     63 00 3E 63 
18784     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
18788     3E 00 00 00 
1878c     66 33 00 3E 
18790     63 63 63 63 
18794     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
18798     3E 00 00 00 
1879c     00 00 CC 66 
187a0     33 00 3E 63 
187a4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
187a8     3E 00 00 00 
187ac     00 00 18 3C 
187b0     66 00 1C 18 
187b4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
187b8     3C 00 00 00 
187bc     30 18 00 7F 
187c0     63 61 30 18 
187c4     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
187c8     7F 00 00 00 
187cc     00 63 00 08 
187d0     1C 36 63 63 
187d4     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
187d8     63 00 00 00 
187dc     30 18 00 3C 
187e0     66 43 03 03 
187e4     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
187e8     3C 00 00 00 
187ec     30 18 00 7F 
187f0     66 46 16 1E 
187f4     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
187f8     7F 00 00 00 
187fc     0C 06 00 0F 
18800     06 06 06 06 
18804     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
18808     7F 00 00 00 
1880c     30 18 00 1C 
18810     18 18 18 18 
18814     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
18818     3C 00 00 00 
1881c     00 00 08 1C 
18820     36 00 3E 63 
18824     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
18828     3E 00 00 00 
1882c     00 00 00 00 
18830     63 00 3E 63 
18834     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
18838     3E 00 00 00 
1883c     00 00 00 6F 
18840     46 26 06 06 
18844     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
18848     7F 00 00 00 
1884c     00 00 00 6E 
18850     4C 2C 0C 0C 
18854     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
18858     1E 00 00 00 
1885c     30 18 00 3E 
18860     63 63 06 1C 
18864     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
18868     3E 00 00 00 
1886c     00 00 60 30 
18870     18 00 3E 63 
18874     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
18878     3E 00 00 00 
1887c     00 63 00 3E 
18880     63 63 63 63 
18884     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
18888     3E 00 00 00 
1888c     00 63 00 63 
18890     63 63 63 63 
18894     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
18898     3E 00 00 00 
1889c     6C 38 00 7E 
188a0     7E 5A 18 18 
188a4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
188a8     3C 00 00 00 
188ac     00 00 60 48 
188b0     2C 0C 3F 0C 
188b4     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
188b8     38 00 00 00 
188bc     00 00 00 0F 
188c0     26 36 1E 0E 
188c4     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
188c8     7F 00 00 00 
188cc     00 00 00 00 
188d0     00 63 36 1C 
188d4     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
188d8     00 00 00 00 
188dc     00 00       | 	byte	$00[6]
188de     36 1C 08 00 
188e2     3E 63 03 03 
188e6     03 63 3E 00 
188ea     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
188ee     30 18 0C 00 
188f2     1E 30 3E 33 
188f6     33 33 6E 00 
188fa     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
188fe     60 30 18 00 
18902     1C 18 18 18 
18906     18 18 3C 00 
1890a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1890e     60 30 18 00 
18912     3E 63 63 63 
18916     63 63 3E 00 
1891a     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1891e     30 18 0C 00 
18922     33 33 33 33 
18926     33 33 6E 00 
1892a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1892e     00 08 1C 36 
18932     63 63 7F 63 
18936     63 63 63 18 
1893a     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1893e     00 00 00 00 
18942     1E 30 3E 33 
18946     33 33 6E 18 
1894a     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1894e     00 7F 63 61 
18952     30 18 0C 06 
18956     43 63 7F 00 
1895a     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1895e     36 1C 08 00 
18962     7F 33 18 0C 
18966     06 63 7F 00 
1896a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1896e     00 7F 66 46 
18972     16 1E 16 06 
18976     46 66 7F 18 
1897a     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1897e     00 00 00 00 
18982     3E 63 7F 03 
18986     03 63 3E 18 
1898a     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1898e     00 3C 66 03 
18992     1F 03 0F 03 
18996     03 66 3C 00 
1899a     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1899e     60 30 18 00 
189a2     7F 33 18 0C 
189a6     06 63 7F 00 
189aa     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
189ae     00 3C 66 43 
189b2     03 03 03 03 
189b6     43 66 3C 00 
189ba     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
189be     00 00 00 00 
189c2     3E 63 06 1C 
189c6     30 63 3E 18 
189ca     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
189ce     00 00 00 00 
189d2     00 00       | 	byte	$00[6]
189d4     6C 36 1B 36 
189d8     6C 00 00 00 
189dc     00 00 00 00 
189e0     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
189e4     1B 36 6C 36 
189e8     1B 00 00 00 
189ec     88 22 88 22 
189f0     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
189f4     88 22 88 22 
189f8     88 22 88 22 
189fc     AA 55 AA 55 
18a00     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
18a04     AA 55 AA 55 
18a08     AA 55 AA 55 
18a0c     BB EE BB EE 
18a10     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
18a14     BB EE BB EE 
18a18     BB EE BB EE 
18a1c     18 18 18 18 
18a20     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
18a24     18 18 18 18 
18a28     18 18 18 18 
18a2c     18 18 18 18 
18a30     18 18 18    | 	byte	$18[15]
18a33     1F 18 18 18 
18a37     18 18 18 18 
18a3b     18 30 18 00 
18a3f     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
18a43     63 7F 63 63 
18a47     63 63 00 00 
18a4b     00 1C 36 00 
18a4f     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
18a53     63 7F 63 63 
18a57     63 63 00 00 
18a5b     00 36 1C 00 
18a5f     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
18a63     1E 16 06 46 
18a67     66 7F 00 00 
18a6b     00 00 00 00 
18a6f     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
18a73     1C 30 60 63 
18a77     63 3E 18 30 
18a7b     1E 6C 6C 6C 
18a7f     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
18a83     6F 6C 6C 6C 
18a87     6C 6C 6C 6C 
18a8b     6C 6C 6C 6C 
18a8f     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18a93     6C 6C 6C 6C 
18a97     6C 6C 6C 6C 
18a9b     6C          | 	byte	$6c[9]
18a9c     00 00 00 00 
18aa0     00          | 	byte	$00[5]
18aa1     7F 60 6F 6C 
18aa5     6C 6C 6C 6C 
18aa9     6C 6C 6C 6C 
18aad     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18ab1     6F 60 7F 00 
18ab5     00 00 00 00 
18ab9     00 00 00 18 
18abd     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
18ac1     61 30 18 0C 
18ac5     06 43 63 7F 
18ac9     00 00 00 00 
18acd     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
18ad1     00 7F 33 18 
18ad5     0C 06 63 7F 
18ad9     00 00 00 00 
18add     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
18ae1     00 00 1F 18 
18ae5     18 18 18 18 
18ae9     18 18 18 18 
18aed     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18af1     18 18 F8 00 
18af5     00 00 00 00 
18af9     00 00 00 18 
18afd     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18b01     18 18 FF 00 
18b05     00 00 00 00 
18b09     00 00 00 00 
18b0d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b11     00 00 FF 18 
18b15     18 18 18 18 
18b19     18 18 18 18 
18b1d     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18b21     18 18 F8 18 
18b25     18 18 18 18 
18b29     18 18 18 00 
18b2d     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
18b31     00 00 FF 00 
18b35     00 00 00 00 
18b39     00 00 00 18 
18b3d     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18b41     18 18 FF 18 
18b45     18 18 18 18 
18b49     18 18 18 63 
18b4d     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
18b51     36 63 63 7F 
18b55     63 63 63 63 
18b59     00 00 00 00 
18b5d     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
18b61     00 1E 30 3E 
18b65     33 33 33 6E 
18b69     00 00 00 6C 
18b6d     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18b71     EC 0C FC 00 
18b75     00 00 00 00 
18b79     00 00 00 00 
18b7d     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b81     FC 0C EC 6C 
18b85     6C 6C 6C 6C 
18b89     6C 6C 6C 6C 
18b8d     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18b91     EF 00 FF 00 
18b95     00 00 00 00 
18b99     00 00 00 00 
18b9d     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ba1     FF 00 EF 6C 
18ba5     6C 6C 6C 6C 
18ba9     6C 6C 6C 6C 
18bad     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18bb1     EC 0C EC 6C 
18bb5     6C 6C 6C 6C 
18bb9     6C 6C 6C 00 
18bbd     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18bc1     FF 00 FF 00 
18bc5     00 00 00 00 
18bc9     00 00 00 6C 
18bcd     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18bd1     EF 00 EF 6C 
18bd5     6C 6C 6C 6C 
18bd9     6C 6C 6C 00 
18bdd     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18be1     63 3E 63 63 
18be5     63 63 3E 63 
18be9     00 00 00 00 
18bed     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
18bf1     30 3C 36 33 
18bf5     33 33 33 6E 
18bf9     00 00 00 00 
18bfd     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
18c01     66 66 6F 66 
18c05     66 66 36 1F 
18c09     00 00 00 36 
18c0d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
18c11     66 66 66 66 
18c15     66 66       | 	byte	$66[6]
18c17     36 1F 00 00 
18c1b     00 00 63 00 
18c1f     7F 66 46 16 
18c23     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
18c27     66 7F 00 00 
18c2b     00 6C 38 00 
18c2f     38 30 30 3C 
18c33     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
18c37     33 6E 00 00 
18c3b     00 36 1C 00 
18c3f     63 67 6F 7F 
18c43     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
18c47     63 63 00 00 
18c4b     00 30 18 00 
18c4f     3C 18 18 18 
18c53     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18c57     18 3C 00 00 
18c5b     00 3C 66 00 
18c5f     3C 18 18 18 
18c63     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18c67     18 3C 00 00 
18c6b     00 00 00 36 
18c6f     1C 08 00 3E 
18c73     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
18c77     63 3E 00 00 
18c7b     00 18 18 18 
18c7f     18 18 18 18 
18c83     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
18c87     00 00 00 00 
18c8b     00 00 00 00 
18c8f     00 00 00 00 | 	byte	$00[12]
18c93     F8 18 18 18 
18c97     18 18 18 18 
18c9b     18 FF FF FF 
18c9f     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
18ca3     FF FF FF FF 
18ca7     FF FF FF FF 
18cab     FF          | 	byte	$ff[9]
18cac     00 00 00 00 
18cb0     00 00 00    | 	byte	$00[7]
18cb3     FF FF FF FF 
18cb7     FF FF FF FF 
18cbb     FF          | 	byte	$ff[9]
18cbc     00 00 00 7E 
18cc0     7E 5A 18 18 
18cc4     18 18 18 18 
18cc8     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
18ccc     1C 36 1C 63 
18cd0     63 63 63 63 
18cd4     63 63 63 63 
18cd8     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18cdc     FF FF FF FF 
18ce0     FF FF FF    | 	byte	$ff[7]
18ce3     00 00 00 00 
18ce7     00 00 00 00 
18ceb     00          | 	byte	$00[9]
18cec     30 18 00 3E 
18cf0     63 63 63 63 
18cf4     63 63 63 63 
18cf8     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18cfc     00 00 00 1E 
18d00     33 33 33 1B 
18d04     33 63 63 63 
18d08     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
18d0c     1C 36 00 3E 
18d10     63 63 63 63 
18d14     63 63 63 63 
18d18     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18d1c     30 18 00 63 
18d20     67 6F 7F 7B 
18d24     73 63 63 63 
18d28     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
18d2c     00 00 60 30 
18d30     18 00 3B 66 
18d34     66 66 66 66 
18d38     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18d3c     00 00 36 1C 
18d40     08 00 3B 66 
18d44     66 66 66 66 
18d48     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18d4c     36 1C 00 3E 
18d50     63 63 06 1C 
18d54     30 60 63 63 
18d58     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
18d5c     00 00 36 1C 
18d60     08 00 3E 63 
18d64     06 1C 30 63 
18d68     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
18d6c     30 18 00 3F 
18d70     66 66 66 3E 
18d74     36 66 66 66 
18d78     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
18d7c     30 18 00 63 
18d80     63 63 63 63 
18d84     63 63 63 63 
18d88     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18d8c     00 00 60 30 
18d90     18 00 3B 6E 
18d94     66 06 06 06 
18d98     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
18d9c     66 33 00 63 
18da0     63 63 63 63 
18da4     63 63 63 63 
18da8     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18dac     00 00 60 30 
18db0     18 00 63 63 
18db4     63 63 63 63 
18db8     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
18dbc     30 18 00 66 
18dc0     66 66 66 3C 
18dc4     18 18 18 18 
18dc8     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
18dcc     00 00 00 08 
18dd0     0C 0C 3F 0C 
18dd4     0C 0C 0C 6C 
18dd8     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
18ddc     30 18 00 00 
18de0     00 00 00 00 
18de4     00 00 00 00 
18de8     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18dec     00 00 00 00 
18df0     00 00 00 00 | 	byte	$00[8]
18df4     7F 00 00 00 
18df8     00 00 00 00 
18dfc     66 33 00 00 
18e00     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
18e04     00 00 00 00 
18e08     00 00 00 00 
18e0c     00 00 00 00 
18e10     00 00 00 00 
18e14     00 00 00 00 
18e18     00          | 	byte	$00[21]
18e19     0C 06 3C 36 
18e1d     1C 00 00 00 
18e21     00 00 00 00 
18e25     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e29     00 00 00 63 
18e2d     3E 00 00 00 
18e31     00 00 00 00 
18e35     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e39     00 00 00 00 
18e3d     3E 63 06 1C 
18e41     36 63 63 36 
18e45     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
18e49     00 00 00 00 
18e4d     00 00 00 00 | 	byte	$00[8]
18e51     18 00 7E 00 
18e55     18 00 00 00 
18e59     00 00 00 00 
18e5d     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e61     00 00 00 00 
18e65     00 00 00 00 | 	byte	$00[8]
18e69     18 30 1E 00 
18e6d     00 00 1C 36 
18e71     36 1C 00 00 
18e75     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
18e79     00 00 00 00 
18e7d     63 00 00 00 
18e81     00 00 00 00 
18e85     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e89     00 00 00 18 
18e8d     18 00 00 00 
18e91     00 00 00 00 
18e95     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18e99     00 00 00 00 
18e9d     00          | 	byte	$00[5]
18e9e     CC 66 33 00 
18ea2     33 33 33 33 
18ea6     33 33 6E 00 
18eaa     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
18eae     00 3F 66 66 
18eb2     66 3E 36 66 
18eb6     66 66 6F 00 
18eba     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
18ebe     36 1C 08 00 
18ec2     3B 6E 66 06 
18ec6     06 06 0F 00 
18eca     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
18ece     00 00 00 7E 
18ed2     7E 7E 7E 7E 
18ed6     7E 7E 00 00 
18eda     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
18ede     00 00 00 00 
18ee2     00 00 00 00 
18ee6     00 00 00 00 
18eea     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18eec     00 00 00 00 
      ...             
18f1c     00 00 00 00 
18f20     00 00 00    | st_font        file "st4font.def"
18f23     FF FF 00 00 
18f27     00 00 00 00 
18f2b     00 18 18 18 
18f2f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18f33     18 18 18 18 
18f37     18 18 18 18 
18f3b     18          | 	byte	$18[9]
18f3c     00 00 00 00 
18f40     00 00 00    | 	byte	$00[7]
18f43     FF FF 18 18 
18f47     18 18 18 18 
18f4b     18 18 18 18 
18f4f     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18f53     FF FF 00 00 
18f57     00 00 00 00 
18f5b     00 18 18 18 
18f5f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18f63     1F 1F 18 18 
18f67     18 18 18 18 
18f6b     18 18 18 18 
18f6f     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18f73     F8 F8 18 18 
18f77     18 18 18 18 
18f7b     18 00 00 00 
18f7f     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18f83     1F 1F 18 18 
18f87     18 18 18 18 
18f8b     18 00 00 00 
18f8f     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18f93     F8 F8 18 18 
18f97     18 18 18 18 
18f9b     18 18 18 18 
18f9f     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18fa3     1F 1F 00 00 
18fa7     00 00 00 00 
18fab     00 18 18 18 
18faf     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18fb3     F8 F8 00 00 
18fb7     00 00 00 00 
18fbb     00 18 18 18 
18fbf     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18fc3     FF FF 18 18 
18fc7     18 18 18 18 
18fcb     18 00 00 18 
18fcf     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
18fd3     66 7E 7E 66 
18fd7     66 66 66 30 
18fdb     18 00 00 7E 
18fdf     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
18fe3     3E 06 06 06 
18fe7     06 7E 7E 18 
18feb     0C 30 18 3C 
18fef     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
18ff3     06 06 06 66 
18ff7     66 7E 3C 00 
18ffb     00 30 18 66 
18fff     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
19003     7E 7E 76 76 
19007     66 66 66 00 
1900b     00 30 18 7C 
1900f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
19013     1C 38 70 60 
19017     60 7E 3E 00 
1901b     00 30 18 7E 
1901f     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
19023     18 0C 0C 06 
19027     06 7E 7E 00 
1902b     00 18 18 00 
1902f     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
19033     18 18 0C 0C 
19037     06 7E 7E 00 
1903b     00 30 18 3C 
1903f     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
19043     66 66 66 66 
19047     66          | 	byte	$66[5]
19048     7E 3C 00 00 
1904c     00 00 06 06 
19050     06 06 16 1E 
19054     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
19058     7E 7E 00 00 
1905c     00 00 00 00 
19060     00 3C 7C 60 
19064     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
19068     7E 7C 30 18 
1906c     00 00 00 00 
19070     00 3C 7E 66 
19074     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
19078     7E 7C 18 0C 
1907c     00 00 30 18 
19080     00 3C 3E 06 
19084     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
19088     7E 7C 00 00 
1908c     00 00 30 18 
19090     00 3E 7E 66 
19094     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
19098     66 66 00 00 
1909c     00 00 30 18 
190a0     00 7C 7E 06 
190a4     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
190a8     7E 3E 00 00 
190ac     00 00 30 18 
190b0     00 7E 7E 30 
190b4     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
190b8     7E 7E 00 00 
190bc     00 00 18 18 
190c0     00 7E 7E 30 
190c4     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
190c8     7E 7E 00 00 
190cc     00 00 30 18 
190d0     00 3C 7E 66 
190d4     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
190d8     7E 3C 00 00 
190dc     00 00 1C 1C 
190e0     18 18 38 3C 
190e4     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
190e8     3C 3C 00 00 
190ec     00 00 00 00 
190f0     00 00 00 00 
190f4     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190f8     00 00 00 00 
190fc     00 00       | 	byte	$00[6]
190fe     18 18 18 18 
19102     18 18 18 18 | 	byte	$18[8]
19106     00 00 18 18 
1910a     00 00 00 00 
1910e     66 66 66 66 
19112     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
19116     00 00 00 00 
1911a     00 00 00 00 
1911e     00          | 	byte	$00[9]
1911f     66 66 FF FF 
19123     66 66 FF FF 
19127     66 66 00 00 
1912b     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1912f     7C 7E 06 06 
19133     3E 7C 60 60 
19137     7E 3E 18 18 
1913b     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1913f     66 30 30 18 
19143     18 0C 0C 66 
19147     66 00 00 00 
1914b     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1914f     66 66 3C 1C 
19153     1C FC FE 66 
19157     66 FE FC 00 
1915b     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1915f     18 18 18 18 
19163     00 00 00 00 
19167     00 00 00 00 
1916b     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1916f     18 1C 0C 0C 
19173     0C 0C 0C 0C 
19177     1C 18 30 00 
1917b     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1917f     18 38 30 30 
19183     30 30 30 30 
19187     38 18 0C 00 
1918b     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1918f     66 66 3C 3C 
19193     FF FF 3C 3C 
19197     66 66 00 00 
1919b     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1919f     00 18 18 18 
191a3     7E 7E 18 18 
191a7     18 00 00 00 
191ab     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
191af     00 00 00 00 
191b3     00 00       | 	byte	$00[6]
191b5     18 18 18 18 
191b9     18          | 	byte	$18[5]
191ba     0C 04 00 00 
191be     00 00 00 00 
191c2     7E 7E 00 00 
191c6     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
191ca     00 00 00 00 
191ce     00 00 00 00 
191d2     00 00 00 00 
191d6     00          | 	byte	$00[13]
191d7     18 18 18 00 
191db     00 00 00 60 
191df     60 60 30 30 
191e3     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
191e7     06 06 06 00 
191eb     00 00 00 3C 
191ef     7E 66 66 66 
191f3     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
191f7     66 7E 3C 00 
191fb     00 00 00 18 
191ff     18 1C 1C 18 
19203     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
19207     18 7E 7E 00 
1920b     00 00 00 3C 
1920f     7E 66 66 30 
19213     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
19217     0C 7E 7E 00 
1921b     00 00 00 7E 
1921f     7E 30 30 18 
19223     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
19227     66 7E 3C 00 
1922b     00 00 00 30 
1922f     30 38 38 3C 
19233     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
19237     7E 30 30 00 
1923b     00 00 00 7E 
1923f     7E 06 06 3E 
19243     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
19247     66 7E 3C 00 
1924b     00 00 00 38 
1924f     3C 0E 06 06 
19253     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
19257     66 7E 3C 00 
1925b     00 00 00 7E 
1925f     7E 60 60 30 
19263     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
19267     0C 0C 0C 00 
1926b     00 00 00 3C 
1926f     7E 66 66 3C 
19273     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
19277     66 7E 3C 00 
1927b     00 00 00 3C 
1927f     7E 66 66 7E 
19283     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
19287     70 3C 1C 00 
1928b     00 00 00 00 
1928f     00 00 18 18 
19293     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
19297     18 18 18 00 
1929b     00 00 00 00 
1929f     00 00 18 18 
192a3     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
192a7     18 18 18 0C 
192ab     04 00 00 00 
192af     70 38 1C 0E 
192b3     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
192b7     70 00 00 00 
192bb     00 00 00 00 
192bf     00 00 7E 7E 
192c3     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
192c7     00 00 00 00 
192cb     00 00 00 00 | 	byte	$00[8]
192cf     0E 1C 38 70 
192d3     E0 70 38 1C 
192d7     0E 00 00 00 
192db     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
192df     7E 66 66 30 
192e3     30 18 18 18 
192e7     00 18 18 00 
192eb     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
192ef     7E 66 66 66 
192f3     66 36 06 66 
192f7     66 7E 3C 00 
192fb     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
192ff     3C 7E 66 66 
19303     66 7E 7E 66 
19307     66 66 66 00 
1930b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1930f     7E 66 66 7E 
19313     3E 66 66 66 
19317     66 7E 3E 00 
1931b     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1931f     7E 66 66 06 
19323     06 06 06 66 
19327     66 7E 3C 00 
1932b     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1932f     7E 66 66 66 
19333     66 66 66 66 
19337     66 7E 3E 00 
1933b     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1933f     7E 06 06 3E 
19343     3E 06 06 06 
19347     06 7E 7E 00 
1934b     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1934f     7E 06 06 3E 
19353     3E 06 06 06 
19357     06 06 06 00 
1935b     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1935f     7E 06 06 76 
19363     76 66 66 66 
19367     66 7E 3C 00 
1936b     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1936f     66 66 66 7E 
19373     7E 66 66 66 
19377     66 66 66 00 
1937b     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1937f     7E 18 18 18 
19383     18 18 18 18 
19387     18 7E 7E 00 
1938b     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1938f     60 60 60 60 
19393     60 60 60    | 	byte	$60[7]
19396     66 66 7E 3C 
1939a     00 00 00 00 
1939e     66 66 36 36 
193a2     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
193a6     66 66 C6 C6 
193aa     00 00 00 00 
193ae     06 06 06 06 
193b2     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
193b6     06 06 7E 7E 
193ba     00 00 00 00 
193be     C6 C6 EE EE 
193c2     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
193c6     C6 C6 C6 C6 
193ca     00 00 00 00 
193ce     66 66 66 6E 
193d2     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
193d6     76 66 66 66 
193da     00 00 00 00 
193de     3C 7E 66 66 
193e2     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
193e6     66 66 7E 3C 
193ea     00 00 00 00 
193ee     3E 7E 66 66 
193f2     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
193f6     06 06 06 06 
193fa     00 00 00 00 
193fe     3C 7E 66 66 
19402     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
19406     66 56 3E 6C 
1940a     00 00 00 00 
1940e     3E 7E 66 66 
19412     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
19416     66 66 C6 C6 
1941a     00 00 00 00 
1941e     7C 7E 06 06 
19422     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
19426     60 60 7E 3E 
1942a     00 00 00 00 
1942e     7E 7E 18 18 
19432     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
19436     18 18 18 18 
1943a     00 00 00 00 
1943e     66 66 66 66 
19442     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
19446     66 66 7E 3C 
1944a     00 00 00 00 
1944e     66 66 66 66 
19452     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
19456     3C 3C 18 18 
1945a     00 00 00 00 
1945e     C6 C6 C6 C6 
19462     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
19466     FE EE C6 82 
1946a     00 00 00 00 
1946e     66 66 66 3C 
19472     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
19476     3C 66 66 66 
1947a     00 00 00 00 
1947e     66 66 66 66 
19482     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
19486     18 18 18 18 
1948a     00 00 00 00 
1948e     7E 7E 30 30 
19492     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
19496     06 06 7E 7E 
1949a     00 00 00 00 
1949e     3C 3C 0C 0C 
194a2     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
194a6     0C 0C 3C 3C 
194aa     00 00 00 00 
194ae     06 06 0C 0C 
194b2     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
194b6     60 60 C0 C0 
194ba     00 00 00 00 
194be     3C 3C 30 30 
194c2     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
194c6     30 30 3C 3C 
194ca     00 00 00 00 
194ce     18 18 3C 3C 
194d2     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
194d6     00 00 00 00 
194da     00 00 00 00 
194de     00 00 00 00 
194e2     00 00 00 00 
194e6     00 00       | 	byte	$00[18]
194e8     FE FE 00 00 
194ec     00 00 0C 0C 
194f0     18 18 00 00 
194f4     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
194f8     00 00 00 00 
194fc     00 00 00 00 
19500     00          | 	byte	$00[9]
19501     3C 7C 60 7C 
19505     7E 66 66 7E 
19509     7C 00 00 00 
1950d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
19511     3E 7E 66 66 
19515     66 66 66 7E 
19519     3E 00 00 00 
1951d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
19521     3C 3E 06 06 
19525     06 06 06 7E 
19529     7C 00 00 00 
1952d     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
19531     7C 7E 66 66 
19535     66 66 66 7E 
19539     7C 00 00 00 
1953d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
19541     3C 7E 66 66 
19545     7E 06 06 7E 
19549     7C 00 00 00 
1954d     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
19551     18 7E 7E 18 
19555     18 18 18 18 
19559     18 00 00 00 
1955d     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19561     7C 7E 66 66 
19565     66 66 7E 7C 
19569     60 7E 3E 00 
1956d     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
19571     3E 7E 66 66 
19575     66 66 66 66 
19579     66 00 00 00 
1957d     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
19581     1C 1C 18 18 
19585     18 18 18 3C 
19589     3C 00 00 00 
1958d     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
19591     30 30 30 30 
19595     30 30 30 30 
19599     30          | 	byte	$30[9]
1959a     3E 1E 00 00 
1959e     06 06 06 36 
195a2     36 1E 1E 1E 
195a6     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
195aa     00 00 00 00 
195ae     1C 1C 18 18 
195b2     18 18 18 18 
195b6     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
195ba     00 00 00 00 
195be     00 00 00    | 	byte	$00[7]
195c1     6C FE FE D6 
195c5     D6 C6 C6 C6 
195c9     C6 00 00 00 
195cd     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
195d1     3E 7E 66 66 
195d5     66 66 66 66 
195d9     66 00 00 00 
195dd     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
195e1     3C 7E 66 66 
195e5     66 66 66 7E 
195e9     3C 00 00 00 
195ed     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
195f1     3E 7E 66 66 
195f5     66 66 66 7E 
195f9     3E 06 06 00 
195fd     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
19601     7C 7E 66 66 
19605     66 66 66 7E 
19609     7C 60 60 00 
1960d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
19611     3E 7E 66 06 
19615     06 06 06 06 
19619     06 00 00 00 
1961d     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
19621     7C 7E 06 0E 
19625     3C 70 60 7E 
19629     3E 00 00 00 
1962d     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
19631     7E 7E 18 18 
19635     18 18 18 78 
19639     70 00 00 00 
1963d     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
19641     66 66 66 66 
19645     66 66 66    | 	byte	$66[7]
19648     7E 7C 00 00 
1964c     00 00 00 00 
19650     00 66 66 66 
19654     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
19658     18 18 00 00 
1965c     00 00 00 00 
19660     00 C6 C6 D6 
19664     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
19668     C6 82 00 00 
1966c     00 00 00 00 
19670     00 66 66 3C 
19674     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
19678     66 66 00 00 
1967c     00 00 00 00 
19680     00 66 66 66 
19684     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
19688     7C 60 7E 3E 
1968c     00 00 00 00 
19690     00 7E 7E 30 
19694     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
19698     7E 7E 00 00 
1969c     00 00 30 18 
196a0     18 18 18 0C 
196a4     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
196a8     18 30 00 00 
196ac     00 00 18 18 
196b0     18 18 18 18 
196b4     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
196b8     18 18 00 00 
196bc     00 00 0C 18 
196c0     18 18 18 30 
196c4     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
196c8     18 0C 00 00 
196cc     00 00 6C 7E 
196d0     36 00 00 00 
196d4     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
196d8     00 00 00 00 
196dc     00 00 00 00 
196e0     00          | 	byte	$00[9]
196e1     18 18 18 18 
196e5     18 18 00 00 
196e9     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
196ec     00 00 00 00 
196f0     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
196f4     00 00 00 00 
196f8     00 80 80 80 
196fc     00 00 00 FF 
19700     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
19704     00 00 00 00 
19708     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
19709     80 00 00 00 
1970d     00 80 00 00 
19711     80 80 00 00 
19715     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
19719     80 00 80 00 
1971d     00 40 80 00 
19721     AA AA AA 00 
19725     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
19729     FF 00 00 00 
1972d     00 FF 00 00 
19731     FF FF 00 00 
19735     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
19739     FF 00 FF 00 
1973d     00 FF FF 00 
19741     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
19744     00 00 00 00 
19748     00          | ataripalette   file "ataripalettep2.def"
19749     11 11 11 00 
1974d     22 22 22 00 
19751     33 33 33 00 
19755     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
19759     55 55 55 00 
1975d     66 66 66 00 
19761     77 77 77 00 
19765     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
19769     99 99 99 00 
1976d     AA AA AA 00 
19771     BB BB BB 00 
19775     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
19779     DD DD DD 00 
1977d     EE EE EE 00 
19781     FF FF FF 00 
19785     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
19789     00 14 40 00 
1978d     00 1E 60 00 
19791     00 28 80 00 
19795     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
19799     00 3C BF 00 
1979d     00 46 DF 00 
197a1     00 50 FF 00 
197a5     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
197a9     39 77 FF 00 
197ad     55 8A FF 00 
197b1     71 9E FF 00 
197b5     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
197b9     AA C5 FF 00 
197bd     C6 D8 FF 00 
197c1     E3 EC FF 00 
197c5     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
197c9     00 00 40 00 
197cd     00 00 60 00 
197d1     00 00 80 00 
197d5     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
197d9     00 00 BF 00 
197dd     00 00 DF 00 
197e1     00 00 FF 00 
197e5     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
197e9     39 39 FF 00 
197ed     55 55 FF 00 
197f1     71 71 FF 00 
197f5     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
197f9     AA AA FF 00 
197fd     C6 C6 FF 00 
19801     E3 E3 FF 00 
19805     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
19809     20 00 40 00 
1980d     30 00 60 00 
19811     40 00 80 00 
19815     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
19819     60 00 BF 00 
1981d     70 00 DF 00 
19821     80 00 FF 00 
19825     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
19829     9C 39 FF 00 
1982d     AA 55 FF 00 
19831     B8 71 FF 00 
19835     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
19839     D5 AA FF 00 
1983d     E3 C6 FF 00 
19841     F1 E3 FF 00 
19845     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
19849     40 00 40 00 
1984d     60 00 60 00 
19851     80 00 80 00 
19855     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
19859     BF 00 BF 00 
1985d     DF 00 DF 00 
19861     FF 00 FF 00 
19865     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
19869     FF 39 FF 00 
1986d     FF 55 FF 00 
19871     FF 71 FF 00 
19875     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
19879     FF AA FF 00 
1987d     FF C6 FF 00 
19881     FF E3 FF 00 
19885     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
19889     40 00 20 00 
1988d     60 00 30 00 
19891     80 00 40 00 
19895     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
19899     BF 00 60 00 
1989d     DF 00 70 00 
198a1     FF 00 80 00 
198a5     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
198a9     FF 39 9C 00 
198ad     FF 55 AA 00 
198b1     FF 71 B8 00 
198b5     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
198b9     FF AA D5 00 
198bd     FF C6 E3 00 
198c1     FF E3 F1 00 
198c5     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
198c9     40 00 00 00 
198cd     60 00 00 00 
198d1     80 00 00 00 
198d5     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
198d9     BF 00 00 00 
198dd     DF 00 00 00 
198e1     FF 00 00 00 
198e5     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
198e9     FF 39 39 00 
198ed     FF 55 55 00 
198f1     FF 71 71 00 
198f5     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
198f9     FF AA AA 00 
198fd     FF C6 C6 00 
19901     FF E3 E3 00 
19905     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
19909     40 10 00 00 
1990d     60 18 00 00 
19911     80 20 00 00 
19915     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
19919     BF 30 00 00 
1991d     DF 38 00 00 
19921     FF 40 00 00 
19925     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
19929     FF 6A 39 00 
1992d     FF 80 55 00 
19931     FF 95 71 00 
19935     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
19939     FF BF AA 00 
1993d     FF D5 C6 00 
19941     FF EA E3 00 
19945     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
19949     40 20 00 00 
1994d     60 30 00 00 
19951     80 40 00 00 
19955     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
19959     BF 60 00 00 
1995d     DF 70 00 00 
19961     FF 80 00 00 
19965     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
19969     FF 9C 39 00 
1996d     FF AA 55 00 
19971     FF B8 71 00 
19975     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
19979     FF D5 AA 00 
1997d     FF E3 C6 00 
19981     FF F1 E3 00 
19985     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
19989     40 30 00 00 
1998d     60 48 00 00 
19991     80 60 00 00 
19995     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
19999     BF 90 00 00 
1999d     DF A8 00 00 
199a1     FF C0 00 00 
199a5     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
199a9     FF CE 39 00 
199ad     FF D5 55 00 
199b1     FF DC 71 00 
199b5     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
199b9     FF EA AA 00 
199bd     FF F1 C6 00 
199c1     FF F8 E3 00 
199c5     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
199c9     30 40 00 00 
199cd     48 60 00 00 
199d1     60 80 00 00 
199d5     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
199d9     90 BF 00 00 
199dd     A8 DF 00 00 
199e1     C0 FF 00 00 
199e5     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
199e9     CE FF 39 00 
199ed     D5 FF 55 00 
199f1     DC FF 71 00 
199f5     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
199f9     EA FF AA 00 
199fd     F1 FF C6 00 
19a01     F8 FF E3 00 
19a05     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
19a09     00 40 00 00 
19a0d     00 60 00 00 
19a11     00 80 00 00 
19a15     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
19a19     00 BF 00 00 
19a1d     00 DF 00 00 
19a21     00 FF 00 00 
19a25     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
19a29     39 FF 39 00 
19a2d     55 FF 55 00 
19a31     71 FF 71 00 
19a35     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
19a39     AA FF AA 00 
19a3d     C6 FF C6 00 
19a41     E3 FF E3 00 
19a45     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
19a49     00 40 14 00 
19a4d     00 60 1E 00 
19a51     00 80 28 00 
19a55     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
19a59     00 BF 3C 00 
19a5d     00 DF 46 00 
19a61     00 FF 50 00 
19a65     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
19a69     39 FF 77 00 
19a6d     55 FF 8A 00 
19a71     71 FF 9E 00 
19a75     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
19a79     AA FF C5 00 
19a7d     C6 FF D8 00 
19a81     E3 FF EC 00 
19a85     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
19a89     00 40 28 00 
19a8d     00 60 3C 00 
19a91     00 80 50 00 
19a95     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
19a99     00 BF 78 00 
19a9d     00 DF 8C 00 
19aa1     00 FF A0 00 
19aa5     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
19aa9     39 FF B5 00 
19aad     55 FF C0 00 
19ab1     71 FF CA 00 
19ab5     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
19ab9     AA FF DF 00 
19abd     C6 FF EA 00 
19ac1     E3 FF F4 00 
19ac5     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
19ac9     00 40 40 00 
19acd     00 60 60 00 
19ad1     00 80 80 00 
19ad5     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
19ad9     00 BF BF 00 
19add     00 DF DF 00 
19ae1     00 FF FF 00 
19ae5     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
19ae9     39 FF FF 00 
19aed     55 FF FF 00 
19af1     71 FF FF 00 
19af5     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
19af9     AA FF FF 00 
19afd     C6 FF FF 00 
19b01     E3 FF FF 00 
19b05     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
19b09     00 28 40 00 
19b0d     00 3C 60 00 
19b11     00 50 80 00 
19b15     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
19b19     00 78 BF 00 
19b1d     00 8C DF 00 
19b21     00 A0 FF 00 
19b25     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
19b29     39 B5 FF 00 
19b2d     55 C0 FF 00 
19b31     71 CA FF 00 
19b35     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
19b39     AA DF FF 00 
19b3d     C6 EA FF 00 
19b41     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
19b44                 | '**********************************************************************************
19b44                 | '
19b44                 | '        Timings and colors definitions
19b44                 | '
19b44                 | '**********************************************************************************
19b44                 | 
19b44                 |    'streamer sets for text mode, to add to timings[0..5]
19b44                 | ' todo for the retromachine: 768x576
19b44                 | 
19b44                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
19b44     10 00 00 00 
19b48     50 00 00 00 
19b4c     14 00 00 00 
19b50     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19b54     70 00 00 00 
19b58     08 00 00 00 
19b5c     30 00 00 00 
19b60     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
19b64     10 00 00 00 
19b68     10 00 00 00 
19b6c     00 00 00 00 
19b70     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
19b74     E0 01 00 00 
19b78     F6 32 24 15 
19b7c     FB 6C C3 01 
19b80     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19b84                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
19b84                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
19b84     30 00 00 00 
19b88     50 00 00 00 
19b8c     34 00 00 00 
19b90     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
19b94     20 00 00 00 
19b98     08 00 00 00 
19b9c     16 00 00 00 
19ba0     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
19ba4     24 00 00 00 
19ba8     18 00 00 00 
19bac     40 00 00 00 
19bb0     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
19bb4     F0 01 00 00 
19bb8     F6 32 24 15 
19bbc     FB 6C C3 01 
19bc0     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
19bc4                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
19bc4     10 00 00 00 
19bc8     40 00 00 00 
19bcc     10 00 00 00 
19bd0     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
19bd4     08 00 00 00 
19bd8     08 00 00 00 
19bdc     08 00 00 00 
19be0     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
19be4     40 00 00 00 
19be8     20 00 00 00 
19bec     80 00 00 00 
19bf0     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
19bf4     E0 01 00 00 
19bf8     70 AE E9 10 
19bfc     FB 8B FF 01 
19c00     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
19c04     10 00 00 00 
19c08     42 00 00 00 
19c0c     14 00 00 00 
19c10     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19c14     00 00 00 00 
19c18     08 00 00 00 
19c1c     00 00 00 00 
19c20     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
19c24     10 00 00 00 
19c28     10 00 00 00 
19c2c     C0 00 00 00 
19c30     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
19c34     40 02 00 00 
19c38     F6 32 24 15 
19c3c     FB 6C C3 01 
19c40     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19c44     50 00 00 00 
19c48     A0 00 00 00 
19c4c     54 00 00 00 
19c50     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
19c54     08 00 00 00 
19c58     08 00 00 00 
19c5c     08 00 00 00 
19c60     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19c64     0C 00 00 00 
19c68     08 00 00 00 
19c6c     00 01 00 00 
19c70     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
19c74     E0 01 00 00 
19c78     10 06 56 15 
19c7c     FB 64 C3 01 
19c80     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
19c84     50 00 00 00 
19c88     32 00 00 00 
19c8c     50 00 00 00 
19c90     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19c94     08 00 00 00 
19c98     08 00 00 00 
19c9c     08 00 00 00 
19ca0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19ca4     0C 00 00 00 
19ca8     08 00 00 00 
19cac     40 01 00 00 
19cb0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
19cb4     E0 01 00 00 
19cb8     F2 CD 33 13 
19cbc     FB 53 92 01 
19cc0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19cc4     18 00 00 00 
19cc8     30 00 00 00 
19ccc     18 00 00 00 
19cd0     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
19cd4     08 00 00 00 
19cd8     08 00 00 00 
19cdc     08 00 00 00 
19ce0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19ce4     0C 00 00 00 
19ce8     08 00 00 00 
19cec     80 01 00 00 
19cf0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
19cf4     E0 01 00 00 
19cf8     F4 8F 11 11 
19cfc     FB 3A 55 01 
19d00     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
19d04     20 00 00 00 
19d08     40 00 00 00 
19d0c     22 00 00 00 
19d10     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19d14     00 00 00 00 
19d18     08 00 00 00 
19d1c     00 00 00 00 
19d20     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
19d24     0C 00 00 00 
19d28     08 00 00 00 
19d2c     C0 01 00 00 
19d30     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
19d34     F0 01 00 00 
19d38     F2 CD 33 13 
19d3c     FB 53 92 01 
19d40     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19d44                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
19d44     00 75 C7 97 
19d48     27 47 F6 0A 
19d4c     05 79 CB 9B 
19d50     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
19d54                 | 
19d54     28 12 64 FD | hdmi            setq    #9
19d58     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
19d5c                 |            '     setq2   #255
19d5c                 |             '    rdlong  $100, paletteptr 
19d5c     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
19d60     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
19d64     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
19d68     78 F9 02 F1 |                 add     ii,hbase
19d6c     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
19d70     7B 0B 80 FF 
19d74     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
19d78                 | 
19d78     66 66 86 FF 
19d7c     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
19d80                 | 
19d80                 | 
19d80                 | ''--------  frame rendering main loop  ---------------------------------------------------
19d80                 | 
19d80                 | p101
19d80     28 14 64 FD |                 setq    #10
19d84     00 DF 06 FB |                 rdlong  framebuf,  ptra
19d88     28 1E 64 FD |                 setq    #15
19d8c     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
19d90     71 99 02 FB |                 rdlong  border,borderptr
19d94                 | 
19d94     01 C4 06 F1 |                 add     frames,#1
19d98     76 F5 02 F6 |                 mov     dlptr2,dlptr
19d9c                 | 
19d9c     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
19da0     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
19da4     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
19da8     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
19dac                 |  '' up porch
19dac                 | 
19dac     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
19db0     49 FF 02 F6 |                 mov     hsync1,sync_001
19db4     37 A8 46 FB |                 callpa  i_upporch ,#blank
19db8     72 01 68 FC |                 wrlong  #0,vblankptr
19dbc                 |                 
19dbc     1F EA 16 F4 |                 testb   paletteptr,#31 wc
19dc0     29 FE 65 3D |          if_nc  setq2   #255
19dc4     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
19dc8                 | 
19dc8                 | '' cursor blinking
19dc8                 | 
19dc8     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
19dcc     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
19dd0                 | 
19dd0                 | '' main screen
19dd0                 | 
19dd0     00 BE 06 F6 |                 mov linenum,#0
19dd4     00 18 07 F6 |                 mov rcnt,#0
19dd8     00 1C 07 F6 |                 mov rcnt2a,#0
19ddc                 | 
19ddc                 | 
19ddc     00 18 0F F2 | p301            cmp rcnt,#0 wz
19de0     18 00 90 AD |         if_z    jmp #p306
19de4     01 18 87 F1 |                 sub rcnt,#1
19de8     90 F7 02 F6 |                 mov dl,rdl
19dec     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
19df0     8F F7 02 A1 |    if_z        add dl,roffset  
19df4     7B 21 03 F6 |                 mov rdl,dl
19df8     04 00 90 FD |                 jmp #p307          
19dfc                 |           
19dfc                 |                 
19dfc     7A F7 02 FB | p306            rdlong  dl,dlptr2
19e00     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
19e04     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
19e08     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
19e0c                 | 
19e0c                 | '' Special entry:
19e0c                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
19e0c                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
19e0c                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
19e0c                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
19e0c                 | '' todo: set horizontal scroll (if needed)
19e0c                 | 
19e0c     02 FA 66 F0 |                 shl framebuf2,#2
19e10     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
19e14     04 22 0F F2 |                 cmp dlc,#%100 wz
19e18                 |   
19e18                 |                 
19e18     04 F4 06 F1 |                 add dlptr2,#4
19e1c     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
19e20     7A 21 03 FB |                  rdlong rdl,dlptr2
19e24     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
19e28     04 18 47 F0 |                  shr rcnt,#4
19e2c                 |              
19e2c     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
19e30     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
19e34                 |                 
19e34     04 1E 47 F0 |                  shr roffset,#4
19e38     0C 1E 67 F0 |                  shl roffset,#12
19e3c                 |   
19e3c     9C FF 9F FD |                  jmp #p301
19e40                 |                  
19e40                 |                  
19e40                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
19e40     0C FA 46 F0 |                 shr     framebuf2,#12
19e44     02 FA 66 F0 |                 shl     framebuf2,#2
19e48                 | 
19e48     7B 03 E3 F8 |                 getbyte t1,dl,#0
19e4c     00 02 0F F2 |                 cmp     t1,#0 wz
19e50     34 00 90 AD |     if_z        jmp     #borderline
19e54                 | 
19e54     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
19e58     50 00 90 CD |           if_c   jmp     #textline
19e5c     50 02 90 3D |           if_nc  jmp     #graphline
19e60                 | '
19e60     01 BE 06 F1 | p302            add     linenum,#1
19e64     04 F4 06 F1 |                 add     dlptr2,#4
19e68     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
19e6c     6C FF 9F 5D |          if_nz  jmp     #p301
19e70                 | 
19e70     72 03 68 FC | p112            wrlong  #1,vblankptr
19e74     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
19e78                 | 
19e78     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
19e7c     4B FF 02 F6 |                 mov     hsync1,sync_223
19e80     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
19e84     F8 FE 9F FD |                 jmp     #p101
19e88                 | 
19e88                 | '' ---------------  END of frame rendering loop -------------------------------------------
19e88                 | 
19e88                 | 
19e88     14 00 B0 FD | borderline      call    #hsync                      ' make a border
19e8c     4C A1 C2 FC |                 xcont   m_vi,border
19e90     CC FF 9F FD |                 jmp     #p302
19e94                 | 
19e94                 | 
19e94     08 00 B0 FD | blank           call    #hsync                          'blank lines
19e98     7E A1 C2 FC |                 xcont   m_vi,hsync0
19e9c     FD ED 6F 0B |         _ret_   djnz    pa,#blank
19ea0                 | 
19ea0     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
19ea4     7F 9D B2 FC |                 xzero   m_sn,hsync1
19ea8     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
19eac                 | 
19eac                 | 
19eac                 | 
19eac                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
19eac                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
19eac                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
19eac                 | 
19eac                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
19eac                 | 
19eac     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
19eb0                 | 
19eb0     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
19eb4     7B 17 5B F8 |                 getnib  zoom, dl,#3
19eb8     03 16 07 F5 |                 and             zoom, #3
19ebc                 | 
19ebc                 | 
19ebc                 | 
19ebc     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
19ec0     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
19ec4     3F BC 06 F5 |                 and     linestart,#63
19ec8     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
19ecc     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
19ed0                 | 
19ed0     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
19ed4                 | 
19ed4                 |                        ' if fontline =0, get a border color
19ed4                 | 
19ed4     51 03 33 F9 | p102            getword t1,m_border,#0
19ed8     00 02 0F F2 |                 cmp     t1, #0 wz
19edc     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
19ee0                 | 
19ee0     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
19ee4     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
19ee8     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
19eec     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
19ef0     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
19ef4     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
19ef8     52 BB 02 F6 |                 mov m_lut2, m_lut1
19efc     6A BB 02 F1 |                 add m_lut2, lutt1
19f00     58 0F 03 F6 |                 mov cpl2,i_cpl
19f04                 | 
19f04     02 16 0F F2 |                cmp zoom,#2 wz
19f08     E4 00 90 AD |           if_z jmp #p420
19f0c     01 16 0F F2 |                cmp zoom,#1 wz
19f10     64 00 90 AD |           if_z jmp #p410
19f14     00 16 0F F2 |                 cmp zoom,#0 wz
19f18     04 00 90 AD |           if_z jmp #p400
19f1c     50 01 90 FD |                jmp #p430
19f20                 | 
19f20                 |                    '
19f20                 |  ''---------------------------------------------------------------------------------------------------------
19f20     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
19f24     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19f28     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19f2c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19f30     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19f34     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19f38     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19f3c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19f40     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19f44     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19f48                 | 
19f48     81 BB C2 FC |                         xcont m_lut2,t1
19f4c                 | 
19f4c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19f50     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19f54     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19f58     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19f5c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19f60     01 C0 86 F1 |                         sub     lutaddr,#1
19f64                 | 
19f64     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19f68     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19f6c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19f70                 | 
19f70     EB 0F 6F FB |                         djnz   cpl2,#p400
19f74     28 01 90 FD |  p401                   jmp    #p103
19f78                 | 
19f78                 | ''------------------------------------------------------------------------------------------------------------
19f78                 | 
19f78     01 0E 47 F0 |  p410                   shr cpl2,#1
19f7c                 | 
19f7c                 | ''---------------------------------------------------------------------------------------------------------
19f7c     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
19f80     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19f84     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19f88     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19f8c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19f90     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19f94     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19f98     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19f9c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19fa0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19fa4                 | 
19fa4                 | 
19fa4     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
19fa8     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
19fac     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
19fb0     03 02 07 FA |                         mul t1,#3
19fb4     81 BB C2 FC |                         xcont m_lut2,t1
19fb8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19fbc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19fc0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19fc4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19fc8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19fcc     01 C0 86 F1 |                         sub     lutaddr,#1
19fd0     63 06 63 FD |                         mergew t3
19fd4     03 06 07 FA |                         mul t3,#3
19fd8     83 BB C2 FC |                         xcont m_lut2,t3
19fdc                 | 
19fdc     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19fe0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19fe4                 | 
19fe4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19fe8                 | 
19fe8     E4 0F 6F FB |                         djnz   cpl2,#p412
19fec     B0 00 90 FD |  p411                   jmp    #p103
19ff0                 | 
19ff0                 | ''------------------------------------------------------------------------------------------------------------
19ff0                 | 
19ff0     02 0E 47 F0 |  p420                   shr cpl2,#2
19ff4                 | 
19ff4                 | ''---------------------------------------------------------------------------------------
19ff4     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
19ff8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19ffc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1a000     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1a004     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1a008     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1a00c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1a010     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1a014     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1a018     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1a01c                 | 
1a01c     61 02 63 FD |                         mergeb t1
1a020     81 07 3B F9 |                         getword t3,t1,#1
1a024     0F 02 07 FA |                         mul t1,#15
1a028     81 BB C2 FC |                         xcont m_lut2,t1
1a02c                 | 
1a02c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1a030     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1a034     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1a038     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1a03c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1a040     01 C0 86 F1 |                         sub     lutaddr,#1
1a044                 | 
1a044     81 09 EB F8 |                         getbyte t4,t1,#1        '
1a048     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1a04c                 | 
1a04c     0F 06 07 FA |                         mul t3,#15
1a050     83 BB C2 FC |                         xcont m_lut2,t3
1a054                 | 
1a054     83 0B EB F8 |                         getbyte t5,t3,#1
1a058     85 BB C2 FC |                         xcont m_lut2, t5
1a05c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1a060     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1a064                 | 
1a064     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1a068                 | 
1a068     E2 0F 6F FB |                         djnz   cpl2,#p422
1a06c     30 00 90 FD |  p421                   jmp    #p103
1a070                 | 
1a070                 | '--------------------------------------------------------------------------------------------------------------
1a070                 | 
1a070     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1a074     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1a078     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1a07c                 | 
1a07c     00 BA C6 FC |                         xcont m_lut2,#0
1a080                 | 
1a080     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1a084     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1a088     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1a08c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1a090     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1a094     01 C0 86 F1 |                         sub     lutaddr,#1
1a098                 | 
1a098     F5 0F 6F FB |                         djnz   cpl2,#p430
1a09c     00 00 90 FD |  p431                   jmp    #p103
1a0a0                 | 
1a0a0                 | ''------------------------------------------------------------------------------------------------------------
1a0a0                 | 
1a0a0                 | 
1a0a0                 | 
1a0a0     51 25 33 F9 | p103            getword  mb2,m_border,#0
1a0a4     00 24 0F F2 |                 cmp      mb2, #0 wz
1a0a8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a0ac                 | 
1a0ac     B0 FD 9F FD |                 jmp #p302
1a0b0                 | 
1a0b0                 | '' -------------------------------------- END of text line ---------------------------------
1a0b0                 | 
1a0b0                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1a0b0                 | 
1a0b0     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1a0b4                 | 
1a0b4                 | 
1a0b4     51 25 33 F9 | p202            getword mb2,m_border,#0
1a0b8     00 24 0F F2 |                 cmp     mb2, #0 wz
1a0bc     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1a0c0                 | 
1a0c0                 | '----------------------------------------- display pixels
1a0c0                 | 
1a0c0     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1a0c4     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1a0c8                 | 
1a0c8     7B 17 5B F8 |                 getnib  zoom, dl,#3
1a0cc     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1a0d0                 | 
1a0d0     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1a0d4     0C BC 06 F5 |                 and     colordepth,#12
1a0d8                 | 
1a0d8     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1a0dc     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1a0e0     64 00 90 AD |           if_z  jmp     #p240
1a0e4                 | 
1a0e4     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1a0e8     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1a0ec     98 00 90 AD |           if_z  jmp     #p250
1a0f0                 | 
1a0f0     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1a0f4     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1a0f8     FC 00 90 AD |           if_z  jmp     #p260
1a0fc                 | 
1a0fc     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1a100                 | 
1a100                 | '' --- 8 bit color modes
1a100                 | 
1a100     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1a104     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a108                 | 
1a108     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1a10c     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1a110                 |        
1a110                 |  '  
1a110     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1a114     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1a118                 |     
1a118                 |  
1a118     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1a11c     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1a120                 |         
1a120                 | 
1a120                 |         
1a120     7D 11 03 FB | p235               rdlong  char,framebuf2
1a124     32 0C 63 FD |                    skipf skippattern
1a128     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1a12c     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1a130     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1a134     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1a138     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1a13c     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1a140     F7 0F 6F FB |                    djnz    cpl2,#p235
1a144                 | 
1a144     20 01 90 FD |                jmp    #p203
1a148                 |                   
1a148                 | 
1a148                 | 
1a148                 | '' --- 1 bit color modes
1a148                 | 
1a148     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1a14c     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a150                 | 
1a150     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1a154     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1a158     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1a15c                 | 
1a15c                 | 
1a15c     7D 11 E3 FA | p241               rdword  char,framebuf2
1a160     44 10 FF F9 |                    movbyts char,#%01000100
1a164     63 10 63 FD |                    mergew  char
1a168     32 0C 63 FD |                    skipf skippattern
1a16c     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1a170     63 10 63 FD |                    mergew  char                    ' 1 0
1a174     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1a178     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1a17c     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1a180     F6 0F 6F FB |                    djnz   cpl2,#p241
1a184                 | 
1a184                 | 
1a184     E0 00 90 FD |                jmp    #p203
1a188                 | 
1a188                 | '' --- 2 bit color modes
1a188                 | 
1a188     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1a18c     C8 00 90 AD |        if_z   jmp #p251
1a190                 | 
1a190     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a194     30 00 90 AD |        if_z   jmp #p252
1a198                 | 
1a198                 | 
1a198     7D 11 C3 FA | p254               rdbyte char,framebuf2
1a19c     04 0A 07 F6 |                    mov  t5,#4
1a1a0     02 10 67 F0 | p255               shl  char,#2
1a1a4     88 03 53 F8 |                    getnib  t1,char,#2
1a1a8     03 02 07 F5 |                    and     t1,#3
1a1ac     55 02 07 FA |                    mul     t1,#$55
1a1b0     81 05 03 F9 |                    rolbyte  t2,t1,#0
1a1b4     FA 0B 6F FB |                    djnz    t5,#p255
1a1b8     82 BB C2 FC |                    xcont   m_lut2,t2
1a1bc     01 FA 06 F1 |                    add     framebuf2,#1
1a1c0     F5 0F 6F FB |                    djnz    cpl2,#p254
1a1c4     A0 00 90 FD |                    jmp     #p203
1a1c8                 | 
1a1c8     7D 11 E3 FA | p252               rdword char,framebuf2
1a1cc     08 0A 07 F6 |                    mov  t5,#8
1a1d0     02 10 67 F0 | p253               shl  char,#2
1a1d4     88 03 63 F8 |                    getnib  t1,char,#4
1a1d8     03 02 07 F5 |                    and     t1,#3
1a1dc     05 02 07 FA |                    mul     t1,#5
1a1e0     81 05 83 F8 |                    rolnib  t2,t1,#0
1a1e4     FA 0B 6F FB |                    djnz    t5,#p253
1a1e8     82 BB C2 FC |                    xcont   m_lut2,t2
1a1ec     02 FA 06 F1 |                    add     framebuf2,#2
1a1f0     F5 0F 6F FB |                    djnz    cpl2,#p252
1a1f4     70 00 90 FD |                    jmp     #p203
1a1f8                 | 
1a1f8                 | '' ------ 4 bit color modes
1a1f8                 | 
1a1f8     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1a1fc     58 00 90 AD |        if_z   jmp #p251
1a200                 | 
1a200     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a204     2C 00 90 AD |        if_z   jmp #p262
1a208                 | 
1a208                 | 
1a208     7D 11 C3 FA | p263               rdbyte char,framebuf2
1a20c     02 0A DC FC |                            rep #5,#2
1a210     88 05 8B F8 |                              rolnib t2,char,#1
1a214     88 05 8B F8 |                                  rolnib t2,char,#1
1a218     88 05 8B F8 |                              rolnib t2,char,#1
1a21c     88 05 8B F8 |                                  rolnib t2,char,#1
1a220     04 10 67 F0 |                              shl char,#4
1a224     82 BB C2 FC |                    xcont   m_lut2,t2
1a228     01 FA 06 F1 |                    add     framebuf2,#1
1a22c     F6 0F 6F FB |                    djnz    cpl2,#p263
1a230     34 00 90 FD |                    jmp     #p203
1a234                 | 
1a234     7D 11 E3 FA | p262               rdword  char,framebuf2
1a238     04 06 DC FC |                            rep #3,#4
1a23c     88 05 9B F8 |                              rolnib t2,char,#3
1a240     88 05 9B F8 |                                  rolnib t2,char,#3
1a244     04 10 67 F0 |                              shl char,#4
1a248     82 BB C2 FC |                    xcont   m_lut2,t2
1a24c     02 FA 06 F1 |                    add     framebuf2,#2
1a250     F8 0F 6F FB |                    djnz    cpl2,#p262
1a254     10 00 90 FD |                    jmp     #p203
1a258                 | 
1a258                 | ''---------- all color modes without zoom
1a258                 | 
1a258     87 07 D8 FC | p251               rep  #3,cpl2
1a25c     7D 11 03 FB |                    rdlong  char,framebuf2
1a260     04 FA 06 F1 |                    add     framebuf2,#4
1a264     88 BB C2 FC |                    xcont   m_lut2,char
1a268                 |           
1a268                 |  ''-----------------------------------------------------------------------------------------
1a268                 | p203           ' getword  mb2,m_border,#0
1a268     00 24 0F F2 |                 cmp      mb2, #0 wz
1a26c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a270                 | 
1a270     EC FB 9F FD |                 jmp #p302
1a274                 | 
1a274                 | '' -------------------------------------- END of graph  line ---------------------------------
1a274                 | 
1a274                 | '' consts and vars
1a274                 | 
1a274     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1a278     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1a27c     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1a280     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1a284                 | 
1a284     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1a288                 | 
1a288                 | '------ these longs will be set by setmode function
1a288                 | 
1a288     00 00 00 00 | m_bs            long    0        'blanks before sync
1a28c     00 00 00 00 | m_sn            long    0        'sync
1a290     00 00 00 00 | m_bv            long    0        'blanks before visible
1a294     00 00 00 00 | m_vi            long    0        'visible pixels #
1a298     00 00 00 00 | m_border        long    0        'left/right borders
1a29c     00 00 00 00 | m_lut1          long    0        'characters
1a2a0     00 00 00 00 | i_vborder       long    0        'up/down borders
1a2a4     00 00 00 00 | i_upporch       long    0        'up porch lines
1a2a8     00 00 00 00 | i_vsync         long    0        'vsync lines
1a2ac     00 00 00 00 | i_downporch     long    0        'down porch lines
1a2b0     00 00 00 00 | i_modenum       long    0        'mode #
1a2b4     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1a2b8     00 00 00 00 | i_lines         long    0        'scanlines #
1a2bc     00 00 00 00 | i_clock         long    0
1a2c0     00 00 00 00 | i_hubset        long    0
1a2c4     00 00 00 00 | i_totalvis      long    0
1a2c8                 | 
1a2c8                 | '-------------------------------------
1a2c8                 | 
1a2c8     00 00 00 00 | m_lut2          long    0
1a2cc                 | 
1a2cc                 | colordepth
1a2cc     00 00 00 00 | linestart       long    0
1a2d0     00 00 00 00 | linenum         long    0
1a2d4     00 01 00 00 | lutaddr         long    256
1a2d8                 | 
1a2d8     0E 00 00 00 | cursorsh        long    14
1a2dc     00 00 00 00 | frames          long    0
1a2e0     00 00 00 00 | cursorx         long    0
1a2e4     00 00 00 00 | cursory         long    0
1a2e8     00 00 00 00 | cursorpos       long    0
1a2ec     00 00 00 00 | cursorpos2      long    0
1a2f0     00 00 00 00 | fontstart       long    0
1a2f4     00 00 00 00 | border2         long 0
1a2f8     00 00 81 70 | lutiv           long $70810000
1a2fc     00 00 88 00 | lutt1           long $00880000
1a300     00 00 80 00 | lutg1           long $00800000
1a304     00 00 80 10 | lutg2           long $10800000
1a308     00 00 80 20 | lutg4           long $20800000
1a30c     00 00 80 30 | lutg8           long $30800000
1a310     00 00 00 00 | framebuf        long 0
1a314     00 00 00 00 | fontbuf         long 0
1a318     00 00 00 00 | borderptr       long 0
1a31c     00 00 00 00 | vblankptr       long 0
1a320     00 00 00 00 | cursorptr       long 0
1a324     00 00 00 00 | modeptr         long 0
1a328     00 00 00 00 | paletteptr      long 0
1a32c     00 00 00 00 | dlptr           long 0
1a330                 | fontnumptr      res     1
1a330                 | fontnumptr      res     1
1a330                 | hbase           res     1
1a330                 | hbase           res     1
1a330                 | borderptr2      res     1
1a330                 | borderptr2      res     1
1a330                 | dlptr2 res 1
1a330                 | dlptr2 res 1
1a330                 | dl              res 1
1a330                 | dl              res 1
1a330                 | ii              res     1
1a330                 | ii              res     1
1a330                 | framebuf2       res     1
1a330                 | framebuf2       res     1
1a330                 | hsync0          res     1
1a330                 | hsync0          res     1
1a330                 | hsync1          res     1
1a330                 | hsync1          res     1
1a330                 | fontline        res     1
1a330                 | fontline        res     1
1a330                 | t1              res     1
1a330                 | t1              res     1
1a330                 | t2              res     1
1a330                 | t2              res     1
1a330                 | t3 res 1
1a330                 | t3 res 1
1a330                 | t4 res 1
1a330                 | t4 res 1
1a330                 | t5 res 1
1a330                 | t5 res 1
1a330                 | skippattern res 1
1a330                 | skippattern res 1
1a330                 | cpl2 res 1
1a330                 | cpl2 res 1
1a330                 | char            res     1
1a330                 | char            res     1
1a330                 | backcolor       res     1
1a330                 | backcolor       res     1
1a330                 | charcolor       res     1
1a330                 | charcolor       res     1
1a330                 | zoom res 1
1a330                 | zoom res 1
1a330     00 00 00 00 | rcnt long 0 'dl repeat count
1a334     00 00 00 00 | rcnt2 long 0
1a338     00 00 00 00 | rcnt2a long 0
1a33c     00 00 00 00 | roffset long 0
1a340     00 00 00 00 | rdl long 0  'dl repeat line
1a344     00 00 00 00 | dlc long 0 'dl command
1a348     00 00 00 00 | mb2 long 0
1a34c     00 00 00 00 | aend             long 0
1a350                 |                 fit     496                     '
1a350                 | _trackerplayer_spin2_dat_
1a350                 | 
1a350     00 00 00 00 | null             long  0
1a354     46 52 45 51 
1a358     46 52 45 51 
1a35c     46 52 45 51 
1a360     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1a364     46 52 45 51 
1a368     46 52 45 51 
1a36c     46 52 45 51 
1a370     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a374     46 52 45 51 
1a378     46 52 45 51 
1a37c     46 52 45 51 
1a380     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a384     46 52 45 51 
1a388     46 52 45 51 
1a38c     46 52 45 51 
1a390     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a394     46 52 45 51 
1a398     46 52 45 51 
1a39c     46 52 45 51 
1a3a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3a4     46 52 45 51 
1a3a8     46 52 45 51 
1a3ac     46 52 45 51 
1a3b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3b4     46 52 45 51 
1a3b8     46 52 45 51 
1a3bc     46 52 45 51 
1a3c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3c4     46 52 45 51 
1a3c8     46 52 45 51 
1a3cc     46 52 45 51 
1a3d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3d4     46 52 45 51 
1a3d8     46 52 45 51 
1a3dc     46 52 45 51 
1a3e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3e4     46 52 45 51 
1a3e8     46 52 45 51 
1a3ec     46 52 45 51 
1a3f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3f4     46 52 45 51 
1a3f8     46 52 45 51 
1a3fc     46 52 45 51 
1a400     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a404     46 52 45 51 
1a408     46 52 45 51 
1a40c     46 52 45 51 
1a410     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a414     46 52 45 51 
1a418     46 52 45 51 
1a41c     46 52 45 51 
1a420     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a424     46 52 45 51 
1a428     46 52 45 51 
1a42c     46 52 45 51 
1a430     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a434     46 52 45 51 
1a438     46 52 45 51 
1a43c     46 52 45 51 
1a440     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a444     46 52 45 51 
1a448     46 52 45 51 
1a44c     46 52 45 51 
1a450     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a454     46 52 45 51 
1a458     46 52 45 51 
1a45c     46 52 45 51 
1a460     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a464     46 52 45 51 
1a468     46 52 45 51 
1a46c     46 52 45 51 
1a470     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a474     46 52 45 51 
1a478     46 52 45 51 
1a47c     46 52 45 51 
1a480     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a484     46 52 45 51 
1a488     46 52 45 51 
1a48c     46 52 45 51 
1a490     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a494     46 52 45 51 
1a498     46 52 45 51 
1a49c     46 52 45 51 
1a4a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4a4     46 52 45 51 
1a4a8     46 52 45 51 
1a4ac     46 52 45 51 
1a4b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4b4     46 52 45 51 
1a4b8     46 52 45 51 
1a4bc     46 52 45 51 
1a4c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4c4     46 52 45 51 
1a4c8     46 52 45 51 
1a4cc     46 52 45 51 
1a4d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4d4     46 52 45 51 
1a4d8     46 52 45 51 
1a4dc     46 52 45 51 
1a4e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4e4     46 52 45 51 
1a4e8     46 52 45 51 
1a4ec     46 52 45 51 
1a4f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4f4     46 52 45 51 
1a4f8     46 52 45 51 
1a4fc     46 52 45 51 
1a500     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a504     46 52 45 51 
1a508     46 52 45 51 
1a50c     46 52 45 51 
1a510     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a514     46 52 45 51 
1a518     46 52 45 51 
1a51c     46 52 45 51 
1a520     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a524     46 52 45 51 
1a528     46 52 45 51 
1a52c     46 52 45 51 
1a530     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a534     46 52 45 51 
1a538     46 52 45 51 
1a53c     46 52 45 51 
1a540     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a544     46 52 45 51 
1a548     46 52 45 51 
1a54c     46 52 45 51 
1a550     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a554     46 52 45 51 
1a558     46 52 45 51 
1a55c     46 52 45 51 
1a560     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a564     46 52 45 51 
1a568     46 52 45 51 
1a56c     46 52 45 51 
1a570     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a574     46 52 45 51 
1a578     46 52 45 51 
1a57c     46 52 45 51 
1a580     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a584     46 52 45 51 
1a588     46 52 45 51 
1a58c     46 52 45 51 
1a590     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a594     46 52 45 51 
1a598     46 52 45 51 
1a59c     46 52 45 51 
1a5a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5a4     46 52 45 51 
1a5a8     46 52 45 51 
1a5ac     46 52 45 51 
1a5b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5b4     46 52 45 51 
1a5b8     46 52 45 51 
1a5bc     46 52 45 51 
1a5c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5c4     46 52 45 51 
1a5c8     46 52 45 51 
1a5cc     46 52 45 51 
1a5d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5d4     46 52 45 51 
1a5d8     46 52 45 51 
1a5dc     46 52 45 51 
1a5e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5e4     46 52 45 51 
1a5e8     46 52 45 51 
1a5ec     46 52 45 51 
1a5f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5f4     46 52 45 51 
1a5f8     46 52 45 51 
1a5fc     46 52 45 51 
1a600     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a604     46 52 45 51 
1a608     46 52 45 51 
1a60c     46 52 45 51 
1a610     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a614     46 52 45 51 
1a618     46 52 45 51 
1a61c     46 52 45 51 
1a620     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a624     46 52 45 51 
1a628     46 52 45 51 
1a62c     46 52 45 51 
1a630     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a634     46 52 45 51 
1a638     46 52 45 51 
1a63c     46 52 45 51 
1a640     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a644     46 52 45 51 
1a648     46 52 45 51 
1a64c     46 52 45 51 
1a650     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a654     46 52 45 51 
1a658     46 52 45 51 
1a65c     46 52 45 51 
1a660     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a664     46 52 45 51 
1a668     46 52 45 51 
1a66c     46 52 45 51 
1a670     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a674     46 52 45 51 
1a678     46 52 45 51 
1a67c     46 52 45 51 
1a680     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a684     46 52 45 51 
1a688     46 52 45 51 
1a68c     46 52 45 51 
1a690     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a694     46 52 45 51 
1a698     46 52 45 51 
1a69c     46 52 45 51 
1a6a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6a4     46 52 45 51 
1a6a8     46 52 45 51 
1a6ac     46 52 45 51 
1a6b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6b4     46 52 45 51 
1a6b8     46 52 45 51 
1a6bc     46 52 45 51 
1a6c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6c4     46 52 45 51 
1a6c8     46 52 45 51 
1a6cc     46 52 45 51 
1a6d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6d4     46 52 45 51 
1a6d8     46 52 45 51 
1a6dc     46 52 45 51 
1a6e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6e4     46 52 45 51 
1a6e8     46 52 45 51 
1a6ec     46 52 45 51 
1a6f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6f4     46 52 45 51 
1a6f8     46 52 45 51 
1a6fc     46 52 45 51 
1a700     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a704     46 52 45 51 
1a708     46 52 45 51 
1a70c     46 52 45 51 
1a710     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a714     46 52 45 51 
1a718     46 52 45 51 
1a71c     46 52 45 51 
1a720     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a724     46 52 45 51 
1a728     46 52 45 51 
1a72c     46 52 45 51 
1a730     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a734     46 52 45 51 
1a738     46 52 45 51 
1a73c     46 52 45 51 
1a740     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a744     46 52 45 51 
1a748     46 52 45 51 
1a74c     46 52 45 51 
1a750     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a754     46 52 45 51 
1a758     46 52 45 51 
1a75c     46 52 45 51 
1a760     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a764     46 52 45 51 
1a768     46 52 45 51 
1a76c     46 52 45 51 
1a770     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a774     46 52 45 51 
1a778     46 52 45 51 
1a77c     46 52 45 51 
1a780     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a784     46 52 45 51 
1a788     46 52 45 51 
1a78c     46 52 45 51 
1a790     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a794     46 52 45 51 
1a798     46 52 45 51 
1a79c     46 52 45 51 
1a7a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7a4     46 52 45 51 
1a7a8     46 52 45 51 
1a7ac     46 52 45 51 
1a7b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7b4     46 52 45 51 
1a7b8     46 52 45 51 
1a7bc     46 52 45 51 
1a7c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7c4     46 52 45 51 
1a7c8     46 52 45 51 
1a7cc     46 52 45 51 
1a7d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7d4     46 52 45 51 
1a7d8     46 52 45 51 
1a7dc     46 52 45 51 
1a7e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7e4     46 52 45 51 
1a7e8     46 52 45 51 
1a7ec     46 52 45 51 
1a7f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7f4     46 52 45 51 
1a7f8     46 52 45 51 
1a7fc     46 52 45 51 
1a800     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a804     46 52 45 51 
1a808     46 52 45 51 
1a80c     46 52 45 51 
1a810     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a814     46 52 45 51 
1a818     46 52 45 51 
1a81c     46 52 45 51 
1a820     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a824     46 52 45 51 
1a828     46 52 45 51 
1a82c     46 52 45 51 
1a830     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a834     46 52 45 51 
1a838     46 52 45 51 
1a83c     46 52 45 51 
1a840     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a844     46 52 45 51 
1a848     46 52 45 51 
1a84c     46 52 45 51 
1a850     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a854     46 52 45 51 
1a858     46 52 45 51 
1a85c     46 52 45 51 
1a860     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a864     46 52 45 51 
1a868     46 52 45 51 
1a86c     46 52 45 51 
1a870     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a874     46 52 45 51 
1a878     46 52 45 51 
1a87c     46 52 45 51 
1a880     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a884     46 52 45 51 
1a888     46 52 45 51 
1a88c     46 52 45 51 
1a890     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a894     46 52 45 51 
1a898     46 52 45 51 
1a89c     46 52 45 51 
1a8a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8a4     46 52 45 51 
1a8a8     46 52 45 51 
1a8ac     46 52 45 51 
1a8b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8b4     46 52 45 51 
1a8b8     46 52 45 51 
1a8bc     46 52 45 51 
1a8c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8c4     46 52 45 51 
1a8c8     46 52 45 51 
1a8cc     46 52 45 51 
1a8d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8d4     46 52 45 51 
1a8d8     46 52 45 51 
1a8dc     46 52 45 51 
1a8e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8e4     46 52 45 51 
1a8e8     46 52 45 51 
1a8ec     46 52 45 51 
1a8f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8f4     46 52 45 51 
1a8f8     46 52 45 51 
1a8fc     46 52 45 51 
1a900     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a904     46 52 45 51 
1a908     46 52 45 51 
1a90c     46 52 45 51 
1a910     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a914     46 52 45 51 
1a918     46 52 45 51 
1a91c     46 52 45 51 
1a920     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a924     46 52 45 51 
1a928     46 52 45 51 
1a92c     46 52 45 51 
1a930     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a934     46 52 45 51 
1a938     46 52 45 51 
1a93c     46 52 45 51 
1a940     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a944     46 52 45 51 
1a948     46 52 45 51 
1a94c     46 52 45 51 
1a950     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a954     46 52 45 51 
1a958     46 52 45 51 
1a95c     46 52 45 51 
1a960     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a964     46 52 45 51 
1a968     46 52 45 51 
1a96c     46 52 45 51 
1a970     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a974     46 52 45 51 
1a978     46 52 45 51 
1a97c     46 52 45 51 
1a980     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a984     46 52 45 51 
1a988     46 52 45 51 
1a98c     46 52 45 51 
1a990     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a994     46 52 45 51 
1a998     46 52 45 51 
1a99c     46 52 45 51 
1a9a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9a4     46 52 45 51 
1a9a8     46 52 45 51 
1a9ac     46 52 45 51 
1a9b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9b4     46 52 45 51 
1a9b8     46 52 45 51 
1a9bc     46 52 45 51 
1a9c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9c4     46 52 45 51 
1a9c8     46 52 45 51 
1a9cc     46 52 45 51 
1a9d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9d4     46 52 45 51 
1a9d8     46 52 45 51 
1a9dc     46 52 45 51 
1a9e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9e4     46 52 45 51 
1a9e8     46 52 45 51 
1a9ec     46 52 45 51 
1a9f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9f4     46 52 45 51 
1a9f8     46 52 45 51 
1a9fc     46 52 45 51 
1aa00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa04     46 52 45 51 
1aa08     46 52 45 51 
1aa0c     46 52 45 51 
1aa10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa14     46 52 45 51 
1aa18     46 52 45 51 
1aa1c     46 52 45 51 
1aa20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa24     46 52 45 51 
1aa28     46 52 45 51 
1aa2c     46 52 45 51 
1aa30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa34     46 52 45 51 
1aa38     46 52 45 51 
1aa3c     46 52 45 51 
1aa40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa44     46 52 45 51 
1aa48     46 52 45 51 
1aa4c     46 52 45 51 
1aa50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa54     46 52 45 51 
1aa58     46 52 45 51 
1aa5c     46 52 45 51 
1aa60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa64     46 52 45 51 
1aa68     46 52 45 51 
1aa6c     46 52 45 51 
1aa70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa74     46 52 45 51 
1aa78     46 52 45 51 
1aa7c     46 52 45 51 
1aa80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa84     46 52 45 51 
1aa88     46 52 45 51 
1aa8c     46 52 45 51 
1aa90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa94     46 52 45 51 
1aa98     46 52 45 51 
1aa9c     46 52 45 51 
1aaa0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaa4     46 52 45 51 
1aaa8     46 52 45 51 
1aaac     46 52 45 51 
1aab0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aab4     46 52 45 51 
1aab8     46 52 45 51 
1aabc     46 52 45 51 
1aac0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aac4     46 52 45 51 
1aac8     46 52 45 51 
1aacc     46 52 45 51 
1aad0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aad4     46 52 45 51 
1aad8     46 52 45 51 
1aadc     46 52 45 51 
1aae0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aae4     46 52 45 51 
1aae8     46 52 45 51 
1aaec     46 52 45 51 
1aaf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaf4     46 52 45 51 
1aaf8     46 52 45 51 
1aafc     46 52 45 51 
1ab00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab04     46 52 45 51 
1ab08     46 52 45 51 
1ab0c     46 52 45 51 
1ab10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab14     46 52 45 51 
1ab18     46 52 45 51 
1ab1c     46 52 45 51 
1ab20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab24     46 52 45 51 
1ab28     46 52 45 51 
1ab2c     46 52 45 51 
1ab30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab34     46 52 45 51 
1ab38     46 52 45 51 
1ab3c     46 52 45 51 
1ab40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab44     46 52 45 51 
1ab48     46 52 45 51 
1ab4c     46 52 45 51 
1ab50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab54     46 52 45 51 
1ab58     46 52 45 51 
1ab5c     46 52 45 51 
1ab60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab64     46 52 45 51 
1ab68     46 52 45 51 
1ab6c     46 52 45 51 
1ab70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab74     46 52 45 51 
1ab78     46 52 45 51 
1ab7c     46 52 45 51 
1ab80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab84     46 52 45 51 
1ab88     46 52 45 51 
1ab8c     46 52 45 51 
1ab90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab94     46 52 45 51 
1ab98     46 52 45 51 
1ab9c     46 52 45 51 
1aba0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aba4     46 52 45 51 
1aba8     46 52 45 51 
1abac     46 52 45 51 
1abb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abb4     46 52 45 51 
1abb8     46 52 45 51 
1abbc     46 52 45 51 
1abc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abc4     46 52 45 51 
1abc8     46 52 45 51 
1abcc     46 52 45 51 
1abd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abd4     46 52 45 51 
1abd8     46 52 45 51 
1abdc     46 52 45 51 
1abe0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abe4     46 52 45 51 
1abe8     46 52 45 51 
1abec     46 52 45 51 
1abf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abf4     46 52 45 51 
1abf8     46 52 45 51 
1abfc     46 52 45 51 
1ac00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac04     46 52 45 51 
1ac08     46 52 45 51 
1ac0c     46 52 45 51 
1ac10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac14     46 52 45 51 
1ac18     46 52 45 51 
1ac1c     46 52 45 51 
1ac20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac24     46 52 45 51 
1ac28     46 52 45 51 
1ac2c     46 52 45 51 
1ac30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac34     46 52 45 51 
1ac38     46 52 45 51 
1ac3c     46 52 45 51 
1ac40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac44     46 52 45 51 
1ac48     46 52 45 51 
1ac4c     46 52 45 51 
1ac50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac54     46 52 45 51 
1ac58     46 52 45 51 
1ac5c     46 52 45 51 
1ac60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac64     46 52 45 51 
1ac68     46 52 45 51 
1ac6c     46 52 45 51 
1ac70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac74     46 52 45 51 
1ac78     46 52 45 51 
1ac7c     46 52 45 51 
1ac80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac84     46 52 45 51 
1ac88     46 52 45 51 
1ac8c     46 52 45 51 
1ac90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac94     46 52 45 51 
1ac98     46 52 45 51 
1ac9c     46 52 45 51 
1aca0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aca4     46 52 45 51 
1aca8     46 52 45 51 
1acac     46 52 45 51 
1acb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acb4     46 52 45 51 
1acb8     46 52 45 51 
1acbc     46 52 45 51 
1acc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acc4     46 52 45 51 
1acc8     46 52 45 51 
1accc     46 52 45 51 
1acd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acd4     46 52 45 51 
1acd8     46 52 45 51 
1acdc     46 52 45 51 
1ace0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ace4     46 52 45 51 
1ace8     46 52 45 51 
1acec     46 52 45 51 
1acf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acf4     46 52 45 51 
1acf8     46 52 45 51 
1acfc     46 52 45 51 
1ad00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad04     46 52 45 51 
1ad08     46 52 45 51 
1ad0c     46 52 45 51 
1ad10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad14     46 52 45 51 
1ad18     46 52 45 51 
1ad1c     46 52 45 51 
1ad20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad24     46 52 45 51 
1ad28     46 52 45 51 
1ad2c     46 52 45 51 
1ad30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad34     46 52 45 51 
1ad38     46 52 45 51 
1ad3c     46 52 45 51 
1ad40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad44     46 52 45 51 
1ad48     46 52 45 51 
1ad4c     46 52 45 51 
1ad50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad54     46 52 45 51 
1ad58     46 52 45 51 
1ad5c     46 52 45 51 
1ad60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad64     46 52 45 51 
1ad68     46 52 45 51 
1ad6c     46 52 45 51 
1ad70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad74     46 52 45 51 
1ad78     46 52 45 51 
1ad7c     46 52 45 51 
1ad80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad84     46 52 45 51 
1ad88     46 52 45 51 
1ad8c     46 52 45 51 
1ad90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad94     46 52 45 51 
1ad98     46 52 45 51 
1ad9c     46 52 45 51 
1ada0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ada4     46 52 45 51 
1ada8     46 52 45 51 
1adac     46 52 45 51 
1adb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adb4     46 52 45 51 
1adb8     46 52 45 51 
1adbc     46 52 45 51 
1adc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adc4     46 52 45 51 
1adc8     46 52 45 51 
1adcc     46 52 45 51 
1add0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1add4     46 52 45 51 
1add8     46 52 45 51 
1addc     46 52 45 51 
1ade0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ade4     46 52 45 51 
1ade8     46 52 45 51 
1adec     46 52 45 51 
1adf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adf4     46 52 45 51 
1adf8     46 52 45 51 
1adfc     46 52 45 51 
1ae00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae04     46 52 45 51 
1ae08     46 52 45 51 
1ae0c     46 52 45 51 
1ae10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae14     46 52 45 51 
1ae18     46 52 45 51 
1ae1c     46 52 45 51 
1ae20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae24     46 52 45 51 
1ae28     46 52 45 51 
1ae2c     46 52 45 51 
1ae30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae34     46 52 45 51 
1ae38     46 52 45 51 
1ae3c     46 52 45 51 
1ae40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae44     46 52 45 51 
1ae48     46 52 45 51 
1ae4c     46 52 45 51 
1ae50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae54     46 52 45 51 
1ae58     46 52 45 51 
1ae5c     46 52 45 51 
1ae60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae64     46 52 45 51 
1ae68     46 52 45 51 
1ae6c     46 52 45 51 
1ae70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae74     46 52 45 51 
1ae78     46 52 45 51 
1ae7c     46 52 45 51 
1ae80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae84     46 52 45 51 
1ae88     46 52 45 51 
1ae8c     46 52 45 51 
1ae90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae94     46 52 45 51 
1ae98     46 52 45 51 
1ae9c     46 52 45 51 
1aea0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aea4     46 52 45 51 
1aea8     46 52 45 51 
1aeac     46 52 45 51 
1aeb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aeb4     46 52 45 51 
1aeb8     46 52 45 51 
1aebc     46 52 45 51 
1aec0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aec4     46 52 45 51 
1aec8     46 52 45 51 
1aecc     46 52 45 51 
1aed0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aed4     46 52 45 51 
1aed8     46 52 45 51 
1aedc     46 52 45 51 
1aee0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aee4     46 52 45 51 
1aee8     46 52 45 51 
1aeec     46 52 45 51 
1aef0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aef4                 | 
1aef4     00 00 00 00 
1aef8     18 00 00 00 
1aefc     31 00 00 00 
1af00     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1af04     61 00 00 00 
1af08     78 00 00 00 
1af0c     8D 00 00 00 
1af10     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1af14     B4 00 00 00 
1af18     C5 00 00 00 
1af1c     D4 00 00 00 
1af20     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1af24     EB 00 00 00 
1af28     F4 00 00 00 
1af2c     FA 00 00 00 
1af30     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1af34     FF 00 00 00 
1af38     FD 00 00 00 
1af3c     FA 00 00 00 
1af40     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1af44     EB 00 00 00 
1af48     E0 00 00 00 
1af4c     D4 00 00 00 
1af50     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1af54     B4 00 00 00 
1af58     A1 00 00 00 
1af5c     8D 00 00 00 
1af60     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1af64     61 00 00 00 
1af68     4A 00 00 00 
1af6c     31 00 00 00 
1af70     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1af74     00 00 00 00 
1af78     E8 FF FF FF 
1af7c     CF FF FF FF 
1af80     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1af84     9F FF FF FF 
1af88     88 FF FF FF 
1af8c     73 FF FF FF 
1af90     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1af94     4C FF FF FF 
1af98     3B FF FF FF 
1af9c     2C FF FF FF 
1afa0     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1afa4     15 FF FF FF 
1afa8     0C FF FF FF 
1afac     06 FF FF FF 
1afb0     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1afb4     01 FF FF FF 
1afb8     03 FF FF FF 
1afbc     06 FF FF FF 
1afc0     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1afc4     15 FF FF FF 
1afc8     20 FF FF FF 
1afcc     2C FF FF FF 
1afd0     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1afd4     4C FF FF FF 
1afd8     5F FF FF FF 
1afdc     73 FF FF FF 
1afe0     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1afe4     9F FF FF FF 
1afe8     B6 FF FF FF 
1afec     CF FF FF FF 
1aff0     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1aff4                 | 
1aff4     58 03 28 03 
1aff8     FA 02 D0 02 
1affc     A6 02 80 02 
1b000     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1b004     1A 02 FC 01 
1b008     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1b00c     AC 01 94 01 
1b010     7D 01 68 01 
1b014     53 01 40 01 
1b018     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1b01c     0D 01 FE 00 
1b020     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1b024     D6 00 CA 00 
1b028     BE 00 B4 00 
1b02c     AA 00 A0 00 
1b030     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1b034     87 00 7F 00 
1b038     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1b03c     6B 00 22 03 
1b040     F5 02 CB 02 
1b044     A2 02 7D 02 
1b048     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1b04c     17 02 F9 01 
1b050     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1b054     A9 01 91 01 
1b058     7B 01 65 01 
1b05c     51 01 3E 01 
1b060     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1b064     0C 01 FD 00 
1b068     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1b06c     D5 00 C9 00 
1b070     BD 00 B3 00 
1b074     A9 00 9F 00 
1b078     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1b07c     86 00 7E 00 
1b080     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1b084     4C 03 1C 03 
1b088     F0 02 C5 02 
1b08c     9E 02 78 02 
1b090     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1b094     14 02 F6 01 
1b098     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1b09c     A6 01 8E 01 
1b0a0     78 01 63 01 
1b0a4     4F 01 3C 01 
1b0a8     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1b0ac     0A 01 FB 00 
1b0b0     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1b0b4     D3 00 C7 00 
1b0b8     BC 00 B1 00 
1b0bc     A7 00 9E 00 
1b0c0     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1b0c4     85 00 7D 00 
1b0c8     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1b0cc     46 03 17 03 
1b0d0     EA 02 C0 02 
1b0d4     99 02 74 02 
1b0d8     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1b0dc     10 02 F2 01 
1b0e0     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1b0e4     A3 01 8B 01 
1b0e8     75 01 60 01 
1b0ec     4C 01 3A 01 
1b0f0     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1b0f4     08 01 F9 00 
1b0f8     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1b0fc     D1 00 C6 00 
1b100     BB 00 B0 00 
1b104     A6 00 9D 00 
1b108     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1b10c     84 00 7D 00 
1b110     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1b114     40 03 11 03 
1b118     E5 02 BB 02 
1b11c     94 02 6F 02 
1b120     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1b124     0C 02 EF 01 
1b128     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1b12c     A0 01 88 01 
1b130     72 01 5E 01 
1b134     4A 01 38 01 
1b138     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1b13c     06 01 F7 00 
1b140     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1b144     D0 00 C4 00 
1b148     B9 00 AF 00 
1b14c     A5 00 9C 00 
1b150     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1b154     83 00 7C 00 
1b158     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1b15c     3A 03 0B 03 
1b160     E0 02 B6 02 
1b164     8F 02 6B 02 
1b168     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1b16c     08 02 EB 01 
1b170     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1b174     9D 01 86 01 
1b178     70 01 5B 01 
1b17c     48 01 35 01 
1b180     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1b184     04 01 F5 00 
1b188     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1b18c     CE 00 C3 00 
1b190     B8 00 AE 00 
1b194     A4 00 9B 00 
1b198     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1b19c     82 00 7B 00 
1b1a0     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1b1a4     34 03 06 03 
1b1a8     DA 02 B1 02 
1b1ac     8B 02 66 02 
1b1b0     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1b1b4     04 02 E7 01 
1b1b8     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1b1bc     9A 01 83 01 
1b1c0     6D 01 59 01 
1b1c4     45 01 33 01 
1b1c8     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1b1cc     02 01 F4 00 
1b1d0     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1b1d4     CD 00 C1 00 
1b1d8     B7 00 AC 00 
1b1dc     A3 00 9A 00 
1b1e0     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1b1e4     81 00 7A 00 
1b1e8     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1b1ec     2E 03 00 03 
1b1f0     D5 02 AC 02 
1b1f4     86 02 62 02 
1b1f8     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1b1fc     01 02 E4 01 
1b200     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1b204     97 01 80 01 
1b208     6B 01 56 01 
1b20c     43 01 31 01 
1b210     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1b214     00 01 F2 00 
1b218     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1b21c     CC 00 C0 00 
1b220     B5 00 AB 00 
1b224     A1 00 98 00 
1b228     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1b22c     80 00 79 00 
1b230     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1b234     8B 03 58 03 
1b238     28 03 FA 02 
1b23c     D0 02 A6 02 
1b240     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1b244     3A 02 1A 02 
1b248     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1b24c     C5 01 AC 01 
1b250     94 01 7D 01 
1b254     68 01 53 01 
1b258     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1b25c     1D 01 0D 01 
1b260     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1b264     E2 00 D6 00 
1b268     CA 00 BE 00 
1b26c     B4 00 AA 00 
1b270     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1b274     8F 00 87 00 
1b278     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1b27c     84 03 52 03 
1b280     22 03 F5 02 
1b284     CB 02 A3 02 
1b288     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1b28c     37 02 17 02 
1b290     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1b294     C2 01 A9 01 
1b298     91 01 7B 01 
1b29c     65 01 51 01 
1b2a0     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1b2a4     1C 01 0C 01 
1b2a8     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1b2ac     E1 00 D4 00 
1b2b0     C8 00 BD 00 
1b2b4     B3 00 A9 00 
1b2b8     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1b2bc     8E 00 86 00 
1b2c0     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1b2c4     7E 03 4C 03 
1b2c8     1C 03 F0 02 
1b2cc     C5 02 9E 02 
1b2d0     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1b2d4     33 02 14 02 
1b2d8     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1b2dc     BF 01 A6 01 
1b2e0     8E 01 78 01 
1b2e4     63 01 4F 01 
1b2e8     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1b2ec     1A 01 0A 01 
1b2f0     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1b2f4     DF 00 D3 00 
1b2f8     C7 00 BC 00 
1b2fc     B1 00 A7 00 
1b300     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1b304     8D 00 85 00 
1b308     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1b30c     77 03 46 03 
1b310     17 03 EA 02 
1b314     C0 02 99 02 
1b318     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1b31c     2F 02 10 02 
1b320     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1b324     BC 01 A3 01 
1b328     8B 01 75 01 
1b32c     60 01 4C 01 
1b330     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1b334     18 01 08 01 
1b338     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1b33c     DE 00 D1 00 
1b340     C6 00 BB 00 
1b344     B0 00 A6 00 
1b348     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1b34c     8C 00 84 00 
1b350     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1b354     71 03 40 03 
1b358     11 03 E5 02 
1b35c     BB 02 94 02 
1b360     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1b364     2B 02 0C 02 
1b368     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1b36c     B9 01 A0 01 
1b370     88 01 72 01 
1b374     5E 01 4A 01 
1b378     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1b37c     16 01 06 01 
1b380     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1b384     DC 00 D0 00 
1b388     C4 00 B9 00 
1b38c     AF 00 A5 00 
1b390     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1b394     8B 00 83 00 
1b398     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1b39c     6B 03 3A 03 
1b3a0     0B 03 E0 02 
1b3a4     B6 02 8F 02 
1b3a8     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1b3ac     27 02 08 02 
1b3b0     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1b3b4     B5 01 9D 01 
1b3b8     86 01 70 01 
1b3bc     5B 01 48 01 
1b3c0     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1b3c4     14 01 04 01 
1b3c8     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1b3cc     DB 00 CE 00 
1b3d0     C3 00 B8 00 
1b3d4     AE 00 A4 00 
1b3d8     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1b3dc     8A 00 82 00 
1b3e0     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1b3e4     64 03 34 03 
1b3e8     06 03 DA 02 
1b3ec     B1 02 8B 02 
1b3f0     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1b3f4     23 02 04 02 
1b3f8     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1b3fc     B2 01 9A 01 
1b400     83 01 6D 01 
1b404     59 01 45 01 
1b408     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1b40c     12 01 02 01 
1b410     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1b414     D9 00 CD 00 
1b418     C1 00 B7 00 
1b41c     AC 00 A3 00 
1b420     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1b424     89 00 81 00 
1b428     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1b42c     5E 03 2E 03 
1b430     00 03 D5 02 
1b434     AC 02 86 02 
1b438     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1b43c     1F 02 01 02 
1b440     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1b444     AF 01 97 01 
1b448     80 01 6B 01 
1b44c     56 01 43 01 
1b450     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1b454     10 01 00 01 
1b458     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1b45c     D8 00 CB 00 
1b460     C0 00 B5 00 
1b464     AB 00 A1 00 
1b468     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1b46c     88 00 80 00 
1b470     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1b474                 | 	alignl
1b474                 | _audio019_spin2_dat_
1b474                 | 
1b474                 | audio       org     0
1b474     00 F2 07 F6 | 			mov     ptrb,#0
1b478     08 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1b47c     08 C8 1C FC |             wxpin   #100,#left
1b480     09 7A 05 FC |             wrpin   dac,#right
1b484     09 C8 1C FC |             wxpin   #100,#right
1b488     41 90 64 FD |             dirh    #left addpins 1
1b48c     20 90 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1b490     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1b494     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1b498                 |             
1b498                 | '---------------------------------------------------------------------------------        
1b498                 | '----------------- The main loop -------------------------------------------------
1b498                 | '---------------------------------------------------------------------------------
1b498                 | 
1b498     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1b49c     10 00 90 CD |       if_c  jmp     #loop1
1b4a0                 |   
1b4a0     09 4A 05 F6 |             mov     cn,#9
1b4a4     81 4A 8D F9 | p402        altd    cn,#a21000000
1b4a8     80 00 80 F1 |             sub     0-0,a20000000
1b4ac     FD 4B 6D FB |             djnz    cn,#p402
1b4b0                 |     
1b4b0     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
1b4b4     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
1b4b8     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
1b4bc     01 4A 05 C6 |     if_c    mov     cn,#1
1b4c0     85 4C 39 F3 |             fle     ct,time3 wcz
1b4c4     02 4A 05 C6 |     if_c    mov     cn,#2     
1b4c8     86 4C 39 F3 |             fle     ct,time4 wcz
1b4cc     03 4A 05 C6 |     if_c    mov     cn,#3
1b4d0     87 4C 39 F3 |             fle     ct,time5 wcz
1b4d4     04 4A 05 C6 |     if_c    mov     cn,#4
1b4d8     88 4C 39 F3 |             fle     ct,time6 wcz
1b4dc     05 4A 05 C6 |     if_c    mov     cn,#5
1b4e0     89 4C 39 F3 |             fle     ct,time7 wcz
1b4e4     06 4A 05 C6 |     if_c    mov     cn,#6
1b4e8     8A 4C 39 F3 |             fle     ct,time8 wcz
1b4ec     07 4A 05 C6 |     if_c    mov     cn,#7
1b4f0                 | 
1b4f0                 | 
1b4f0                 | '----------------------------------------------------------------------------------
1b4f0                 | '------------- Compute channel samples --------------------------------------------
1b4f0                 | '----------------------------------------------------------------------------------
1b4f0                 | 
1b4f0                 | 
1b4f0     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1b4f4     05 20 65 F0 |             shl     channeladd,#5
1b4f8     90 F0 03 F1 |             add     ptra,channeladd
1b4fc                 | 
1b4fc     28 0E 64 FD |             setq    #7               
1b500     00 31 05 FB |             rdlong  pointer0,ptra
1b504                 |             
1b504     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
1b508     9D 44 31 F9 |     	    getword avol0,volpan0,#0
1b50c     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
1b510     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
1b514                 | 
1b514     83 4A 95 F9 |             alts    cn, #time1
1b518     00 4E 01 F6 |             mov     dt0,0-0   
1b51c     82 4E 81 F1 |             sub     dt0,time0
1b520                 | 
1b520     83 4A 8D F9 |             altd    cn, #time1
1b524     A0 00 00 F1 |             add     0-0,afreq0  	
1b528                 | 
1b528     A1 30 01 F1 |             add     pointer0,askip0
1b52c     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
1b530     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
1b534     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
1b538     98 24 01 F6 |             mov     qq,pointer0
1b53c     9A 24 01 F1 |             add     qq,sstart0
1b540                 | 
1b540     1F 34 0D F4 |             testb   sstart0,#31 wz
1b544                 | 
1b544     92 26 C1 5A |     if_nz   rdbyte  spl,qq
1b548     08 26 65 50 |     if_nz   shl     spl,#8
1b54c     92 26 E1 AA |     if_z    rdword  spl,qq
1b550                 | 
1b550     A2 26 31 FA |             scas    spl,avol0
1b554     00 26 01 F6 |             mov     spl,0-0
1b558                 |  
1b558     A3 26 31 FA |             scas    spl,apan0
1b55c     00 50 01 F6 |             mov     ls0,0-0
1b560                 |  
1b560     AD 4A 8D F9 |             altd    cn,#ls1
1b564     A8 00 00 F6 |             mov     0-0,ls0
1b568                 |              
1b568     20 00 00 FF 
1b56c     00 24 05 F6 |             mov     qq,##16384
1b570     A3 24 81 F1 |             sub     qq,apan0
1b574     92 26 31 FA |             scas    spl,qq
1b578     00 52 01 F6 |             mov     rs0, 0-0
1b57c                 | 
1b57c     B5 4A 8D F9 |             altd    cn,#rs1
1b580     A9 00 00 F6 |             mov     0-0,rs0
1b584                 | 
1b584     A9 32 29 F9 |             setword sample0,rs0,#1
1b588     A8 32 21 F9 |             setword sample0,ls0,#0
1b58c                 |             
1b58c                 | 
1b58c     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
1b590     00 30 05 A6 |     if_z    mov    pointer0, #0  
1b594     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
1b598     28 02 64 FD | p403        setq #1
1b59c                 |      
1b59c     00 31 65 FC |             wrlong  pointer0,ptra
1b5a0     90 F0 83 F1 |             sub     ptra, channeladd
1b5a4     00 00 90 FD |             jmp     #p101
1b5a8                 |                        
1b5a8                 |             
1b5a8                 |           
1b5a8                 |             
1b5a8                 | '------------------------ Channels end here --------------------       
1b5a8                 | 
1b5a8                 | ' Now add all channels and put the sample to the buffer    
1b5a8                 | 
1b5a8                 | 
1b5a8     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1b5ac     01 22 85 A1 |     if_z    sub     front,#1         ' 
1b5b0     FF 23 05 A5 |     if_z    and     front,#511     
1b5b4                 |            
1b5b4                 |     
1b5b4     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1b5b8     00 56 05 F6 |             mov     ls,#0
1b5bc     B5 58 01 F1 |             add     rs,rs1
1b5c0     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1b5c4     B7 58 01 F1 |             add     rs,rs3
1b5c8     B8 58 01 F1 |             add     rs,rs4
1b5cc     B9 58 01 F1 |             add     rs,rs5
1b5d0     BA 58 01 F1 |             add     rs,rs6
1b5d4     BB 58 01 F1 |             add     rs,rs7
1b5d8     BC 58 01 F1 |             add     rs,rs8
1b5dc                 | 
1b5dc                 |            
1b5dc     AD 56 01 F1 |             add     ls,ls1
1b5e0     AE 56 01 F1 |             add     ls,ls2
1b5e4     AF 56 01 F1 |             add     ls,ls3
1b5e8     B0 56 01 F1 |             add     ls,ls4
1b5ec     B1 56 01 F1 |             add     ls,ls5
1b5f0     B2 56 01 F1 |             add     ls,ls6
1b5f4     B3 56 01 F1 |             add     ls,ls7
1b5f8     B4 56 01 F1 |             add     ls,ls8
1b5fc                 | 
1b5fc                 |  		
1b5fc     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1b600     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1b604                 | 		    
1b604     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1b608     AC 16 01 F6 |             mov newsample, rs
1b60c                 | 
1b60c     82 48 01 F6 |             mov     oldt0,time0      ' update global time
1b610     A7 04 01 F1 |             add     time0,dt0    
1b614                 | 
1b614                 |             
1b614                 |  
1b614                 |                                      ' now push dt0 samples to the buffer
1b614     00 4E 0D F2 |             cmp      dt0,#0 wz
1b618     94 FE 9F AD |     if_z    jmp      #loop1
1b61c     A7 18 01 F6 |             mov      t1,dt0
1b620                 |   
1b620     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1b624     01 1A 85 F1 |             sub     t2,#1
1b628     FF 1B 05 F5 |             and     t2,#511
1b62c     91 1A 19 F2 |             cmp     t2,front wcz
1b630     EC FF 9F AD |     if_e    jmp     #p301    
1b634                 |     
1b634     91 16 31 FC |             wrlut   newsample, front
1b638     01 22 05 F1 |             add     front,#1
1b63c     FF 23 05 F5 |             and     front,#511
1b640     F7 19 6D FB |             djnz    t1,#p301
1b644                 |             
1b644     50 FE 9F FD |             jmp     #loop            'loop
1b648                 | 
1b648                 | '-------------------------------------------------------------------------
1b648                 | '------------------ This is the end of the main loop ---------------------
1b648                 | '-------------------------------------------------------------------------
1b648                 | 
1b648                 | '--------------------------------------------------------------------------
1b648                 | '------ Interrupt service -------------------------------------------------
1b648                 | '------ Output the sample, get the next one if exists ---------------------
1b648                 | '--------------------------------------------------------------------------
1b648                 | 
1b648     08 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
1b64c     09 2A 25 FC |             wypin   rsample,#right       '4
1b650                 |            
1b650     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1b654     F5 FF 3B AB |     if_e    reti1                        '8/10
1b658                 | 
1b658     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1b65c     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
1b660     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
1b664     F5 FF 3B FB |             reti1                        '17/19 
1b668                 |           
1b668                 | '---------------------------------------------------------------------------
1b668                 | '-------- End of interrupt -------------------------------------------------
1b668                 | '---------------------------------------------------------------------------    
1b668                 | 
1b668                 | 
1b668                 | '---------------------------------------------------------------------------
1b668                 | '------- Variables ---------------------------------------------------------
1b668                 | '---------------------------------------------------------------------------
1b668                 | 
1b668                 | ' constants
1b668                 | 
1b668     00 00 00 00 | hp long 0
1b66c     00 00 00 00 | lp long 0
1b670     00 00 00 00 | bp long 0
1b674     00 00 00 10 | a20000000   long $10000000
1b678     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
1b67c                 | 
1b67c                 | ' Time variables
1b67c                 | 
1b67c     00 00 00 00 | time0       long 0    ' Global sample computing time
1b680     01 00 00 00 | time1       long 1    ' Local channels time
1b684     02 00 00 00 | time2       long 2
1b688     03 00 00 00 | time3       long 3
1b68c     04 00 00 00 | time4       long 4
1b690     05 00 00 00 | time5       long 5
1b694     06 00 00 00 | time6       long 6
1b698     07 00 00 00 | time7       long 7
1b69c     08 00 00 00 | time8       long 8
1b6a0                 | 
1b6a0                 | 
1b6a0                 | 
1b6a0     00 00 00 00 | newsample long 0
1b6a4                 | '
1b6a4     00 00 00 00 | t1 long 0
1b6a8     00 00 00 00 | t2 long 0
1b6ac                 | '
1b6ac     00 00 00 00 | nrsample long 0
1b6b0     00 00 00 00 | nlsample long 0
1b6b4                 | '
1b6b4     00 00 00 00 | channeladd long 0
1b6b8                 | 
1b6b8                 | 
1b6b8     00 00 00 00 | front       long 0
1b6bc                 | 
1b6bc                 | ' temporary variables 
1b6bc                 | '
1b6bc     00 00 00 00 | qq          long 0
1b6c0     00 00 00 00 | spl         long 0
1b6c4                 | 
1b6c4                 | ' circular buffer in LUT
1b6c4                 | 
1b6c4                 | 
1b6c4                 | '
1b6c4                 | 
1b6c4                 | ' Interrupt ISR variables
1b6c4                 | 
1b6c4                 | 
1b6c4     00 00 00 00 | lsample     long 0
1b6c8     00 00 00 00 | rsample     long 0
1b6cc     00 00 00 00 | lsnext      long 0
1b6d0     00 00 00 00 | rsnext      long 0 
1b6d4                 | 
1b6d4                 | 
1b6d4     00 00 00 00 | pointer0    long 0
1b6d8     00 00 00 00 | sample0     long 0
1b6dc     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1b6e0     00 00 00 00 | lstart0     long 0
1b6e4     00 00 00 00 | lend0       long 0
1b6e8     00 00 00 00 | volpan0     long 0
1b6ec     00 00 00 00 | freqskip0   long 0
1b6f0     00 00 00 00 | dummy0      long 0
1b6f4                 | 
1b6f4     00 00 00 00 | afreq0      long 0
1b6f8     00 00 00 00 | askip0      long 0
1b6fc     00 00 00 00 | avol0       long 0
1b700     00 00 00 00 | apan0       long 0
1b704                 | 
1b704     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1b708     00 00 00 00 | cn          long 0
1b70c     00 00 00 00 | ct          long 0
1b710     00 00 00 00 | dt0         long 0
1b714                 | 
1b714                 | ' Samples
1b714     00 00 00 00 | ls0         long 0
1b718     00 00 00 00 | rs0         long 0
1b71c     00 00 00 00 | channel     long 0
1b720     00 00 00 00 | ls          long 0    ' Global sample variable
1b724     00 00 00 00 | rs          long 0
1b728                 | 
1b728     00 00 00 00 | ls1         long 0    ' Channel samples
1b72c     00 00 00 00 | ls2         long 0
1b730     00 00 00 00 | ls3         long 0
1b734     00 00 00 00 | ls4         long 0
1b738     00 00 00 00 | ls5         long 0
1b73c     00 00 00 00 | ls6         long 0
1b740     00 00 00 00 | ls7         long 0
1b744     00 00 00 00 | ls8         long 0
1b748     00 00 00 00 | rs1         long 0
1b74c     00 00 00 00 | rs2         long 0
1b750     00 00 00 00 | rs3         long 0
1b754     00 00 00 00 | rs4         long 0
1b758     00 00 00 00 | rs5         long 0
1b75c     00 00 00 00 | rs6         long 0
1b760     00 00 00 00 | rs7         long 0
1b764     00 00 00 00 | rs8         long 0
1b768                 | 
1b768     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1b76c                 | 
1b76c     00 00 00 00 
1b770     00 00 00 00 | null  			long 	0,0           ' for channel reset
1b774     73 32 00 04 
1b778     00 00 10 00 
1b77c     00 00 00 00 
1b780     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1b784     00 00 C9 00 
1b788     92 01 5B 02 
1b78c     24 03 ED 03 
1b790     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1b794     48 06 11 07 
1b798     D9 07 A2 08 
1b79c     6A 09 33 0A 
1b7a0     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1b7a4     8C 0C 54 0D 
1b7a8     1C 0E E3 0E 
1b7ac     AB 0F 72 10 
1b7b0     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1b7b4     C8 12 8F 13 
1b7b8     55 14 1C 15 
1b7bc     E2 15 A8 16 
1b7c0     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1b7c4     F9 18 BE 19 
1b7c8     82 1A 47 1B 
1b7cc     0B 1C CF 1C 
1b7d0     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1b7d4     1A 1F DD 1F 
1b7d8     9F 20 61 21 
1b7dc     23 22 E5 22 
1b7e0     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1b7e4     28 25 E8 25 
1b7e8     A8 26 67 27 
1b7ec     26 28 E5 28 
1b7f0     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1b7f4     1F 2B DC 2B 
1b7f8     99 2C 55 2D 
1b7fc     11 2E CC 2E 
1b800     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1b804     FB 30 B5 31 
1b808     6E 32 26 33 
1b80c     DF 33 96 34 
1b810     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1b814     BA 36 6F 37 
1b818     24 38 D9 38 
1b81c     8C 39 40 3A 
1b820     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1b824     56 3C 07 3D 
1b828     B8 3D 68 3E 
1b82c     17 3F C5 3F 
1b830     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1b834     CE 41 7A 42 
1b838     25 43 D0 43 
1b83c     7A 44 24 45 
1b840     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1b844     1C 47 C3 47 
1b848     69 48 0F 49 
1b84c     B4 49 58 4A 
1b850     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1b854     3F 4C E0 4C 
1b858     81 4D 20 4E 
1b85c     BF 4E 5D 4F 
1b860     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1b864     33 51 CE 51 
1b868     68 52 02 53 
1b86c     9B 53 32 54 
1b870     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1b874     F5 55 8A 56 
1b878     1D 57 B0 57 
1b87c     42 58 D3 58 
1b880     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1b884     82 5A 0F 5B 
1b888     9C 5B 28 5C 
1b88c     B3 5C 3E 5D 
1b890     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1b894     D7 5E 5D 5F 
1b898     E3 5F 68 60 
1b89c     EB 60 6E 61 
1b8a0     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1b8a4     F1 62 70 63 
1b8a8     EE 63 6C 64 
1b8ac     E8 64 63 65 
1b8b0     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1b8b4     CF 66 46 67 
1b8b8     BC 67 32 68 
1b8bc     A6 68 19 69 
1b8c0     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1b8c4     6D 6A DC 6A 
1b8c8     4A 6B B7 6B 
1b8cc     23 6C 8E 6C 
1b8d0     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1b8d4     C9 6D 30 6E 
1b8d8     96 6E FB 6E 
1b8dc     5E 6F C1 6F 
1b8e0     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1b8e4     E2 70 40 71 
1b8e8     9D 71 F9 71 
1b8ec     54 72 AE 72 
1b8f0     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1b8f4     B5 73 0A 74 
1b8f8     5F 74 B2 74 
1b8fc     04 75 55 75 
1b900     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1b904     41 76 8D 76 
1b908     D8 76 22 77 
1b90c     6B 77 B3 77 
1b910     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1b914     84 78 C7 78 
1b918     09 79 4A 79 
1b91c     89 79 C8 79 
1b920     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1b924     7C 7A B6 7A 
1b928     EE 7A 26 7B 
1b92c     5C 7B 91 7B 
1b930     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1b934     29 7C 59 7C 
1b938     88 7C B6 7C 
1b93c     E3 7C 0E 7D 
1b940     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1b944     89 7D B0 7D 
1b948     D5 7D FA 7D 
1b94c     1D 7E 3E 7E 
1b950     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1b954     9C 7E B9 7E 
1b958     D5 7E EF 7E 
1b95c     09 7F 21 7F 
1b960     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1b964     61 7F 74 7F 
1b968     86 7F 97 7F 
1b96c     A6 7F B4 7F 
1b970     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1b974     D8 7F E1 7F 
1b978     E9 7F F0 7F 
1b97c     F5 7F F9 7F 
1b980     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1b984     FF 7F FE 7F 
1b988     FD 7F F9 7F 
1b98c     F5 7F F0 7F 
1b990     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1b994     D8 7F CD 7F 
1b998     C1 7F B4 7F 
1b99c     A6 7F 97 7F 
1b9a0     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1b9a4     61 7F 4D 7F 
1b9a8     37 7F 21 7F 
1b9ac     09 7F EF 7E 
1b9b0     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1b9b4     9C 7E 7E 7E 
1b9b8     5F 7E 3E 7E 
1b9bc     1D 7E FA 7D 
1b9c0     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1b9c4     89 7D 62 7D 
1b9c8     39 7D 0E 7D 
1b9cc     E3 7C B6 7C 
1b9d0     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1b9d4     29 7C F8 7B 
1b9d8     C5 7B 91 7B 
1b9dc     5C 7B 26 7B 
1b9e0     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1b9e4     7C 7A 41 7A 
1b9e8     05 7A C8 79 
1b9ec     89 79 4A 79 
1b9f0     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1b9f4     84 78 3F 78 
1b9f8     FA 77 B3 77 
1b9fc     6B 77 22 77 
1ba00     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1ba04     41 76 F3 75 
1ba08     A5 75 55 75 
1ba0c     04 75 B2 74 
1ba10     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1ba14     B5 73 5E 73 
1ba18     07 73 AE 72 
1ba1c     54 72 F9 71 
1ba20     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1ba24     E2 70 83 70 
1ba28     22 70 C1 6F 
1ba2c     5E 6F FB 6E 
1ba30     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1ba34     C9 6D 61 6D 
1ba38     F8 6C 8E 6C 
1ba3c     23 6C B7 6B 
1ba40     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1ba44     6D 6A FD 69 
1ba48     8B 69 19 69 
1ba4c     A6 68 32 68 
1ba50     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1ba54     CF 66 56 66 
1ba58     DD 65 63 65 
1ba5c     E8 64 6C 64 
1ba60     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1ba64     F1 62 71 62 
1ba68     F0 61 6E 61 
1ba6c     EB 60 68 60 
1ba70     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1ba74     D7 5E 4F 5E 
1ba78     C7 5D 3E 5D 
1ba7c     B3 5C 28 5C 
1ba80     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1ba84     82 5A F3 59 
1ba88     64 59 D3 58 
1ba8c     42 58 B0 57 
1ba90     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1ba94     F5 55 60 55 
1ba98     C9 54 32 54 
1ba9c     9B 53 02 53 
1baa0     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1baa4     33 51 97 50 
1baa8     FB 4F 5D 4F 
1baac     BF 4E 20 4E 
1bab0     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1bab4     3F 4C 9D 4B 
1bab8     FB 4A 58 4A 
1babc     B4 49 0F 49 
1bac0     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1bac4     1C 47 75 46 
1bac8     CD 45 24 45 
1bacc     7A 44 D0 43 
1bad0     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1bad4     CE 41 21 41 
1bad8     73 40 C5 3F 
1badc     17 3F 68 3E 
1bae0     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1bae4     56 3C A5 3B 
1bae8     F2 3A 40 3A 
1baec     8C 39 D9 38 
1baf0     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1baf4     BA 36 04 36 
1baf8     4D 35 96 34 
1bafc     DF 33 26 33 
1bb00     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1bb04     FB 30 41 30 
1bb08     87 2F CC 2E 
1bb0c     11 2E 55 2D 
1bb10     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1bb14     1F 2B 61 2A 
1bb18     A3 29 E5 28 
1bb1c     26 28 67 27 
1bb20     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1bb24     28 25 67 24 
1bb28     A6 23 E5 22 
1bb2c     23 22 61 21 
1bb30     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1bb34     1A 1F 57 1E 
1bb38     93 1D CF 1C 
1bb3c     0B 1C 47 1B 
1bb40     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1bb44     F9 18 33 18 
1bb48     6E 17 A8 16 
1bb4c     E2 15 1C 15 
1bb50     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1bb54     C8 12 01 12 
1bb58     3A 11 72 10 
1bb5c     AB 0F E3 0E 
1bb60     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1bb64     8C 0C C4 0B 
1bb68     FB 0A 33 0A 
1bb6c     6A 09 A2 08 
1bb70     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1bb74     48 06 7F 05 
1bb78     B6 04 ED 03 
1bb7c     24 03 5B 02 
1bb80     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1bb84     00 00 37 FF 
1bb88     6E FE A5 FD 
1bb8c     DC FC 13 FC 
1bb90     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1bb94     B8 F9 EF F8 
1bb98     27 F8 5E F7 
1bb9c     96 F6 CD F5 
1bba0     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1bba4     74 F3 AC F2 
1bba8     E4 F1 1D F1 
1bbac     55 F0 8E EF 
1bbb0     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1bbb4     38 ED 71 EC 
1bbb8     AB EB E4 EA 
1bbbc     1E EA 58 E9 
1bbc0     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1bbc4     07 E7 42 E6 
1bbc8     7E E5 B9 E4 
1bbcc     F5 E3 31 E3 
1bbd0     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1bbd4     E6 E0 23 E0 
1bbd8     61 DF 9F DE 
1bbdc     DD DD 1B DD 
1bbe0     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1bbe4     D8 DA 18 DA 
1bbe8     58 D9 99 D8 
1bbec     DA D7 1B D7 
1bbf0     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1bbf4     E1 D4 24 D4 
1bbf8     67 D3 AB D2 
1bbfc     EF D1 34 D1 
1bc00     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1bc04     05 CF 4B CE 
1bc08     92 CD DA CC 
1bc0c     21 CC 6A CB 
1bc10     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1bc14     46 C9 91 C8 
1bc18     DC C7 27 C7 
1bc1c     74 C6 C0 C5 
1bc20     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1bc24     AA C3 F9 C2 
1bc28     48 C2 98 C1 
1bc2c     E9 C0 3B C0 
1bc30     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1bc34     32 BE 86 BD 
1bc38     DB BC 30 BC 
1bc3c     86 BB DC BA 
1bc40     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1bc44     E4 B8 3D B8 
1bc48     97 B7 F1 B6 
1bc4c     4C B6 A8 B5 
1bc50     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1bc54     C1 B3 20 B3 
1bc58     7F B2 E0 B1 
1bc5c     41 B1 A3 B0 
1bc60     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1bc64     CD AE 32 AE 
1bc68     98 AD FE AC 
1bc6c     65 AC CE AB 
1bc70     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1bc74     0B AA 76 A9 
1bc78     E3 A8 50 A8 
1bc7c     BE A7 2D A7 
1bc80     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1bc84     7E A5 F1 A4 
1bc88     64 A4 D8 A3 
1bc8c     4D A3 C2 A2 
1bc90     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1bc94     29 A1 A3 A0 
1bc98     1D A0 98 9F 
1bc9c     15 9F 92 9E 
1bca0     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1bca4     0F 9D 90 9C 
1bca8     12 9C 94 9B 
1bcac     18 9B 9D 9A 
1bcb0     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1bcb4     31 99 BA 98 
1bcb8     44 98 CE 97 
1bcbc     5A 97 E7 96 
1bcc0     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1bcc4     93 95 24 95 
1bcc8     B6 94 49 94 
1bccc     DD 93 72 93 
1bcd0     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1bcd4     37 92 D0 91 
1bcd8     6A 91 05 91 
1bcdc     A2 90 3F 90 
1bce0     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1bce4     1E 8F C0 8E 
1bce8     63 8E 07 8E 
1bcec     AC 8D 52 8D 
1bcf0     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1bcf4     4B 8C F6 8B 
1bcf8     A1 8B 4E 8B 
1bcfc     FC 8A AB 8A 
1bd00     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1bd04     BF 89 73 89 
1bd08     28 89 DE 88 
1bd0c     95 88 4D 88 
1bd10     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1bd14     7C 87 39 87 
1bd18     F7 86 B6 86 
1bd1c     77 86 38 86 
1bd20     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1bd24     84 85 4A 85 
1bd28     12 85 DA 84 
1bd2c     A4 84 6F 84 
1bd30     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1bd34     D7 83 A7 83 
1bd38     78 83 4A 83 
1bd3c     1D 83 F2 82 
1bd40     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1bd44     77 82 50 82 
1bd48     2B 82 06 82 
1bd4c     E3 81 C2 81 
1bd50     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1bd54     64 81 47 81 
1bd58     2B 81 11 81 
1bd5c     F7 80 DF 80 
1bd60     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1bd64     9F 80 8C 80 
1bd68     7A 80 69 80 
1bd6c     5A 80 4C 80 
1bd70     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1bd74     28 80 1F 80 
1bd78     17 80 10 80 
1bd7c     0B 80 07 80 
1bd80     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1bd84     01 80 02 80 
1bd88     03 80 07 80 
1bd8c     0B 80 10 80 
1bd90     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1bd94     28 80 33 80 
1bd98     3F 80 4C 80 
1bd9c     5A 80 69 80 
1bda0     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1bda4     9F 80 B3 80 
1bda8     C9 80 DF 80 
1bdac     F7 80 11 81 
1bdb0     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1bdb4     64 81 82 81 
1bdb8     A1 81 C2 81 
1bdbc     E3 81 06 82 
1bdc0     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1bdc4     77 82 9E 82 
1bdc8     C7 82 F2 82 
1bdcc     1D 83 4A 83 
1bdd0     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1bdd4     D7 83 08 84 
1bdd8     3B 84 6F 84 
1bddc     A4 84 DA 84 
1bde0     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1bde4     84 85 BF 85 
1bde8     FB 85 38 86 
1bdec     77 86 B6 86 
1bdf0     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1bdf4     7C 87 C1 87 
1bdf8     06 88 4D 88 
1bdfc     95 88 DE 88 
1be00     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1be04     BF 89 0D 8A 
1be08     5B 8A AB 8A 
1be0c     FC 8A 4E 8B 
1be10     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1be14     4B 8C A2 8C 
1be18     F9 8C 52 8D 
1be1c     AC 8D 07 8E 
1be20     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1be24     1E 8F 7D 8F 
1be28     DE 8F 3F 90 
1be2c     A2 90 05 91 
1be30     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1be34     37 92 9F 92 
1be38     08 93 72 93 
1be3c     DD 93 49 94 
1be40     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1be44     93 95 03 96 
1be48     75 96 E7 96 
1be4c     5A 97 CE 97 
1be50     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1be54     31 99 AA 99 
1be58     23 9A 9D 9A 
1be5c     18 9B 94 9B 
1be60     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1be64     0F 9D 8F 9D 
1be68     10 9E 92 9E 
1be6c     15 9F 98 9F 
1be70     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1be74     29 A1 B1 A1 
1be78     39 A2 C2 A2 
1be7c     4D A3 D8 A3 
1be80     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1be84     7E A5 0D A6 
1be88     9C A6 2D A7 
1be8c     BE A7 50 A8 
1be90     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1be94     0B AA A0 AA 
1be98     37 AB CE AB 
1be9c     65 AC FE AC 
1bea0     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1bea4     CD AE 69 AF 
1bea8     05 B0 A3 B0 
1beac     41 B1 E0 B1 
1beb0     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1beb4     C1 B3 63 B4 
1beb8     05 B5 A8 B5 
1bebc     4C B6 F1 B6 
1bec0     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1bec4     E4 B8 8B B9 
1bec8     33 BA DC BA 
1becc     86 BB 30 BC 
1bed0     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1bed4     32 BE DF BE 
1bed8     8D BF 3B C0 
1bedc     E9 C0 98 C1 
1bee0     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1bee4     AA C3 5B C4 
1bee8     0E C5 C0 C5 
1beec     74 C6 27 C7 
1bef0     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1bef4     46 C9 FC C9 
1bef8     B3 CA 6A CB 
1befc     21 CC DA CC 
1bf00     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1bf04     05 CF BF CF 
1bf08     79 D0 34 D1 
1bf0c     EF D1 AB D2 
1bf10     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1bf14     E1 D4 9F D5 
1bf18     5D D6 1B D7 
1bf1c     DA D7 99 D8 
1bf20     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1bf24     D8 DA 99 DB 
1bf28     5A DC 1B DD 
1bf2c     DD DD 9F DE 
1bf30     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1bf34     E6 E0 A9 E1 
1bf38     6D E2 31 E3 
1bf3c     F5 E3 B9 E4 
1bf40     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1bf44     07 E7 CD E7 
1bf48     92 E8 58 E9 
1bf4c     1E EA E4 EA 
1bf50     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1bf54     38 ED FF ED 
1bf58     C6 EE 8E EF 
1bf5c     55 F0 1D F1 
1bf60     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1bf64     74 F3 3C F4 
1bf68     05 F5 CD F5 
1bf6c     96 F6 5E F7 
1bf70     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1bf74     B8 F9 81 FA 
1bf78     4A FB 13 FC 
1bf7c     DC FC A5 FD 
1bf80     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1bf84                 | 	alignl
1bf84                 | __system__dat_
1bf84     00 00 00 00 
1bf88     00 00 00 00 | 	byte	$00[8]
1bf8c     03 00 00 00 
1bf90     00 00 00 00 
1bf94     00 00 00 00 
1bf98     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bf9c     00 00 00 00 
1bfa0     00 00 00 00 
1bfa4     00 00 00 00 
1bfa8     00 00 00 00 
1bfac     00 00 00 00 | 	byte	$00[20]
1bfb0     05 00 00 00 
1bfb4     00 00 00 00 
1bfb8     00 00 00 00 
1bfbc     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bfc0     88 C1 01 00 | 	long	@@@__system__dat_ + 516
1bfc4     90 C1 01 00 | 	long	@@@__system__dat_ + 524
1bfc8     00 00 00 00 | 	byte	$00, $00, $00, $00
1bfcc     98 C1 01 00 | 	long	@@@__system__dat_ + 532
1bfd0     A0 C1 01 00 | 	long	@@@__system__dat_ + 540
1bfd4     00 00 00 00 
1bfd8     00 00 00 00 | 	byte	$00[8]
1bfdc     01 00 00 00 
1bfe0     06 00 00 00 
1bfe4     00 00 00 00 
1bfe8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bfec     00 00 00 00 | 	byte	$00, $00, $00, $00
1bff0     A8 C1 01 00 | 	long	@@@__system__dat_ + 548
1bff4     B0 C1 01 00 | 	long	@@@__system__dat_ + 556
1bff8     00 00 00 00 | 	byte	$00, $00, $00, $00
1bffc     B8 C1 01 00 | 	long	@@@__system__dat_ + 564
1c000     C0 C1 01 00 | 	long	@@@__system__dat_ + 572
1c004     00 00 00 00 
1c008     00 00 00 00 | 	byte	$00[8]
1c00c     01 00 00 00 
1c010     06 00 00 00 
1c014     00 00 00 00 
1c018     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c01c     00 00 00 00 | 	byte	$00, $00, $00, $00
1c020     C8 C1 01 00 | 	long	@@@__system__dat_ + 580
1c024     D0 C1 01 00 | 	long	@@@__system__dat_ + 588
1c028     00 00 00 00 | 	byte	$00, $00, $00, $00
1c02c     D8 C1 01 00 | 	long	@@@__system__dat_ + 596
1c030     E0 C1 01 00 | 	long	@@@__system__dat_ + 604
1c034     00 00 00 00 
      ...             
1c184     00 00 00 00 
1c188     00 00 00 00 | 	byte	$00[344]
1c18c     08 64 00 00 | 	long	@@@__system___tx
1c190     00 00 00 00 | 	byte	$00, $00, $00, $00
1c194     50 64 00 00 | 	long	@@@__system___rx
1c198     00 00 00 00 | 	byte	$00, $00, $00, $00
1c19c     CC 7E 00 00 | 	long	@@@__system___rxtxioctl_0179
1c1a0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1a4     3C 7F 00 00 | 	long	@@@__system____dummy_flush_0180
1c1a8     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1ac     08 64 00 00 | 	long	@@@__system___tx
1c1b0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1b4     50 64 00 00 | 	long	@@@__system___rx
1c1b8     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1bc     CC 7E 00 00 | 	long	@@@__system___rxtxioctl_0179
1c1c0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1c4     3C 7F 00 00 | 	long	@@@__system____dummy_flush_0180
1c1c8     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1cc     08 64 00 00 | 	long	@@@__system___tx
1c1d0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1d4     50 64 00 00 | 	long	@@@__system___rx
1c1d8     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1dc     CC 7E 00 00 | 	long	@@@__system___rxtxioctl_0179
1c1e0     00 00 00 00 | 	byte	$00, $00, $00, $00
1c1e4     3C 7F 00 00 | 	long	@@@__system____dummy_flush_0180
1c1e8                 | __heap_base
1c1e8     00 00 00 00 
      ...             
1d1e8     00 00 00 00 
1d1ec     00 00 00 00 | 	long	0[1026]
1d1f0                 | objmem
1d1f0     00 00 00 00 
      ...             
1e390     00 00 00 00 
1e394     00 00 00 00 | 	long	0[1130]
1e398                 | stackspace
1e398     00 00 00 00 | 	long	0[1]
1e39c 10f             | 	org	COG_BSS_START
1e39c 10f             | _var01
1e39c 10f             | 	res	1
1e39c 110             | _var02
1e39c 110             | 	res	1
1e39c 111             | _var03
1e39c 111             | 	res	1
1e39c 112             | _var04
1e39c 112             | 	res	1
1e39c 113             | _var05
1e39c 113             | 	res	1
1e39c 114             | _var06
1e39c 114             | 	res	1
1e39c 115             | _var07
1e39c 115             | 	res	1
1e39c 116             | _var08
1e39c 116             | 	res	1
1e39c 117             | _var09
1e39c 117             | 	res	1
1e39c 118             | _var10
1e39c 118             | 	res	1
1e39c 119             | _var11
1e39c 119             | 	res	1
1e39c 11a             | _var12
1e39c 11a             | 	res	1
1e39c 11b             | _var13
1e39c 11b             | 	res	1
1e39c 11c             | _var14
1e39c 11c             | 	res	1
1e39c 11d             | _var15
1e39c 11d             | 	res	1
1e39c 11e             | _var16
1e39c 11e             | 	res	1
1e39c 11f             | _var17
1e39c 11f             | 	res	1
1e39c 120             | _var18
1e39c 120             | 	res	1
1e39c 121             | _var19
1e39c 121             | 	res	1
1e39c 122             | _var20
1e39c 122             | 	res	1
1e39c 123             | _var21
1e39c 123             | 	res	1
1e39c 124             | _var22
1e39c 124             | 	res	1
1e39c 125             | _var23
1e39c 125             | 	res	1
1e39c 126             | _var24
1e39c 126             | 	res	1
1e39c 127             | _var25
1e39c 127             | 	res	1
1e39c 128             | _var26
1e39c 128             | 	res	1
1e39c 129             | _var27
1e39c 129             | 	res	1
1e39c 12a             | _var28
1e39c 12a             | 	res	1
1e39c 12b             | _var29
1e39c 12b             | 	res	1
1e39c 12c             | _var30
1e39c 12c             | 	res	1
1e39c 12d             | _var31
1e39c 12d             | 	res	1
1e39c 12e             | _var32
1e39c 12e             | 	res	1
1e39c 12f             | arg01
1e39c 12f             | 	res	1
1e39c 130             | arg02
1e39c 130             | 	res	1
1e39c 131             | arg03
1e39c 131             | 	res	1
1e39c 132             | arg04
1e39c 132             | 	res	1
1e39c 133             | arg05
1e39c 133             | 	res	1
1e39c 134             | arg06
1e39c 134             | 	res	1
1e39c 135             | arg07
1e39c 135             | 	res	1
1e39c 136             | local01
1e39c 136             | 	res	1
1e39c 137             | local02
1e39c 137             | 	res	1
1e39c 138             | local03
1e39c 138             | 	res	1
1e39c 139             | local04
1e39c 139             | 	res	1
1e39c 13a             | local05
1e39c 13a             | 	res	1
1e39c 13b             | local06
1e39c 13b             | 	res	1
1e39c 13c             | local07
1e39c 13c             | 	res	1
1e39c 13d             | local08
1e39c 13d             | 	res	1
1e39c 13e             | local09
1e39c 13e             | 	res	1
1e39c 13f             | local10
1e39c 13f             | 	res	1
1e39c 140             | local11
1e39c 140             | 	res	1
1e39c 141             | local12
1e39c 141             | 	res	1
1e39c 142             | local13
1e39c 142             | 	res	1
1e39c 143             | local14
1e39c 143             | 	res	1
1e39c 144             | local15
1e39c 144             | 	res	1
1e39c 145             | local16
1e39c 145             | 	res	1
1e39c 146             | local17
1e39c 146             | 	res	1
1e39c 147             | local18
1e39c 147             | 	res	1
1e39c 148             | local19
1e39c 148             | 	res	1
1e39c 149             | local20
1e39c 149             | 	res	1
1e39c 14a             | local21
1e39c 14a             | 	res	1
1e39c 14b             | local22
1e39c 14b             | 	res	1
1e39c 14c             | muldiva_
1e39c 14c             | 	res	1
1e39c 14d             | muldivb_
1e39c 14d             | 	res	1
1e39c 14e             | 	fit	480
1e39c 14e             | 
